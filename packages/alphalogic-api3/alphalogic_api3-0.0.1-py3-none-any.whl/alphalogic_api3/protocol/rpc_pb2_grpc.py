# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from alphalogic_api3.protocol import rpc_pb2 as rpc__pb2


class ObjectServiceStub(object):
  """Object Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.root = channel.unary_unary(
        '/adapter.rpc.ObjectService/root',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.is_root = channel.unary_unary(
        '/adapter.rpc.ObjectService/is_root',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.parent = channel.unary_unary(
        '/adapter.rpc.ObjectService/parent',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.type = channel.unary_unary(
        '/adapter.rpc.ObjectService/type',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_string_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_string_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_long_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_long_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_double_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_double_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_datetime_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_datetime_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_bool_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_bool_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_map_parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_map_parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_event = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_event',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_string_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_string_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_long_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_long_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_double_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_double_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_datetime_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_datetime_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_bool_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_bool_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.create_map_command = channel.unary_unary(
        '/adapter.rpc.ObjectService/create_map_command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.parameters = channel.unary_unary(
        '/adapter.rpc.ObjectService/parameters',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.events = channel.unary_unary(
        '/adapter.rpc.ObjectService/events',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.commands = channel.unary_unary(
        '/adapter.rpc.ObjectService/commands',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.children = channel.unary_unary(
        '/adapter.rpc.ObjectService/children',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.parameter = channel.unary_unary(
        '/adapter.rpc.ObjectService/parameter',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.event = channel.unary_unary(
        '/adapter.rpc.ObjectService/event',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.command = channel.unary_unary(
        '/adapter.rpc.ObjectService/command',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.is_removed = channel.unary_unary(
        '/adapter.rpc.ObjectService/is_removed',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.register_maker = channel.unary_unary(
        '/adapter.rpc.ObjectService/register_maker',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.unregister_all_makers = channel.unary_unary(
        '/adapter.rpc.ObjectService/unregister_all_makers',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.is_connected = channel.unary_unary(
        '/adapter.rpc.ObjectService/is_connected',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.is_error = channel.unary_unary(
        '/adapter.rpc.ObjectService/is_error',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.is_ready_to_work = channel.unary_unary(
        '/adapter.rpc.ObjectService/is_ready_to_work',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.state_no_connection = channel.unary_unary(
        '/adapter.rpc.ObjectService/state_no_connection',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.state_connected = channel.unary_unary(
        '/adapter.rpc.ObjectService/state_connected',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.state_error = channel.unary_unary(
        '/adapter.rpc.ObjectService/state_error',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )
    self.state_ok = channel.unary_unary(
        '/adapter.rpc.ObjectService/state_ok',
        request_serializer=rpc__pb2.ObjectRequest.SerializeToString,
        response_deserializer=rpc__pb2.ObjectReply.FromString,
        )


class ObjectServiceServicer(object):
  """Object Service
  """

  def root(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_root(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def parent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def type(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_string_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_long_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_double_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_datetime_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_bool_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_map_parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_event(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_string_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_long_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_double_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_datetime_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_bool_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_map_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def parameters(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def events(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def commands(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def children(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def parameter(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def event(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_removed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def register_maker(self, request, context):
    """register maker
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def unregister_all_makers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_connected(self, request, context):
    """package diagnostic
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_error(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_ready_to_work(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def state_no_connection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def state_connected(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def state_error(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def state_ok(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ObjectServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'root': grpc.unary_unary_rpc_method_handler(
          servicer.root,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'is_root': grpc.unary_unary_rpc_method_handler(
          servicer.is_root,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'parent': grpc.unary_unary_rpc_method_handler(
          servicer.parent,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'type': grpc.unary_unary_rpc_method_handler(
          servicer.type,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_string_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_string_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_long_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_long_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_double_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_double_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_datetime_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_datetime_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_bool_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_bool_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_map_parameter': grpc.unary_unary_rpc_method_handler(
          servicer.create_map_parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_event': grpc.unary_unary_rpc_method_handler(
          servicer.create_event,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_string_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_string_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_long_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_long_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_double_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_double_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_datetime_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_datetime_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_bool_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_bool_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'create_map_command': grpc.unary_unary_rpc_method_handler(
          servicer.create_map_command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'parameters': grpc.unary_unary_rpc_method_handler(
          servicer.parameters,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'events': grpc.unary_unary_rpc_method_handler(
          servicer.events,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'commands': grpc.unary_unary_rpc_method_handler(
          servicer.commands,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'children': grpc.unary_unary_rpc_method_handler(
          servicer.children,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'parameter': grpc.unary_unary_rpc_method_handler(
          servicer.parameter,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'event': grpc.unary_unary_rpc_method_handler(
          servicer.event,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'command': grpc.unary_unary_rpc_method_handler(
          servicer.command,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'is_removed': grpc.unary_unary_rpc_method_handler(
          servicer.is_removed,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'register_maker': grpc.unary_unary_rpc_method_handler(
          servicer.register_maker,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'unregister_all_makers': grpc.unary_unary_rpc_method_handler(
          servicer.unregister_all_makers,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'is_connected': grpc.unary_unary_rpc_method_handler(
          servicer.is_connected,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'is_error': grpc.unary_unary_rpc_method_handler(
          servicer.is_error,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'is_ready_to_work': grpc.unary_unary_rpc_method_handler(
          servicer.is_ready_to_work,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'state_no_connection': grpc.unary_unary_rpc_method_handler(
          servicer.state_no_connection,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'state_connected': grpc.unary_unary_rpc_method_handler(
          servicer.state_connected,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'state_error': grpc.unary_unary_rpc_method_handler(
          servicer.state_error,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
      'state_ok': grpc.unary_unary_rpc_method_handler(
          servicer.state_ok,
          request_deserializer=rpc__pb2.ObjectRequest.FromString,
          response_serializer=rpc__pb2.ObjectReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapter.rpc.ObjectService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ParameterServiceStub(object):
  """Parameter Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.name = channel.unary_unary(
        '/adapter.rpc.ParameterService/name',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.display_name = channel.unary_unary(
        '/adapter.rpc.ParameterService/display_name',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.desc = channel.unary_unary(
        '/adapter.rpc.ParameterService/desc',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_display_name = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_display_name',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_desc = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_desc',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_string = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_string',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_long = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_long',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_double = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_double',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_datetime = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_datetime',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_bool = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_bool',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_map = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_map',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_runtime = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_runtime',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_setup = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_setup',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_hidden = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_hidden',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_common = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_common',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_runtime = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_runtime',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_setup = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_setup',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_hidden = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_hidden',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_common = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_common',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_read_only = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_read_only',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_read_write = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_read_write',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_read_only = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_read_only',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_read_write = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_read_write',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.is_licensed = channel.unary_unary(
        '/adapter.rpc.ParameterService/is_licensed',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_licensed = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_licensed',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.clear = channel.unary_unary(
        '/adapter.rpc.ParameterService/clear',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.get = channel.unary_unary(
        '/adapter.rpc.ParameterService/get',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set = channel.unary_unary(
        '/adapter.rpc.ParameterService/set',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.enums = channel.unary_unary(
        '/adapter.rpc.ParameterService/enums',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_enum = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_enum',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.set_enums = channel.unary_unary(
        '/adapter.rpc.ParameterService/set_enums',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.has_enum = channel.unary_unary(
        '/adapter.rpc.ParameterService/has_enum',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )
    self.owner = channel.unary_unary(
        '/adapter.rpc.ParameterService/owner',
        request_serializer=rpc__pb2.ParameterRequest.SerializeToString,
        response_deserializer=rpc__pb2.ParameterReply.FromString,
        )


class ParameterServiceServicer(object):
  """Parameter Service
  """

  def name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_string(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_long(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_double(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_datetime(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_bool(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_map(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_runtime(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_setup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_hidden(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_common(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_runtime(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_setup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_hidden(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_common(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_read_only(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_read_write(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_read_only(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_read_write(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_licensed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_licensed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def clear(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enums(self, request, context):
    """enums
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_enum(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_enums(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def has_enum(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def owner(self, request, context):
    """owner
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ParameterServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'name': grpc.unary_unary_rpc_method_handler(
          servicer.name,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'display_name': grpc.unary_unary_rpc_method_handler(
          servicer.display_name,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'desc': grpc.unary_unary_rpc_method_handler(
          servicer.desc,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_display_name': grpc.unary_unary_rpc_method_handler(
          servicer.set_display_name,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_desc': grpc.unary_unary_rpc_method_handler(
          servicer.set_desc,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_string': grpc.unary_unary_rpc_method_handler(
          servicer.is_string,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_long': grpc.unary_unary_rpc_method_handler(
          servicer.is_long,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_double': grpc.unary_unary_rpc_method_handler(
          servicer.is_double,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_datetime': grpc.unary_unary_rpc_method_handler(
          servicer.is_datetime,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_bool': grpc.unary_unary_rpc_method_handler(
          servicer.is_bool,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_map': grpc.unary_unary_rpc_method_handler(
          servicer.is_map,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_runtime': grpc.unary_unary_rpc_method_handler(
          servicer.is_runtime,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_setup': grpc.unary_unary_rpc_method_handler(
          servicer.is_setup,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_hidden': grpc.unary_unary_rpc_method_handler(
          servicer.is_hidden,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_common': grpc.unary_unary_rpc_method_handler(
          servicer.is_common,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_runtime': grpc.unary_unary_rpc_method_handler(
          servicer.set_runtime,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_setup': grpc.unary_unary_rpc_method_handler(
          servicer.set_setup,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_hidden': grpc.unary_unary_rpc_method_handler(
          servicer.set_hidden,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_common': grpc.unary_unary_rpc_method_handler(
          servicer.set_common,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_read_only': grpc.unary_unary_rpc_method_handler(
          servicer.is_read_only,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_read_write': grpc.unary_unary_rpc_method_handler(
          servicer.is_read_write,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_read_only': grpc.unary_unary_rpc_method_handler(
          servicer.set_read_only,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_read_write': grpc.unary_unary_rpc_method_handler(
          servicer.set_read_write,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'is_licensed': grpc.unary_unary_rpc_method_handler(
          servicer.is_licensed,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_licensed': grpc.unary_unary_rpc_method_handler(
          servicer.set_licensed,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'clear': grpc.unary_unary_rpc_method_handler(
          servicer.clear,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'get': grpc.unary_unary_rpc_method_handler(
          servicer.get,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set': grpc.unary_unary_rpc_method_handler(
          servicer.set,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'enums': grpc.unary_unary_rpc_method_handler(
          servicer.enums,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_enum': grpc.unary_unary_rpc_method_handler(
          servicer.set_enum,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'set_enums': grpc.unary_unary_rpc_method_handler(
          servicer.set_enums,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'has_enum': grpc.unary_unary_rpc_method_handler(
          servicer.has_enum,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
      'owner': grpc.unary_unary_rpc_method_handler(
          servicer.owner,
          request_deserializer=rpc__pb2.ParameterRequest.FromString,
          response_serializer=rpc__pb2.ParameterReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapter.rpc.ParameterService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class EventServiceStub(object):
  """Event Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.name = channel.unary_unary(
        '/adapter.rpc.EventService/name',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.display_name = channel.unary_unary(
        '/adapter.rpc.EventService/display_name',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.desc = channel.unary_unary(
        '/adapter.rpc.EventService/desc',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_display_name = channel.unary_unary(
        '/adapter.rpc.EventService/set_display_name',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_desc = channel.unary_unary(
        '/adapter.rpc.EventService/set_desc',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.is_trivial = channel.unary_unary(
        '/adapter.rpc.EventService/is_trivial',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.is_minor = channel.unary_unary(
        '/adapter.rpc.EventService/is_minor',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.is_major = channel.unary_unary(
        '/adapter.rpc.EventService/is_major',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.is_critical = channel.unary_unary(
        '/adapter.rpc.EventService/is_critical',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.is_blocker = channel.unary_unary(
        '/adapter.rpc.EventService/is_blocker',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_trivial = channel.unary_unary(
        '/adapter.rpc.EventService/set_trivial',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_minor = channel.unary_unary(
        '/adapter.rpc.EventService/set_minor',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_major = channel.unary_unary(
        '/adapter.rpc.EventService/set_major',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_critical = channel.unary_unary(
        '/adapter.rpc.EventService/set_critical',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_blocker = channel.unary_unary(
        '/adapter.rpc.EventService/set_blocker',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_time = channel.unary_unary(
        '/adapter.rpc.EventService/set_time',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.emit = channel.unary_unary(
        '/adapter.rpc.EventService/emit',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.clear = channel.unary_unary(
        '/adapter.rpc.EventService/clear',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.argument_list = channel.unary_unary(
        '/adapter.rpc.EventService/argument_list',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.argument = channel.unary_unary(
        '/adapter.rpc.EventService/argument',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.update_or_create_argument = channel.unary_unary(
        '/adapter.rpc.EventService/update_or_create_argument',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.set_argument_value = channel.unary_unary(
        '/adapter.rpc.EventService/set_argument_value',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )
    self.owner = channel.unary_unary(
        '/adapter.rpc.EventService/owner',
        request_serializer=rpc__pb2.EventRequest.SerializeToString,
        response_deserializer=rpc__pb2.EventReply.FromString,
        )


class EventServiceServicer(object):
  """Event Service
  """

  def name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_trivial(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_minor(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_major(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_critical(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_blocker(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_trivial(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_minor(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_major(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_critical(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_blocker(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_time(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def emit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def clear(self, request, context):
    """arguments
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def argument_list(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def argument(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def update_or_create_argument(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_argument_value(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def owner(self, request, context):
    """owner
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'name': grpc.unary_unary_rpc_method_handler(
          servicer.name,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'display_name': grpc.unary_unary_rpc_method_handler(
          servicer.display_name,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'desc': grpc.unary_unary_rpc_method_handler(
          servicer.desc,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_display_name': grpc.unary_unary_rpc_method_handler(
          servicer.set_display_name,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_desc': grpc.unary_unary_rpc_method_handler(
          servicer.set_desc,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'is_trivial': grpc.unary_unary_rpc_method_handler(
          servicer.is_trivial,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'is_minor': grpc.unary_unary_rpc_method_handler(
          servicer.is_minor,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'is_major': grpc.unary_unary_rpc_method_handler(
          servicer.is_major,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'is_critical': grpc.unary_unary_rpc_method_handler(
          servicer.is_critical,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'is_blocker': grpc.unary_unary_rpc_method_handler(
          servicer.is_blocker,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_trivial': grpc.unary_unary_rpc_method_handler(
          servicer.set_trivial,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_minor': grpc.unary_unary_rpc_method_handler(
          servicer.set_minor,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_major': grpc.unary_unary_rpc_method_handler(
          servicer.set_major,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_critical': grpc.unary_unary_rpc_method_handler(
          servicer.set_critical,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_blocker': grpc.unary_unary_rpc_method_handler(
          servicer.set_blocker,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_time': grpc.unary_unary_rpc_method_handler(
          servicer.set_time,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'emit': grpc.unary_unary_rpc_method_handler(
          servicer.emit,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'clear': grpc.unary_unary_rpc_method_handler(
          servicer.clear,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'argument_list': grpc.unary_unary_rpc_method_handler(
          servicer.argument_list,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'argument': grpc.unary_unary_rpc_method_handler(
          servicer.argument,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'update_or_create_argument': grpc.unary_unary_rpc_method_handler(
          servicer.update_or_create_argument,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'set_argument_value': grpc.unary_unary_rpc_method_handler(
          servicer.set_argument_value,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
      'owner': grpc.unary_unary_rpc_method_handler(
          servicer.owner,
          request_deserializer=rpc__pb2.EventRequest.FromString,
          response_serializer=rpc__pb2.EventReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapter.rpc.EventService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class CommandServiceStub(object):
  """Command Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.name = channel.unary_unary(
        '/adapter.rpc.CommandService/name',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.display_name = channel.unary_unary(
        '/adapter.rpc.CommandService/display_name',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.desc = channel.unary_unary(
        '/adapter.rpc.CommandService/desc',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.set_display_name = channel.unary_unary(
        '/adapter.rpc.CommandService/set_display_name',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.set_desc = channel.unary_unary(
        '/adapter.rpc.CommandService/set_desc',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_string = channel.unary_unary(
        '/adapter.rpc.CommandService/is_string',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_long = channel.unary_unary(
        '/adapter.rpc.CommandService/is_long',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_double = channel.unary_unary(
        '/adapter.rpc.CommandService/is_double',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_datetime = channel.unary_unary(
        '/adapter.rpc.CommandService/is_datetime',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_bool = channel.unary_unary(
        '/adapter.rpc.CommandService/is_bool',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.is_map = channel.unary_unary(
        '/adapter.rpc.CommandService/is_map',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.set_result = channel.unary_unary(
        '/adapter.rpc.CommandService/set_result',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.set_exception = channel.unary_unary(
        '/adapter.rpc.CommandService/set_exception',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.clear = channel.unary_unary(
        '/adapter.rpc.CommandService/clear',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.argument_list = channel.unary_unary(
        '/adapter.rpc.CommandService/argument_list',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.argument = channel.unary_unary(
        '/adapter.rpc.CommandService/argument',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.update_or_create_argument = channel.unary_unary(
        '/adapter.rpc.CommandService/update_or_create_argument',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )
    self.owner = channel.unary_unary(
        '/adapter.rpc.CommandService/owner',
        request_serializer=rpc__pb2.CommandRequest.SerializeToString,
        response_deserializer=rpc__pb2.CommandReply.FromString,
        )


class CommandServiceServicer(object):
  """Command Service
  """

  def name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_display_name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_desc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_string(self, request, context):
    """result type
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_long(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_double(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_datetime(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_bool(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_map(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_result(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def set_exception(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def clear(self, request, context):
    """arguments
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def argument_list(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def argument(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def update_or_create_argument(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def owner(self, request, context):
    """owner
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommandServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'name': grpc.unary_unary_rpc_method_handler(
          servicer.name,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'display_name': grpc.unary_unary_rpc_method_handler(
          servicer.display_name,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'desc': grpc.unary_unary_rpc_method_handler(
          servicer.desc,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'set_display_name': grpc.unary_unary_rpc_method_handler(
          servicer.set_display_name,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'set_desc': grpc.unary_unary_rpc_method_handler(
          servicer.set_desc,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_string': grpc.unary_unary_rpc_method_handler(
          servicer.is_string,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_long': grpc.unary_unary_rpc_method_handler(
          servicer.is_long,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_double': grpc.unary_unary_rpc_method_handler(
          servicer.is_double,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_datetime': grpc.unary_unary_rpc_method_handler(
          servicer.is_datetime,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_bool': grpc.unary_unary_rpc_method_handler(
          servicer.is_bool,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'is_map': grpc.unary_unary_rpc_method_handler(
          servicer.is_map,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'set_result': grpc.unary_unary_rpc_method_handler(
          servicer.set_result,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'set_exception': grpc.unary_unary_rpc_method_handler(
          servicer.set_exception,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'clear': grpc.unary_unary_rpc_method_handler(
          servicer.clear,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'argument_list': grpc.unary_unary_rpc_method_handler(
          servicer.argument_list,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'argument': grpc.unary_unary_rpc_method_handler(
          servicer.argument,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'update_or_create_argument': grpc.unary_unary_rpc_method_handler(
          servicer.update_or_create_argument,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
      'owner': grpc.unary_unary_rpc_method_handler(
          servicer.owner,
          request_deserializer=rpc__pb2.CommandRequest.FromString,
          response_serializer=rpc__pb2.CommandReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapter.rpc.CommandService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StateServiceStub(object):
  """State Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.states = channel.unary_stream(
        '/adapter.rpc.StateService/states',
        request_serializer=rpc__pb2.Empty.SerializeToString,
        response_deserializer=rpc__pb2.StateStream.FromString,
        )
    self.ack = channel.unary_unary(
        '/adapter.rpc.StateService/ack',
        request_serializer=rpc__pb2.StateStream.SerializeToString,
        response_deserializer=rpc__pb2.Empty.FromString,
        )


class StateServiceServicer(object):
  """State Service
  """

  def states(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ack(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StateServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'states': grpc.unary_stream_rpc_method_handler(
          servicer.states,
          request_deserializer=rpc__pb2.Empty.FromString,
          response_serializer=rpc__pb2.StateStream.SerializeToString,
      ),
      'ack': grpc.unary_unary_rpc_method_handler(
          servicer.ack,
          request_deserializer=rpc__pb2.StateStream.FromString,
          response_serializer=rpc__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapter.rpc.StateService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
