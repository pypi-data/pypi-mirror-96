.\" Man page generated from reStructuredText.
.
.TH "SARDANANXSRECORDER" "1" "May 29, 2019" "3.6" "Sardana NeXus Recorder"
.SH NAME
sardananxsrecorder \- sardananxsrecorder Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
NeXus scan recorder for Sardana which stores experimenal data in NeXus/HDF5 file with use of
NeXDatas Tango Server or packages, i.e. NXSDataWriter, NXSConfigServer, NXSRecSelector.
.nf
Source code: \fI\%https://github.com/nexdatas/sardanascanrecorders\fP
Web page: \fI\%https://nexdatas.github.io/sardanascanrecorders\fP
NexDaTaS Web page: \fI\%https://nexdatas.github.io\fP
.fi
.sp
.SH INSTALLATION
.sp
Install the dependencies:
.nf
sardana, sphinx, NXSDataWriter, NXSConfigServer, NXSRecSelector
.fi
.sp
.SS From sources
.sp
Download the latest NeXuS Scan Recorder version from
.nf
\fI\%https://github.com/nexdatas/sardanascanrecorders\fP
.fi
.sp
.sp
Extract sources and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and add an \fIRecorderPath\fP property of \fIMacroServer\fP with its value
defining the package location, e.g.
.nf
/usr/lib/python2.7/dist\-packages/sardananxsrecorder
.fi
.sp
.SS Debian packages
.sp
Debian Jessie (and Wheezy) packages can be found in the HDRI repository.
.sp
To install the debian packages, add the PGP repository key
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo su
$ wget \-q \-O \- http://repos.pni\-hdri.de/debian_repo.pub.gpg | apt\-key add \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and then download the corresponding source list
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd /etc/apt/sources.list.d
$ wget http://repos.pni\-hdri.de/jessie\-pni\-hdri.list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get update
$ apt\-get install python\-sardana\-nxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To instal other NexDaTaS packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install python\-nxswriter nxsconfigserver\-db python\-nxsconfigserver nxsconfigtool python\-nxstools
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install python\-nxsrecselector nxselector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for Component Selector for Sardana related packages.
.SH SETTING ENVIRONMENT
.SS Setting Saradna
.sp
If sardana is not yet set up run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ Pool
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.UNINDENT
.sp
Then wait a while until Pool is started and in a new terminal run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ MacroServer
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.IP \(bu 2
connect pool
.UNINDENT
.sp
Next, run Astor and change start\-up levels: for Pool to 2,
for MacroServer to 3 and restart servers.
.sp
Alternatively, terminate Pool and MacroServer in the terminals and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup start Pool \-l2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
wait until Pool is started and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup start MacroServer \-l3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, one can create dummy devices by running \fIsar_demo\fP in
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ spock
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Setting NeXus Servers
.sp
To set up  NeXus Servers run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup set
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup set NXSDataWriter
$ nxsetup set NXSConfigServer
$ nxsetup set NXSRecSelector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for specific servers.
.sp
If the \fIRecoderPath\fP property of MacroServer is not set one can do it by
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup add\-recorder\-path /usr/lib/python2.7/dist\-packages/sardananxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the path should point the \fIsardananxsrecorder\fP package.
.sp
Contents:
.SS sardananxsrecorder package
.SS Submodules
.SS sardananxsrecorder.nxsrecorder module
.sp
This is the macro server scan data NeXus recorder module
.INDENT 0.0
.TP
.B class sardananxsrecorder.nxsrecorder.NXS_FileRecorder(filename=None, macro=None, **pars)
Bases: \fBsardana.macroserver.scan.recorder.storage.BaseFileRecorder\fP
.sp
This recorder saves data to a NeXus file making use of NexDaTaS Writer
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfilename\fP (\fI\%str\fP) – ScanFile name
.IP \(bu 2
\fBmacro\fP (\fI\%sardana.macroserver.macro.Macro\fP) – macro object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _addCustomData(value, name, group=\(aqdata\(aq, remove=False, **kwargs)
adds custom data to configuration variables, i.e. from macros
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIany\fP) – variable value
.IP \(bu 2
\fBname\fP (\fI\%str\fP) – variable name
.IP \(bu 2
\fBgroup\fP (\fI\%str\fP) – variable group inside variable dictionary
.IP \(bu 2
\fBremove\fP (\fI\%bool\fP) – if True variable will be removed
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _endRecordList(recordlist)
.INDENT 7.0
.TP
.B ends record process: records in FINAL mode
and closes the nexus file
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecordlist\fP (\fBsardana.macroserver.scan.scandata.RecordList\fP) – sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _startRecordList(recordlist)
.INDENT 7.0
.TP
.B starts record process: creates configuration
and records in INIT mode
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecordlist\fP (\fBsardana.macroserver.scan.scandata.RecordList\fP) – sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _writeRecord(record)
.INDENT 7.0
.TP
.B performs record process step: creates configuration
and records in INIT mode
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecord\fP – sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B formats = {\(aqh5\(aq: \(aq.h5\(aq, \(aqndf\(aq: \(aq.ndf\(aq, \(aqnx\(aq: \(aq.nx\(aq, \(aqnxs\(aq: \(aq.nxs\(aq}
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP > ) recoder format
.UNINDENT
.INDENT 7.0
.TP
.B getFormat()
provides the output file format
.INDENT 7.0
.TP
.B Returns
the output file format
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class numpyEncoder(skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding=\(aqutf\-8\(aq, default=None)
Bases: \fBjson.encoder.JSONEncoder\fP
.sp
numpy json encoder with list
.sp
Constructor for JSONEncoder, with sensible defaults.
.sp
If skipkeys is false, then it is a TypeError to attempt
encoding of keys that are not str, int, long, float or None.  If
skipkeys is True, such items are simply skipped.
.sp
If \fIensure_ascii\fP is true (the default), all non\-ASCII
characters in the output are escaped with uXXXX sequences,
and the results are str instances consisting of ASCII
characters only.  If ensure_ascii is False, a result may be a
unicode instance.  This usually happens if the input contains
unicode strings or the \fIencoding\fP parameter is used.
.sp
If check_circular is true, then lists, dicts, and custom encoded
objects will be checked for circular references during encoding to
prevent an infinite recursion (which would cause an OverflowError).
Otherwise, no such check takes place.
.sp
If allow_nan is true, then NaN, Infinity, and \-Infinity will be
encoded as such.  This behavior is not JSON specification compliant,
but is consistent with most JavaScript based encoders and decoders.
Otherwise, it will be a ValueError to encode such floats.
.sp
If sort_keys is true, then the output of dictionaries will be
sorted by key; this is useful for regression tests to ensure
that JSON serializations can be compared on a day\-to\-day basis.
.sp
If indent is a non\-negative integer, then JSON array
elements and object members will be pretty\-printed with that
indent level.  An indent level of 0 will only insert newlines.
None is the most compact representation.  Since the default
item separator is ‘, ‘,  the output might include trailing
whitespace when indent is specified.  You can use
separators=(‘,’, ‘: ‘) to avoid this.
.sp
If specified, separators should be a (item_separator, key_separator)
tuple.  The default is (‘, ‘, ‘: ‘).  To get the most compact JSON
representation you should specify (‘,’, ‘:’) to eliminate whitespace.
.sp
If specified, default is a function that gets called for objects
that can’t otherwise be serialized.  It should return a JSON encodable
version of the object or raise a \fBTypeError\fP\&.
.sp
If encoding is not None, then all input strings will be
transformed into unicode using that encoding prior to JSON\-encoding.
The default is UTF\-8.
.INDENT 7.0
.TP
.B default(obj)
default encoder
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\fI\%object\fP or \fIany\fP) – numpy array object
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Module contents
.sp
Sardana Scan Recorders
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Author
.SH COPYRIGHT
2012-2018 DESY, Jan Kotanski <jkotan@mail.desy.de>

GNU GENERAL PUBLIC LICENSE, version 3
.\" Generated by docutils manpage writer.
.
