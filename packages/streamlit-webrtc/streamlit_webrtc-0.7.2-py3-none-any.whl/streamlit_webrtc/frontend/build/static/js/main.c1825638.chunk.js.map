{"version":3,"sources":["WebRtcStreamer.tsx","VisibilitySwitch.tsx","DeviceSelector.tsx","index.tsx"],"names":["isWebRtcMode","val","setupOffer","pc","createOffer","then","offer","console","log","setLocalDescription","Promise","resolve","iceGatheringState","addEventListener","checkState","removeEventListener","localDescription","catch","err","error","WebRtcStreamer","props","videoRef","audioRef","processAnswerInner","sdpAnswerJson","a","sdpAnswer","JSON","parse","setRemoteDescription","processAnswer","finally","setState","signaling","startInner","mode","args","Error","hasVideo","hasAudio","config","settings","rtc_configuration","RTCPeerConnection","evt","track","kind","videoElem","current","srcObject","streams","audioElem","constraintsFromPython","media_stream_constraints","useAudio","audio","useVideo","video","constraints","state","audioInput","deviceId","videoInput","navigator","mediaDevices","getUserMedia","stream","getTracks","forEach","addTrack","getTransceivers","direction","addTransceiver","playing","toJSON","Streamlit","setComponentValue","sdpOffer","warn","start","stopInner","undefined","transceiver","stop","getSenders","sender","setTimeout","close","stopping","handleDeviceSelect","render","buttonDisabled","disabled","receivable","isReceivable","severity","name","message","visible","onVisibilityChange","setImmediate","setFrameHeight","style","width","ref","autoPlay","controls","onCanPlay","display","justifyContent","variant","onClick","color","onSelect","value","React","createRef","this","remoteDescription","StreamlitComponentBase","withStreamlitConnection","VisibilitySwitch","divProps","useEffect","memo","useStyles","makeStyles","theme","paper","padding","spacing","formControl","maxWidth","margin","minWidth","formButtonControl","marginBottom","selectEmpty","marginTop","DeviceSelecter","labelId","devices","onChangeProp","onChange","classes","useCallback","e","selected","find","d","target","length","aria-label","className","map","device","label","DeviceSelectPopper","open","anchorEl","devicesMap","onSubmit","useState","selectedVideo","setSelectedVideo","selectedAudio","setSelectedAudio","handleSubmit","preventDefault","originalBodyHeightRef","useRef","popperRefFn","popper","body","document","getElementsByTagName","height","window","getComputedStyle","scrollBottom","WebKitCSSMatrix","transform","m42","getBoundingClientRect","scrollHeight","placement","id","type","DeviceSelector","setOpen","setAnchorEl","setDevicesMap","unavailable","setUnavailable","onOpen","event","currentTarget","enumerateDevices","vidoeDevices","audioDevices","push","onClose","createMuiTheme","overrides","MuiCssBaseline","backgroundColor","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1825638.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport VisibilitySwitch from \"./VisibilitySwitch\";\nimport DeviceSelector from \"./DeviceSelector\";\n\ntype WebRtcMode = \"RECVONLY\" | \"SENDONLY\" | \"SENDRECV\";\nconst isWebRtcMode = (val: unknown): val is WebRtcMode =>\n  val === \"RECVONLY\" || val === \"SENDONLY\" || val === \"SENDRECV\";\nconst isReceivable = (mode: WebRtcMode): boolean =>\n  mode === \"SENDRECV\" || mode === \"RECVONLY\";\n\nconst setupOffer = (\n  pc: RTCPeerConnection\n): Promise<RTCSessionDescription | null> => {\n  return pc\n    .createOffer()\n    .then((offer) => {\n      console.log(\"Created offer:\", offer);\n      return pc.setLocalDescription(offer);\n    })\n    .then(() => {\n      console.log(\"Wait for ICE gethering...\");\n      // Wait for ICE gathering to complete\n      return new Promise<void>((resolve) => {\n        if (pc.iceGatheringState === \"complete\") {\n          resolve();\n        } else {\n          const checkState = () => {\n            if (pc.iceGatheringState === \"complete\") {\n              pc.removeEventListener(\"icegatheringstatechange\", checkState);\n              resolve();\n            }\n          };\n          pc.addEventListener(\"icegatheringstatechange\", checkState);\n        }\n      });\n    })\n    .then(() => {\n      const offer = pc.localDescription;\n      return offer;\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n\ninterface State {\n  signaling: boolean;\n  playing: boolean;\n  stopping: boolean;\n  videoInput: MediaDeviceInfo | null;\n  audioInput: MediaDeviceInfo | null;\n  hasVideo: boolean;\n  hasAudio: boolean;\n  error: Error | null;\n}\n\nclass WebRtcStreamer extends StreamlitComponentBase<State> {\n  private pc: RTCPeerConnection | undefined;\n  private videoRef: React.RefObject<HTMLVideoElement>;\n  private audioRef: React.RefObject<HTMLAudioElement>;\n\n  constructor(props: ComponentProps) {\n    super(props);\n    this.videoRef = React.createRef();\n    this.audioRef = React.createRef();\n\n    this.state = {\n      signaling: false,\n      playing: false,\n      stopping: false,\n      videoInput: null,\n      audioInput: null,\n      hasVideo: false,\n      hasAudio: false,\n      error: null,\n    };\n  }\n\n  private processAnswerInner = async (\n    pc: RTCPeerConnection,\n    sdpAnswerJson: string\n  ): Promise<void> => {\n    const sdpAnswer = JSON.parse(sdpAnswerJson);\n    console.log(\"Receive answer sdpOffer\", sdpAnswer);\n    await pc.setRemoteDescription(sdpAnswer);\n  };\n\n  private processAnswer = (\n    pc: RTCPeerConnection,\n    sdpAnswerJson: string\n  ): void => {\n    this.processAnswerInner(pc, sdpAnswerJson)\n      .then(() => {\n        console.log(\"Remote description is set\");\n      })\n      .finally(() => this.setState({ signaling: false }));\n  };\n\n  private startInner = async () => {\n    const mode = this.props.args[\"mode\"];\n    if (!isWebRtcMode(mode)) {\n      throw new Error(`Invalid mode ${mode}`);\n    }\n\n    this.setState({\n      signaling: true,\n      hasVideo: false,\n      hasAudio: false,\n      error: null,\n    });\n\n    const config: RTCConfiguration =\n      this.props.args.settings?.rtc_configuration || {};\n    console.log(\"RTCConfiguration:\", config);\n    const pc = new RTCPeerConnection(config);\n\n    // Connect received audio / video to DOM elements\n    if (mode === \"SENDRECV\" || mode === \"RECVONLY\") {\n      pc.addEventListener(\"track\", (evt) => {\n        if (evt.track.kind === \"video\") {\n          const videoElem = this.videoRef.current;\n          if (videoElem == null) {\n            console.error(\"video element is not mounted\");\n            return;\n          }\n\n          videoElem.srcObject = evt.streams[0];\n          this.setState({ hasVideo: true });\n        } else {\n          const audioElem = this.audioRef.current;\n          if (audioElem == null) {\n            console.error(\"audio element is not mounted\");\n            return;\n          }\n\n          audioElem.srcObject = evt.streams[0];\n          this.setState({ hasAudio: true });\n        }\n      });\n    }\n\n    // Set up transceivers\n    if (mode === \"SENDRECV\" || mode === \"SENDONLY\") {\n      const constraintsFromPython = this.props.args.settings\n        ?.media_stream_constraints;\n      const useAudio = constraintsFromPython\n        ? constraintsFromPython.audio\n        : true;\n      const useVideo = constraintsFromPython\n        ? constraintsFromPython.video\n        : true;\n      const constraints: MediaStreamConstraints = {};\n      if (useAudio) {\n        constraints.audio = this.state.audioInput\n          ? {\n              deviceId: this.state.audioInput.deviceId,\n            }\n          : true;\n      }\n      if (useVideo) {\n        constraints.video = this.state.videoInput\n          ? {\n              deviceId: this.state.videoInput.deviceId,\n            }\n          : true;\n      }\n      console.log(\"MediaStreamConstraints:\", constraints);\n\n      if (constraints.audio || constraints.video) {\n        if (navigator.mediaDevices == null) {\n          // Ref: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security\n          // > A secure context is, in short, a page loaded using HTTPS or the file:/// URL scheme, or a page loaded from localhost.\n          throw new Error(\n            \"navigator.mediaDevices is undefined. It seems the current document is not loaded securely.\"\n          );\n        }\n        if (navigator.mediaDevices.getUserMedia == null) {\n          throw new Error(\"getUserMedia is not implemented in this browser\");\n        }\n\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        stream.getTracks().forEach((track) => {\n          pc.addTrack(track, stream);\n        });\n      }\n\n      if (mode === \"SENDONLY\") {\n        for (const transceiver of pc.getTransceivers()) {\n          transceiver.direction = \"sendonly\";\n        }\n      }\n    } else if (mode === \"RECVONLY\") {\n      pc.addTransceiver(\"video\", { direction: \"recvonly\" });\n      pc.addTransceiver(\"audio\", { direction: \"recvonly\" });\n    }\n\n    this.setState({ playing: true });\n\n    console.log(\"transceivers\", pc.getTransceivers());\n\n    setupOffer(pc).then((offer) => {\n      if (offer == null) {\n        console.warn(\"Failed to create an offer SDP\");\n        return;\n      }\n\n      console.log(\"Send sdpOffer\", offer.toJSON());\n      Streamlit.setComponentValue({\n        sdpOffer: offer.toJSON(),\n        playing: true,\n      });\n    });\n    this.pc = pc;\n  };\n\n  private start = (): void => {\n    this.startInner().catch((error) =>\n      this.setState({ signaling: false, error })\n    );\n  };\n\n  private stopInner = async (): Promise<void> => {\n    const pc = this.pc;\n    this.pc = undefined;\n    this.setState({ playing: false }, () =>\n      Streamlit.setComponentValue({ playing: false })\n    );\n\n    if (pc == null) {\n      return Promise.resolve();\n    }\n\n    // close transceivers\n    if (pc.getTransceivers) {\n      pc.getTransceivers().forEach(function (transceiver) {\n        if (transceiver.stop) {\n          transceiver.stop();\n        }\n      });\n    }\n\n    // close local audio / video\n    pc.getSenders().forEach(function (sender) {\n      sender.track?.stop();\n    });\n\n    // close peer connection\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        pc.close();\n        resolve();\n      }, 500);\n    });\n  };\n\n  private stop = () => {\n    this.setState({ stopping: true });\n    this.stopInner().finally(() => {\n      this.setState({ stopping: false, hasVideo: false, hasAudio: false });\n    });\n  };\n\n  public componentDidUpdate() {\n    if (this.pc == null) {\n      return;\n    }\n    const pc = this.pc;\n    if (pc.remoteDescription == null) {\n      const sdpAnswerJson = this.props.args[\"sdp_answer_json\"];\n      if (sdpAnswerJson) {\n        this.processAnswer(pc, sdpAnswerJson);\n      }\n    }\n  }\n\n  private handleDeviceSelect = (\n    video: MediaDeviceInfo | null,\n    audio: MediaDeviceInfo | null\n  ) => {\n    this.setState({ videoInput: video, audioInput: audio });\n  };\n\n  public render = (): ReactNode => {\n    const buttonDisabled =\n      this.props.disabled || this.state.signaling || this.state.stopping;\n    const mode = this.props.args[\"mode\"];\n    const receivable = isWebRtcMode(mode) && isReceivable(mode);\n\n    return (\n      <Box>\n        {this.state.error && (\n          <Alert severity=\"error\">\n            {this.state.error.name}: {this.state.error.message}\n          </Alert>\n        )}\n        <VisibilitySwitch\n          visible={receivable}\n          onVisibilityChange={() => setImmediate(Streamlit.setFrameHeight)}\n        >\n          <Box>\n            <video\n              style={{\n                width: \"100%\",\n              }}\n              ref={this.videoRef}\n              autoPlay\n              controls\n              onCanPlay={() => Streamlit.setFrameHeight()}\n            />\n          </Box>\n          <Box>\n            <audio ref={this.audioRef} autoPlay controls />\n          </Box>\n        </VisibilitySwitch>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          {this.state.playing ? (\n            <Button\n              variant=\"contained\"\n              onClick={this.stop}\n              disabled={buttonDisabled}\n            >\n              Stop\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.start}\n              disabled={buttonDisabled}\n            >\n              Start\n            </Button>\n          )}\n          <DeviceSelector\n            onSelect={this.handleDeviceSelect}\n            value={{\n              video: this.state.videoInput,\n              audio: this.state.audioInput,\n            }}\n          />\n        </Box>\n      </Box>\n    );\n  };\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(WebRtcStreamer);\n","import React, { useEffect } from \"react\";\n\ninterface VisibilitySwitchProps extends React.ComponentProps<\"div\"> {\n  visible?: boolean;\n  onVisibilityChange: (newVisibility: boolean) => void;\n}\nconst VisibilitySwitch = ({\n  visible = true,\n  onVisibilityChange,\n  ...divProps\n}: VisibilitySwitchProps) => {\n  useEffect(() => {\n    onVisibilityChange(visible);\n  }, [visible, onVisibilityChange]);\n\n  return (\n    <div\n      style={{\n        ...divProps.style,\n        display: visible ? divProps.style?.display : \"none\",\n      }}\n      {...divProps}\n    />\n  );\n};\n\nexport default React.memo(VisibilitySwitch);\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Streamlit } from \"streamlit-component-lib\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button, { ButtonProps } from \"@material-ui/core/Button\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select, { SelectProps } from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Popper, { PopperProps } from \"@material-ui/core/Popper\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n  },\n  formControl: {\n    maxWidth: \"80vw\",\n    margin: theme.spacing(1),\n    minWidth: 120,\n    display: \"flex\",\n  },\n  formButtonControl: {\n    margin: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    minWidth: 120,\n    display: \"flex\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\ninterface DevicesMap {\n  audio: MediaDeviceInfo[];\n  video: MediaDeviceInfo[];\n}\n\ninterface DeviceSelecterProps {\n  labelId: SelectProps[\"labelId\"];\n  value: MediaDeviceInfo | null;\n  devices: MediaDeviceInfo[];\n  onChange: (device: MediaDeviceInfo | null) => void;\n}\nconst DeviceSelecter = ({\n  labelId,\n  value,\n  devices,\n  onChange: onChangeProp,\n}: DeviceSelecterProps) => {\n  const classes = useStyles();\n\n  const onChange = useCallback<NonNullable<SelectProps[\"onChange\"]>>(\n    (e) => {\n      const selected = devices.find((d) => d.deviceId === e.target.value);\n      onChangeProp(selected || null);\n    },\n    [devices, onChangeProp]\n  );\n\n  if (devices.length === 0) {\n    return (\n      <Select value=\"\" disabled>\n        <option aria-label=\"None\" value=\"\" />\n      </Select>\n    );\n  }\n\n  if (value == null) {\n    setImmediate(() => onChangeProp(devices[0]));\n    return null;\n  }\n\n  return (\n    <Select\n      labelId={labelId}\n      value={value.deviceId}\n      onChange={onChange}\n      className={classes.selectEmpty}\n    >\n      {devices.map((device) => (\n        <MenuItem key={device.deviceId} value={device.deviceId}>\n          {device.label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\ninterface DeviceSelectPopperProps {\n  open: boolean;\n  anchorEl: PopperProps[\"anchorEl\"];\n  value: {\n    video: MediaDeviceInfo | null;\n    audio: MediaDeviceInfo | null;\n  };\n  devicesMap: DevicesMap;\n  onSubmit: (\n    video: MediaDeviceInfo | null,\n    audio: MediaDeviceInfo | null\n  ) => void;\n}\nconst DeviceSelectPopper = ({\n  open,\n  anchorEl,\n  value,\n  devicesMap,\n  onSubmit,\n}: DeviceSelectPopperProps) => {\n  const [selectedVideo, setSelectedVideo] = useState<MediaDeviceInfo | null>(\n    null\n  );\n  const [selectedAudio, setSelectedAudio] = useState<MediaDeviceInfo | null>(\n    null\n  );\n\n  useEffect(() => {\n    setSelectedVideo(\n      devicesMap.video.find((d) => d.deviceId === value.video?.deviceId) || null\n    );\n    setSelectedAudio(\n      devicesMap.audio.find((d) => d.deviceId === value.audio?.deviceId) || null\n    );\n  }, [devicesMap, value]);\n\n  const handleSubmit = useCallback<\n    NonNullable<React.ComponentProps<\"form\">[\"onSubmit\"]>\n  >(\n    (e) => {\n      e.preventDefault();\n      onSubmit(selectedVideo, selectedAudio);\n    },\n    [onSubmit, selectedVideo, selectedAudio]\n  );\n\n  const classes = useStyles();\n\n  const originalBodyHeightRef = useRef<string>();\n  const popperRefFn = useCallback((popper: HTMLDivElement | null) => {\n    // Manage <body>'s height reacting to popper appearance.\n    if (popper) {\n      setTimeout(() => {\n        const body = document.getElementsByTagName(\"body\")[0];\n        originalBodyHeightRef.current = body.style.height;\n\n        const style = window.getComputedStyle(popper);\n        const matrix = new WebKitCSSMatrix(style.transform);\n        const translateY = matrix.m42;\n\n        const scrollBottom = translateY + popper.getBoundingClientRect().height;\n        if (scrollBottom > document.body.scrollHeight) {\n          body.style.height = `${scrollBottom}px`;\n          Streamlit.setFrameHeight();\n        }\n      }, 0);\n    } else {\n      const body = document.getElementsByTagName(\"body\")[0];\n      if (originalBodyHeightRef.current != null) {\n        body.style.height = originalBodyHeightRef.current;\n      }\n      Streamlit.setFrameHeight();\n    }\n  }, []);\n\n  return (\n    <Popper\n      ref={popperRefFn}\n      open={open}\n      anchorEl={anchorEl}\n      placement=\"left-end\"\n    >\n      <Paper className={classes.paper}>\n        <form onSubmit={handleSubmit}>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"video-input-select\">Video input</InputLabel>\n            <DeviceSelecter\n              labelId=\"video-input-select\"\n              devices={devicesMap.video}\n              value={selectedVideo}\n              onChange={setSelectedVideo}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"audio-input-select\">Audio input</InputLabel>\n            <DeviceSelecter\n              labelId=\"audio-input-select\"\n              devices={devicesMap.audio}\n              value={selectedAudio}\n              onChange={setSelectedAudio}\n            />\n          </FormControl>\n          <FormControl className={classes.formButtonControl}>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              OK\n            </Button>\n          </FormControl>\n        </form>\n      </Paper>\n    </Popper>\n  );\n};\n\ninterface DeviceSelectorProps {\n  value: {\n    video: MediaDeviceInfo | null;\n    audio: MediaDeviceInfo | null;\n  };\n  onSelect: (\n    video: MediaDeviceInfo | null,\n    audio: MediaDeviceInfo | null\n  ) => void;\n}\nconst DeviceSelector = ({ value, onSelect }: DeviceSelectorProps) => {\n  const [open, setOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n  const [devicesMap, setDevicesMap] = useState<DevicesMap>();\n  const [unavailable, setUnavailable] = useState(false);\n\n  const onOpen = useCallback<NonNullable<ButtonProps[\"onClick\"]>>((event) => {\n    setAnchorEl(event.currentTarget);\n\n    if (typeof navigator?.mediaDevices?.enumerateDevices !== \"function\") {\n      setDevicesMap(undefined);\n      setUnavailable(true);\n      return;\n    }\n\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const vidoeDevices = [];\n      const audioDevices = [];\n      for (const device of devices) {\n        if (device.kind === \"videoinput\") {\n          vidoeDevices.push(device);\n        } else if (device.kind === \"audioinput\") {\n          audioDevices.push(device);\n        }\n      }\n      setDevicesMap({\n        video: vidoeDevices,\n        audio: audioDevices,\n      });\n      setOpen(true);\n    });\n  }, []);\n  const onClose = useCallback(() => setOpen(false), []);\n\n  const onSubmit = useCallback(\n    (video, audio) => {\n      setDevicesMap(undefined);\n      setOpen(false);\n      onSelect(video, audio);\n    },\n    [onSelect]\n  );\n\n  return (\n    <Box>\n      {unavailable && <p>Unavailable</p>}\n      {devicesMap && (\n        <DeviceSelectPopper\n          open={open}\n          anchorEl={anchorEl}\n          value={value}\n          devicesMap={devicesMap}\n          onSubmit={onSubmit}\n        />\n      )}\n      <Button onClick={open ? onClose : onOpen}>Select device</Button>\n    </Box>\n  );\n};\n\nexport default React.memo(DeviceSelector);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport WebRtcStreamer from \"./WebRtcStreamer\";\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        body: {\n          // Unset the background-color since <CssBaseLine /> applies the default Material Design background color\n          // (https://material-ui.com/components/css-baseline/#approach),\n          // which however does not match the Streamlit's background.\n          backgroundColor: \"initial\",\n        },\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <WebRtcStreamer />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}