# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _verovio
else:
    import _verovio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


UNKNOWN = _verovio.UNKNOWN
AUTO = _verovio.AUTO
MEI = _verovio.MEI
HUMDRUM = _verovio.HUMDRUM
HUMMEI = _verovio.HUMMEI
PAE = _verovio.PAE
ABC = _verovio.ABC
DARMS = _verovio.DARMS
MUSICXML = _verovio.MUSICXML
MUSICXMLHUM = _verovio.MUSICXMLHUM
MEIHUM = _verovio.MEIHUM
MUSEDATAHUM = _verovio.MUSEDATAHUM
ESAC = _verovio.ESAC
MIDI = _verovio.MIDI
TIMEMAP = _verovio.TIMEMAP

def setDefaultResourcePath(path):
    return _verovio.setDefaultResourcePath(path)

def enableLog(value):
    return _verovio.enableLog(value)

def enableLogToBuffer(value):
    return _verovio.enableLogToBuffer(value)
class toolkit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initFont=True):
        _verovio.toolkit_swiginit(self, _verovio.new_toolkit(initFont))
    __swig_destroy__ = _verovio.delete_toolkit

    def getUuid(self):
        return _verovio.toolkit_getUuid(self)

    def setResourcePath(self, path):
        return _verovio.toolkit_setResourcePath(self, path)

    def loadFile(self, filename):
        return _verovio.toolkit_loadFile(self, filename)

    def loadData(self, data):
        return _verovio.toolkit_loadData(self, data)

    def loadZipDataBase64(self, data):
        return _verovio.toolkit_loadZipDataBase64(self, data)

    def loadZipDataBuffer(self, data, length):
        return _verovio.toolkit_loadZipDataBuffer(self, data, length)

    def saveFile(self, filename, jsonOptions):
        return _verovio.toolkit_saveFile(self, filename, jsonOptions)

    def getOptions(self, *args):
        return _verovio.toolkit_getOptions(self, *args)

    def getAvailableOptions(self):
        return _verovio.toolkit_getAvailableOptions(self)

    def setOptions(self, jsonOptions):
        return _verovio.toolkit_setOptions(self, jsonOptions)

    def getOption(self, option, defaultValue=False):
        return _verovio.toolkit_getOption(self, option, defaultValue)

    def setOption(self, option, value):
        return _verovio.toolkit_setOption(self, option, value)

    def edit(self, jsonEditorAction):
        return _verovio.toolkit_edit(self, jsonEditorAction)

    def editInfo(self):
        return _verovio.toolkit_editInfo(self)

    def getLog(self):
        return _verovio.toolkit_getLog(self)

    def getVersion(self):
        return _verovio.toolkit_getVersion(self)

    def renderToDeviceContext(self, pageNo, deviceContext):
        return _verovio.toolkit_renderToDeviceContext(self, pageNo, deviceContext)

    def renderToSVG(self, pageNo=1, xmlDeclaration=False):
        return _verovio.toolkit_renderToSVG(self, pageNo, xmlDeclaration)

    def renderToSVGFile(self, filename, pageNo=1):
        return _verovio.toolkit_renderToSVGFile(self, filename, pageNo)

    def renderToMIDIFile(self, filename):
        return _verovio.toolkit_renderToMIDIFile(self, filename)

    def renderToMIDI(self):
        return _verovio.toolkit_renderToMIDI(self)

    def renderToPAEFile(self, filename):
        return _verovio.toolkit_renderToPAEFile(self, filename)

    def renderToPAE(self):
        return _verovio.toolkit_renderToPAE(self)

    def renderToTimemap(self):
        return _verovio.toolkit_renderToTimemap(self)

    def renderToTimemapFile(self, filename):
        return _verovio.toolkit_renderToTimemapFile(self, filename)

    def getHumdrumBuffer(self):
        return _verovio.toolkit_getHumdrumBuffer(self)

    def setHumdrumBuffer(self, contents):
        return _verovio.toolkit_setHumdrumBuffer(self, contents)

    def getHumdrumFile(self, filename):
        return _verovio.toolkit_getHumdrumFile(self, filename)

    def getHumdrum(self, *args):
        return _verovio.toolkit_getHumdrum(self, *args)

    def getElementsAtTime(self, millisec):
        return _verovio.toolkit_getElementsAtTime(self, millisec)

    def getMEI(self, jsonOptions):
        return _verovio.toolkit_getMEI(self, jsonOptions)

    def getElementAttr(self, xmlId):
        return _verovio.toolkit_getElementAttr(self, xmlId)

    def getNotatedIdForElement(self, xmlId):
        return _verovio.toolkit_getNotatedIdForElement(self, xmlId)

    def getExpansionIdsForElement(self, xmlId):
        return _verovio.toolkit_getExpansionIdsForElement(self, xmlId)

    def redoLayout(self):
        return _verovio.toolkit_redoLayout(self)

    def redoPagePitchPosLayout(self):
        return _verovio.toolkit_redoPagePitchPosLayout(self)

    def getPageWithElement(self, xmlId):
        return _verovio.toolkit_getPageWithElement(self, xmlId)

    def getTimeForElement(self, xmlId):
        return _verovio.toolkit_getTimeForElement(self, xmlId)

    def getMIDIValuesForElement(self, xmlId):
        return _verovio.toolkit_getMIDIValuesForElement(self, xmlId)

    def getTimesForElement(self, xmlId):
        return _verovio.toolkit_getTimesForElement(self, xmlId)

    def setScale(self, scale):
        return _verovio.toolkit_setScale(self, scale)

    def getScale(self):
        return _verovio.toolkit_getScale(self)

    def setInputFrom(self, *args):
        return _verovio.toolkit_setInputFrom(self, *args)

    def getInputFrom(self):
        return _verovio.toolkit_getInputFrom(self)

    def setOutputTo(self, outputTo):
        return _verovio.toolkit_setOutputTo(self, outputTo)

    def getOutputTo(self):
        return _verovio.toolkit_getOutputTo(self)

    def identifyInputFrom(self, data):
        return _verovio.toolkit_identifyInputFrom(self, data)

    def getPageCount(self):
        return _verovio.toolkit_getPageCount(self)
    sMEItoClassIdMap = property(_verovio.toolkit_sMEItoClassIdMap_get, _verovio.toolkit_sMEItoClassIdMap_set)

# Register toolkit in _verovio:
_verovio.toolkit_swigregister(toolkit)
cvar = _verovio.cvar



