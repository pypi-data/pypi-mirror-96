# Generated by Django 3.1.6 on 2021-02-28 18:07

import _socket
from django.conf import settings
import django.contrib.sites.managers
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edc_model.models.fields.duration
import edc_model.models.fields.other_charfield
import edc_model.models.validators.date
import edc_protocol.validators
import edc_utils.date
import edc_visit_tracking.managers
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('mocca_lists', '0004_auto_20210228_2049'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edc_action_item', '0028_auto_20210203_0706'),
        ('mocca_subject', '0008_auto_20210131_2037'),
    ]

    operations = [
        migrations.CreateModel(
            name='CholInitialReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('dx_location_other', edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('dx_ago', edc_model.models.fields.duration.DurationYMDField(blank=True, null=True)),
                ('dx_date', models.DateField(blank=True, help_text='If possible, provide the exact date here instead of estimating above.', null=True, verbose_name='Date patient diagnosed')),
                ('dx_estimated_date', models.DateField(editable=False, help_text='Calculated based on response to `dx_ago`', null=True, verbose_name='Estimated diagnoses date')),
                ('dx_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', editable=False, max_length=15, verbose_name='Was the diagnosis date estimated?')),
                ('med_start_ago', edc_model.models.fields.duration.DurationYMDField(blank=True, null=True)),
                ('med_start_estimated_date', models.DateField(editable=False, null=True, verbose_name='Estimated medication start date')),
                ('med_start_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', editable=False, max_length=15, verbose_name='Was the medication start date estimated?')),
                ('managed_by', models.CharField(choices=[('drugs', 'Oral drugs'), ('diet_lifestyle', 'Diet and lifestyle alone')], default='N/A', max_length=25, verbose_name="How is the patient's cholesterol managed?")),
                ('chol_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has the patient had their cholesterol measured in the last few months?')),
                ('dx_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'High Cholesterol Initial Review',
                'verbose_name_plural': 'High Cholesterol Initial Reviews',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edc_visit_tracking.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='CholMedicationAdherence',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('visual_score_slider', models.CharField(help_text='%', max_length=3, verbose_name='Visual score')),
                ('visual_score_confirmed', models.IntegerField(help_text='%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="<B><font color='orange'>Interviewer</font></B>: please confirm the score indicated from above.")),
                ('last_missed_pill', models.CharField(choices=[('today', 'today'), ('yesterday', 'yesterday'), ('earlier_this_week', 'earlier this week'), ('last_week', 'last week'), ('lt_month_ago', 'less than a month ago'), ('gt_month_ago', 'more than a month ago'), ('NEVER', 'have never missed taking my study pills')], max_length=25, verbose_name='When was the last time you missed your study pill?')),
                ('pill_count', models.IntegerField(verbose_name='Number of pills left in the bottle')),
                ('other_missed_pill_reason', edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('missed_pill_reason', models.ManyToManyField(blank=True, to='mocca_lists.NonAdherenceReasons', verbose_name='Reasons for missing study pills')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Cholesterol Medication Adherence',
                'verbose_name_plural': 'Cholesterol Medication Adherence',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edc_visit_tracking.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='CholReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('care_delivery', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Select `not applicable` if site was not selected for integrated care.', max_length=25, verbose_name='Was care for this `condition` delivered in an integrated care clinic today?')),
                ('care_delivery_other', models.TextField(blank=True, null=True, verbose_name='If no, please explain')),
                ('test_date', models.DateField(blank=True, editable=False, help_text='QUESTION_RETIRED', null=True, verbose_name='Date tested for High Cholesterol')),
                ('dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', editable=False, help_text='QUESTION_RETIRED', max_length=15, verbose_name='Has the patient been diagnosed with High Cholesterol?')),
                ('managed_by', models.CharField(choices=[('insulin', 'Insulin injections'), ('drugs', 'Oral drugs'), ('diet_lifestyle', 'Diet and lifestyle alone')], default='N/A', max_length=25, verbose_name="How will the patient's High Cholesterol be managed going forward?")),
                ('care_start_date', models.DateField(editable=False, help_text='QUESTION_RETIRED', null=True, verbose_name='Date clinical management started')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'High Cholesterol Review',
                'verbose_name_plural': 'High Cholesterol Review',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edc_visit_tracking.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='DrugRefillChol',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('rx_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('rx_modified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Was the patient’s prescription changed at this visit compared with their prescription at the previous visit?')),
                ('modifications_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('modifications_reason_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('return_in_days', models.IntegerField(verbose_name='In how many days has the patient been asked to return to clinic for a drug refill?')),
                ('modifications', models.ManyToManyField(blank=True, to='mocca_lists.RxModifications', verbose_name='Which changes occurred?')),
                ('modifications_reason', models.ManyToManyField(blank=True, to='mocca_lists.RxModificationReasons', verbose_name='Why did the patient’s previous prescription change?')),
                ('rx', models.ManyToManyField(to='mocca_lists.CholTreatments', verbose_name='Which medicine did the patient receive today?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Drug Refill: Cholesterol',
                'verbose_name_plural': 'Drug Refills: Cholesterol',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edc_visit_tracking.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='DrugSupplyChol',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('drug', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_lists.choltreatments')),
                ('drug_refill', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_subject.drugrefillchol')),
            ],
            options={
                'verbose_name': 'Drug Supply: Hypertension',
                'verbose_name_plural': 'Drug Supply: Hypertension',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCholInitialReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dx_location_other', edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('dx_ago', edc_model.models.fields.duration.DurationYMDField(blank=True, null=True)),
                ('dx_date', models.DateField(blank=True, help_text='If possible, provide the exact date here instead of estimating above.', null=True, verbose_name='Date patient diagnosed')),
                ('dx_estimated_date', models.DateField(editable=False, help_text='Calculated based on response to `dx_ago`', null=True, verbose_name='Estimated diagnoses date')),
                ('dx_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', editable=False, max_length=15, verbose_name='Was the diagnosis date estimated?')),
                ('med_start_ago', edc_model.models.fields.duration.DurationYMDField(blank=True, null=True)),
                ('med_start_estimated_date', models.DateField(editable=False, null=True, verbose_name='Estimated medication start date')),
                ('med_start_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', editable=False, max_length=15, verbose_name='Was the medication start date estimated?')),
                ('managed_by', models.CharField(choices=[('drugs', 'Oral drugs'), ('diet_lifestyle', 'Diet and lifestyle alone')], default='N/A', max_length=25, verbose_name="How is the patient's cholesterol managed?")),
                ('chol_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has the patient had their cholesterol measured in the last few months?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dx_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical High Cholesterol Initial Review',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCholMedicationAdherence',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('visual_score_slider', models.CharField(help_text='%', max_length=3, verbose_name='Visual score')),
                ('visual_score_confirmed', models.IntegerField(help_text='%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="<B><font color='orange'>Interviewer</font></B>: please confirm the score indicated from above.")),
                ('last_missed_pill', models.CharField(choices=[('today', 'today'), ('yesterday', 'yesterday'), ('earlier_this_week', 'earlier this week'), ('last_week', 'last week'), ('lt_month_ago', 'less than a month ago'), ('gt_month_ago', 'more than a month ago'), ('NEVER', 'have never missed taking my study pills')], max_length=25, verbose_name='When was the last time you missed your study pill?')),
                ('pill_count', models.IntegerField(verbose_name='Number of pills left in the bottle')),
                ('other_missed_pill_reason', edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Cholesterol Medication Adherence',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCholReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('care_delivery', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Select `not applicable` if site was not selected for integrated care.', max_length=25, verbose_name='Was care for this `condition` delivered in an integrated care clinic today?')),
                ('care_delivery_other', models.TextField(blank=True, null=True, verbose_name='If no, please explain')),
                ('test_date', models.DateField(blank=True, editable=False, help_text='QUESTION_RETIRED', null=True, verbose_name='Date tested for High Cholesterol')),
                ('dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', editable=False, help_text='QUESTION_RETIRED', max_length=15, verbose_name='Has the patient been diagnosed with High Cholesterol?')),
                ('managed_by', models.CharField(choices=[('insulin', 'Insulin injections'), ('drugs', 'Oral drugs'), ('diet_lifestyle', 'Diet and lifestyle alone')], default='N/A', max_length=25, verbose_name="How will the patient's High Cholesterol be managed going forward?")),
                ('care_start_date', models.DateField(editable=False, help_text='QUESTION_RETIRED', null=True, verbose_name='Date clinical management started')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical High Cholesterol Review',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDrugRefillChol',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_utils.date.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_model.models.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rx_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('rx_modified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Was the patient’s prescription changed at this visit compared with their prescription at the previous visit?')),
                ('modifications_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('modifications_reason_other', models.CharField(blank=True, max_length=150, null=True, verbose_name='If other, please specify ...')),
                ('return_in_days', models.IntegerField(verbose_name='In how many days has the patient been asked to return to clinic for a drug refill?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Drug Refill: Cholesterol',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_dm_paid_month',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_dm_paid_today',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_hiv_paid_month',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_hiv_paid_today',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_htn_paid_month',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_htn_paid_today',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_other_paid_month',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='rx_other_paid_today',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='site',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='subject_visit',
        ),
        migrations.RemoveField(
            model_name='healtheconomicsrevised',
            name='transport',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomics',
            name='history_user',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomics',
            name='site',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomics',
            name='subject_visit',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomicsrevised',
            name='history_user',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomicsrevised',
            name='site',
        ),
        migrations.RemoveField(
            model_name='historicalhealtheconomicsrevised',
            name='subject_visit',
        ),
        migrations.RemoveField(
            model_name='historicalreasonforvisit',
            name='history_user',
        ),
        migrations.RemoveField(
            model_name='historicalreasonforvisit',
            name='site',
        ),
        migrations.RemoveField(
            model_name='historicalreasonforvisit',
            name='subject_visit',
        ),
        migrations.RemoveField(
            model_name='reasonforvisit',
            name='clinic_services',
        ),
        migrations.RemoveField(
            model_name='reasonforvisit',
            name='site',
        ),
        migrations.RemoveField(
            model_name='reasonforvisit',
            name='subject_visit',
        ),
        migrations.AlterModelOptions(
            name='historicalpatienthealth',
            options={'get_latest_by': 'history_date', 'ordering': ('-history_date', '-history_id'), 'verbose_name': 'historical Patient Health Questionnaire-9 (PHQ-9)'},
        ),
        migrations.AlterModelOptions(
            name='patienthealth',
            options={'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'), 'get_latest_by': 'modified', 'ordering': ('-modified', '-created'), 'verbose_name': 'Patient Health Questionnaire-9 (PHQ-9)', 'verbose_name_plural': 'Patient Health Questionnaires-9 (PHQ-9)'},
        ),
        migrations.RenameField(
            model_name='historicalpatienthealth',
            old_name='phpthough',
            new_name='ph9though',
        ),
        migrations.RenameField(
            model_name='patienthealth',
            old_name='phpthough',
            new_name='ph9though',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='health_insurance',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='health_insurance_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='patient_club',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='patient_club_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='reason',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='reason_other',
        ),
        migrations.RemoveField(
            model_name='clinicalreview',
            name='test_date',
        ),
        migrations.RemoveField(
            model_name='clinicalreviewbaseline',
            name='health_insurance',
        ),
        migrations.RemoveField(
            model_name='clinicalreviewbaseline',
            name='health_insurance_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='clinicalreviewbaseline',
            name='patient_club',
        ),
        migrations.RemoveField(
            model_name='clinicalreviewbaseline',
            name='patient_club_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='drugsupplydm',
            name='clinic_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplydm',
            name='club_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplydm',
            name='purchased_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhiv',
            name='clinic_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhiv',
            name='club_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhiv',
            name='purchased_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhtn',
            name='clinic_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhtn',
            name='club_days',
        ),
        migrations.RemoveField(
            model_name='drugsupplyhtn',
            name='purchased_days',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='health_insurance',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='health_insurance_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='patient_club',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='patient_club_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='reason_other',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreview',
            name='test_date',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreviewbaseline',
            name='health_insurance',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreviewbaseline',
            name='health_insurance_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreviewbaseline',
            name='patient_club',
        ),
        migrations.RemoveField(
            model_name='historicalclinicalreviewbaseline',
            name='patient_club_monthly_pay',
        ),
        migrations.RemoveField(
            model_name='historicalnextappointment',
            name='dm_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='historicalnextappointment',
            name='hiv_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='historicalnextappointment',
            name='htn_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='historicalnextappointment',
            name='ncd_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='nextappointment',
            name='dm_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='nextappointment',
            name='hiv_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='nextappointment',
            name='htn_clinic_appt_date',
        ),
        migrations.RemoveField(
            model_name='nextappointment',
            name='ncd_clinic_appt_date',
        ),
        migrations.AddField(
            model_name='clinicalreview',
            name='chol_dx',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='As of today, was the patient <u>newly</u> diagnosed with high cholesterol?'),
        ),
        migrations.AddField(
            model_name='clinicalreview',
            name='chol_reason',
            field=models.ManyToManyField(blank=True, related_name='chol_reason', to='mocca_lists.ReasonsForTesting', verbose_name='Why was the patient tested for cholesterol?'),
        ),
        migrations.AddField(
            model_name='clinicalreview',
            name='chol_reason_other',
            field=edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...'),
        ),
        migrations.AddField(
            model_name='clinicalreview',
            name='chol_test',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="Note: Select `not applicable` if diagnosis previously reported. <BR>`Since last seen` includes today.<BR>If `yes', complete the initial review CRF<BR>If `not applicable`, complete the review CRF.", max_length=15, verbose_name='Since last seen, was the patient tested for high cholesterol?'),
        ),
        migrations.AddField(
            model_name='clinicalreview',
            name='chol_test_date',
            field=models.DateField(blank=True, null=True, verbose_name='Date test requested'),
        ),
        migrations.AddField(
            model_name='dmmedicationadherence',
            name='pill_count',
            field=models.IntegerField(default=0, verbose_name='Number of pills left in the bottle'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='historicalclinicalreview',
            name='chol_dx',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='As of today, was the patient <u>newly</u> diagnosed with high cholesterol?'),
        ),
        migrations.AddField(
            model_name='historicalclinicalreview',
            name='chol_reason_other',
            field=edc_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...'),
        ),
        migrations.AddField(
            model_name='historicalclinicalreview',
            name='chol_test',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="Note: Select `not applicable` if diagnosis previously reported. <BR>`Since last seen` includes today.<BR>If `yes', complete the initial review CRF<BR>If `not applicable`, complete the review CRF.", max_length=15, verbose_name='Since last seen, was the patient tested for high cholesterol?'),
        ),
        migrations.AddField(
            model_name='historicalclinicalreview',
            name='chol_test_date',
            field=models.DateField(blank=True, null=True, verbose_name='Date test requested'),
        ),
        migrations.AddField(
            model_name='historicaldmmedicationadherence',
            name='pill_count',
            field=models.IntegerField(default=0, verbose_name='Number of pills left in the bottle'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='historicalmedications',
            name='refill_chol',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Select `not applicable` if subject has not been diagnosed and prescribed medication for Cholesterol.', max_length=25, verbose_name='Is the patient filling / refilling Cholesterol medications?'),
        ),
        migrations.AddField(
            model_name='historicalnextappointment',
            name='appt_date',
            field=models.DateField(blank=True, help_text='if applicable.', null=True, verbose_name='Next scheduled routine appointment'),
        ),
        migrations.AddField(
            model_name='medications',
            name='refill_chol',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Select `not applicable` if subject has not been diagnosed and prescribed medication for Cholesterol.', max_length=25, verbose_name='Is the patient filling / refilling Cholesterol medications?'),
        ),
        migrations.AddField(
            model_name='nextappointment',
            name='appt_date',
            field=models.DateField(blank=True, help_text='if applicable.', null=True, verbose_name='Next scheduled routine appointment'),
        ),
        migrations.AlterField(
            model_name='dminitialreview',
            name='dx_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='dmmedicationadherence',
            name='last_missed_pill',
            field=models.CharField(choices=[('today', 'today'), ('yesterday', 'yesterday'), ('earlier_this_week', 'earlier this week'), ('last_week', 'last week'), ('lt_month_ago', 'less than a month ago'), ('gt_month_ago', 'more than a month ago'), ('NEVER', 'have never missed taking my study pills')], max_length=25, verbose_name='When was the last time you missed your study pill?'),
        ),
        migrations.AlterField(
            model_name='dmmedicationadherence',
            name='missed_pill_reason',
            field=models.ManyToManyField(blank=True, to='mocca_lists.NonAdherenceReasons', verbose_name='Reasons for missing study pills'),
        ),
        migrations.AlterField(
            model_name='dmmedicationadherence',
            name='visual_score_slider',
            field=models.CharField(help_text='%', max_length=3, verbose_name='Visual score'),
        ),
        migrations.AlterField(
            model_name='historicaldminitialreview',
            name='dx_location',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='historicaldmmedicationadherence',
            name='last_missed_pill',
            field=models.CharField(choices=[('today', 'today'), ('yesterday', 'yesterday'), ('earlier_this_week', 'earlier this week'), ('last_week', 'last week'), ('lt_month_ago', 'less than a month ago'), ('gt_month_ago', 'more than a month ago'), ('NEVER', 'have never missed taking my study pills')], max_length=25, verbose_name='When was the last time you missed your study pill?'),
        ),
        migrations.AlterField(
            model_name='historicaldmmedicationadherence',
            name='visual_score_slider',
            field=models.CharField(help_text='%', max_length=3, verbose_name='Visual score'),
        ),
        migrations.AlterField(
            model_name='historicalhivinitialreview',
            name='dx_location',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='historicalhtninitialreview',
            name='dx_location',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectvisitmissed',
            name='parent_action_identifier',
            field=models.CharField(blank=True, help_text='action identifier that links to parent reference model instance.', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='historicalsubjectvisitmissed',
            name='related_action_identifier',
            field=models.CharField(blank=True, help_text='action identifier that links to related reference model instance.', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='hivinitialreview',
            name='dx_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='htninitialreview',
            name='dx_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mocca_lists.diagnosislocations', verbose_name='Where was the diagnosis made?'),
        ),
        migrations.AlterField(
            model_name='subjectvisitmissed',
            name='action_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='edc_action_item.actionitem'),
        ),
        migrations.AlterField(
            model_name='subjectvisitmissed',
            name='parent_action_identifier',
            field=models.CharField(blank=True, help_text='action identifier that links to parent reference model instance.', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='subjectvisitmissed',
            name='parent_action_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='edc_action_item.actionitem'),
        ),
        migrations.AlterField(
            model_name='subjectvisitmissed',
            name='related_action_identifier',
            field=models.CharField(blank=True, help_text='action identifier that links to related reference model instance.', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='subjectvisitmissed',
            name='related_action_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='edc_action_item.actionitem'),
        ),
        migrations.DeleteModel(
            name='HealthEconomics',
        ),
        migrations.DeleteModel(
            name='HealthEconomicsRevised',
        ),
        migrations.DeleteModel(
            name='HistoricalHealthEconomics',
        ),
        migrations.DeleteModel(
            name='HistoricalHealthEconomicsRevised',
        ),
        migrations.DeleteModel(
            name='HistoricalReasonForVisit',
        ),
        migrations.DeleteModel(
            name='ReasonForVisit',
        ),
        migrations.AddIndex(
            model_name='drugrefillchol',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='mocca_subje_subject_838e8a_idx'),
        ),
        migrations.AddIndex(
            model_name='cholreview',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='mocca_subje_subject_91e0c8_idx'),
        ),
        migrations.AddIndex(
            model_name='cholmedicationadherence',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='mocca_subje_subject_06ba8e_idx'),
        ),
        migrations.AddIndex(
            model_name='cholinitialreview',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='mocca_subje_subject_6e62ad_idx'),
        ),
    ]
