# vim: set ft=ruby ts=4 sw=4 sts=-1 noet:

include_module_dir "modules.d";

module base {
	# Begin with the kernel defconfig
	merge "{KERNEL_DIR}/arch/{ARCH}/configs/{UNAME_ARCH}_defconfig";

	# Enable expert options
	set EXPERT y;
	# Enable modules
	set MODULES y;
}

module bluetooth {
	# Enable bluetooth
	set BT y;
	# Enable BT high speed
	set BT_HS y;
	# Enable BT low energy
	set BT_LE y;
	# Enable BT led triggers
	set BT_LEDS y;
}

module bluetooth_extra {
	# HID over bluetooth
	set BT_HIDP y;
	# Ethernet over bluetooth
	set BT_BNEP y;
}

module kvm {
	set KVM y;
}

module nftables {
	# Enables advanced netfilter configurations
	set NETFILTER_ADVANCED y;
	# Enables nftables framework which replaces {ip,ip6,arp,eb}_tables
	set NF_TABLES y;
	# ARP nftables support
	set NF_TABLES_ARP y;
	# IPV4/IPV6 nftables support
	set NF_TABLES_INET y;
	# Bridge tables support
	set NF_TABLES_BRIDGE y;
	# Allows building sets for action lookup
	set NF_TABLES_SET y;
	# Number generation for incremental counting
	set NFT_NUMGEN y;
	# Conntrack for nftables
	set NF_CONNTRACK y;
	set NFT_CT y;
	# Allows counting expressions
	set NFT_COUNTER y;
	# Allows ratelimiting per connection
	set NFT_CONNLIMIT y;
	# Allows packet logging
	set NFT_LOG y;
	# Allows ratelimiting per rule
	set NFT_LIMIT y;
	# Allows masquerade-style NAT
	set NFT_MASQ y;
	# Allows redirect-style NAT
	set NFT_REDIR y;
	# Allows typical NAT
	set NFT_NAT y;
	# Allows tunnel policies
	set NFT_TUNNEL y;
	# Allows refering to stateful objects
	set NFT_OBJREF y;
	# Allows setting byte quotas
	set NFT_QUOTA y;
	# Allows to explicitly reject traffic, optionally with corresponding informational packets
	set NFT_REJECT y;
	# Allows xtables over nftables (e.g. old iptables / ip6tables)
	set NFT_COMPAT y;
	# Allows hashing in expressions
	set NFT_HASH y;
	# Allows extracting information of a packets security association
	set NFT_XFRM y;
	# Allows matching for presence or absence of specific sockets
	set NFT_SOCKET y;
	# Allows passive os fingerprinting
	set NFT_OSF y;
	# Allows transparent proxying
	set NFT_TPROXY y;
	# Allows tcp intercepting as syncookies (useful for avoiding
	# conntrack and resource usage in syn-flood attack scenarios)
	set NFT_SYNPROXY y;
	# Allows ipv4 packet duplication
	set NFT_DUP_IPV4 y;
	# Allows ipv6 packet duplication
	set NFT_DUP_IPV6 y;
	# Allows ipv4 reverse path lookups
	set NFT_FIB_IPV4 y;
	# Allows ipv6 reverse path lookups
	set NFT_FIB_IPV6 y;
	# Allows reverse path lookups in inet table (dispatched to ipv4/ipv6 dynamically)
	set NFT_FIB_INET y;
	# Allows rejecting bridged packets
	set NFT_BRIDGE_REJECT y;
}

module net {
	# Enable basic networking support.
	set NET y;
	# Enable IP support.
	set INET y;
	# Enable ipv6
	set IPV6 y;
	# IPv6 through IPv4 tunnel
	set IPV6_SIT y;

	# Enable universal TUN/TAP (e.g. for openvpn)
	set TUN y;
	# Allow ethernet bridging
	set BRIDGE y;

	# Allow encapsulation of any IP protocol in UDP
	set NET_FOU y;

	# Enable nftables
	use nftables;

	# Enable wireguard tunnel
	if $kernel_version >= 5.6 {
		set WIREGUARD y;
	}
}

module usb {
	set USB y;
	# Enable usb led triggers
	set USB_LED_TRIG y;
	# USB xHCI (USB 3.0) support
	set USB_XHCI_HCD y;

	# USB Type-C support
	set TYPEC y;
	set TYPEC_TCPM y;
	set TYPEC_TCPCI y;
	set TYPEC_UCSI y;
	set UCSI_ACPI y;

	if $kernel_version >= 5.6 {
		# Enable usb4 support
		set USB4 y;
		# Enable networking over usb4
		set USB4_NET y;
	} else {
		# Enable thunderbolt support
		set THUNDERBOLT y;
		# Enable networking over thunderbolt
		set THUNDERBOLT_NET y;
	}
}

module usb_extra {
	# Enable usb mass storage devices
	set USB_STORAGE y;

	# Enable DisplayPort via usb typec
	set TYPEC_DP_ALTMODE y;
}

module local_extra {
	# Intel thunderbold driver
	set INTEL_WMI_THUNDERBOLT y;
	# Touchpad
	set MOUSE_PS2_ELANTECH y;
	# Enable battery reporting for HID devices
	set HID_BATTERY_STRENGTH y;

	# Enable intel sensor hub to offload sensor polling to coprocessor (Skylake+)
	set INTEL_ISH_HID y;

	# Enable powercapping
	set POWERCAP y;
	set INTEL_RAPL y;

	# Enable performance events
	set PERF_EVENTS y;
	set PERF_EVENTS_INTEL_UNCORE y;
	set PERF_EVENTS_INTEL_RAPL y;
	set PERF_EVENTS_INTEL_CSTATE y;

	# Enable crypto intrinsics
	set CRYPTO_CRC32C_INTEL y;

	# DMA support for Intel low power subsystem (Skylake+)
	set INTEL_IDMA64 y;
	# Enable kvm support for intel
	set KVM_INTEL y;
}

module plug_extra {
	# Enable usb serial converters (for arduino)
	set USB_SERIAL y;
	set USB_SERIAL_CP210X y;

	# rtlsdr support
	set MEDIA_SUPPORT y;
	set MEDIA_USB_SUPPORT y;
	set MEDIA_DIGITAL_TV_SUPPORT y;
	set DVB_USB_V2 y;
	set DVB_USB_RTL28XXU y;
}

module audio {
	# Enable sound subsystem
	set SOUND y;
	# Enable ALSA
	set SND y;

	# Allow more than 8 sound cards
	set SND_DYNAMIC_MINORS y;

	if SND_HDA_INTEL {
		# Increase prealloc size for HD Audio driver
		try set SND_HDA_PREALLOC_SIZE 2048;
	}
}

module audio_extra {
	# enable usb audio
	set SND_USB_AUDIO y;
}

module console {
	# Enable the framebuffer console (needed for fonts)
	set FRAMEBUFFER_CONSOLE y;
	# Enable compiled-in fonts.
	set FONTS y;
	# Use the HiDPI Terminus font
	#TODO only for specific machines....
	set FONT_TER16x32 y;

	# Increase console scrollback and enable persistence on vgacon consoles
	set VGACON_SOFT_SCROLLBACK y;
	set VGACON_SOFT_SCROLLBACK_SIZE 1024;
	set VGACON_SOFT_SCROLLBACK_PERSISTENT_ENABLE_BY_DEFAULT y;
}

module misc {
	# Allow parallel crypto.
	set CRYPTO_PCRYPT y;

	# Enable in-kernel tls support
	set TLS y;

	# Use lz4 as compression
	set CRYPTO_LZ4 y;
	set KERNEL_LZ4 y;

	# Enable .config access through /proc/config.gz
	set IKCONFIG y;
	set IKCONFIG_PROC y;

	# Don't precreate loop devices
	set BLK_DEV_LOOP_MIN_COUNT 0;

	# Enable cpu frequency statistics
	set CPU_FREQ_STAT y;

	# Enable setting system time from RTC on startup and resume
	set RTC_HCTOSYS y;

	# Enable lockup detector
	set SOFTLOCKUP_DETECTOR y;
	set HARDLOCKUP_DETECTOR y;

	# Enable scheduler autogroup to automatically create task groups for
	# CPU aggressive applications and separate them from desktop applications
	set SCHED_AUTOGROUP y;

	# Disable posix message queues
	set POSIX_MQUEUE n;
	# Disable legacy MPS-table (pre-acpi) support
	set X86_MPPARSE n;
	# Disable extended platform support (non-PC platforms)
	set X86_EXTENDED_PLATFORM n;
	# Disable HAM radio support
	set HAMRADIO n;
}

kernel {
	use base;
	use hardening;
	use local;

	use nvme;
	use fs_ntfs;
	use fs_f2fs;
	use fs_fuse;
	use fs_cifs;

	use kvm;
	use net;
	use usb;
	use audio;
	use bluetooth;

	use usb_extra;
	use audio_extra;

	use plug_extra;
	use console;
	use misc;

	use local_extra;

	# Enable efi
	set EFI y;
	set EFI_STUB y;

	# No boot logo
	set LOGO n;
	# The default hostname
	set DEFAULT_HOSTNAME "(none)";

	# Use LZ4 as compression algorithm for built-in initramfs
	set RD_LZ4 y if BLK_DEV_INITRD;
	set INITRAMFS_COMPRESSION_LZ4 y if INITRAMFS_SOURCE;
}

initramfs {
	# Build an initramfs
	enabled true;
	# Integrate it into the kernel
	builtin true;

	# Use dracut to build the initramfs
	build_command "dracut"
		"--conf"          "/dev/null"
		"--confdir"       "/dev/null"
		"--kmoddir"       "{MODULES_PREFIX}/lib/modules/{KERNEL_VERSION}"
		"--kver"          "{KERNEL_VERSION}"
		"--no-compress"
		"--no-hostonly"
		"--ro-mnt"
		"--add"           "bash crypt crypt-gpg"
		"--force"
		"{INITRAMFS_OUTPUT}";
}

build {
	# Required for vanilla gentoo compatibility, as portage must have access to the
	# build files to create modules. There are better ways to do this.
	umask 0022;
}

install {
	mount "/boot/efi";
	target_dir "/boot/efi/EFI";

	# We don't need the initramfs intalled separately when it is built into the kernel.
	target_initramfs false;
	# We also don't need the config.
	target_config false;

	# Keep the last two kernel builds, and purge the rest from the target directory.
	keep_old 2;
}
