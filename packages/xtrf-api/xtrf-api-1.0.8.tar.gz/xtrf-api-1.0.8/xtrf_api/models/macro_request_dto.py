# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MacroRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'params': 'dict(str, object)',
        '_async': 'bool'
    }

    attribute_map = {
        'ids': 'ids',
        'params': 'params',
        '_async': 'async'
    }

    def __init__(self, ids=None, params=None, _async=None):  # noqa: E501
        """MacroRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._params = None
        self.__async = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if params is not None:
            self.params = params
        if _async is not None:
            self._async = _async

    @property
    def ids(self):
        """Gets the ids of this MacroRequestDTO.  # noqa: E501

        list of internal identifiers of elements to be processed by the macro, can be empty for certain macros  # noqa: E501

        :return: The ids of this MacroRequestDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this MacroRequestDTO.

        list of internal identifiers of elements to be processed by the macro, can be empty for certain macros  # noqa: E501

        :param ids: The ids of this MacroRequestDTO.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def params(self):
        """Gets the params of this MacroRequestDTO.  # noqa: E501

        map of custom key-value pairs that can optionally parametrize the macro execution  # noqa: E501

        :return: The params of this MacroRequestDTO.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this MacroRequestDTO.

        map of custom key-value pairs that can optionally parametrize the macro execution  # noqa: E501

        :param params: The params of this MacroRequestDTO.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    @property
    def _async(self):
        """Gets the _async of this MacroRequestDTO.  # noqa: E501

        indicates whether the macro should be executed asynchronously or synchronously (default: false)  # noqa: E501

        :return: The _async of this MacroRequestDTO.  # noqa: E501
        :rtype: bool
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this MacroRequestDTO.

        indicates whether the macro should be executed asynchronously or synchronously (default: false)  # noqa: E501

        :param _async: The _async of this MacroRequestDTO.  # noqa: E501
        :type: bool
        """

        self.__async = _async

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacroRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacroRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
