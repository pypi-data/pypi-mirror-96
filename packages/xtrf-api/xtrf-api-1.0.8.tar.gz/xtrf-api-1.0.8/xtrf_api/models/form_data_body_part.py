# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormDataBodyPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_disposition': 'ContentDisposition',
        'entity': 'object',
        'headers': 'FormDataMultiPartHeaders',
        'media_type': 'FormDataMultiPartMediaType',
        'message_body_workers': 'MessageBodyWorkers',
        'parent': 'MultiPart',
        'providers': 'object',
        'simple': 'bool',
        'form_data_content_disposition': 'FormDataContentDisposition',
        'name': 'str',
        'value': 'str',
        'parameterized_headers': 'FormDataMultiPartHeaders'
    }

    attribute_map = {
        'content_disposition': 'contentDisposition',
        'entity': 'entity',
        'headers': 'headers',
        'media_type': 'mediaType',
        'message_body_workers': 'messageBodyWorkers',
        'parent': 'parent',
        'providers': 'providers',
        'simple': 'simple',
        'form_data_content_disposition': 'formDataContentDisposition',
        'name': 'name',
        'value': 'value',
        'parameterized_headers': 'parameterizedHeaders'
    }

    def __init__(self, content_disposition=None, entity=None, headers=None, media_type=None, message_body_workers=None, parent=None, providers=None, simple=None, form_data_content_disposition=None, name=None, value=None, parameterized_headers=None):  # noqa: E501
        """FormDataBodyPart - a model defined in Swagger"""  # noqa: E501
        self._content_disposition = None
        self._entity = None
        self._headers = None
        self._media_type = None
        self._message_body_workers = None
        self._parent = None
        self._providers = None
        self._simple = None
        self._form_data_content_disposition = None
        self._name = None
        self._value = None
        self._parameterized_headers = None
        self.discriminator = None
        if content_disposition is not None:
            self.content_disposition = content_disposition
        if entity is not None:
            self.entity = entity
        if headers is not None:
            self.headers = headers
        if media_type is not None:
            self.media_type = media_type
        if message_body_workers is not None:
            self.message_body_workers = message_body_workers
        if parent is not None:
            self.parent = parent
        if providers is not None:
            self.providers = providers
        if simple is not None:
            self.simple = simple
        if form_data_content_disposition is not None:
            self.form_data_content_disposition = form_data_content_disposition
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if parameterized_headers is not None:
            self.parameterized_headers = parameterized_headers

    @property
    def content_disposition(self):
        """Gets the content_disposition of this FormDataBodyPart.  # noqa: E501


        :return: The content_disposition of this FormDataBodyPart.  # noqa: E501
        :rtype: ContentDisposition
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this FormDataBodyPart.


        :param content_disposition: The content_disposition of this FormDataBodyPart.  # noqa: E501
        :type: ContentDisposition
        """

        self._content_disposition = content_disposition

    @property
    def entity(self):
        """Gets the entity of this FormDataBodyPart.  # noqa: E501


        :return: The entity of this FormDataBodyPart.  # noqa: E501
        :rtype: object
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this FormDataBodyPart.


        :param entity: The entity of this FormDataBodyPart.  # noqa: E501
        :type: object
        """

        self._entity = entity

    @property
    def headers(self):
        """Gets the headers of this FormDataBodyPart.  # noqa: E501


        :return: The headers of this FormDataBodyPart.  # noqa: E501
        :rtype: FormDataMultiPartHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this FormDataBodyPart.


        :param headers: The headers of this FormDataBodyPart.  # noqa: E501
        :type: FormDataMultiPartHeaders
        """

        self._headers = headers

    @property
    def media_type(self):
        """Gets the media_type of this FormDataBodyPart.  # noqa: E501


        :return: The media_type of this FormDataBodyPart.  # noqa: E501
        :rtype: FormDataMultiPartMediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this FormDataBodyPart.


        :param media_type: The media_type of this FormDataBodyPart.  # noqa: E501
        :type: FormDataMultiPartMediaType
        """

        self._media_type = media_type

    @property
    def message_body_workers(self):
        """Gets the message_body_workers of this FormDataBodyPart.  # noqa: E501


        :return: The message_body_workers of this FormDataBodyPart.  # noqa: E501
        :rtype: MessageBodyWorkers
        """
        return self._message_body_workers

    @message_body_workers.setter
    def message_body_workers(self, message_body_workers):
        """Sets the message_body_workers of this FormDataBodyPart.


        :param message_body_workers: The message_body_workers of this FormDataBodyPart.  # noqa: E501
        :type: MessageBodyWorkers
        """

        self._message_body_workers = message_body_workers

    @property
    def parent(self):
        """Gets the parent of this FormDataBodyPart.  # noqa: E501


        :return: The parent of this FormDataBodyPart.  # noqa: E501
        :rtype: MultiPart
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this FormDataBodyPart.


        :param parent: The parent of this FormDataBodyPart.  # noqa: E501
        :type: MultiPart
        """

        self._parent = parent

    @property
    def providers(self):
        """Gets the providers of this FormDataBodyPart.  # noqa: E501


        :return: The providers of this FormDataBodyPart.  # noqa: E501
        :rtype: object
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this FormDataBodyPart.


        :param providers: The providers of this FormDataBodyPart.  # noqa: E501
        :type: object
        """

        self._providers = providers

    @property
    def simple(self):
        """Gets the simple of this FormDataBodyPart.  # noqa: E501


        :return: The simple of this FormDataBodyPart.  # noqa: E501
        :rtype: bool
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this FormDataBodyPart.


        :param simple: The simple of this FormDataBodyPart.  # noqa: E501
        :type: bool
        """

        self._simple = simple

    @property
    def form_data_content_disposition(self):
        """Gets the form_data_content_disposition of this FormDataBodyPart.  # noqa: E501


        :return: The form_data_content_disposition of this FormDataBodyPart.  # noqa: E501
        :rtype: FormDataContentDisposition
        """
        return self._form_data_content_disposition

    @form_data_content_disposition.setter
    def form_data_content_disposition(self, form_data_content_disposition):
        """Sets the form_data_content_disposition of this FormDataBodyPart.


        :param form_data_content_disposition: The form_data_content_disposition of this FormDataBodyPart.  # noqa: E501
        :type: FormDataContentDisposition
        """

        self._form_data_content_disposition = form_data_content_disposition

    @property
    def name(self):
        """Gets the name of this FormDataBodyPart.  # noqa: E501


        :return: The name of this FormDataBodyPart.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormDataBodyPart.


        :param name: The name of this FormDataBodyPart.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this FormDataBodyPart.  # noqa: E501


        :return: The value of this FormDataBodyPart.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FormDataBodyPart.


        :param value: The value of this FormDataBodyPart.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def parameterized_headers(self):
        """Gets the parameterized_headers of this FormDataBodyPart.  # noqa: E501


        :return: The parameterized_headers of this FormDataBodyPart.  # noqa: E501
        :rtype: FormDataMultiPartHeaders
        """
        return self._parameterized_headers

    @parameterized_headers.setter
    def parameterized_headers(self, parameterized_headers):
        """Sets the parameterized_headers of this FormDataBodyPart.


        :param parameterized_headers: The parameterized_headers of this FormDataBodyPart.  # noqa: E501
        :type: FormDataMultiPartHeaders
        """

        self._parameterized_headers = parameterized_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormDataBodyPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormDataBodyPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
