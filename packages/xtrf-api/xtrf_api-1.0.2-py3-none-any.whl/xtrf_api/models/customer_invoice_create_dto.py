# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerInvoiceCreateDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'tasks_ids': 'list[int]',
        'prepayments_ids': 'list[int]'
    }

    attribute_map = {
        'type': 'type',
        'tasks_ids': 'tasksIds',
        'prepayments_ids': 'prepaymentsIds'
    }

    def __init__(self, type=None, tasks_ids=None, prepayments_ids=None):  # noqa: E501
        """CustomerInvoiceCreateDTO - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._tasks_ids = None
        self._prepayments_ids = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if tasks_ids is not None:
            self.tasks_ids = tasks_ids
        if prepayments_ids is not None:
            self.prepayments_ids = prepayments_ids

    @property
    def type(self):
        """Gets the type of this CustomerInvoiceCreateDTO.  # noqa: E501


        :return: The type of this CustomerInvoiceCreateDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomerInvoiceCreateDTO.


        :param type: The type of this CustomerInvoiceCreateDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["FINAL", "DRAFT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tasks_ids(self):
        """Gets the tasks_ids of this CustomerInvoiceCreateDTO.  # noqa: E501


        :return: The tasks_ids of this CustomerInvoiceCreateDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._tasks_ids

    @tasks_ids.setter
    def tasks_ids(self, tasks_ids):
        """Sets the tasks_ids of this CustomerInvoiceCreateDTO.


        :param tasks_ids: The tasks_ids of this CustomerInvoiceCreateDTO.  # noqa: E501
        :type: list[int]
        """

        self._tasks_ids = tasks_ids

    @property
    def prepayments_ids(self):
        """Gets the prepayments_ids of this CustomerInvoiceCreateDTO.  # noqa: E501


        :return: The prepayments_ids of this CustomerInvoiceCreateDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._prepayments_ids

    @prepayments_ids.setter
    def prepayments_ids(self, prepayments_ids):
        """Sets the prepayments_ids of this CustomerInvoiceCreateDTO.


        :param prepayments_ids: The prepayments_ids of this CustomerInvoiceCreateDTO.  # noqa: E501
        :type: list[int]
        """

        self._prepayments_ids = prepayments_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerInvoiceCreateDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInvoiceCreateDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
