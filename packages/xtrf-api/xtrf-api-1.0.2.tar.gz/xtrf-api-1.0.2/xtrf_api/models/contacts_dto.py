# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_id': 'int',
        'send_back_to_id': 'int',
        'additional_ids': 'list[int]'
    }

    attribute_map = {
        'primary_id': 'primaryId',
        'send_back_to_id': 'sendBackToId',
        'additional_ids': 'additionalIds'
    }

    def __init__(self, primary_id=None, send_back_to_id=None, additional_ids=None):  # noqa: E501
        """ContactsDTO - a model defined in Swagger"""  # noqa: E501
        self._primary_id = None
        self._send_back_to_id = None
        self._additional_ids = None
        self.discriminator = None
        if primary_id is not None:
            self.primary_id = primary_id
        if send_back_to_id is not None:
            self.send_back_to_id = send_back_to_id
        if additional_ids is not None:
            self.additional_ids = additional_ids

    @property
    def primary_id(self):
        """Gets the primary_id of this ContactsDTO.  # noqa: E501


        :return: The primary_id of this ContactsDTO.  # noqa: E501
        :rtype: int
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """Sets the primary_id of this ContactsDTO.


        :param primary_id: The primary_id of this ContactsDTO.  # noqa: E501
        :type: int
        """

        self._primary_id = primary_id

    @property
    def send_back_to_id(self):
        """Gets the send_back_to_id of this ContactsDTO.  # noqa: E501


        :return: The send_back_to_id of this ContactsDTO.  # noqa: E501
        :rtype: int
        """
        return self._send_back_to_id

    @send_back_to_id.setter
    def send_back_to_id(self, send_back_to_id):
        """Sets the send_back_to_id of this ContactsDTO.


        :param send_back_to_id: The send_back_to_id of this ContactsDTO.  # noqa: E501
        :type: int
        """

        self._send_back_to_id = send_back_to_id

    @property
    def additional_ids(self):
        """Gets the additional_ids of this ContactsDTO.  # noqa: E501


        :return: The additional_ids of this ContactsDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._additional_ids

    @additional_ids.setter
    def additional_ids(self, additional_ids):
        """Sets the additional_ids of this ContactsDTO.


        :param additional_ids: The additional_ids of this ContactsDTO.  # noqa: E501
        :type: list[int]
        """

        self._additional_ids = additional_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
