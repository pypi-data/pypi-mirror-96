# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrencyHistoryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_rate': 'str',
        'date_from': 'TimeDTO',
        'origin_details': 'str',
        'publication_date': 'TimeDTO',
        'last_modification': 'TimeDTO'
    }

    attribute_map = {
        'exchange_rate': 'exchangeRate',
        'date_from': 'dateFrom',
        'origin_details': 'originDetails',
        'publication_date': 'publicationDate',
        'last_modification': 'lastModification'
    }

    def __init__(self, exchange_rate=None, date_from=None, origin_details=None, publication_date=None, last_modification=None):  # noqa: E501
        """CurrencyHistoryDTO - a model defined in Swagger"""  # noqa: E501
        self._exchange_rate = None
        self._date_from = None
        self._origin_details = None
        self._publication_date = None
        self._last_modification = None
        self.discriminator = None
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if date_from is not None:
            self.date_from = date_from
        if origin_details is not None:
            self.origin_details = origin_details
        if publication_date is not None:
            self.publication_date = publication_date
        if last_modification is not None:
            self.last_modification = last_modification

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this CurrencyHistoryDTO.  # noqa: E501


        :return: The exchange_rate of this CurrencyHistoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this CurrencyHistoryDTO.


        :param exchange_rate: The exchange_rate of this CurrencyHistoryDTO.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def date_from(self):
        """Gets the date_from of this CurrencyHistoryDTO.  # noqa: E501


        :return: The date_from of this CurrencyHistoryDTO.  # noqa: E501
        :rtype: TimeDTO
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this CurrencyHistoryDTO.


        :param date_from: The date_from of this CurrencyHistoryDTO.  # noqa: E501
        :type: TimeDTO
        """

        self._date_from = date_from

    @property
    def origin_details(self):
        """Gets the origin_details of this CurrencyHistoryDTO.  # noqa: E501


        :return: The origin_details of this CurrencyHistoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._origin_details

    @origin_details.setter
    def origin_details(self, origin_details):
        """Sets the origin_details of this CurrencyHistoryDTO.


        :param origin_details: The origin_details of this CurrencyHistoryDTO.  # noqa: E501
        :type: str
        """

        self._origin_details = origin_details

    @property
    def publication_date(self):
        """Gets the publication_date of this CurrencyHistoryDTO.  # noqa: E501


        :return: The publication_date of this CurrencyHistoryDTO.  # noqa: E501
        :rtype: TimeDTO
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this CurrencyHistoryDTO.


        :param publication_date: The publication_date of this CurrencyHistoryDTO.  # noqa: E501
        :type: TimeDTO
        """

        self._publication_date = publication_date

    @property
    def last_modification(self):
        """Gets the last_modification of this CurrencyHistoryDTO.  # noqa: E501


        :return: The last_modification of this CurrencyHistoryDTO.  # noqa: E501
        :rtype: TimeDTO
        """
        return self._last_modification

    @last_modification.setter
    def last_modification(self, last_modification):
        """Sets the last_modification of this CurrencyHistoryDTO.


        :param last_modification: The last_modification of this CurrencyHistoryDTO.  # noqa: E501
        :type: TimeDTO
        """

        self._last_modification = last_modification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyHistoryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyHistoryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
