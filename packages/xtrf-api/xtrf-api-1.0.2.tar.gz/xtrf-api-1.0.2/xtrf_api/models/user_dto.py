# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'login': 'str',
        'email': 'str',
        'user_group_name': 'str',
        'mobile_phone': 'str',
        'gender': 'str',
        'time_zone_id': 'str',
        'position_name': 'str',
        'phone': 'str',
        'custom_fields': 'list[CustomFieldDTO]'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'login': 'login',
        'email': 'email',
        'user_group_name': 'userGroupName',
        'mobile_phone': 'mobilePhone',
        'gender': 'gender',
        'time_zone_id': 'timeZoneId',
        'position_name': 'positionName',
        'phone': 'phone',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, first_name=None, last_name=None, login=None, email=None, user_group_name=None, mobile_phone=None, gender=None, time_zone_id=None, position_name=None, phone=None, custom_fields=None):  # noqa: E501
        """UserDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._login = None
        self._email = None
        self._user_group_name = None
        self._mobile_phone = None
        self._gender = None
        self._time_zone_id = None
        self._position_name = None
        self._phone = None
        self._custom_fields = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if login is not None:
            self.login = login
        if email is not None:
            self.email = email
        if user_group_name is not None:
            self.user_group_name = user_group_name
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if gender is not None:
            self.gender = gender
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if position_name is not None:
            self.position_name = position_name
        if phone is not None:
            self.phone = phone
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this UserDTO.  # noqa: E501


        :return: The id of this UserDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDTO.


        :param id: The id of this UserDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this UserDTO.  # noqa: E501


        :return: The first_name of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDTO.


        :param first_name: The first_name of this UserDTO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDTO.  # noqa: E501


        :return: The last_name of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDTO.


        :param last_name: The last_name of this UserDTO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login(self):
        """Gets the login of this UserDTO.  # noqa: E501


        :return: The login of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserDTO.


        :param login: The login of this UserDTO.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def email(self):
        """Gets the email of this UserDTO.  # noqa: E501


        :return: The email of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDTO.


        :param email: The email of this UserDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def user_group_name(self):
        """Gets the user_group_name of this UserDTO.  # noqa: E501


        :return: The user_group_name of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_group_name

    @user_group_name.setter
    def user_group_name(self, user_group_name):
        """Sets the user_group_name of this UserDTO.


        :param user_group_name: The user_group_name of this UserDTO.  # noqa: E501
        :type: str
        """

        self._user_group_name = user_group_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this UserDTO.  # noqa: E501


        :return: The mobile_phone of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this UserDTO.


        :param mobile_phone: The mobile_phone of this UserDTO.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def gender(self):
        """Gets the gender of this UserDTO.  # noqa: E501


        :return: The gender of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserDTO.


        :param gender: The gender of this UserDTO.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this UserDTO.  # noqa: E501


        :return: The time_zone_id of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this UserDTO.


        :param time_zone_id: The time_zone_id of this UserDTO.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def position_name(self):
        """Gets the position_name of this UserDTO.  # noqa: E501


        :return: The position_name of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._position_name

    @position_name.setter
    def position_name(self, position_name):
        """Sets the position_name of this UserDTO.


        :param position_name: The position_name of this UserDTO.  # noqa: E501
        :type: str
        """

        self._position_name = position_name

    @property
    def phone(self):
        """Gets the phone of this UserDTO.  # noqa: E501


        :return: The phone of this UserDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserDTO.


        :param phone: The phone of this UserDTO.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UserDTO.  # noqa: E501


        :return: The custom_fields of this UserDTO.  # noqa: E501
        :rtype: list[CustomFieldDTO]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UserDTO.


        :param custom_fields: The custom_fields of this UserDTO.  # noqa: E501
        :type: list[CustomFieldDTO]
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
