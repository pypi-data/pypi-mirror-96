# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManyValuesPerTypeDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculation_unit': 'list[CalculationUnitDTO]',
        'category': 'list[CategoryDTO]',
        'country': 'list[CountryDTO]',
        'currency': 'list[CurrencyDTO]',
        'industry': 'list[IndustryDTO]',
        'job_type': 'list[JobTypeDTO]',
        'language': 'list[LanguageDTO]',
        'lead_source': 'list[LeadSourceDTO]',
        'person_department': 'list[PersonDepartmentDTO]',
        'person_position': 'list[PersonPositionDTO]',
        'province': 'list[ProvinceDTO]',
        'specialization': 'list[LanguageSpecializationDTO]'
    }

    attribute_map = {
        'calculation_unit': 'calculationUnit',
        'category': 'category',
        'country': 'country',
        'currency': 'currency',
        'industry': 'industry',
        'job_type': 'jobType',
        'language': 'language',
        'lead_source': 'leadSource',
        'person_department': 'personDepartment',
        'person_position': 'personPosition',
        'province': 'province',
        'specialization': 'specialization'
    }

    def __init__(self, calculation_unit=None, category=None, country=None, currency=None, industry=None, job_type=None, language=None, lead_source=None, person_department=None, person_position=None, province=None, specialization=None):  # noqa: E501
        """ManyValuesPerTypeDTO - a model defined in Swagger"""  # noqa: E501
        self._calculation_unit = None
        self._category = None
        self._country = None
        self._currency = None
        self._industry = None
        self._job_type = None
        self._language = None
        self._lead_source = None
        self._person_department = None
        self._person_position = None
        self._province = None
        self._specialization = None
        self.discriminator = None
        if calculation_unit is not None:
            self.calculation_unit = calculation_unit
        if category is not None:
            self.category = category
        if country is not None:
            self.country = country
        if currency is not None:
            self.currency = currency
        if industry is not None:
            self.industry = industry
        if job_type is not None:
            self.job_type = job_type
        if language is not None:
            self.language = language
        if lead_source is not None:
            self.lead_source = lead_source
        if person_department is not None:
            self.person_department = person_department
        if person_position is not None:
            self.person_position = person_position
        if province is not None:
            self.province = province
        if specialization is not None:
            self.specialization = specialization

    @property
    def calculation_unit(self):
        """Gets the calculation_unit of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The calculation_unit of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[CalculationUnitDTO]
        """
        return self._calculation_unit

    @calculation_unit.setter
    def calculation_unit(self, calculation_unit):
        """Sets the calculation_unit of this ManyValuesPerTypeDTO.


        :param calculation_unit: The calculation_unit of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[CalculationUnitDTO]
        """

        self._calculation_unit = calculation_unit

    @property
    def category(self):
        """Gets the category of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The category of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[CategoryDTO]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ManyValuesPerTypeDTO.


        :param category: The category of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[CategoryDTO]
        """

        self._category = category

    @property
    def country(self):
        """Gets the country of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The country of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[CountryDTO]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ManyValuesPerTypeDTO.


        :param country: The country of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[CountryDTO]
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The currency of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[CurrencyDTO]
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ManyValuesPerTypeDTO.


        :param currency: The currency of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[CurrencyDTO]
        """

        self._currency = currency

    @property
    def industry(self):
        """Gets the industry of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The industry of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[IndustryDTO]
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ManyValuesPerTypeDTO.


        :param industry: The industry of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[IndustryDTO]
        """

        self._industry = industry

    @property
    def job_type(self):
        """Gets the job_type of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The job_type of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[JobTypeDTO]
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this ManyValuesPerTypeDTO.


        :param job_type: The job_type of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[JobTypeDTO]
        """

        self._job_type = job_type

    @property
    def language(self):
        """Gets the language of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The language of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[LanguageDTO]
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ManyValuesPerTypeDTO.


        :param language: The language of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[LanguageDTO]
        """

        self._language = language

    @property
    def lead_source(self):
        """Gets the lead_source of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The lead_source of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[LeadSourceDTO]
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this ManyValuesPerTypeDTO.


        :param lead_source: The lead_source of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[LeadSourceDTO]
        """

        self._lead_source = lead_source

    @property
    def person_department(self):
        """Gets the person_department of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The person_department of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[PersonDepartmentDTO]
        """
        return self._person_department

    @person_department.setter
    def person_department(self, person_department):
        """Sets the person_department of this ManyValuesPerTypeDTO.


        :param person_department: The person_department of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[PersonDepartmentDTO]
        """

        self._person_department = person_department

    @property
    def person_position(self):
        """Gets the person_position of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The person_position of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[PersonPositionDTO]
        """
        return self._person_position

    @person_position.setter
    def person_position(self, person_position):
        """Sets the person_position of this ManyValuesPerTypeDTO.


        :param person_position: The person_position of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[PersonPositionDTO]
        """

        self._person_position = person_position

    @property
    def province(self):
        """Gets the province of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The province of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[ProvinceDTO]
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ManyValuesPerTypeDTO.


        :param province: The province of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[ProvinceDTO]
        """

        self._province = province

    @property
    def specialization(self):
        """Gets the specialization of this ManyValuesPerTypeDTO.  # noqa: E501


        :return: The specialization of this ManyValuesPerTypeDTO.  # noqa: E501
        :rtype: list[LanguageSpecializationDTO]
        """
        return self._specialization

    @specialization.setter
    def specialization(self, specialization):
        """Sets the specialization of this ManyValuesPerTypeDTO.


        :param specialization: The specialization of this ManyValuesPerTypeDTO.  # noqa: E501
        :type: list[LanguageSpecializationDTO]
        """

        self._specialization = specialization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManyValuesPerTypeDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManyValuesPerTypeDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
