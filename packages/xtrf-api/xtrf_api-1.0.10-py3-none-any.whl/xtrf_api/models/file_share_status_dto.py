# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileShareStatusDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_id': 'str',
        'successful': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'file_id': 'fileId',
        'successful': 'successful',
        'message': 'message'
    }

    def __init__(self, file_id=None, successful=None, message=None):  # noqa: E501
        """FileShareStatusDto - a model defined in Swagger"""  # noqa: E501
        self._file_id = None
        self._successful = None
        self._message = None
        self.discriminator = None
        if file_id is not None:
            self.file_id = file_id
        if successful is not None:
            self.successful = successful
        if message is not None:
            self.message = message

    @property
    def file_id(self):
        """Gets the file_id of this FileShareStatusDto.  # noqa: E501


        :return: The file_id of this FileShareStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileShareStatusDto.


        :param file_id: The file_id of this FileShareStatusDto.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def successful(self):
        """Gets the successful of this FileShareStatusDto.  # noqa: E501


        :return: The successful of this FileShareStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this FileShareStatusDto.


        :param successful: The successful of this FileShareStatusDto.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def message(self):
        """Gets the message of this FileShareStatusDto.  # noqa: E501


        :return: The message of this FileShareStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FileShareStatusDto.


        :param message: The message of this FileShareStatusDto.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileShareStatusDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileShareStatusDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
