# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerDetailsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'vat_ue': 'str',
        'address_line': 'str',
        'city': 'str',
        'postal_code': 'str',
        'country_id': 'int',
        'country': 'str'
    }

    attribute_map = {
        'name': 'name',
        'vat_ue': 'vatUE',
        'address_line': 'addressLine',
        'city': 'city',
        'postal_code': 'postalCode',
        'country_id': 'countryId',
        'country': 'country'
    }

    def __init__(self, name=None, vat_ue=None, address_line=None, city=None, postal_code=None, country_id=None, country=None):  # noqa: E501
        """CustomerDetailsDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._vat_ue = None
        self._address_line = None
        self._city = None
        self._postal_code = None
        self._country_id = None
        self._country = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if vat_ue is not None:
            self.vat_ue = vat_ue
        if address_line is not None:
            self.address_line = address_line
        if city is not None:
            self.city = city
        if postal_code is not None:
            self.postal_code = postal_code
        if country_id is not None:
            self.country_id = country_id
        if country is not None:
            self.country = country

    @property
    def name(self):
        """Gets the name of this CustomerDetailsDTO.  # noqa: E501


        :return: The name of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerDetailsDTO.


        :param name: The name of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vat_ue(self):
        """Gets the vat_ue of this CustomerDetailsDTO.  # noqa: E501


        :return: The vat_ue of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._vat_ue

    @vat_ue.setter
    def vat_ue(self, vat_ue):
        """Sets the vat_ue of this CustomerDetailsDTO.


        :param vat_ue: The vat_ue of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._vat_ue = vat_ue

    @property
    def address_line(self):
        """Gets the address_line of this CustomerDetailsDTO.  # noqa: E501


        :return: The address_line of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this CustomerDetailsDTO.


        :param address_line: The address_line of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._address_line = address_line

    @property
    def city(self):
        """Gets the city of this CustomerDetailsDTO.  # noqa: E501


        :return: The city of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerDetailsDTO.


        :param city: The city of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this CustomerDetailsDTO.  # noqa: E501


        :return: The postal_code of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustomerDetailsDTO.


        :param postal_code: The postal_code of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_id(self):
        """Gets the country_id of this CustomerDetailsDTO.  # noqa: E501


        :return: The country_id of this CustomerDetailsDTO.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CustomerDetailsDTO.


        :param country_id: The country_id of this CustomerDetailsDTO.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def country(self):
        """Gets the country of this CustomerDetailsDTO.  # noqa: E501


        :return: The country of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerDetailsDTO.


        :param country: The country of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerDetailsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerDetailsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
