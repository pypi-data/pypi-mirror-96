# coding: utf-8

"""
    XTRF Home Portal API

    XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here:   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstructionsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_customer': 'str',
        'for_provider': 'str',
        'internal': 'str',
        'payment_note_for_customer': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'from_customer': 'fromCustomer',
        'for_provider': 'forProvider',
        'internal': 'internal',
        'payment_note_for_customer': 'paymentNoteForCustomer',
        'notes': 'notes'
    }

    def __init__(self, from_customer=None, for_provider=None, internal=None, payment_note_for_customer=None, notes=None):  # noqa: E501
        """InstructionsDTO - a model defined in Swagger"""  # noqa: E501
        self._from_customer = None
        self._for_provider = None
        self._internal = None
        self._payment_note_for_customer = None
        self._notes = None
        self.discriminator = None
        if from_customer is not None:
            self.from_customer = from_customer
        if for_provider is not None:
            self.for_provider = for_provider
        if internal is not None:
            self.internal = internal
        if payment_note_for_customer is not None:
            self.payment_note_for_customer = payment_note_for_customer
        if notes is not None:
            self.notes = notes

    @property
    def from_customer(self):
        """Gets the from_customer of this InstructionsDTO.  # noqa: E501


        :return: The from_customer of this InstructionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._from_customer

    @from_customer.setter
    def from_customer(self, from_customer):
        """Sets the from_customer of this InstructionsDTO.


        :param from_customer: The from_customer of this InstructionsDTO.  # noqa: E501
        :type: str
        """

        self._from_customer = from_customer

    @property
    def for_provider(self):
        """Gets the for_provider of this InstructionsDTO.  # noqa: E501


        :return: The for_provider of this InstructionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._for_provider

    @for_provider.setter
    def for_provider(self, for_provider):
        """Sets the for_provider of this InstructionsDTO.


        :param for_provider: The for_provider of this InstructionsDTO.  # noqa: E501
        :type: str
        """

        self._for_provider = for_provider

    @property
    def internal(self):
        """Gets the internal of this InstructionsDTO.  # noqa: E501


        :return: The internal of this InstructionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this InstructionsDTO.


        :param internal: The internal of this InstructionsDTO.  # noqa: E501
        :type: str
        """

        self._internal = internal

    @property
    def payment_note_for_customer(self):
        """Gets the payment_note_for_customer of this InstructionsDTO.  # noqa: E501


        :return: The payment_note_for_customer of this InstructionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._payment_note_for_customer

    @payment_note_for_customer.setter
    def payment_note_for_customer(self, payment_note_for_customer):
        """Sets the payment_note_for_customer of this InstructionsDTO.


        :param payment_note_for_customer: The payment_note_for_customer of this InstructionsDTO.  # noqa: E501
        :type: str
        """

        self._payment_note_for_customer = payment_note_for_customer

    @property
    def notes(self):
        """Gets the notes of this InstructionsDTO.  # noqa: E501


        :return: The notes of this InstructionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InstructionsDTO.


        :param notes: The notes of this InstructionsDTO.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstructionsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstructionsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
