# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import incoming_connection_complete_pb2 as incoming__connection__complete__pb2
from . import incoming_record_packet_push_pb2 as incoming__record__packet__push__pb2
from . import plugin_initialization_data_pb2 as plugin__initialization__data__pb2
from . import transport_pb2 as transport__pb2


class SdkToolStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfirmSdkToolServiceConnection = channel.unary_unary(
                '/sdk.SdkTool/ConfirmSdkToolServiceConnection',
                request_serializer=transport__pb2.Empty.SerializeToString,
                response_deserializer=transport__pb2.ReturnStatus.FromString,
                )
        self.InitializeSdkPlugin = channel.unary_unary(
                '/sdk.SdkTool/InitializeSdkPlugin',
                request_serializer=plugin__initialization__data__pb2.PluginInitializationData.SerializeToString,
                response_deserializer=transport__pb2.ReturnStatus.FromString,
                )
        self.PushIncomingRecordPacket = channel.unary_unary(
                '/sdk.SdkTool/PushIncomingRecordPacket',
                request_serializer=incoming__record__packet__push__pb2.IncomingRecordPacketPush.SerializeToString,
                response_deserializer=transport__pb2.ReturnStatus.FromString,
                )
        self.NotifyIncomingConnectionComplete = channel.unary_unary(
                '/sdk.SdkTool/NotifyIncomingConnectionComplete',
                request_serializer=incoming__connection__complete__pb2.IncomingConnectionComplete.SerializeToString,
                response_deserializer=transport__pb2.ReturnStatus.FromString,
                )
        self.NotifyPluginComplete = channel.unary_unary(
                '/sdk.SdkTool/NotifyPluginComplete',
                request_serializer=transport__pb2.Empty.SerializeToString,
                response_deserializer=transport__pb2.ReturnStatus.FromString,
                )


class SdkToolServicer(object):
    """Missing associated documentation comment in .proto file"""

    def ConfirmSdkToolServiceConnection(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeSdkPlugin(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushIncomingRecordPacket(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyIncomingConnectionComplete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyPluginComplete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SdkToolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfirmSdkToolServiceConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmSdkToolServiceConnection,
                    request_deserializer=transport__pb2.Empty.FromString,
                    response_serializer=transport__pb2.ReturnStatus.SerializeToString,
            ),
            'InitializeSdkPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeSdkPlugin,
                    request_deserializer=plugin__initialization__data__pb2.PluginInitializationData.FromString,
                    response_serializer=transport__pb2.ReturnStatus.SerializeToString,
            ),
            'PushIncomingRecordPacket': grpc.unary_unary_rpc_method_handler(
                    servicer.PushIncomingRecordPacket,
                    request_deserializer=incoming__record__packet__push__pb2.IncomingRecordPacketPush.FromString,
                    response_serializer=transport__pb2.ReturnStatus.SerializeToString,
            ),
            'NotifyIncomingConnectionComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyIncomingConnectionComplete,
                    request_deserializer=incoming__connection__complete__pb2.IncomingConnectionComplete.FromString,
                    response_serializer=transport__pb2.ReturnStatus.SerializeToString,
            ),
            'NotifyPluginComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyPluginComplete,
                    request_deserializer=transport__pb2.Empty.FromString,
                    response_serializer=transport__pb2.ReturnStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sdk.SdkTool', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SdkTool(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def ConfirmSdkToolServiceConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sdk.SdkTool/ConfirmSdkToolServiceConnection',
            transport__pb2.Empty.SerializeToString,
            transport__pb2.ReturnStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeSdkPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sdk.SdkTool/InitializeSdkPlugin',
            plugin__initialization__data__pb2.PluginInitializationData.SerializeToString,
            transport__pb2.ReturnStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushIncomingRecordPacket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sdk.SdkTool/PushIncomingRecordPacket',
            incoming__record__packet__push__pb2.IncomingRecordPacketPush.SerializeToString,
            transport__pb2.ReturnStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyIncomingConnectionComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sdk.SdkTool/NotifyIncomingConnectionComplete',
            incoming__connection__complete__pb2.IncomingConnectionComplete.SerializeToString,
            transport__pb2.ReturnStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyPluginComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sdk.SdkTool/NotifyPluginComplete',
            transport__pb2.Empty.SerializeToString,
            transport__pb2.ReturnStatus.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
