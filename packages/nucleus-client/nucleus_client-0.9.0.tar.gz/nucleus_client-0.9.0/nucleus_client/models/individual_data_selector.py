# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IndividualDataSelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interval': 'str',
        'limit': 'float',
        'multi_field_limit': 'dict(str, object)',
        'order_by': 'list[list[str]]',
        'unique_limit': 'dict(str, object)',
        'where': 'dict(str, object)'
    }

    attribute_map = {
        'interval': 'interval',
        'limit': 'limit',
        'multi_field_limit': 'multi_field_limit',
        'order_by': 'order_by',
        'unique_limit': 'unique_limit',
        'where': 'where'
    }

    def __init__(self, interval=None, limit=None, multi_field_limit=None, order_by=None, unique_limit=None, where=None):  # noqa: E501
        """IndividualDataSelector - a model defined in OpenAPI"""  # noqa: E501

        self._interval = None
        self._limit = None
        self._multi_field_limit = None
        self._order_by = None
        self._unique_limit = None
        self._where = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if limit is not None:
            self.limit = limit
        if multi_field_limit is not None:
            self.multi_field_limit = multi_field_limit
        if order_by is not None:
            self.order_by = order_by
        if unique_limit is not None:
            self.unique_limit = unique_limit
        if where is not None:
            self.where = where

    @property
    def interval(self):
        """Gets the interval of this IndividualDataSelector.  # noqa: E501


        :return: The interval of this IndividualDataSelector.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this IndividualDataSelector.


        :param interval: The interval of this IndividualDataSelector.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def limit(self):
        """Gets the limit of this IndividualDataSelector.  # noqa: E501


        :return: The limit of this IndividualDataSelector.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this IndividualDataSelector.


        :param limit: The limit of this IndividualDataSelector.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def multi_field_limit(self):
        """Gets the multi_field_limit of this IndividualDataSelector.  # noqa: E501


        :return: The multi_field_limit of this IndividualDataSelector.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._multi_field_limit

    @multi_field_limit.setter
    def multi_field_limit(self, multi_field_limit):
        """Sets the multi_field_limit of this IndividualDataSelector.


        :param multi_field_limit: The multi_field_limit of this IndividualDataSelector.  # noqa: E501
        :type: dict(str, object)
        """

        self._multi_field_limit = multi_field_limit

    @property
    def order_by(self):
        """Gets the order_by of this IndividualDataSelector.  # noqa: E501


        :return: The order_by of this IndividualDataSelector.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this IndividualDataSelector.


        :param order_by: The order_by of this IndividualDataSelector.  # noqa: E501
        :type: list[list[str]]
        """

        self._order_by = order_by

    @property
    def unique_limit(self):
        """Gets the unique_limit of this IndividualDataSelector.  # noqa: E501


        :return: The unique_limit of this IndividualDataSelector.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._unique_limit

    @unique_limit.setter
    def unique_limit(self, unique_limit):
        """Sets the unique_limit of this IndividualDataSelector.


        :param unique_limit: The unique_limit of this IndividualDataSelector.  # noqa: E501
        :type: dict(str, object)
        """

        self._unique_limit = unique_limit

    @property
    def where(self):
        """Gets the where of this IndividualDataSelector.  # noqa: E501


        :return: The where of this IndividualDataSelector.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this IndividualDataSelector.


        :param where: The where of this IndividualDataSelector.  # noqa: E501
        :type: dict(str, object)
        """

        self._where = where

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividualDataSelector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
