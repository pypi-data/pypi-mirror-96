# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_upload_aws_access_key_id': 'str',
        'client_upload_aws_secret_access_key': 'str',
        'colors': 'dict(str, object)',
        'dataset_metadata': 'dict(str, object)',
        'field_metadata': 'dict(str, object)'
    }

    attribute_map = {
        'id': '_id',
        'client_upload_aws_access_key_id': 'client_upload_aws_access_key_id',
        'client_upload_aws_secret_access_key': 'client_upload_aws_secret_access_key',
        'colors': 'colors',
        'dataset_metadata': 'dataset_metadata',
        'field_metadata': 'field_metadata'
    }

    def __init__(self, id=None, client_upload_aws_access_key_id=None, client_upload_aws_secret_access_key=None, colors=None, dataset_metadata=None, field_metadata=None):  # noqa: E501
        """ClientSettings - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_upload_aws_access_key_id = None
        self._client_upload_aws_secret_access_key = None
        self._colors = None
        self._dataset_metadata = None
        self._field_metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_upload_aws_access_key_id is not None:
            self.client_upload_aws_access_key_id = client_upload_aws_access_key_id
        if client_upload_aws_secret_access_key is not None:
            self.client_upload_aws_secret_access_key = client_upload_aws_secret_access_key
        if colors is not None:
            self.colors = colors
        if dataset_metadata is not None:
            self.dataset_metadata = dataset_metadata
        if field_metadata is not None:
            self.field_metadata = field_metadata

    @property
    def id(self):
        """Gets the id of this ClientSettings.  # noqa: E501


        :return: The id of this ClientSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientSettings.


        :param id: The id of this ClientSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_upload_aws_access_key_id(self):
        """Gets the client_upload_aws_access_key_id of this ClientSettings.  # noqa: E501


        :return: The client_upload_aws_access_key_id of this ClientSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_upload_aws_access_key_id

    @client_upload_aws_access_key_id.setter
    def client_upload_aws_access_key_id(self, client_upload_aws_access_key_id):
        """Sets the client_upload_aws_access_key_id of this ClientSettings.


        :param client_upload_aws_access_key_id: The client_upload_aws_access_key_id of this ClientSettings.  # noqa: E501
        :type: str
        """

        self._client_upload_aws_access_key_id = client_upload_aws_access_key_id

    @property
    def client_upload_aws_secret_access_key(self):
        """Gets the client_upload_aws_secret_access_key of this ClientSettings.  # noqa: E501


        :return: The client_upload_aws_secret_access_key of this ClientSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_upload_aws_secret_access_key

    @client_upload_aws_secret_access_key.setter
    def client_upload_aws_secret_access_key(self, client_upload_aws_secret_access_key):
        """Sets the client_upload_aws_secret_access_key of this ClientSettings.


        :param client_upload_aws_secret_access_key: The client_upload_aws_secret_access_key of this ClientSettings.  # noqa: E501
        :type: str
        """

        self._client_upload_aws_secret_access_key = client_upload_aws_secret_access_key

    @property
    def colors(self):
        """Gets the colors of this ClientSettings.  # noqa: E501


        :return: The colors of this ClientSettings.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ClientSettings.


        :param colors: The colors of this ClientSettings.  # noqa: E501
        :type: dict(str, object)
        """

        self._colors = colors

    @property
    def dataset_metadata(self):
        """Gets the dataset_metadata of this ClientSettings.  # noqa: E501


        :return: The dataset_metadata of this ClientSettings.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dataset_metadata

    @dataset_metadata.setter
    def dataset_metadata(self, dataset_metadata):
        """Sets the dataset_metadata of this ClientSettings.


        :param dataset_metadata: The dataset_metadata of this ClientSettings.  # noqa: E501
        :type: dict(str, object)
        """

        self._dataset_metadata = dataset_metadata

    @property
    def field_metadata(self):
        """Gets the field_metadata of this ClientSettings.  # noqa: E501


        :return: The field_metadata of this ClientSettings.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._field_metadata

    @field_metadata.setter
    def field_metadata(self, field_metadata):
        """Sets the field_metadata of this ClientSettings.


        :param field_metadata: The field_metadata of this ClientSettings.  # noqa: E501
        :type: dict(str, object)
        """

        self._field_metadata = field_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
