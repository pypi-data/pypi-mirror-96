# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WriteConfigDruidOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count_unique': 'bool',
        'force_dimension': 'bool',
        'generate_display_list': 'bool'
    }

    attribute_map = {
        'count_unique': 'count_unique',
        'force_dimension': 'force_dimension',
        'generate_display_list': 'generate_display_list'
    }

    def __init__(self, count_unique=None, force_dimension=None, generate_display_list=None):  # noqa: E501
        """WriteConfigDruidOverride - a model defined in OpenAPI"""  # noqa: E501

        self._count_unique = None
        self._force_dimension = None
        self._generate_display_list = None
        self.discriminator = None

        if count_unique is not None:
            self.count_unique = count_unique
        if force_dimension is not None:
            self.force_dimension = force_dimension
        if generate_display_list is not None:
            self.generate_display_list = generate_display_list

    @property
    def count_unique(self):
        """Gets the count_unique of this WriteConfigDruidOverride.  # noqa: E501


        :return: The count_unique of this WriteConfigDruidOverride.  # noqa: E501
        :rtype: bool
        """
        return self._count_unique

    @count_unique.setter
    def count_unique(self, count_unique):
        """Sets the count_unique of this WriteConfigDruidOverride.


        :param count_unique: The count_unique of this WriteConfigDruidOverride.  # noqa: E501
        :type: bool
        """

        self._count_unique = count_unique

    @property
    def force_dimension(self):
        """Gets the force_dimension of this WriteConfigDruidOverride.  # noqa: E501


        :return: The force_dimension of this WriteConfigDruidOverride.  # noqa: E501
        :rtype: bool
        """
        return self._force_dimension

    @force_dimension.setter
    def force_dimension(self, force_dimension):
        """Sets the force_dimension of this WriteConfigDruidOverride.


        :param force_dimension: The force_dimension of this WriteConfigDruidOverride.  # noqa: E501
        :type: bool
        """

        self._force_dimension = force_dimension

    @property
    def generate_display_list(self):
        """Gets the generate_display_list of this WriteConfigDruidOverride.  # noqa: E501


        :return: The generate_display_list of this WriteConfigDruidOverride.  # noqa: E501
        :rtype: bool
        """
        return self._generate_display_list

    @generate_display_list.setter
    def generate_display_list(self, generate_display_list):
        """Sets the generate_display_list of this WriteConfigDruidOverride.


        :param generate_display_list: The generate_display_list of this WriteConfigDruidOverride.  # noqa: E501
        :type: bool
        """

        self._generate_display_list = generate_display_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteConfigDruidOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
