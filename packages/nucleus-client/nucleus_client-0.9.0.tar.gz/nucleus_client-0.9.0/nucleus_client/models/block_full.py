# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BlockFull(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'block_type_name': 'str',
        'dt_u': 'datetime',
        'settings': 'dict(str, object)'
    }

    attribute_map = {
        'id': '_id',
        'block_type_name': 'block_type_name',
        'dt_u': 'dt_u',
        'settings': 'settings'
    }

    def __init__(self, id=None, block_type_name=None, dt_u=None, settings=None):  # noqa: E501
        """BlockFull - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._block_type_name = None
        self._dt_u = None
        self._settings = None
        self.discriminator = None

        self.id = id
        self.block_type_name = block_type_name
        if dt_u is not None:
            self.dt_u = dt_u
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this BlockFull.  # noqa: E501


        :return: The id of this BlockFull.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlockFull.


        :param id: The id of this BlockFull.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def block_type_name(self):
        """Gets the block_type_name of this BlockFull.  # noqa: E501


        :return: The block_type_name of this BlockFull.  # noqa: E501
        :rtype: str
        """
        return self._block_type_name

    @block_type_name.setter
    def block_type_name(self, block_type_name):
        """Sets the block_type_name of this BlockFull.


        :param block_type_name: The block_type_name of this BlockFull.  # noqa: E501
        :type: str
        """
        if block_type_name is None:
            raise ValueError("Invalid value for `block_type_name`, must not be `None`")  # noqa: E501

        self._block_type_name = block_type_name

    @property
    def dt_u(self):
        """Gets the dt_u of this BlockFull.  # noqa: E501


        :return: The dt_u of this BlockFull.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this BlockFull.


        :param dt_u: The dt_u of this BlockFull.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def settings(self):
        """Gets the settings of this BlockFull.  # noqa: E501


        :return: The settings of this BlockFull.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this BlockFull.


        :param settings: The settings of this BlockFull.  # noqa: E501
        :type: dict(str, object)
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
