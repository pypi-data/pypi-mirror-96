# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class View(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'data': 'list[dict(str, object)]',
        'dt_u': 'datetime',
        'error': 'ViewError',
        'hash_key': 'str',
        'settings': 'dict(str, object)',
        'view_type': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'data': 'data',
        'dt_u': 'dt_u',
        'error': 'error',
        'hash_key': 'hash_key',
        'settings': 'settings',
        'view_type': 'view_type'
    }

    def __init__(self, id=None, client_id=None, data=None, dt_u=None, error=None, hash_key=None, settings=None, view_type=None):  # noqa: E501
        """View - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._data = None
        self._dt_u = None
        self._error = None
        self._hash_key = None
        self._settings = None
        self._view_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.client_id = client_id
        if data is not None:
            self.data = data
        if dt_u is not None:
            self.dt_u = dt_u
        if error is not None:
            self.error = error
        if hash_key is not None:
            self.hash_key = hash_key
        self.settings = settings
        self.view_type = view_type

    @property
    def id(self):
        """Gets the id of this View.  # noqa: E501


        :return: The id of this View.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this View.


        :param id: The id of this View.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this View.  # noqa: E501


        :return: The client_id of this View.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this View.


        :param client_id: The client_id of this View.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this View.  # noqa: E501


        :return: The data of this View.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this View.


        :param data: The data of this View.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._data = data

    @property
    def dt_u(self):
        """Gets the dt_u of this View.  # noqa: E501


        :return: The dt_u of this View.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this View.


        :param dt_u: The dt_u of this View.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def error(self):
        """Gets the error of this View.  # noqa: E501


        :return: The error of this View.  # noqa: E501
        :rtype: ViewError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this View.


        :param error: The error of this View.  # noqa: E501
        :type: ViewError
        """

        self._error = error

    @property
    def hash_key(self):
        """Gets the hash_key of this View.  # noqa: E501


        :return: The hash_key of this View.  # noqa: E501
        :rtype: str
        """
        return self._hash_key

    @hash_key.setter
    def hash_key(self, hash_key):
        """Sets the hash_key of this View.


        :param hash_key: The hash_key of this View.  # noqa: E501
        :type: str
        """

        self._hash_key = hash_key

    @property
    def settings(self):
        """Gets the settings of this View.  # noqa: E501


        :return: The settings of this View.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this View.


        :param settings: The settings of this View.  # noqa: E501
        :type: dict(str, object)
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def view_type(self):
        """Gets the view_type of this View.  # noqa: E501


        :return: The view_type of this View.  # noqa: E501
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this View.


        :param view_type: The view_type of this View.  # noqa: E501
        :type: str
        """
        if view_type is None:
            raise ValueError("Invalid value for `view_type`, must not be `None`")  # noqa: E501

        self._view_type = view_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, View):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
