# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Role(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'default_access': 'str',
        'description': 'str',
        'name': 'str',
        'permissions': 'list[RolePermission]',
        'slug': 'str',
        'user_ids': 'list[str]'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'default_access': 'default_access',
        'description': 'description',
        'name': 'name',
        'permissions': 'permissions',
        'slug': 'slug',
        'user_ids': 'user_ids'
    }

    def __init__(self, id=None, client_id=None, default_access=None, description=None, name=None, permissions=None, slug=None, user_ids=None):  # noqa: E501
        """Role - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._default_access = None
        self._description = None
        self._name = None
        self._permissions = None
        self._slug = None
        self._user_ids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.client_id = client_id
        self.default_access = default_access
        if description is not None:
            self.description = description
        self.name = name
        if permissions is not None:
            self.permissions = permissions
        if slug is not None:
            self.slug = slug
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def id(self):
        """Gets the id of this Role.  # noqa: E501


        :return: The id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Role.  # noqa: E501


        :return: The client_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Role.


        :param client_id: The client_id of this Role.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def default_access(self):
        """Gets the default_access of this Role.  # noqa: E501


        :return: The default_access of this Role.  # noqa: E501
        :rtype: str
        """
        return self._default_access

    @default_access.setter
    def default_access(self, default_access):
        """Sets the default_access of this Role.


        :param default_access: The default_access of this Role.  # noqa: E501
        :type: str
        """
        if default_access is None:
            raise ValueError("Invalid value for `default_access`, must not be `None`")  # noqa: E501

        self._default_access = default_access

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501


        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this Role.  # noqa: E501


        :return: The name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this Role.  # noqa: E501


        :return: The permissions of this Role.  # noqa: E501
        :rtype: list[RolePermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Role.


        :param permissions: The permissions of this Role.  # noqa: E501
        :type: list[RolePermission]
        """

        self._permissions = permissions

    @property
    def slug(self):
        """Gets the slug of this Role.  # noqa: E501


        :return: The slug of this Role.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Role.


        :param slug: The slug of this Role.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def user_ids(self):
        """Gets the user_ids of this Role.  # noqa: E501


        :return: The user_ids of this Role.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this Role.


        :param user_ids: The user_ids of this Role.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
