# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataViewMetricCalc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arg0': 'str',
        'arg1': 'str',
        'column1': 'str',
        'column2': 'str',
        'denominator': 'str',
        'numerator': 'str',
        'order_by': 'DataViewMetricOrderBy',
        'type': 'str',
        'value_column': 'str'
    }

    attribute_map = {
        'arg0': 'arg0',
        'arg1': 'arg1',
        'column1': 'column1',
        'column2': 'column2',
        'denominator': 'denominator',
        'numerator': 'numerator',
        'order_by': 'order_by',
        'type': 'type',
        'value_column': 'value_column'
    }

    def __init__(self, arg0=None, arg1=None, column1=None, column2=None, denominator=None, numerator=None, order_by=None, type=None, value_column=None):  # noqa: E501
        """DataViewMetricCalc - a model defined in OpenAPI"""  # noqa: E501

        self._arg0 = None
        self._arg1 = None
        self._column1 = None
        self._column2 = None
        self._denominator = None
        self._numerator = None
        self._order_by = None
        self._type = None
        self._value_column = None
        self.discriminator = None

        if arg0 is not None:
            self.arg0 = arg0
        if arg1 is not None:
            self.arg1 = arg1
        if column1 is not None:
            self.column1 = column1
        if column2 is not None:
            self.column2 = column2
        if denominator is not None:
            self.denominator = denominator
        if numerator is not None:
            self.numerator = numerator
        if order_by is not None:
            self.order_by = order_by
        self.type = type
        if value_column is not None:
            self.value_column = value_column

    @property
    def arg0(self):
        """Gets the arg0 of this DataViewMetricCalc.  # noqa: E501


        :return: The arg0 of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._arg0

    @arg0.setter
    def arg0(self, arg0):
        """Sets the arg0 of this DataViewMetricCalc.


        :param arg0: The arg0 of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._arg0 = arg0

    @property
    def arg1(self):
        """Gets the arg1 of this DataViewMetricCalc.  # noqa: E501


        :return: The arg1 of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._arg1

    @arg1.setter
    def arg1(self, arg1):
        """Sets the arg1 of this DataViewMetricCalc.


        :param arg1: The arg1 of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._arg1 = arg1

    @property
    def column1(self):
        """Gets the column1 of this DataViewMetricCalc.  # noqa: E501


        :return: The column1 of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._column1

    @column1.setter
    def column1(self, column1):
        """Sets the column1 of this DataViewMetricCalc.


        :param column1: The column1 of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._column1 = column1

    @property
    def column2(self):
        """Gets the column2 of this DataViewMetricCalc.  # noqa: E501


        :return: The column2 of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._column2

    @column2.setter
    def column2(self, column2):
        """Sets the column2 of this DataViewMetricCalc.


        :param column2: The column2 of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._column2 = column2

    @property
    def denominator(self):
        """Gets the denominator of this DataViewMetricCalc.  # noqa: E501


        :return: The denominator of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._denominator

    @denominator.setter
    def denominator(self, denominator):
        """Sets the denominator of this DataViewMetricCalc.


        :param denominator: The denominator of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._denominator = denominator

    @property
    def numerator(self):
        """Gets the numerator of this DataViewMetricCalc.  # noqa: E501


        :return: The numerator of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._numerator

    @numerator.setter
    def numerator(self, numerator):
        """Sets the numerator of this DataViewMetricCalc.


        :param numerator: The numerator of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._numerator = numerator

    @property
    def order_by(self):
        """Gets the order_by of this DataViewMetricCalc.  # noqa: E501


        :return: The order_by of this DataViewMetricCalc.  # noqa: E501
        :rtype: DataViewMetricOrderBy
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this DataViewMetricCalc.


        :param order_by: The order_by of this DataViewMetricCalc.  # noqa: E501
        :type: DataViewMetricOrderBy
        """

        self._order_by = order_by

    @property
    def type(self):
        """Gets the type of this DataViewMetricCalc.  # noqa: E501


        :return: The type of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataViewMetricCalc.


        :param type: The type of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value_column(self):
        """Gets the value_column of this DataViewMetricCalc.  # noqa: E501


        :return: The value_column of this DataViewMetricCalc.  # noqa: E501
        :rtype: str
        """
        return self._value_column

    @value_column.setter
    def value_column(self, value_column):
        """Sets the value_column of this DataViewMetricCalc.


        :param value_column: The value_column of this DataViewMetricCalc.  # noqa: E501
        :type: str
        """

        self._value_column = value_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewMetricCalc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
