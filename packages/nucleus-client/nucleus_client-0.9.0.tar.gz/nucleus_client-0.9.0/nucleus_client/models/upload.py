# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Upload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'activity_type': 'str',
        'client_id': 'str',
        'display_name': 'str',
        'dt_completed': 'datetime',
        'dt_requested': 'datetime',
        'dt_u': 'datetime',
        'error': 'str',
        'fields': 'list[UploadField]',
        'file_key': 'str',
        'file_name': 'str',
        'file_size': 'int',
        'integration_id': 'str',
        'last_modified': 'int',
        'row_count': 'int',
        'status': 'str',
        'sub_status': 'str'
    }

    attribute_map = {
        'id': '_id',
        'activity_type': 'activity_type',
        'client_id': 'client_id',
        'display_name': 'display_name',
        'dt_completed': 'dt_completed',
        'dt_requested': 'dt_requested',
        'dt_u': 'dt_u',
        'error': 'error',
        'fields': 'fields',
        'file_key': 'file_key',
        'file_name': 'file_name',
        'file_size': 'file_size',
        'integration_id': 'integration_id',
        'last_modified': 'last_modified',
        'row_count': 'row_count',
        'status': 'status',
        'sub_status': 'sub_status'
    }

    def __init__(self, id=None, activity_type=None, client_id=None, display_name=None, dt_completed=None, dt_requested=None, dt_u=None, error=None, fields=None, file_key=None, file_name=None, file_size=None, integration_id=None, last_modified=None, row_count=None, status=None, sub_status=None):  # noqa: E501
        """Upload - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._activity_type = None
        self._client_id = None
        self._display_name = None
        self._dt_completed = None
        self._dt_requested = None
        self._dt_u = None
        self._error = None
        self._fields = None
        self._file_key = None
        self._file_name = None
        self._file_size = None
        self._integration_id = None
        self._last_modified = None
        self._row_count = None
        self._status = None
        self._sub_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if activity_type is not None:
            self.activity_type = activity_type
        self.client_id = client_id
        self.display_name = display_name
        if dt_completed is not None:
            self.dt_completed = dt_completed
        if dt_requested is not None:
            self.dt_requested = dt_requested
        if dt_u is not None:
            self.dt_u = dt_u
        if error is not None:
            self.error = error
        self.fields = fields
        self.file_key = file_key
        self.file_name = file_name
        self.file_size = file_size
        if integration_id is not None:
            self.integration_id = integration_id
        self.last_modified = last_modified
        self.row_count = row_count
        if status is not None:
            self.status = status
        if sub_status is not None:
            self.sub_status = sub_status

    @property
    def id(self):
        """Gets the id of this Upload.  # noqa: E501


        :return: The id of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Upload.


        :param id: The id of this Upload.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def activity_type(self):
        """Gets the activity_type of this Upload.  # noqa: E501


        :return: The activity_type of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this Upload.


        :param activity_type: The activity_type of this Upload.  # noqa: E501
        :type: str
        """

        self._activity_type = activity_type

    @property
    def client_id(self):
        """Gets the client_id of this Upload.  # noqa: E501


        :return: The client_id of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Upload.


        :param client_id: The client_id of this Upload.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def display_name(self):
        """Gets the display_name of this Upload.  # noqa: E501


        :return: The display_name of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Upload.


        :param display_name: The display_name of this Upload.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def dt_completed(self):
        """Gets the dt_completed of this Upload.  # noqa: E501


        :return: The dt_completed of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_completed

    @dt_completed.setter
    def dt_completed(self, dt_completed):
        """Sets the dt_completed of this Upload.


        :param dt_completed: The dt_completed of this Upload.  # noqa: E501
        :type: datetime
        """

        self._dt_completed = dt_completed

    @property
    def dt_requested(self):
        """Gets the dt_requested of this Upload.  # noqa: E501


        :return: The dt_requested of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_requested

    @dt_requested.setter
    def dt_requested(self, dt_requested):
        """Sets the dt_requested of this Upload.


        :param dt_requested: The dt_requested of this Upload.  # noqa: E501
        :type: datetime
        """

        self._dt_requested = dt_requested

    @property
    def dt_u(self):
        """Gets the dt_u of this Upload.  # noqa: E501


        :return: The dt_u of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Upload.


        :param dt_u: The dt_u of this Upload.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def error(self):
        """Gets the error of this Upload.  # noqa: E501


        :return: The error of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Upload.


        :param error: The error of this Upload.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def fields(self):
        """Gets the fields of this Upload.  # noqa: E501


        :return: The fields of this Upload.  # noqa: E501
        :rtype: list[UploadField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Upload.


        :param fields: The fields of this Upload.  # noqa: E501
        :type: list[UploadField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def file_key(self):
        """Gets the file_key of this Upload.  # noqa: E501


        :return: The file_key of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this Upload.


        :param file_key: The file_key of this Upload.  # noqa: E501
        :type: str
        """
        if file_key is None:
            raise ValueError("Invalid value for `file_key`, must not be `None`")  # noqa: E501

        self._file_key = file_key

    @property
    def file_name(self):
        """Gets the file_name of this Upload.  # noqa: E501


        :return: The file_name of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Upload.


        :param file_name: The file_name of this Upload.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this Upload.  # noqa: E501


        :return: The file_size of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Upload.


        :param file_size: The file_size of this Upload.  # noqa: E501
        :type: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")  # noqa: E501

        self._file_size = file_size

    @property
    def integration_id(self):
        """Gets the integration_id of this Upload.  # noqa: E501


        :return: The integration_id of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Upload.


        :param integration_id: The integration_id of this Upload.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def last_modified(self):
        """Gets the last_modified of this Upload.  # noqa: E501


        :return: The last_modified of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Upload.


        :param last_modified: The last_modified of this Upload.  # noqa: E501
        :type: int
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def row_count(self):
        """Gets the row_count of this Upload.  # noqa: E501


        :return: The row_count of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this Upload.


        :param row_count: The row_count of this Upload.  # noqa: E501
        :type: int
        """
        if row_count is None:
            raise ValueError("Invalid value for `row_count`, must not be `None`")  # noqa: E501

        self._row_count = row_count

    @property
    def status(self):
        """Gets the status of this Upload.  # noqa: E501


        :return: The status of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Upload.


        :param status: The status of this Upload.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this Upload.  # noqa: E501


        :return: The sub_status of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this Upload.


        :param sub_status: The sub_status of this Upload.  # noqa: E501
        :type: str
        """

        self._sub_status = sub_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Upload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
