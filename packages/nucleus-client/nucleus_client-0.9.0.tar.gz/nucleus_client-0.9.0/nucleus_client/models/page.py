# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Page(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'block_order': 'list[str]',
        'block_order_by_width': 'dict(str, object)',
        'blocks': 'dict(str, object)',
        'client_id': 'str',
        'colors': 'dict(str, object)',
        'data_table_mode': 'str',
        'dt_u': 'datetime',
        'editor_properties': 'dict(str, object)',
        'filter_excludes': 'list[str]',
        'filter_mode': 'str',
        'filters': 'list[Filter]',
        'options': 'Options',
        'page_template_id': 'str',
        'page_template_slug': 'str',
        'publication_properties': 'PagePublications',
        'section_title': 'str',
        'section_title_template': 'list[dict(str, object)]',
        'slug': 'str',
        'sub_nav': 'SubNav',
        'title': 'str',
        'title_template': 'list[dict(str, object)]',
        'use_druid': 'bool',
        'user_id': 'str',
        'views': 'dict(str, object)',
        'widgets': 'dict(str, object)'
    }

    attribute_map = {
        'id': '_id',
        'block_order': 'block_order',
        'block_order_by_width': 'block_order_by_width',
        'blocks': 'blocks',
        'client_id': 'client_id',
        'colors': 'colors',
        'data_table_mode': 'data_table_mode',
        'dt_u': 'dt_u',
        'editor_properties': 'editor_properties',
        'filter_excludes': 'filter_excludes',
        'filter_mode': 'filter_mode',
        'filters': 'filters',
        'options': 'options',
        'page_template_id': 'page_template_id',
        'page_template_slug': 'page_template_slug',
        'publication_properties': 'publication_properties',
        'section_title': 'section_title',
        'section_title_template': 'section_title_template',
        'slug': 'slug',
        'sub_nav': 'sub_nav',
        'title': 'title',
        'title_template': 'title_template',
        'use_druid': 'use_druid',
        'user_id': 'user_id',
        'views': 'views',
        'widgets': 'widgets'
    }

    def __init__(self, id=None, block_order=None, block_order_by_width=None, blocks=None, client_id=None, colors=None, data_table_mode=None, dt_u=None, editor_properties=None, filter_excludes=None, filter_mode=None, filters=None, options=None, page_template_id=None, page_template_slug=None, publication_properties=None, section_title=None, section_title_template=None, slug=None, sub_nav=None, title=None, title_template=None, use_druid=None, user_id=None, views=None, widgets=None):  # noqa: E501
        """Page - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._block_order = None
        self._block_order_by_width = None
        self._blocks = None
        self._client_id = None
        self._colors = None
        self._data_table_mode = None
        self._dt_u = None
        self._editor_properties = None
        self._filter_excludes = None
        self._filter_mode = None
        self._filters = None
        self._options = None
        self._page_template_id = None
        self._page_template_slug = None
        self._publication_properties = None
        self._section_title = None
        self._section_title_template = None
        self._slug = None
        self._sub_nav = None
        self._title = None
        self._title_template = None
        self._use_druid = None
        self._user_id = None
        self._views = None
        self._widgets = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if block_order is not None:
            self.block_order = block_order
        if block_order_by_width is not None:
            self.block_order_by_width = block_order_by_width
        if blocks is not None:
            self.blocks = blocks
        self.client_id = client_id
        if colors is not None:
            self.colors = colors
        if data_table_mode is not None:
            self.data_table_mode = data_table_mode
        if dt_u is not None:
            self.dt_u = dt_u
        if editor_properties is not None:
            self.editor_properties = editor_properties
        if filter_excludes is not None:
            self.filter_excludes = filter_excludes
        if filter_mode is not None:
            self.filter_mode = filter_mode
        if filters is not None:
            self.filters = filters
        if options is not None:
            self.options = options
        if page_template_id is not None:
            self.page_template_id = page_template_id
        if page_template_slug is not None:
            self.page_template_slug = page_template_slug
        if publication_properties is not None:
            self.publication_properties = publication_properties
        if section_title is not None:
            self.section_title = section_title
        if section_title_template is not None:
            self.section_title_template = section_title_template
        self.slug = slug
        if sub_nav is not None:
            self.sub_nav = sub_nav
        self.title = title
        if title_template is not None:
            self.title_template = title_template
        if use_druid is not None:
            self.use_druid = use_druid
        if user_id is not None:
            self.user_id = user_id
        if views is not None:
            self.views = views
        if widgets is not None:
            self.widgets = widgets

    @property
    def id(self):
        """Gets the id of this Page.  # noqa: E501


        :return: The id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Page.


        :param id: The id of this Page.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def block_order(self):
        """Gets the block_order of this Page.  # noqa: E501


        :return: The block_order of this Page.  # noqa: E501
        :rtype: list[str]
        """
        return self._block_order

    @block_order.setter
    def block_order(self, block_order):
        """Sets the block_order of this Page.


        :param block_order: The block_order of this Page.  # noqa: E501
        :type: list[str]
        """

        self._block_order = block_order

    @property
    def block_order_by_width(self):
        """Gets the block_order_by_width of this Page.  # noqa: E501


        :return: The block_order_by_width of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._block_order_by_width

    @block_order_by_width.setter
    def block_order_by_width(self, block_order_by_width):
        """Sets the block_order_by_width of this Page.


        :param block_order_by_width: The block_order_by_width of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._block_order_by_width = block_order_by_width

    @property
    def blocks(self):
        """Gets the blocks of this Page.  # noqa: E501


        :return: The blocks of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this Page.


        :param blocks: The blocks of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._blocks = blocks

    @property
    def client_id(self):
        """Gets the client_id of this Page.  # noqa: E501


        :return: The client_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Page.


        :param client_id: The client_id of this Page.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def colors(self):
        """Gets the colors of this Page.  # noqa: E501


        :return: The colors of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Page.


        :param colors: The colors of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._colors = colors

    @property
    def data_table_mode(self):
        """Gets the data_table_mode of this Page.  # noqa: E501


        :return: The data_table_mode of this Page.  # noqa: E501
        :rtype: str
        """
        return self._data_table_mode

    @data_table_mode.setter
    def data_table_mode(self, data_table_mode):
        """Sets the data_table_mode of this Page.


        :param data_table_mode: The data_table_mode of this Page.  # noqa: E501
        :type: str
        """

        self._data_table_mode = data_table_mode

    @property
    def dt_u(self):
        """Gets the dt_u of this Page.  # noqa: E501


        :return: The dt_u of this Page.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Page.


        :param dt_u: The dt_u of this Page.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def editor_properties(self):
        """Gets the editor_properties of this Page.  # noqa: E501


        :return: The editor_properties of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._editor_properties

    @editor_properties.setter
    def editor_properties(self, editor_properties):
        """Sets the editor_properties of this Page.


        :param editor_properties: The editor_properties of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._editor_properties = editor_properties

    @property
    def filter_excludes(self):
        """Gets the filter_excludes of this Page.  # noqa: E501


        :return: The filter_excludes of this Page.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_excludes

    @filter_excludes.setter
    def filter_excludes(self, filter_excludes):
        """Sets the filter_excludes of this Page.


        :param filter_excludes: The filter_excludes of this Page.  # noqa: E501
        :type: list[str]
        """

        self._filter_excludes = filter_excludes

    @property
    def filter_mode(self):
        """Gets the filter_mode of this Page.  # noqa: E501


        :return: The filter_mode of this Page.  # noqa: E501
        :rtype: str
        """
        return self._filter_mode

    @filter_mode.setter
    def filter_mode(self, filter_mode):
        """Sets the filter_mode of this Page.


        :param filter_mode: The filter_mode of this Page.  # noqa: E501
        :type: str
        """

        self._filter_mode = filter_mode

    @property
    def filters(self):
        """Gets the filters of this Page.  # noqa: E501


        :return: The filters of this Page.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Page.


        :param filters: The filters of this Page.  # noqa: E501
        :type: list[Filter]
        """

        self._filters = filters

    @property
    def options(self):
        """Gets the options of this Page.  # noqa: E501


        :return: The options of this Page.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Page.


        :param options: The options of this Page.  # noqa: E501
        :type: Options
        """

        self._options = options

    @property
    def page_template_id(self):
        """Gets the page_template_id of this Page.  # noqa: E501


        :return: The page_template_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._page_template_id

    @page_template_id.setter
    def page_template_id(self, page_template_id):
        """Sets the page_template_id of this Page.


        :param page_template_id: The page_template_id of this Page.  # noqa: E501
        :type: str
        """

        self._page_template_id = page_template_id

    @property
    def page_template_slug(self):
        """Gets the page_template_slug of this Page.  # noqa: E501


        :return: The page_template_slug of this Page.  # noqa: E501
        :rtype: str
        """
        return self._page_template_slug

    @page_template_slug.setter
    def page_template_slug(self, page_template_slug):
        """Sets the page_template_slug of this Page.


        :param page_template_slug: The page_template_slug of this Page.  # noqa: E501
        :type: str
        """

        self._page_template_slug = page_template_slug

    @property
    def publication_properties(self):
        """Gets the publication_properties of this Page.  # noqa: E501


        :return: The publication_properties of this Page.  # noqa: E501
        :rtype: PagePublications
        """
        return self._publication_properties

    @publication_properties.setter
    def publication_properties(self, publication_properties):
        """Sets the publication_properties of this Page.


        :param publication_properties: The publication_properties of this Page.  # noqa: E501
        :type: PagePublications
        """

        self._publication_properties = publication_properties

    @property
    def section_title(self):
        """Gets the section_title of this Page.  # noqa: E501


        :return: The section_title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._section_title

    @section_title.setter
    def section_title(self, section_title):
        """Sets the section_title of this Page.


        :param section_title: The section_title of this Page.  # noqa: E501
        :type: str
        """

        self._section_title = section_title

    @property
    def section_title_template(self):
        """Gets the section_title_template of this Page.  # noqa: E501


        :return: The section_title_template of this Page.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._section_title_template

    @section_title_template.setter
    def section_title_template(self, section_title_template):
        """Sets the section_title_template of this Page.


        :param section_title_template: The section_title_template of this Page.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._section_title_template = section_title_template

    @property
    def slug(self):
        """Gets the slug of this Page.  # noqa: E501


        :return: The slug of this Page.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Page.


        :param slug: The slug of this Page.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def sub_nav(self):
        """Gets the sub_nav of this Page.  # noqa: E501


        :return: The sub_nav of this Page.  # noqa: E501
        :rtype: SubNav
        """
        return self._sub_nav

    @sub_nav.setter
    def sub_nav(self, sub_nav):
        """Sets the sub_nav of this Page.


        :param sub_nav: The sub_nav of this Page.  # noqa: E501
        :type: SubNav
        """

        self._sub_nav = sub_nav

    @property
    def title(self):
        """Gets the title of this Page.  # noqa: E501


        :return: The title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.


        :param title: The title of this Page.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def title_template(self):
        """Gets the title_template of this Page.  # noqa: E501


        :return: The title_template of this Page.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._title_template

    @title_template.setter
    def title_template(self, title_template):
        """Sets the title_template of this Page.


        :param title_template: The title_template of this Page.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._title_template = title_template

    @property
    def use_druid(self):
        """Gets the use_druid of this Page.  # noqa: E501


        :return: The use_druid of this Page.  # noqa: E501
        :rtype: bool
        """
        return self._use_druid

    @use_druid.setter
    def use_druid(self, use_druid):
        """Sets the use_druid of this Page.


        :param use_druid: The use_druid of this Page.  # noqa: E501
        :type: bool
        """

        self._use_druid = use_druid

    @property
    def user_id(self):
        """Gets the user_id of this Page.  # noqa: E501


        :return: The user_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Page.


        :param user_id: The user_id of this Page.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def views(self):
        """Gets the views of this Page.  # noqa: E501


        :return: The views of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Page.


        :param views: The views of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._views = views

    @property
    def widgets(self):
        """Gets the widgets of this Page.  # noqa: E501


        :return: The widgets of this Page.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Page.


        :param widgets: The widgets of this Page.  # noqa: E501
        :type: dict(str, object)
        """

        self._widgets = widgets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
