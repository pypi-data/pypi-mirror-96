# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProlearnUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'customer_member_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'is_member': 'bool',
        'last_name': 'str',
        'name': 'str',
        'primary_member_group': 'str',
        'title': 'str',
        'updated': 'datetime',
        'wizard_form_data': 'dict(str, object)',
        'created_info': 'dict(str, object)',
        'id': 'str',
        'licensenumber': 'str',
        'orgaffiliation': 'str',
        'persontype': 'str',
        'roles': 'list[str]',
        'userid': 'str'
    }

    attribute_map = {
        'created': 'Created',
        'customer_member_id': 'CustomerMemberId',
        'email': 'Email',
        'first_name': 'FirstName',
        'full_name': 'FullName',
        'is_member': 'IsMember',
        'last_name': 'LastName',
        'name': 'Name',
        'primary_member_group': 'PrimaryMemberGroup',
        'title': 'Title',
        'updated': 'Updated',
        'wizard_form_data': 'WizardFormData',
        'created_info': 'createdInfo',
        'id': 'id',
        'licensenumber': 'licensenumber',
        'orgaffiliation': 'orgaffiliation',
        'persontype': 'persontype',
        'roles': 'roles',
        'userid': 'userid'
    }

    def __init__(self, created=None, customer_member_id=None, email=None, first_name=None, full_name=None, is_member=None, last_name=None, name=None, primary_member_group=None, title=None, updated=None, wizard_form_data=None, created_info=None, id=None, licensenumber=None, orgaffiliation=None, persontype=None, roles=None, userid=None):  # noqa: E501
        """ProlearnUser - a model defined in OpenAPI"""  # noqa: E501

        self._created = None
        self._customer_member_id = None
        self._email = None
        self._first_name = None
        self._full_name = None
        self._is_member = None
        self._last_name = None
        self._name = None
        self._primary_member_group = None
        self._title = None
        self._updated = None
        self._wizard_form_data = None
        self._created_info = None
        self._id = None
        self._licensenumber = None
        self._orgaffiliation = None
        self._persontype = None
        self._roles = None
        self._userid = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if customer_member_id is not None:
            self.customer_member_id = customer_member_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if is_member is not None:
            self.is_member = is_member
        if last_name is not None:
            self.last_name = last_name
        if name is not None:
            self.name = name
        if primary_member_group is not None:
            self.primary_member_group = primary_member_group
        if title is not None:
            self.title = title
        self.updated = updated
        if wizard_form_data is not None:
            self.wizard_form_data = wizard_form_data
        if created_info is not None:
            self.created_info = created_info
        self.id = id
        if licensenumber is not None:
            self.licensenumber = licensenumber
        if orgaffiliation is not None:
            self.orgaffiliation = orgaffiliation
        if persontype is not None:
            self.persontype = persontype
        if roles is not None:
            self.roles = roles
        self.userid = userid

    @property
    def created(self):
        """Gets the created of this ProlearnUser.  # noqa: E501


        :return: The created of this ProlearnUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProlearnUser.


        :param created: The created of this ProlearnUser.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def customer_member_id(self):
        """Gets the customer_member_id of this ProlearnUser.  # noqa: E501


        :return: The customer_member_id of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._customer_member_id

    @customer_member_id.setter
    def customer_member_id(self, customer_member_id):
        """Sets the customer_member_id of this ProlearnUser.


        :param customer_member_id: The customer_member_id of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._customer_member_id = customer_member_id

    @property
    def email(self):
        """Gets the email of this ProlearnUser.  # noqa: E501


        :return: The email of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProlearnUser.


        :param email: The email of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ProlearnUser.  # noqa: E501


        :return: The first_name of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ProlearnUser.


        :param first_name: The first_name of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this ProlearnUser.  # noqa: E501


        :return: The full_name of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ProlearnUser.


        :param full_name: The full_name of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def is_member(self):
        """Gets the is_member of this ProlearnUser.  # noqa: E501


        :return: The is_member of this ProlearnUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this ProlearnUser.


        :param is_member: The is_member of this ProlearnUser.  # noqa: E501
        :type: bool
        """

        self._is_member = is_member

    @property
    def last_name(self):
        """Gets the last_name of this ProlearnUser.  # noqa: E501


        :return: The last_name of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ProlearnUser.


        :param last_name: The last_name of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this ProlearnUser.  # noqa: E501


        :return: The name of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProlearnUser.


        :param name: The name of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_member_group(self):
        """Gets the primary_member_group of this ProlearnUser.  # noqa: E501


        :return: The primary_member_group of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._primary_member_group

    @primary_member_group.setter
    def primary_member_group(self, primary_member_group):
        """Sets the primary_member_group of this ProlearnUser.


        :param primary_member_group: The primary_member_group of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._primary_member_group = primary_member_group

    @property
    def title(self):
        """Gets the title of this ProlearnUser.  # noqa: E501


        :return: The title of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProlearnUser.


        :param title: The title of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this ProlearnUser.  # noqa: E501


        :return: The updated of this ProlearnUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ProlearnUser.


        :param updated: The updated of this ProlearnUser.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def wizard_form_data(self):
        """Gets the wizard_form_data of this ProlearnUser.  # noqa: E501


        :return: The wizard_form_data of this ProlearnUser.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._wizard_form_data

    @wizard_form_data.setter
    def wizard_form_data(self, wizard_form_data):
        """Sets the wizard_form_data of this ProlearnUser.


        :param wizard_form_data: The wizard_form_data of this ProlearnUser.  # noqa: E501
        :type: dict(str, object)
        """

        self._wizard_form_data = wizard_form_data

    @property
    def created_info(self):
        """Gets the created_info of this ProlearnUser.  # noqa: E501


        :return: The created_info of this ProlearnUser.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._created_info

    @created_info.setter
    def created_info(self, created_info):
        """Sets the created_info of this ProlearnUser.


        :param created_info: The created_info of this ProlearnUser.  # noqa: E501
        :type: dict(str, object)
        """

        self._created_info = created_info

    @property
    def id(self):
        """Gets the id of this ProlearnUser.  # noqa: E501


        :return: The id of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProlearnUser.


        :param id: The id of this ProlearnUser.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def licensenumber(self):
        """Gets the licensenumber of this ProlearnUser.  # noqa: E501


        :return: The licensenumber of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._licensenumber

    @licensenumber.setter
    def licensenumber(self, licensenumber):
        """Sets the licensenumber of this ProlearnUser.


        :param licensenumber: The licensenumber of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._licensenumber = licensenumber

    @property
    def orgaffiliation(self):
        """Gets the orgaffiliation of this ProlearnUser.  # noqa: E501


        :return: The orgaffiliation of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._orgaffiliation

    @orgaffiliation.setter
    def orgaffiliation(self, orgaffiliation):
        """Sets the orgaffiliation of this ProlearnUser.


        :param orgaffiliation: The orgaffiliation of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._orgaffiliation = orgaffiliation

    @property
    def persontype(self):
        """Gets the persontype of this ProlearnUser.  # noqa: E501


        :return: The persontype of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._persontype

    @persontype.setter
    def persontype(self, persontype):
        """Sets the persontype of this ProlearnUser.


        :param persontype: The persontype of this ProlearnUser.  # noqa: E501
        :type: str
        """

        self._persontype = persontype

    @property
    def roles(self):
        """Gets the roles of this ProlearnUser.  # noqa: E501


        :return: The roles of this ProlearnUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ProlearnUser.


        :param roles: The roles of this ProlearnUser.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def userid(self):
        """Gets the userid of this ProlearnUser.  # noqa: E501


        :return: The userid of this ProlearnUser.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this ProlearnUser.


        :param userid: The userid of this ProlearnUser.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProlearnUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
