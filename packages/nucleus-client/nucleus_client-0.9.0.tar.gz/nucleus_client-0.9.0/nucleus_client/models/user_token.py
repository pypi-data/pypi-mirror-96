# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'dt_created': 'datetime',
        'dt_last_access': 'datetime',
        'name': 'str',
        'status': 'str',
        'token': 'str',
        'token_last_four': 'str'
    }

    attribute_map = {
        'id': '_id',
        'dt_created': 'dt_created',
        'dt_last_access': 'dt_last_access',
        'name': 'name',
        'status': 'status',
        'token': 'token',
        'token_last_four': 'token_last_four'
    }

    def __init__(self, id=None, dt_created=None, dt_last_access=None, name=None, status=None, token=None, token_last_four=None):  # noqa: E501
        """UserToken - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._dt_created = None
        self._dt_last_access = None
        self._name = None
        self._status = None
        self._token = None
        self._token_last_four = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if dt_created is not None:
            self.dt_created = dt_created
        if dt_last_access is not None:
            self.dt_last_access = dt_last_access
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if token is not None:
            self.token = token
        if token_last_four is not None:
            self.token_last_four = token_last_four

    @property
    def id(self):
        """Gets the id of this UserToken.  # noqa: E501


        :return: The id of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserToken.


        :param id: The id of this UserToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def dt_created(self):
        """Gets the dt_created of this UserToken.  # noqa: E501


        :return: The dt_created of this UserToken.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_created

    @dt_created.setter
    def dt_created(self, dt_created):
        """Sets the dt_created of this UserToken.


        :param dt_created: The dt_created of this UserToken.  # noqa: E501
        :type: datetime
        """

        self._dt_created = dt_created

    @property
    def dt_last_access(self):
        """Gets the dt_last_access of this UserToken.  # noqa: E501


        :return: The dt_last_access of this UserToken.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_last_access

    @dt_last_access.setter
    def dt_last_access(self, dt_last_access):
        """Sets the dt_last_access of this UserToken.


        :param dt_last_access: The dt_last_access of this UserToken.  # noqa: E501
        :type: datetime
        """

        self._dt_last_access = dt_last_access

    @property
    def name(self):
        """Gets the name of this UserToken.  # noqa: E501


        :return: The name of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserToken.


        :param name: The name of this UserToken.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this UserToken.  # noqa: E501


        :return: The status of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserToken.


        :param status: The status of this UserToken.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this UserToken.  # noqa: E501


        :return: The token of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserToken.


        :param token: The token of this UserToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_last_four(self):
        """Gets the token_last_four of this UserToken.  # noqa: E501


        :return: The token_last_four of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._token_last_four

    @token_last_four.setter
    def token_last_four(self, token_last_four):
        """Sets the token_last_four of this UserToken.


        :param token_last_four: The token_last_four of this UserToken.  # noqa: E501
        :type: str
        """

        self._token_last_four = token_last_four

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
