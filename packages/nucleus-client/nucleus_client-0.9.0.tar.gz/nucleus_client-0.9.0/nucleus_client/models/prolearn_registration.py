# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProlearnRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completion_date': 'datetime',
        'course_id': 'str',
        'course_name': 'str',
        'created': 'datetime',
        'credits': 'list[ProlearnCredit]',
        'enrollment_date': 'datetime',
        'first_name': 'str',
        'initial_completion_date': 'datetime',
        'last_name': 'str',
        'name': 'str',
        'percent_complete': 'int',
        'revision_number': 'int',
        'time_taken_to_complete': 'float',
        'time_taken_to_complete_str': 'str',
        'updated': 'datetime',
        'user_id': 'str',
        'sub_type': 'str',
        'type': 'str',
        'id': 'str',
        'v2_registration': 'bool'
    }

    attribute_map = {
        'completion_date': 'CompletionDate',
        'course_id': 'CourseId',
        'course_name': 'CourseName',
        'created': 'Created',
        'credits': 'Credits',
        'enrollment_date': 'EnrollmentDate',
        'first_name': 'FirstName',
        'initial_completion_date': 'InitialCompletionDate',
        'last_name': 'LastName',
        'name': 'Name',
        'percent_complete': 'PercentComplete',
        'revision_number': 'RevisionNumber',
        'time_taken_to_complete': 'TimeTakenToComplete',
        'time_taken_to_complete_str': 'TimeTakenToCompleteStr',
        'updated': 'Updated',
        'user_id': 'UserId',
        'sub_type': '_subType',
        'type': '_type',
        'id': 'id',
        'v2_registration': 'v2Registration'
    }

    def __init__(self, completion_date=None, course_id=None, course_name=None, created=None, credits=None, enrollment_date=None, first_name=None, initial_completion_date=None, last_name=None, name=None, percent_complete=None, revision_number=None, time_taken_to_complete=None, time_taken_to_complete_str=None, updated=None, user_id=None, sub_type=None, type=None, id=None, v2_registration=None):  # noqa: E501
        """ProlearnRegistration - a model defined in OpenAPI"""  # noqa: E501

        self._completion_date = None
        self._course_id = None
        self._course_name = None
        self._created = None
        self._credits = None
        self._enrollment_date = None
        self._first_name = None
        self._initial_completion_date = None
        self._last_name = None
        self._name = None
        self._percent_complete = None
        self._revision_number = None
        self._time_taken_to_complete = None
        self._time_taken_to_complete_str = None
        self._updated = None
        self._user_id = None
        self._sub_type = None
        self._type = None
        self._id = None
        self._v2_registration = None
        self.discriminator = None

        if completion_date is not None:
            self.completion_date = completion_date
        self.course_id = course_id
        if course_name is not None:
            self.course_name = course_name
        if created is not None:
            self.created = created
        if credits is not None:
            self.credits = credits
        self.enrollment_date = enrollment_date
        if first_name is not None:
            self.first_name = first_name
        if initial_completion_date is not None:
            self.initial_completion_date = initial_completion_date
        if last_name is not None:
            self.last_name = last_name
        if name is not None:
            self.name = name
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if revision_number is not None:
            self.revision_number = revision_number
        if time_taken_to_complete is not None:
            self.time_taken_to_complete = time_taken_to_complete
        if time_taken_to_complete_str is not None:
            self.time_taken_to_complete_str = time_taken_to_complete_str
        self.updated = updated
        self.user_id = user_id
        if sub_type is not None:
            self.sub_type = sub_type
        if type is not None:
            self.type = type
        self.id = id
        if v2_registration is not None:
            self.v2_registration = v2_registration

    @property
    def completion_date(self):
        """Gets the completion_date of this ProlearnRegistration.  # noqa: E501


        :return: The completion_date of this ProlearnRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ProlearnRegistration.


        :param completion_date: The completion_date of this ProlearnRegistration.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def course_id(self):
        """Gets the course_id of this ProlearnRegistration.  # noqa: E501


        :return: The course_id of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this ProlearnRegistration.


        :param course_id: The course_id of this ProlearnRegistration.  # noqa: E501
        :type: str
        """
        if course_id is None:
            raise ValueError("Invalid value for `course_id`, must not be `None`")  # noqa: E501

        self._course_id = course_id

    @property
    def course_name(self):
        """Gets the course_name of this ProlearnRegistration.  # noqa: E501


        :return: The course_name of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._course_name

    @course_name.setter
    def course_name(self, course_name):
        """Sets the course_name of this ProlearnRegistration.


        :param course_name: The course_name of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._course_name = course_name

    @property
    def created(self):
        """Gets the created of this ProlearnRegistration.  # noqa: E501


        :return: The created of this ProlearnRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProlearnRegistration.


        :param created: The created of this ProlearnRegistration.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def credits(self):
        """Gets the credits of this ProlearnRegistration.  # noqa: E501


        :return: The credits of this ProlearnRegistration.  # noqa: E501
        :rtype: list[ProlearnCredit]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this ProlearnRegistration.


        :param credits: The credits of this ProlearnRegistration.  # noqa: E501
        :type: list[ProlearnCredit]
        """

        self._credits = credits

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this ProlearnRegistration.  # noqa: E501


        :return: The enrollment_date of this ProlearnRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this ProlearnRegistration.


        :param enrollment_date: The enrollment_date of this ProlearnRegistration.  # noqa: E501
        :type: datetime
        """
        if enrollment_date is None:
            raise ValueError("Invalid value for `enrollment_date`, must not be `None`")  # noqa: E501

        self._enrollment_date = enrollment_date

    @property
    def first_name(self):
        """Gets the first_name of this ProlearnRegistration.  # noqa: E501


        :return: The first_name of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ProlearnRegistration.


        :param first_name: The first_name of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def initial_completion_date(self):
        """Gets the initial_completion_date of this ProlearnRegistration.  # noqa: E501


        :return: The initial_completion_date of this ProlearnRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_completion_date

    @initial_completion_date.setter
    def initial_completion_date(self, initial_completion_date):
        """Sets the initial_completion_date of this ProlearnRegistration.


        :param initial_completion_date: The initial_completion_date of this ProlearnRegistration.  # noqa: E501
        :type: datetime
        """

        self._initial_completion_date = initial_completion_date

    @property
    def last_name(self):
        """Gets the last_name of this ProlearnRegistration.  # noqa: E501


        :return: The last_name of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ProlearnRegistration.


        :param last_name: The last_name of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this ProlearnRegistration.  # noqa: E501


        :return: The name of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProlearnRegistration.


        :param name: The name of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ProlearnRegistration.  # noqa: E501


        :return: The percent_complete of this ProlearnRegistration.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ProlearnRegistration.


        :param percent_complete: The percent_complete of this ProlearnRegistration.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def revision_number(self):
        """Gets the revision_number of this ProlearnRegistration.  # noqa: E501


        :return: The revision_number of this ProlearnRegistration.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this ProlearnRegistration.


        :param revision_number: The revision_number of this ProlearnRegistration.  # noqa: E501
        :type: int
        """

        self._revision_number = revision_number

    @property
    def time_taken_to_complete(self):
        """Gets the time_taken_to_complete of this ProlearnRegistration.  # noqa: E501


        :return: The time_taken_to_complete of this ProlearnRegistration.  # noqa: E501
        :rtype: float
        """
        return self._time_taken_to_complete

    @time_taken_to_complete.setter
    def time_taken_to_complete(self, time_taken_to_complete):
        """Sets the time_taken_to_complete of this ProlearnRegistration.


        :param time_taken_to_complete: The time_taken_to_complete of this ProlearnRegistration.  # noqa: E501
        :type: float
        """

        self._time_taken_to_complete = time_taken_to_complete

    @property
    def time_taken_to_complete_str(self):
        """Gets the time_taken_to_complete_str of this ProlearnRegistration.  # noqa: E501


        :return: The time_taken_to_complete_str of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._time_taken_to_complete_str

    @time_taken_to_complete_str.setter
    def time_taken_to_complete_str(self, time_taken_to_complete_str):
        """Sets the time_taken_to_complete_str of this ProlearnRegistration.


        :param time_taken_to_complete_str: The time_taken_to_complete_str of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._time_taken_to_complete_str = time_taken_to_complete_str

    @property
    def updated(self):
        """Gets the updated of this ProlearnRegistration.  # noqa: E501


        :return: The updated of this ProlearnRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ProlearnRegistration.


        :param updated: The updated of this ProlearnRegistration.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this ProlearnRegistration.  # noqa: E501


        :return: The user_id of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProlearnRegistration.


        :param user_id: The user_id of this ProlearnRegistration.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def sub_type(self):
        """Gets the sub_type of this ProlearnRegistration.  # noqa: E501


        :return: The sub_type of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this ProlearnRegistration.


        :param sub_type: The sub_type of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this ProlearnRegistration.  # noqa: E501


        :return: The type of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProlearnRegistration.


        :param type: The type of this ProlearnRegistration.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this ProlearnRegistration.  # noqa: E501


        :return: The id of this ProlearnRegistration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProlearnRegistration.


        :param id: The id of this ProlearnRegistration.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def v2_registration(self):
        """Gets the v2_registration of this ProlearnRegistration.  # noqa: E501


        :return: The v2_registration of this ProlearnRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._v2_registration

    @v2_registration.setter
    def v2_registration(self, v2_registration):
        """Sets the v2_registration of this ProlearnRegistration.


        :param v2_registration: The v2_registration of this ProlearnRegistration.  # noqa: E501
        :type: bool
        """

        self._v2_registration = v2_registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProlearnRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
