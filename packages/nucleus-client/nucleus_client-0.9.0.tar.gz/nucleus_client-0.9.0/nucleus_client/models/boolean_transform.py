# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BooleanTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket': 'BooleanBucketTransform',
        'cast': 'BooleanCastTransform',
        'constant': 'BooleanConstantTransform'
    }

    attribute_map = {
        'bucket': 'bucket',
        'cast': 'cast',
        'constant': 'constant'
    }

    def __init__(self, bucket=None, cast=None, constant=None):  # noqa: E501
        """BooleanTransform - a model defined in OpenAPI"""  # noqa: E501

        self._bucket = None
        self._cast = None
        self._constant = None
        self.discriminator = None

        if bucket is not None:
            self.bucket = bucket
        if cast is not None:
            self.cast = cast
        if constant is not None:
            self.constant = constant

    @property
    def bucket(self):
        """Gets the bucket of this BooleanTransform.  # noqa: E501


        :return: The bucket of this BooleanTransform.  # noqa: E501
        :rtype: BooleanBucketTransform
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this BooleanTransform.


        :param bucket: The bucket of this BooleanTransform.  # noqa: E501
        :type: BooleanBucketTransform
        """

        self._bucket = bucket

    @property
    def cast(self):
        """Gets the cast of this BooleanTransform.  # noqa: E501


        :return: The cast of this BooleanTransform.  # noqa: E501
        :rtype: BooleanCastTransform
        """
        return self._cast

    @cast.setter
    def cast(self, cast):
        """Sets the cast of this BooleanTransform.


        :param cast: The cast of this BooleanTransform.  # noqa: E501
        :type: BooleanCastTransform
        """

        self._cast = cast

    @property
    def constant(self):
        """Gets the constant of this BooleanTransform.  # noqa: E501


        :return: The constant of this BooleanTransform.  # noqa: E501
        :rtype: BooleanConstantTransform
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """Sets the constant of this BooleanTransform.


        :param constant: The constant of this BooleanTransform.  # noqa: E501
        :type: BooleanConstantTransform
        """

        self._constant = constant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BooleanTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
