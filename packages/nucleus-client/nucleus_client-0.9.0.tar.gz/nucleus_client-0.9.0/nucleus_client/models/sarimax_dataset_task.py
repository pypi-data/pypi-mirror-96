# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SarimaxDatasetTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset': 'IntegrationDataset',
        'date_column': 'str',
        'dimensions': 'list[Dimension]',
        'max_predict': 'float',
        'metric': 'SarimaxTaskMetric',
        'min_predict': 'float',
        'output_activity_type': 'str',
        'periodicity': 'float',
        'periods_to_predict': 'float',
        'selection_criteria': 'str',
        'write': 'WriteConfig'
    }

    attribute_map = {
        'dataset': 'dataset',
        'date_column': 'date_column',
        'dimensions': 'dimensions',
        'max_predict': 'max_predict',
        'metric': 'metric',
        'min_predict': 'min_predict',
        'output_activity_type': 'output_activity_type',
        'periodicity': 'periodicity',
        'periods_to_predict': 'periods_to_predict',
        'selection_criteria': 'selection_criteria',
        'write': 'write'
    }

    def __init__(self, dataset=None, date_column=None, dimensions=None, max_predict=None, metric=None, min_predict=None, output_activity_type=None, periodicity=None, periods_to_predict=None, selection_criteria=None, write=None):  # noqa: E501
        """SarimaxDatasetTask - a model defined in OpenAPI"""  # noqa: E501

        self._dataset = None
        self._date_column = None
        self._dimensions = None
        self._max_predict = None
        self._metric = None
        self._min_predict = None
        self._output_activity_type = None
        self._periodicity = None
        self._periods_to_predict = None
        self._selection_criteria = None
        self._write = None
        self.discriminator = None

        self.dataset = dataset
        self.date_column = date_column
        if dimensions is not None:
            self.dimensions = dimensions
        if max_predict is not None:
            self.max_predict = max_predict
        self.metric = metric
        if min_predict is not None:
            self.min_predict = min_predict
        self.output_activity_type = output_activity_type
        if periodicity is not None:
            self.periodicity = periodicity
        if periods_to_predict is not None:
            self.periods_to_predict = periods_to_predict
        if selection_criteria is not None:
            self.selection_criteria = selection_criteria
        if write is not None:
            self.write = write

    @property
    def dataset(self):
        """Gets the dataset of this SarimaxDatasetTask.  # noqa: E501


        :return: The dataset of this SarimaxDatasetTask.  # noqa: E501
        :rtype: IntegrationDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this SarimaxDatasetTask.


        :param dataset: The dataset of this SarimaxDatasetTask.  # noqa: E501
        :type: IntegrationDataset
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def date_column(self):
        """Gets the date_column of this SarimaxDatasetTask.  # noqa: E501


        :return: The date_column of this SarimaxDatasetTask.  # noqa: E501
        :rtype: str
        """
        return self._date_column

    @date_column.setter
    def date_column(self, date_column):
        """Sets the date_column of this SarimaxDatasetTask.


        :param date_column: The date_column of this SarimaxDatasetTask.  # noqa: E501
        :type: str
        """
        if date_column is None:
            raise ValueError("Invalid value for `date_column`, must not be `None`")  # noqa: E501

        self._date_column = date_column

    @property
    def dimensions(self):
        """Gets the dimensions of this SarimaxDatasetTask.  # noqa: E501


        :return: The dimensions of this SarimaxDatasetTask.  # noqa: E501
        :rtype: list[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SarimaxDatasetTask.


        :param dimensions: The dimensions of this SarimaxDatasetTask.  # noqa: E501
        :type: list[Dimension]
        """

        self._dimensions = dimensions

    @property
    def max_predict(self):
        """Gets the max_predict of this SarimaxDatasetTask.  # noqa: E501


        :return: The max_predict of this SarimaxDatasetTask.  # noqa: E501
        :rtype: float
        """
        return self._max_predict

    @max_predict.setter
    def max_predict(self, max_predict):
        """Sets the max_predict of this SarimaxDatasetTask.


        :param max_predict: The max_predict of this SarimaxDatasetTask.  # noqa: E501
        :type: float
        """

        self._max_predict = max_predict

    @property
    def metric(self):
        """Gets the metric of this SarimaxDatasetTask.  # noqa: E501


        :return: The metric of this SarimaxDatasetTask.  # noqa: E501
        :rtype: SarimaxTaskMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this SarimaxDatasetTask.


        :param metric: The metric of this SarimaxDatasetTask.  # noqa: E501
        :type: SarimaxTaskMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def min_predict(self):
        """Gets the min_predict of this SarimaxDatasetTask.  # noqa: E501


        :return: The min_predict of this SarimaxDatasetTask.  # noqa: E501
        :rtype: float
        """
        return self._min_predict

    @min_predict.setter
    def min_predict(self, min_predict):
        """Sets the min_predict of this SarimaxDatasetTask.


        :param min_predict: The min_predict of this SarimaxDatasetTask.  # noqa: E501
        :type: float
        """

        self._min_predict = min_predict

    @property
    def output_activity_type(self):
        """Gets the output_activity_type of this SarimaxDatasetTask.  # noqa: E501


        :return: The output_activity_type of this SarimaxDatasetTask.  # noqa: E501
        :rtype: str
        """
        return self._output_activity_type

    @output_activity_type.setter
    def output_activity_type(self, output_activity_type):
        """Sets the output_activity_type of this SarimaxDatasetTask.


        :param output_activity_type: The output_activity_type of this SarimaxDatasetTask.  # noqa: E501
        :type: str
        """
        if output_activity_type is None:
            raise ValueError("Invalid value for `output_activity_type`, must not be `None`")  # noqa: E501

        self._output_activity_type = output_activity_type

    @property
    def periodicity(self):
        """Gets the periodicity of this SarimaxDatasetTask.  # noqa: E501


        :return: The periodicity of this SarimaxDatasetTask.  # noqa: E501
        :rtype: float
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this SarimaxDatasetTask.


        :param periodicity: The periodicity of this SarimaxDatasetTask.  # noqa: E501
        :type: float
        """

        self._periodicity = periodicity

    @property
    def periods_to_predict(self):
        """Gets the periods_to_predict of this SarimaxDatasetTask.  # noqa: E501


        :return: The periods_to_predict of this SarimaxDatasetTask.  # noqa: E501
        :rtype: float
        """
        return self._periods_to_predict

    @periods_to_predict.setter
    def periods_to_predict(self, periods_to_predict):
        """Sets the periods_to_predict of this SarimaxDatasetTask.


        :param periods_to_predict: The periods_to_predict of this SarimaxDatasetTask.  # noqa: E501
        :type: float
        """

        self._periods_to_predict = periods_to_predict

    @property
    def selection_criteria(self):
        """Gets the selection_criteria of this SarimaxDatasetTask.  # noqa: E501


        :return: The selection_criteria of this SarimaxDatasetTask.  # noqa: E501
        :rtype: str
        """
        return self._selection_criteria

    @selection_criteria.setter
    def selection_criteria(self, selection_criteria):
        """Sets the selection_criteria of this SarimaxDatasetTask.


        :param selection_criteria: The selection_criteria of this SarimaxDatasetTask.  # noqa: E501
        :type: str
        """

        self._selection_criteria = selection_criteria

    @property
    def write(self):
        """Gets the write of this SarimaxDatasetTask.  # noqa: E501


        :return: The write of this SarimaxDatasetTask.  # noqa: E501
        :rtype: WriteConfig
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this SarimaxDatasetTask.


        :param write: The write of this SarimaxDatasetTask.  # noqa: E501
        :type: WriteConfig
        """

        self._write = write

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SarimaxDatasetTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
