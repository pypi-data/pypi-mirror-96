# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PagePreferencesUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'blocks': 'dict(str, object)',
        'dt_u': 'datetime',
        'filters': 'list[PageFilterPreferences]',
        'filters_sidebar': 'dict(str, object)',
        'virtual_pages': 'dict(str, object)',
        'widgets': 'dict(str, object)'
    }

    attribute_map = {
        'blocks': 'blocks',
        'dt_u': 'dt_u',
        'filters': 'filters',
        'filters_sidebar': 'filters_sidebar',
        'virtual_pages': 'virtual_pages',
        'widgets': 'widgets'
    }

    def __init__(self, blocks=None, dt_u=None, filters=None, filters_sidebar=None, virtual_pages=None, widgets=None):  # noqa: E501
        """PagePreferencesUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._blocks = None
        self._dt_u = None
        self._filters = None
        self._filters_sidebar = None
        self._virtual_pages = None
        self._widgets = None
        self.discriminator = None

        if blocks is not None:
            self.blocks = blocks
        if dt_u is not None:
            self.dt_u = dt_u
        if filters is not None:
            self.filters = filters
        if filters_sidebar is not None:
            self.filters_sidebar = filters_sidebar
        if virtual_pages is not None:
            self.virtual_pages = virtual_pages
        if widgets is not None:
            self.widgets = widgets

    @property
    def blocks(self):
        """Gets the blocks of this PagePreferencesUpdate.  # noqa: E501


        :return: The blocks of this PagePreferencesUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this PagePreferencesUpdate.


        :param blocks: The blocks of this PagePreferencesUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._blocks = blocks

    @property
    def dt_u(self):
        """Gets the dt_u of this PagePreferencesUpdate.  # noqa: E501


        :return: The dt_u of this PagePreferencesUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this PagePreferencesUpdate.


        :param dt_u: The dt_u of this PagePreferencesUpdate.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def filters(self):
        """Gets the filters of this PagePreferencesUpdate.  # noqa: E501


        :return: The filters of this PagePreferencesUpdate.  # noqa: E501
        :rtype: list[PageFilterPreferences]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this PagePreferencesUpdate.


        :param filters: The filters of this PagePreferencesUpdate.  # noqa: E501
        :type: list[PageFilterPreferences]
        """

        self._filters = filters

    @property
    def filters_sidebar(self):
        """Gets the filters_sidebar of this PagePreferencesUpdate.  # noqa: E501


        :return: The filters_sidebar of this PagePreferencesUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._filters_sidebar

    @filters_sidebar.setter
    def filters_sidebar(self, filters_sidebar):
        """Sets the filters_sidebar of this PagePreferencesUpdate.


        :param filters_sidebar: The filters_sidebar of this PagePreferencesUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._filters_sidebar = filters_sidebar

    @property
    def virtual_pages(self):
        """Gets the virtual_pages of this PagePreferencesUpdate.  # noqa: E501


        :return: The virtual_pages of this PagePreferencesUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._virtual_pages

    @virtual_pages.setter
    def virtual_pages(self, virtual_pages):
        """Sets the virtual_pages of this PagePreferencesUpdate.


        :param virtual_pages: The virtual_pages of this PagePreferencesUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._virtual_pages = virtual_pages

    @property
    def widgets(self):
        """Gets the widgets of this PagePreferencesUpdate.  # noqa: E501


        :return: The widgets of this PagePreferencesUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this PagePreferencesUpdate.


        :param widgets: The widgets of this PagePreferencesUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._widgets = widgets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagePreferencesUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
