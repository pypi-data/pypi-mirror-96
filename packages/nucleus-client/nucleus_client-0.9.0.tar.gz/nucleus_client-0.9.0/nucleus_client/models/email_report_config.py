# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmailReportConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_views': 'dict(str, object)',
        'email_subject': 'str',
        'email_template_id': 'str',
        'from_email': 'EmailAddress',
        'send_to_list': 'list[EmailAddress]'
    }

    attribute_map = {
        'data_views': 'data_views',
        'email_subject': 'email_subject',
        'email_template_id': 'email_template_id',
        'from_email': 'from_email',
        'send_to_list': 'send_to_list'
    }

    def __init__(self, data_views=None, email_subject=None, email_template_id=None, from_email=None, send_to_list=None):  # noqa: E501
        """EmailReportConfig - a model defined in OpenAPI"""  # noqa: E501

        self._data_views = None
        self._email_subject = None
        self._email_template_id = None
        self._from_email = None
        self._send_to_list = None
        self.discriminator = None

        if data_views is not None:
            self.data_views = data_views
        if email_subject is not None:
            self.email_subject = email_subject
        self.email_template_id = email_template_id
        self.from_email = from_email
        self.send_to_list = send_to_list

    @property
    def data_views(self):
        """Gets the data_views of this EmailReportConfig.  # noqa: E501


        :return: The data_views of this EmailReportConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data_views

    @data_views.setter
    def data_views(self, data_views):
        """Sets the data_views of this EmailReportConfig.


        :param data_views: The data_views of this EmailReportConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._data_views = data_views

    @property
    def email_subject(self):
        """Gets the email_subject of this EmailReportConfig.  # noqa: E501


        :return: The email_subject of this EmailReportConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this EmailReportConfig.


        :param email_subject: The email_subject of this EmailReportConfig.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def email_template_id(self):
        """Gets the email_template_id of this EmailReportConfig.  # noqa: E501


        :return: The email_template_id of this EmailReportConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_template_id

    @email_template_id.setter
    def email_template_id(self, email_template_id):
        """Sets the email_template_id of this EmailReportConfig.


        :param email_template_id: The email_template_id of this EmailReportConfig.  # noqa: E501
        :type: str
        """
        if email_template_id is None:
            raise ValueError("Invalid value for `email_template_id`, must not be `None`")  # noqa: E501

        self._email_template_id = email_template_id

    @property
    def from_email(self):
        """Gets the from_email of this EmailReportConfig.  # noqa: E501


        :return: The from_email of this EmailReportConfig.  # noqa: E501
        :rtype: EmailAddress
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this EmailReportConfig.


        :param from_email: The from_email of this EmailReportConfig.  # noqa: E501
        :type: EmailAddress
        """
        if from_email is None:
            raise ValueError("Invalid value for `from_email`, must not be `None`")  # noqa: E501

        self._from_email = from_email

    @property
    def send_to_list(self):
        """Gets the send_to_list of this EmailReportConfig.  # noqa: E501


        :return: The send_to_list of this EmailReportConfig.  # noqa: E501
        :rtype: list[EmailAddress]
        """
        return self._send_to_list

    @send_to_list.setter
    def send_to_list(self, send_to_list):
        """Sets the send_to_list of this EmailReportConfig.


        :param send_to_list: The send_to_list of this EmailReportConfig.  # noqa: E501
        :type: list[EmailAddress]
        """
        if send_to_list is None:
            raise ValueError("Invalid value for `send_to_list`, must not be `None`")  # noqa: E501

        self._send_to_list = send_to_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailReportConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
