# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplatedPage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'colors': 'dict(str, object)',
        'data_table_mode': 'str',
        'dt_u': 'datetime',
        'filter_excludes': 'list[str]',
        'filter_mode': 'str',
        'filters': 'list[Filter]',
        'page_template_id': 'str',
        'page_template_slug': 'str',
        'section_title': 'str',
        'section_title_template': 'list[dict(str, object)]',
        'settings': 'dict(str, object)',
        'slug': 'str',
        'title': 'str',
        'title_template': 'list[dict(str, object)]',
        'user_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'colors': 'colors',
        'data_table_mode': 'data_table_mode',
        'dt_u': 'dt_u',
        'filter_excludes': 'filter_excludes',
        'filter_mode': 'filter_mode',
        'filters': 'filters',
        'page_template_id': 'page_template_id',
        'page_template_slug': 'page_template_slug',
        'section_title': 'section_title',
        'section_title_template': 'section_title_template',
        'settings': 'settings',
        'slug': 'slug',
        'title': 'title',
        'title_template': 'title_template',
        'user_id': 'user_id'
    }

    def __init__(self, id=None, client_id=None, colors=None, data_table_mode=None, dt_u=None, filter_excludes=None, filter_mode=None, filters=None, page_template_id=None, page_template_slug=None, section_title=None, section_title_template=None, settings=None, slug=None, title=None, title_template=None, user_id=None):  # noqa: E501
        """TemplatedPage - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._colors = None
        self._data_table_mode = None
        self._dt_u = None
        self._filter_excludes = None
        self._filter_mode = None
        self._filters = None
        self._page_template_id = None
        self._page_template_slug = None
        self._section_title = None
        self._section_title_template = None
        self._settings = None
        self._slug = None
        self._title = None
        self._title_template = None
        self._user_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.client_id = client_id
        if colors is not None:
            self.colors = colors
        if data_table_mode is not None:
            self.data_table_mode = data_table_mode
        if dt_u is not None:
            self.dt_u = dt_u
        if filter_excludes is not None:
            self.filter_excludes = filter_excludes
        if filter_mode is not None:
            self.filter_mode = filter_mode
        if filters is not None:
            self.filters = filters
        if page_template_id is not None:
            self.page_template_id = page_template_id
        self.page_template_slug = page_template_slug
        if section_title is not None:
            self.section_title = section_title
        if section_title_template is not None:
            self.section_title_template = section_title_template
        if settings is not None:
            self.settings = settings
        self.slug = slug
        self.title = title
        if title_template is not None:
            self.title_template = title_template
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this TemplatedPage.  # noqa: E501


        :return: The id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplatedPage.


        :param id: The id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this TemplatedPage.  # noqa: E501


        :return: The client_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TemplatedPage.


        :param client_id: The client_id of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def colors(self):
        """Gets the colors of this TemplatedPage.  # noqa: E501


        :return: The colors of this TemplatedPage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this TemplatedPage.


        :param colors: The colors of this TemplatedPage.  # noqa: E501
        :type: dict(str, object)
        """

        self._colors = colors

    @property
    def data_table_mode(self):
        """Gets the data_table_mode of this TemplatedPage.  # noqa: E501


        :return: The data_table_mode of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._data_table_mode

    @data_table_mode.setter
    def data_table_mode(self, data_table_mode):
        """Sets the data_table_mode of this TemplatedPage.


        :param data_table_mode: The data_table_mode of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._data_table_mode = data_table_mode

    @property
    def dt_u(self):
        """Gets the dt_u of this TemplatedPage.  # noqa: E501


        :return: The dt_u of this TemplatedPage.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this TemplatedPage.


        :param dt_u: The dt_u of this TemplatedPage.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def filter_excludes(self):
        """Gets the filter_excludes of this TemplatedPage.  # noqa: E501


        :return: The filter_excludes of this TemplatedPage.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_excludes

    @filter_excludes.setter
    def filter_excludes(self, filter_excludes):
        """Sets the filter_excludes of this TemplatedPage.


        :param filter_excludes: The filter_excludes of this TemplatedPage.  # noqa: E501
        :type: list[str]
        """

        self._filter_excludes = filter_excludes

    @property
    def filter_mode(self):
        """Gets the filter_mode of this TemplatedPage.  # noqa: E501


        :return: The filter_mode of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._filter_mode

    @filter_mode.setter
    def filter_mode(self, filter_mode):
        """Sets the filter_mode of this TemplatedPage.


        :param filter_mode: The filter_mode of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._filter_mode = filter_mode

    @property
    def filters(self):
        """Gets the filters of this TemplatedPage.  # noqa: E501


        :return: The filters of this TemplatedPage.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this TemplatedPage.


        :param filters: The filters of this TemplatedPage.  # noqa: E501
        :type: list[Filter]
        """

        self._filters = filters

    @property
    def page_template_id(self):
        """Gets the page_template_id of this TemplatedPage.  # noqa: E501


        :return: The page_template_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._page_template_id

    @page_template_id.setter
    def page_template_id(self, page_template_id):
        """Sets the page_template_id of this TemplatedPage.


        :param page_template_id: The page_template_id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._page_template_id = page_template_id

    @property
    def page_template_slug(self):
        """Gets the page_template_slug of this TemplatedPage.  # noqa: E501


        :return: The page_template_slug of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._page_template_slug

    @page_template_slug.setter
    def page_template_slug(self, page_template_slug):
        """Sets the page_template_slug of this TemplatedPage.


        :param page_template_slug: The page_template_slug of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if page_template_slug is None:
            raise ValueError("Invalid value for `page_template_slug`, must not be `None`")  # noqa: E501

        self._page_template_slug = page_template_slug

    @property
    def section_title(self):
        """Gets the section_title of this TemplatedPage.  # noqa: E501


        :return: The section_title of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._section_title

    @section_title.setter
    def section_title(self, section_title):
        """Sets the section_title of this TemplatedPage.


        :param section_title: The section_title of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._section_title = section_title

    @property
    def section_title_template(self):
        """Gets the section_title_template of this TemplatedPage.  # noqa: E501


        :return: The section_title_template of this TemplatedPage.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._section_title_template

    @section_title_template.setter
    def section_title_template(self, section_title_template):
        """Sets the section_title_template of this TemplatedPage.


        :param section_title_template: The section_title_template of this TemplatedPage.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._section_title_template = section_title_template

    @property
    def settings(self):
        """Gets the settings of this TemplatedPage.  # noqa: E501


        :return: The settings of this TemplatedPage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this TemplatedPage.


        :param settings: The settings of this TemplatedPage.  # noqa: E501
        :type: dict(str, object)
        """

        self._settings = settings

    @property
    def slug(self):
        """Gets the slug of this TemplatedPage.  # noqa: E501


        :return: The slug of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this TemplatedPage.


        :param slug: The slug of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this TemplatedPage.  # noqa: E501


        :return: The title of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplatedPage.


        :param title: The title of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def title_template(self):
        """Gets the title_template of this TemplatedPage.  # noqa: E501


        :return: The title_template of this TemplatedPage.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._title_template

    @title_template.setter
    def title_template(self, title_template):
        """Sets the title_template of this TemplatedPage.


        :param title_template: The title_template of this TemplatedPage.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._title_template = title_template

    @property
    def user_id(self):
        """Gets the user_id of this TemplatedPage.  # noqa: E501


        :return: The user_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TemplatedPage.


        :param user_id: The user_id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatedPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
