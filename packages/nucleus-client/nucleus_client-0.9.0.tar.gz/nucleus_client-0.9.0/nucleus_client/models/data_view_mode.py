# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataViewMode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'intervals': 'list[DataViewInterval]',
        'period_to_date': 'DataViewPeriodToDate'
    }

    attribute_map = {
        'intervals': 'intervals',
        'period_to_date': 'period_to_date'
    }

    def __init__(self, intervals=None, period_to_date=None):  # noqa: E501
        """DataViewMode - a model defined in OpenAPI"""  # noqa: E501

        self._intervals = None
        self._period_to_date = None
        self.discriminator = None

        if intervals is not None:
            self.intervals = intervals
        if period_to_date is not None:
            self.period_to_date = period_to_date

    @property
    def intervals(self):
        """Gets the intervals of this DataViewMode.  # noqa: E501


        :return: The intervals of this DataViewMode.  # noqa: E501
        :rtype: list[DataViewInterval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this DataViewMode.


        :param intervals: The intervals of this DataViewMode.  # noqa: E501
        :type: list[DataViewInterval]
        """

        self._intervals = intervals

    @property
    def period_to_date(self):
        """Gets the period_to_date of this DataViewMode.  # noqa: E501


        :return: The period_to_date of this DataViewMode.  # noqa: E501
        :rtype: DataViewPeriodToDate
        """
        return self._period_to_date

    @period_to_date.setter
    def period_to_date(self, period_to_date):
        """Sets the period_to_date of this DataViewMode.


        :param period_to_date: The period_to_date of this DataViewMode.  # noqa: E501
        :type: DataViewPeriodToDate
        """

        self._period_to_date = period_to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewMode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
