# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Options(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filter_sidebar_start': 'str',
        'high_density': 'bool'
    }

    attribute_map = {
        'filter_sidebar_start': 'filter_sidebar_start',
        'high_density': 'high_density'
    }

    def __init__(self, filter_sidebar_start=None, high_density=None):  # noqa: E501
        """Options - a model defined in OpenAPI"""  # noqa: E501

        self._filter_sidebar_start = None
        self._high_density = None
        self.discriminator = None

        if filter_sidebar_start is not None:
            self.filter_sidebar_start = filter_sidebar_start
        if high_density is not None:
            self.high_density = high_density

    @property
    def filter_sidebar_start(self):
        """Gets the filter_sidebar_start of this Options.  # noqa: E501


        :return: The filter_sidebar_start of this Options.  # noqa: E501
        :rtype: str
        """
        return self._filter_sidebar_start

    @filter_sidebar_start.setter
    def filter_sidebar_start(self, filter_sidebar_start):
        """Sets the filter_sidebar_start of this Options.


        :param filter_sidebar_start: The filter_sidebar_start of this Options.  # noqa: E501
        :type: str
        """

        self._filter_sidebar_start = filter_sidebar_start

    @property
    def high_density(self):
        """Gets the high_density of this Options.  # noqa: E501


        :return: The high_density of this Options.  # noqa: E501
        :rtype: bool
        """
        return self._high_density

    @high_density.setter
    def high_density(self, high_density):
        """Sets the high_density of this Options.


        :param high_density: The high_density of this Options.  # noqa: E501
        :type: bool
        """

        self._high_density = high_density

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
