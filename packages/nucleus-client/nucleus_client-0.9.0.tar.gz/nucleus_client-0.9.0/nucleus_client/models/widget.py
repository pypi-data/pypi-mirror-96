# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Widget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'data_selectors': 'DataSelector',
        'dt_u': 'datetime',
        'filter_excludes': 'list[str]',
        'filter_map': 'list[FilterMap]',
        'label_map': 'dict(str, object)',
        'links': 'Link',
        'settings': 'dict(str, object)',
        'sub_title': 'str',
        'sub_title_template': 'list[dict(str, object)]',
        'title': 'str',
        'title_template': 'list[dict(str, object)]',
        'view_hash_key': 'str',
        'view_transforms': 'list[dict(str, object)]',
        'widget_type_name': 'str'
    }

    attribute_map = {
        'id': '_id',
        'data_selectors': 'data_selectors',
        'dt_u': 'dt_u',
        'filter_excludes': 'filter_excludes',
        'filter_map': 'filter_map',
        'label_map': 'label_map',
        'links': 'links',
        'settings': 'settings',
        'sub_title': 'sub_title',
        'sub_title_template': 'sub_title_template',
        'title': 'title',
        'title_template': 'title_template',
        'view_hash_key': 'view_hash_key',
        'view_transforms': 'view_transforms',
        'widget_type_name': 'widget_type_name'
    }

    def __init__(self, id=None, data_selectors=None, dt_u=None, filter_excludes=None, filter_map=None, label_map=None, links=None, settings=None, sub_title=None, sub_title_template=None, title=None, title_template=None, view_hash_key=None, view_transforms=None, widget_type_name=None):  # noqa: E501
        """Widget - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._data_selectors = None
        self._dt_u = None
        self._filter_excludes = None
        self._filter_map = None
        self._label_map = None
        self._links = None
        self._settings = None
        self._sub_title = None
        self._sub_title_template = None
        self._title = None
        self._title_template = None
        self._view_hash_key = None
        self._view_transforms = None
        self._widget_type_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if data_selectors is not None:
            self.data_selectors = data_selectors
        if dt_u is not None:
            self.dt_u = dt_u
        if filter_excludes is not None:
            self.filter_excludes = filter_excludes
        if filter_map is not None:
            self.filter_map = filter_map
        if label_map is not None:
            self.label_map = label_map
        if links is not None:
            self.links = links
        if settings is not None:
            self.settings = settings
        if sub_title is not None:
            self.sub_title = sub_title
        if sub_title_template is not None:
            self.sub_title_template = sub_title_template
        self.title = title
        if title_template is not None:
            self.title_template = title_template
        self.view_hash_key = view_hash_key
        if view_transforms is not None:
            self.view_transforms = view_transforms
        self.widget_type_name = widget_type_name

    @property
    def id(self):
        """Gets the id of this Widget.  # noqa: E501


        :return: The id of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Widget.


        :param id: The id of this Widget.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def data_selectors(self):
        """Gets the data_selectors of this Widget.  # noqa: E501


        :return: The data_selectors of this Widget.  # noqa: E501
        :rtype: DataSelector
        """
        return self._data_selectors

    @data_selectors.setter
    def data_selectors(self, data_selectors):
        """Sets the data_selectors of this Widget.


        :param data_selectors: The data_selectors of this Widget.  # noqa: E501
        :type: DataSelector
        """

        self._data_selectors = data_selectors

    @property
    def dt_u(self):
        """Gets the dt_u of this Widget.  # noqa: E501


        :return: The dt_u of this Widget.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Widget.


        :param dt_u: The dt_u of this Widget.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def filter_excludes(self):
        """Gets the filter_excludes of this Widget.  # noqa: E501


        :return: The filter_excludes of this Widget.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_excludes

    @filter_excludes.setter
    def filter_excludes(self, filter_excludes):
        """Sets the filter_excludes of this Widget.


        :param filter_excludes: The filter_excludes of this Widget.  # noqa: E501
        :type: list[str]
        """

        self._filter_excludes = filter_excludes

    @property
    def filter_map(self):
        """Gets the filter_map of this Widget.  # noqa: E501


        :return: The filter_map of this Widget.  # noqa: E501
        :rtype: list[FilterMap]
        """
        return self._filter_map

    @filter_map.setter
    def filter_map(self, filter_map):
        """Sets the filter_map of this Widget.


        :param filter_map: The filter_map of this Widget.  # noqa: E501
        :type: list[FilterMap]
        """

        self._filter_map = filter_map

    @property
    def label_map(self):
        """Gets the label_map of this Widget.  # noqa: E501


        :return: The label_map of this Widget.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._label_map

    @label_map.setter
    def label_map(self, label_map):
        """Sets the label_map of this Widget.


        :param label_map: The label_map of this Widget.  # noqa: E501
        :type: dict(str, object)
        """

        self._label_map = label_map

    @property
    def links(self):
        """Gets the links of this Widget.  # noqa: E501


        :return: The links of this Widget.  # noqa: E501
        :rtype: Link
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Widget.


        :param links: The links of this Widget.  # noqa: E501
        :type: Link
        """

        self._links = links

    @property
    def settings(self):
        """Gets the settings of this Widget.  # noqa: E501


        :return: The settings of this Widget.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Widget.


        :param settings: The settings of this Widget.  # noqa: E501
        :type: dict(str, object)
        """

        self._settings = settings

    @property
    def sub_title(self):
        """Gets the sub_title of this Widget.  # noqa: E501


        :return: The sub_title of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this Widget.


        :param sub_title: The sub_title of this Widget.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def sub_title_template(self):
        """Gets the sub_title_template of this Widget.  # noqa: E501


        :return: The sub_title_template of this Widget.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sub_title_template

    @sub_title_template.setter
    def sub_title_template(self, sub_title_template):
        """Sets the sub_title_template of this Widget.


        :param sub_title_template: The sub_title_template of this Widget.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sub_title_template = sub_title_template

    @property
    def title(self):
        """Gets the title of this Widget.  # noqa: E501


        :return: The title of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Widget.


        :param title: The title of this Widget.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def title_template(self):
        """Gets the title_template of this Widget.  # noqa: E501


        :return: The title_template of this Widget.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._title_template

    @title_template.setter
    def title_template(self, title_template):
        """Sets the title_template of this Widget.


        :param title_template: The title_template of this Widget.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._title_template = title_template

    @property
    def view_hash_key(self):
        """Gets the view_hash_key of this Widget.  # noqa: E501


        :return: The view_hash_key of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._view_hash_key

    @view_hash_key.setter
    def view_hash_key(self, view_hash_key):
        """Sets the view_hash_key of this Widget.


        :param view_hash_key: The view_hash_key of this Widget.  # noqa: E501
        :type: str
        """
        if view_hash_key is None:
            raise ValueError("Invalid value for `view_hash_key`, must not be `None`")  # noqa: E501

        self._view_hash_key = view_hash_key

    @property
    def view_transforms(self):
        """Gets the view_transforms of this Widget.  # noqa: E501


        :return: The view_transforms of this Widget.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._view_transforms

    @view_transforms.setter
    def view_transforms(self, view_transforms):
        """Sets the view_transforms of this Widget.


        :param view_transforms: The view_transforms of this Widget.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._view_transforms = view_transforms

    @property
    def widget_type_name(self):
        """Gets the widget_type_name of this Widget.  # noqa: E501


        :return: The widget_type_name of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._widget_type_name

    @widget_type_name.setter
    def widget_type_name(self, widget_type_name):
        """Sets the widget_type_name of this Widget.


        :param widget_type_name: The widget_type_name of this Widget.  # noqa: E501
        :type: str
        """
        if widget_type_name is None:
            raise ValueError("Invalid value for `widget_type_name`, must not be `None`")  # noqa: E501

        self._widget_type_name = widget_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Widget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
