# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataViewSort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'direction': 'str',
        'field_name': 'str',
        'sort_type': 'str'
    }

    attribute_map = {
        'direction': 'direction',
        'field_name': 'field_name',
        'sort_type': 'sort_type'
    }

    def __init__(self, direction=None, field_name=None, sort_type=None):  # noqa: E501
        """DataViewSort - a model defined in OpenAPI"""  # noqa: E501

        self._direction = None
        self._field_name = None
        self._sort_type = None
        self.discriminator = None

        if direction is not None:
            self.direction = direction
        self.field_name = field_name
        if sort_type is not None:
            self.sort_type = sort_type

    @property
    def direction(self):
        """Gets the direction of this DataViewSort.  # noqa: E501


        :return: The direction of this DataViewSort.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DataViewSort.


        :param direction: The direction of this DataViewSort.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def field_name(self):
        """Gets the field_name of this DataViewSort.  # noqa: E501


        :return: The field_name of this DataViewSort.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this DataViewSort.


        :param field_name: The field_name of this DataViewSort.  # noqa: E501
        :type: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501

        self._field_name = field_name

    @property
    def sort_type(self):
        """Gets the sort_type of this DataViewSort.  # noqa: E501


        :return: The sort_type of this DataViewSort.  # noqa: E501
        :rtype: str
        """
        return self._sort_type

    @sort_type.setter
    def sort_type(self, sort_type):
        """Sets the sort_type of this DataViewSort.


        :param sort_type: The sort_type of this DataViewSort.  # noqa: E501
        :type: str
        """

        self._sort_type = sort_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewSort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
