# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TimeStepMetric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'difference': 'TimeStepDifferenceMetric',
        'growth_rate': 'TimeStepGrowthRateMetric',
        'netforum_member_stats': 'TimeStepNetforumStatsMetric',
        'renewal_rate': 'TimeStepRenewalRateMetric'
    }

    attribute_map = {
        'difference': 'difference',
        'growth_rate': 'growth_rate',
        'netforum_member_stats': 'netforum_member_stats',
        'renewal_rate': 'renewal_rate'
    }

    def __init__(self, difference=None, growth_rate=None, netforum_member_stats=None, renewal_rate=None):  # noqa: E501
        """TimeStepMetric - a model defined in OpenAPI"""  # noqa: E501

        self._difference = None
        self._growth_rate = None
        self._netforum_member_stats = None
        self._renewal_rate = None
        self.discriminator = None

        if difference is not None:
            self.difference = difference
        if growth_rate is not None:
            self.growth_rate = growth_rate
        if netforum_member_stats is not None:
            self.netforum_member_stats = netforum_member_stats
        if renewal_rate is not None:
            self.renewal_rate = renewal_rate

    @property
    def difference(self):
        """Gets the difference of this TimeStepMetric.  # noqa: E501


        :return: The difference of this TimeStepMetric.  # noqa: E501
        :rtype: TimeStepDifferenceMetric
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this TimeStepMetric.


        :param difference: The difference of this TimeStepMetric.  # noqa: E501
        :type: TimeStepDifferenceMetric
        """

        self._difference = difference

    @property
    def growth_rate(self):
        """Gets the growth_rate of this TimeStepMetric.  # noqa: E501


        :return: The growth_rate of this TimeStepMetric.  # noqa: E501
        :rtype: TimeStepGrowthRateMetric
        """
        return self._growth_rate

    @growth_rate.setter
    def growth_rate(self, growth_rate):
        """Sets the growth_rate of this TimeStepMetric.


        :param growth_rate: The growth_rate of this TimeStepMetric.  # noqa: E501
        :type: TimeStepGrowthRateMetric
        """

        self._growth_rate = growth_rate

    @property
    def netforum_member_stats(self):
        """Gets the netforum_member_stats of this TimeStepMetric.  # noqa: E501


        :return: The netforum_member_stats of this TimeStepMetric.  # noqa: E501
        :rtype: TimeStepNetforumStatsMetric
        """
        return self._netforum_member_stats

    @netforum_member_stats.setter
    def netforum_member_stats(self, netforum_member_stats):
        """Sets the netforum_member_stats of this TimeStepMetric.


        :param netforum_member_stats: The netforum_member_stats of this TimeStepMetric.  # noqa: E501
        :type: TimeStepNetforumStatsMetric
        """

        self._netforum_member_stats = netforum_member_stats

    @property
    def renewal_rate(self):
        """Gets the renewal_rate of this TimeStepMetric.  # noqa: E501


        :return: The renewal_rate of this TimeStepMetric.  # noqa: E501
        :rtype: TimeStepRenewalRateMetric
        """
        return self._renewal_rate

    @renewal_rate.setter
    def renewal_rate(self, renewal_rate):
        """Sets the renewal_rate of this TimeStepMetric.


        :param renewal_rate: The renewal_rate of this TimeStepMetric.  # noqa: E501
        :type: TimeStepRenewalRateMetric
        """

        self._renewal_rate = renewal_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeStepMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
