# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Filter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bool': 'BooleanFilter',
        'boolean': 'BooleanFilter',
        'datetime': 'DateTimeFilter',
        'dt': 'DateTimeFilter',
        'invert': 'bool',
        'non_null': 'NonNullFilter',
        'nonnull': 'NonNullFilter',
        'num': 'NumberFilter',
        'number': 'NumberFilter',
        '_or': 'OrFilter',
        'str': 'StringFilter',
        'string': 'StringFilter'
    }

    attribute_map = {
        'bool': 'bool',
        'boolean': 'boolean',
        'datetime': 'datetime',
        'dt': 'dt',
        'invert': 'invert',
        'non_null': 'non_null',
        'nonnull': 'nonnull',
        'num': 'num',
        'number': 'number',
        '_or': 'or',
        'str': 'str',
        'string': 'string'
    }

    def __init__(self, bool=None, boolean=None, datetime=None, dt=None, invert=None, non_null=None, nonnull=None, num=None, number=None, _or=None, str=None, string=None):  # noqa: E501
        """Filter - a model defined in OpenAPI"""  # noqa: E501

        self._bool = None
        self._boolean = None
        self._datetime = None
        self._dt = None
        self._invert = None
        self._non_null = None
        self._nonnull = None
        self._num = None
        self._number = None
        self.__or = None
        self._str = None
        self._string = None
        self.discriminator = None

        if bool is not None:
            self.bool = bool
        if boolean is not None:
            self.boolean = boolean
        if datetime is not None:
            self.datetime = datetime
        if dt is not None:
            self.dt = dt
        if invert is not None:
            self.invert = invert
        if non_null is not None:
            self.non_null = non_null
        if nonnull is not None:
            self.nonnull = nonnull
        if num is not None:
            self.num = num
        if number is not None:
            self.number = number
        if _or is not None:
            self._or = _or
        if str is not None:
            self.str = str
        if string is not None:
            self.string = string

    @property
    def bool(self):
        """Gets the bool of this Filter.  # noqa: E501


        :return: The bool of this Filter.  # noqa: E501
        :rtype: BooleanFilter
        """
        return self._bool

    @bool.setter
    def bool(self, bool):
        """Sets the bool of this Filter.


        :param bool: The bool of this Filter.  # noqa: E501
        :type: BooleanFilter
        """

        self._bool = bool

    @property
    def boolean(self):
        """Gets the boolean of this Filter.  # noqa: E501


        :return: The boolean of this Filter.  # noqa: E501
        :rtype: BooleanFilter
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this Filter.


        :param boolean: The boolean of this Filter.  # noqa: E501
        :type: BooleanFilter
        """

        self._boolean = boolean

    @property
    def datetime(self):
        """Gets the datetime of this Filter.  # noqa: E501


        :return: The datetime of this Filter.  # noqa: E501
        :rtype: DateTimeFilter
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this Filter.


        :param datetime: The datetime of this Filter.  # noqa: E501
        :type: DateTimeFilter
        """

        self._datetime = datetime

    @property
    def dt(self):
        """Gets the dt of this Filter.  # noqa: E501


        :return: The dt of this Filter.  # noqa: E501
        :rtype: DateTimeFilter
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this Filter.


        :param dt: The dt of this Filter.  # noqa: E501
        :type: DateTimeFilter
        """

        self._dt = dt

    @property
    def invert(self):
        """Gets the invert of this Filter.  # noqa: E501


        :return: The invert of this Filter.  # noqa: E501
        :rtype: bool
        """
        return self._invert

    @invert.setter
    def invert(self, invert):
        """Sets the invert of this Filter.


        :param invert: The invert of this Filter.  # noqa: E501
        :type: bool
        """

        self._invert = invert

    @property
    def non_null(self):
        """Gets the non_null of this Filter.  # noqa: E501


        :return: The non_null of this Filter.  # noqa: E501
        :rtype: NonNullFilter
        """
        return self._non_null

    @non_null.setter
    def non_null(self, non_null):
        """Sets the non_null of this Filter.


        :param non_null: The non_null of this Filter.  # noqa: E501
        :type: NonNullFilter
        """

        self._non_null = non_null

    @property
    def nonnull(self):
        """Gets the nonnull of this Filter.  # noqa: E501


        :return: The nonnull of this Filter.  # noqa: E501
        :rtype: NonNullFilter
        """
        return self._nonnull

    @nonnull.setter
    def nonnull(self, nonnull):
        """Sets the nonnull of this Filter.


        :param nonnull: The nonnull of this Filter.  # noqa: E501
        :type: NonNullFilter
        """

        self._nonnull = nonnull

    @property
    def num(self):
        """Gets the num of this Filter.  # noqa: E501


        :return: The num of this Filter.  # noqa: E501
        :rtype: NumberFilter
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Filter.


        :param num: The num of this Filter.  # noqa: E501
        :type: NumberFilter
        """

        self._num = num

    @property
    def number(self):
        """Gets the number of this Filter.  # noqa: E501


        :return: The number of this Filter.  # noqa: E501
        :rtype: NumberFilter
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Filter.


        :param number: The number of this Filter.  # noqa: E501
        :type: NumberFilter
        """

        self._number = number

    @property
    def _or(self):
        """Gets the _or of this Filter.  # noqa: E501


        :return: The _or of this Filter.  # noqa: E501
        :rtype: OrFilter
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this Filter.


        :param _or: The _or of this Filter.  # noqa: E501
        :type: OrFilter
        """

        self.__or = _or

    @property
    def str(self):
        """Gets the str of this Filter.  # noqa: E501


        :return: The str of this Filter.  # noqa: E501
        :rtype: StringFilter
        """
        return self._str

    @str.setter
    def str(self, str):
        """Sets the str of this Filter.


        :param str: The str of this Filter.  # noqa: E501
        :type: StringFilter
        """

        self._str = str

    @property
    def string(self):
        """Gets the string of this Filter.  # noqa: E501


        :return: The string of this Filter.  # noqa: E501
        :rtype: StringFilter
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this Filter.


        :param string: The string of this Filter.  # noqa: E501
        :type: StringFilter
        """

        self._string = string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
