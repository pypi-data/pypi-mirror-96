# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StringTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket': 'StringBucketTransform',
        'casing': 'StringCasingTransform',
        'constant': 'StringConstantTransform',
        'default': 'StringDefaultTransform',
        'distance': 'StringDistanceTransform',
        'extract_url_component': 'StringExtractUrlComponentTransform',
        'format': 'StringFormatTransform',
        'lookup_state': 'StringLookupStateTransform',
        'regexp_extract': 'StringRegexpExtractTransform',
        'regexp_replace': 'StringRegexpReplaceTransform',
        'soundex': 'StringSoundexTransform',
        'split': 'StringSplitTransform',
        'substring': 'StringSubstringTransform',
        'substring_index': 'StringSubstringIndexTransform',
        'to_datetime': 'StringToDatetimeTransform',
        'to_num': 'StringToNumTransform',
        'trim': 'StringTrimTransform'
    }

    attribute_map = {
        'bucket': 'bucket',
        'casing': 'casing',
        'constant': 'constant',
        'default': 'default',
        'distance': 'distance',
        'extract_url_component': 'extract_url_component',
        'format': 'format',
        'lookup_state': 'lookup_state',
        'regexp_extract': 'regexp_extract',
        'regexp_replace': 'regexp_replace',
        'soundex': 'soundex',
        'split': 'split',
        'substring': 'substring',
        'substring_index': 'substring_index',
        'to_datetime': 'to_datetime',
        'to_num': 'to_num',
        'trim': 'trim'
    }

    def __init__(self, bucket=None, casing=None, constant=None, default=None, distance=None, extract_url_component=None, format=None, lookup_state=None, regexp_extract=None, regexp_replace=None, soundex=None, split=None, substring=None, substring_index=None, to_datetime=None, to_num=None, trim=None):  # noqa: E501
        """StringTransform - a model defined in OpenAPI"""  # noqa: E501

        self._bucket = None
        self._casing = None
        self._constant = None
        self._default = None
        self._distance = None
        self._extract_url_component = None
        self._format = None
        self._lookup_state = None
        self._regexp_extract = None
        self._regexp_replace = None
        self._soundex = None
        self._split = None
        self._substring = None
        self._substring_index = None
        self._to_datetime = None
        self._to_num = None
        self._trim = None
        self.discriminator = None

        if bucket is not None:
            self.bucket = bucket
        if casing is not None:
            self.casing = casing
        if constant is not None:
            self.constant = constant
        if default is not None:
            self.default = default
        if distance is not None:
            self.distance = distance
        if extract_url_component is not None:
            self.extract_url_component = extract_url_component
        if format is not None:
            self.format = format
        if lookup_state is not None:
            self.lookup_state = lookup_state
        if regexp_extract is not None:
            self.regexp_extract = regexp_extract
        if regexp_replace is not None:
            self.regexp_replace = regexp_replace
        if soundex is not None:
            self.soundex = soundex
        if split is not None:
            self.split = split
        if substring is not None:
            self.substring = substring
        if substring_index is not None:
            self.substring_index = substring_index
        if to_datetime is not None:
            self.to_datetime = to_datetime
        if to_num is not None:
            self.to_num = to_num
        if trim is not None:
            self.trim = trim

    @property
    def bucket(self):
        """Gets the bucket of this StringTransform.  # noqa: E501


        :return: The bucket of this StringTransform.  # noqa: E501
        :rtype: StringBucketTransform
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this StringTransform.


        :param bucket: The bucket of this StringTransform.  # noqa: E501
        :type: StringBucketTransform
        """

        self._bucket = bucket

    @property
    def casing(self):
        """Gets the casing of this StringTransform.  # noqa: E501


        :return: The casing of this StringTransform.  # noqa: E501
        :rtype: StringCasingTransform
        """
        return self._casing

    @casing.setter
    def casing(self, casing):
        """Sets the casing of this StringTransform.


        :param casing: The casing of this StringTransform.  # noqa: E501
        :type: StringCasingTransform
        """

        self._casing = casing

    @property
    def constant(self):
        """Gets the constant of this StringTransform.  # noqa: E501


        :return: The constant of this StringTransform.  # noqa: E501
        :rtype: StringConstantTransform
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """Sets the constant of this StringTransform.


        :param constant: The constant of this StringTransform.  # noqa: E501
        :type: StringConstantTransform
        """

        self._constant = constant

    @property
    def default(self):
        """Gets the default of this StringTransform.  # noqa: E501


        :return: The default of this StringTransform.  # noqa: E501
        :rtype: StringDefaultTransform
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this StringTransform.


        :param default: The default of this StringTransform.  # noqa: E501
        :type: StringDefaultTransform
        """

        self._default = default

    @property
    def distance(self):
        """Gets the distance of this StringTransform.  # noqa: E501


        :return: The distance of this StringTransform.  # noqa: E501
        :rtype: StringDistanceTransform
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this StringTransform.


        :param distance: The distance of this StringTransform.  # noqa: E501
        :type: StringDistanceTransform
        """

        self._distance = distance

    @property
    def extract_url_component(self):
        """Gets the extract_url_component of this StringTransform.  # noqa: E501


        :return: The extract_url_component of this StringTransform.  # noqa: E501
        :rtype: StringExtractUrlComponentTransform
        """
        return self._extract_url_component

    @extract_url_component.setter
    def extract_url_component(self, extract_url_component):
        """Sets the extract_url_component of this StringTransform.


        :param extract_url_component: The extract_url_component of this StringTransform.  # noqa: E501
        :type: StringExtractUrlComponentTransform
        """

        self._extract_url_component = extract_url_component

    @property
    def format(self):
        """Gets the format of this StringTransform.  # noqa: E501


        :return: The format of this StringTransform.  # noqa: E501
        :rtype: StringFormatTransform
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this StringTransform.


        :param format: The format of this StringTransform.  # noqa: E501
        :type: StringFormatTransform
        """

        self._format = format

    @property
    def lookup_state(self):
        """Gets the lookup_state of this StringTransform.  # noqa: E501


        :return: The lookup_state of this StringTransform.  # noqa: E501
        :rtype: StringLookupStateTransform
        """
        return self._lookup_state

    @lookup_state.setter
    def lookup_state(self, lookup_state):
        """Sets the lookup_state of this StringTransform.


        :param lookup_state: The lookup_state of this StringTransform.  # noqa: E501
        :type: StringLookupStateTransform
        """

        self._lookup_state = lookup_state

    @property
    def regexp_extract(self):
        """Gets the regexp_extract of this StringTransform.  # noqa: E501


        :return: The regexp_extract of this StringTransform.  # noqa: E501
        :rtype: StringRegexpExtractTransform
        """
        return self._regexp_extract

    @regexp_extract.setter
    def regexp_extract(self, regexp_extract):
        """Sets the regexp_extract of this StringTransform.


        :param regexp_extract: The regexp_extract of this StringTransform.  # noqa: E501
        :type: StringRegexpExtractTransform
        """

        self._regexp_extract = regexp_extract

    @property
    def regexp_replace(self):
        """Gets the regexp_replace of this StringTransform.  # noqa: E501


        :return: The regexp_replace of this StringTransform.  # noqa: E501
        :rtype: StringRegexpReplaceTransform
        """
        return self._regexp_replace

    @regexp_replace.setter
    def regexp_replace(self, regexp_replace):
        """Sets the regexp_replace of this StringTransform.


        :param regexp_replace: The regexp_replace of this StringTransform.  # noqa: E501
        :type: StringRegexpReplaceTransform
        """

        self._regexp_replace = regexp_replace

    @property
    def soundex(self):
        """Gets the soundex of this StringTransform.  # noqa: E501


        :return: The soundex of this StringTransform.  # noqa: E501
        :rtype: StringSoundexTransform
        """
        return self._soundex

    @soundex.setter
    def soundex(self, soundex):
        """Sets the soundex of this StringTransform.


        :param soundex: The soundex of this StringTransform.  # noqa: E501
        :type: StringSoundexTransform
        """

        self._soundex = soundex

    @property
    def split(self):
        """Gets the split of this StringTransform.  # noqa: E501


        :return: The split of this StringTransform.  # noqa: E501
        :rtype: StringSplitTransform
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this StringTransform.


        :param split: The split of this StringTransform.  # noqa: E501
        :type: StringSplitTransform
        """

        self._split = split

    @property
    def substring(self):
        """Gets the substring of this StringTransform.  # noqa: E501


        :return: The substring of this StringTransform.  # noqa: E501
        :rtype: StringSubstringTransform
        """
        return self._substring

    @substring.setter
    def substring(self, substring):
        """Sets the substring of this StringTransform.


        :param substring: The substring of this StringTransform.  # noqa: E501
        :type: StringSubstringTransform
        """

        self._substring = substring

    @property
    def substring_index(self):
        """Gets the substring_index of this StringTransform.  # noqa: E501


        :return: The substring_index of this StringTransform.  # noqa: E501
        :rtype: StringSubstringIndexTransform
        """
        return self._substring_index

    @substring_index.setter
    def substring_index(self, substring_index):
        """Sets the substring_index of this StringTransform.


        :param substring_index: The substring_index of this StringTransform.  # noqa: E501
        :type: StringSubstringIndexTransform
        """

        self._substring_index = substring_index

    @property
    def to_datetime(self):
        """Gets the to_datetime of this StringTransform.  # noqa: E501


        :return: The to_datetime of this StringTransform.  # noqa: E501
        :rtype: StringToDatetimeTransform
        """
        return self._to_datetime

    @to_datetime.setter
    def to_datetime(self, to_datetime):
        """Sets the to_datetime of this StringTransform.


        :param to_datetime: The to_datetime of this StringTransform.  # noqa: E501
        :type: StringToDatetimeTransform
        """

        self._to_datetime = to_datetime

    @property
    def to_num(self):
        """Gets the to_num of this StringTransform.  # noqa: E501


        :return: The to_num of this StringTransform.  # noqa: E501
        :rtype: StringToNumTransform
        """
        return self._to_num

    @to_num.setter
    def to_num(self, to_num):
        """Sets the to_num of this StringTransform.


        :param to_num: The to_num of this StringTransform.  # noqa: E501
        :type: StringToNumTransform
        """

        self._to_num = to_num

    @property
    def trim(self):
        """Gets the trim of this StringTransform.  # noqa: E501


        :return: The trim of this StringTransform.  # noqa: E501
        :rtype: StringTrimTransform
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this StringTransform.


        :param trim: The trim of this StringTransform.  # noqa: E501
        :type: StringTrimTransform
        """

        self._trim = trim

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StringTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
