# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RolePermission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'access': 'str',
        'client_id': 'str',
        'resource': 'str',
        'segment_value': 'object'
    }

    attribute_map = {
        'id': '_id',
        'access': 'access',
        'client_id': 'client_id',
        'resource': 'resource',
        'segment_value': 'segment_value'
    }

    def __init__(self, id=None, access=None, client_id=None, resource=None, segment_value=None):  # noqa: E501
        """RolePermission - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._access = None
        self._client_id = None
        self._resource = None
        self._segment_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.access = access
        if client_id is not None:
            self.client_id = client_id
        self.resource = resource
        if segment_value is not None:
            self.segment_value = segment_value

    @property
    def id(self):
        """Gets the id of this RolePermission.  # noqa: E501


        :return: The id of this RolePermission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RolePermission.


        :param id: The id of this RolePermission.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def access(self):
        """Gets the access of this RolePermission.  # noqa: E501


        :return: The access of this RolePermission.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this RolePermission.


        :param access: The access of this RolePermission.  # noqa: E501
        :type: str
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def client_id(self):
        """Gets the client_id of this RolePermission.  # noqa: E501


        :return: The client_id of this RolePermission.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RolePermission.


        :param client_id: The client_id of this RolePermission.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def resource(self):
        """Gets the resource of this RolePermission.  # noqa: E501


        :return: The resource of this RolePermission.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this RolePermission.


        :param resource: The resource of this RolePermission.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def segment_value(self):
        """Gets the segment_value of this RolePermission.  # noqa: E501


        :return: The segment_value of this RolePermission.  # noqa: E501
        :rtype: object
        """
        return self._segment_value

    @segment_value.setter
    def segment_value(self, segment_value):
        """Sets the segment_value of this RolePermission.


        :param segment_value: The segment_value of this RolePermission.  # noqa: E501
        :type: object
        """

        self._segment_value = segment_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RolePermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
