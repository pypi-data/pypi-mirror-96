# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Goal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'dataset': 'str',
        'dt_u': 'datetime',
        'filters': 'list[GoalFilter]',
        'goal_value': 'float',
        'metric': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': '_id',
        'dataset': 'dataset',
        'dt_u': 'dt_u',
        'filters': 'filters',
        'goal_value': 'goal_value',
        'metric': 'metric',
        'name': 'name'
    }

    def __init__(self, id=None, dataset=None, dt_u=None, filters=None, goal_value=None, metric=None, name=None):  # noqa: E501
        """Goal - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._dataset = None
        self._dt_u = None
        self._filters = None
        self._goal_value = None
        self._metric = None
        self._name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.dataset = dataset
        if dt_u is not None:
            self.dt_u = dt_u
        if filters is not None:
            self.filters = filters
        self.goal_value = goal_value
        self.metric = metric
        self.name = name

    @property
    def id(self):
        """Gets the id of this Goal.  # noqa: E501


        :return: The id of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Goal.


        :param id: The id of this Goal.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def dataset(self):
        """Gets the dataset of this Goal.  # noqa: E501


        :return: The dataset of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this Goal.


        :param dataset: The dataset of this Goal.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def dt_u(self):
        """Gets the dt_u of this Goal.  # noqa: E501


        :return: The dt_u of this Goal.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Goal.


        :param dt_u: The dt_u of this Goal.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def filters(self):
        """Gets the filters of this Goal.  # noqa: E501


        :return: The filters of this Goal.  # noqa: E501
        :rtype: list[GoalFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Goal.


        :param filters: The filters of this Goal.  # noqa: E501
        :type: list[GoalFilter]
        """

        self._filters = filters

    @property
    def goal_value(self):
        """Gets the goal_value of this Goal.  # noqa: E501


        :return: The goal_value of this Goal.  # noqa: E501
        :rtype: float
        """
        return self._goal_value

    @goal_value.setter
    def goal_value(self, goal_value):
        """Sets the goal_value of this Goal.


        :param goal_value: The goal_value of this Goal.  # noqa: E501
        :type: float
        """
        if goal_value is None:
            raise ValueError("Invalid value for `goal_value`, must not be `None`")  # noqa: E501

        self._goal_value = goal_value

    @property
    def metric(self):
        """Gets the metric of this Goal.  # noqa: E501


        :return: The metric of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Goal.


        :param metric: The metric of this Goal.  # noqa: E501
        :type: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this Goal.  # noqa: E501


        :return: The name of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Goal.


        :param name: The name of this Goal.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Goal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
