# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amity_key': 'str',
        'colors': 'dict(str, object)',
        'dataset_metadata': 'dict(str, object)',
        'dt_u': 'datetime',
        'features': 'ClientFeatures',
        'field_metadata': 'dict(str, object)',
        'name': 'str',
        'nav_page_ids': 'list[str]',
        'null_default_value': 'str',
        'schedule': 'RefreshSchedule'
    }

    attribute_map = {
        'amity_key': 'amity_key',
        'colors': 'colors',
        'dataset_metadata': 'dataset_metadata',
        'dt_u': 'dt_u',
        'features': 'features',
        'field_metadata': 'field_metadata',
        'name': 'name',
        'nav_page_ids': 'nav_page_ids',
        'null_default_value': 'null_default_value',
        'schedule': 'schedule'
    }

    def __init__(self, amity_key=None, colors=None, dataset_metadata=None, dt_u=None, features=None, field_metadata=None, name=None, nav_page_ids=None, null_default_value=None, schedule=None):  # noqa: E501
        """ClientUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._amity_key = None
        self._colors = None
        self._dataset_metadata = None
        self._dt_u = None
        self._features = None
        self._field_metadata = None
        self._name = None
        self._nav_page_ids = None
        self._null_default_value = None
        self._schedule = None
        self.discriminator = None

        if amity_key is not None:
            self.amity_key = amity_key
        if colors is not None:
            self.colors = colors
        if dataset_metadata is not None:
            self.dataset_metadata = dataset_metadata
        if dt_u is not None:
            self.dt_u = dt_u
        if features is not None:
            self.features = features
        if field_metadata is not None:
            self.field_metadata = field_metadata
        if name is not None:
            self.name = name
        if nav_page_ids is not None:
            self.nav_page_ids = nav_page_ids
        if null_default_value is not None:
            self.null_default_value = null_default_value
        if schedule is not None:
            self.schedule = schedule

    @property
    def amity_key(self):
        """Gets the amity_key of this ClientUpdate.  # noqa: E501


        :return: The amity_key of this ClientUpdate.  # noqa: E501
        :rtype: str
        """
        return self._amity_key

    @amity_key.setter
    def amity_key(self, amity_key):
        """Sets the amity_key of this ClientUpdate.


        :param amity_key: The amity_key of this ClientUpdate.  # noqa: E501
        :type: str
        """

        self._amity_key = amity_key

    @property
    def colors(self):
        """Gets the colors of this ClientUpdate.  # noqa: E501


        :return: The colors of this ClientUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ClientUpdate.


        :param colors: The colors of this ClientUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._colors = colors

    @property
    def dataset_metadata(self):
        """Gets the dataset_metadata of this ClientUpdate.  # noqa: E501


        :return: The dataset_metadata of this ClientUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dataset_metadata

    @dataset_metadata.setter
    def dataset_metadata(self, dataset_metadata):
        """Sets the dataset_metadata of this ClientUpdate.


        :param dataset_metadata: The dataset_metadata of this ClientUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._dataset_metadata = dataset_metadata

    @property
    def dt_u(self):
        """Gets the dt_u of this ClientUpdate.  # noqa: E501


        :return: The dt_u of this ClientUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this ClientUpdate.


        :param dt_u: The dt_u of this ClientUpdate.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def features(self):
        """Gets the features of this ClientUpdate.  # noqa: E501


        :return: The features of this ClientUpdate.  # noqa: E501
        :rtype: ClientFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ClientUpdate.


        :param features: The features of this ClientUpdate.  # noqa: E501
        :type: ClientFeatures
        """

        self._features = features

    @property
    def field_metadata(self):
        """Gets the field_metadata of this ClientUpdate.  # noqa: E501


        :return: The field_metadata of this ClientUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._field_metadata

    @field_metadata.setter
    def field_metadata(self, field_metadata):
        """Sets the field_metadata of this ClientUpdate.


        :param field_metadata: The field_metadata of this ClientUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._field_metadata = field_metadata

    @property
    def name(self):
        """Gets the name of this ClientUpdate.  # noqa: E501


        :return: The name of this ClientUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientUpdate.


        :param name: The name of this ClientUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nav_page_ids(self):
        """Gets the nav_page_ids of this ClientUpdate.  # noqa: E501


        :return: The nav_page_ids of this ClientUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._nav_page_ids

    @nav_page_ids.setter
    def nav_page_ids(self, nav_page_ids):
        """Sets the nav_page_ids of this ClientUpdate.


        :param nav_page_ids: The nav_page_ids of this ClientUpdate.  # noqa: E501
        :type: list[str]
        """

        self._nav_page_ids = nav_page_ids

    @property
    def null_default_value(self):
        """Gets the null_default_value of this ClientUpdate.  # noqa: E501


        :return: The null_default_value of this ClientUpdate.  # noqa: E501
        :rtype: str
        """
        return self._null_default_value

    @null_default_value.setter
    def null_default_value(self, null_default_value):
        """Sets the null_default_value of this ClientUpdate.


        :param null_default_value: The null_default_value of this ClientUpdate.  # noqa: E501
        :type: str
        """

        self._null_default_value = null_default_value

    @property
    def schedule(self):
        """Gets the schedule of this ClientUpdate.  # noqa: E501


        :return: The schedule of this ClientUpdate.  # noqa: E501
        :rtype: RefreshSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ClientUpdate.


        :param schedule: The schedule of this ClientUpdate.  # noqa: E501
        :type: RefreshSchedule
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
