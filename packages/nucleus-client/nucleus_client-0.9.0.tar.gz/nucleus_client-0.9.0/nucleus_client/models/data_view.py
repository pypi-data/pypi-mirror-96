# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataView(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_dimensions': 'bool',
        'all_fields': 'bool',
        'client_id': 'str',
        'columns': 'list[str]',
        'dataset': 'str',
        'dimensions': 'list[DataViewDimension]',
        'filters': 'list[DataViewFilter]',
        'granularity': 'str',
        'include_goals': 'bool',
        'intervals': 'list[str]',
        'limit': 'int',
        'lookups': 'list[DataViewLookup]',
        'metrics': 'list[DataViewMetric]',
        'mode': 'DataViewMode',
        'query_type': 'str',
        'sort': 'list[DataViewSort]',
        'unique_limit': 'list[DataViewUniqueLimit]'
    }

    attribute_map = {
        'all_dimensions': 'all_dimensions',
        'all_fields': 'all_fields',
        'client_id': 'client_id',
        'columns': 'columns',
        'dataset': 'dataset',
        'dimensions': 'dimensions',
        'filters': 'filters',
        'granularity': 'granularity',
        'include_goals': 'include_goals',
        'intervals': 'intervals',
        'limit': 'limit',
        'lookups': 'lookups',
        'metrics': 'metrics',
        'mode': 'mode',
        'query_type': 'query_type',
        'sort': 'sort',
        'unique_limit': 'unique_limit'
    }

    def __init__(self, all_dimensions=None, all_fields=None, client_id=None, columns=None, dataset=None, dimensions=None, filters=None, granularity=None, include_goals=None, intervals=None, limit=None, lookups=None, metrics=None, mode=None, query_type=None, sort=None, unique_limit=None):  # noqa: E501
        """DataView - a model defined in OpenAPI"""  # noqa: E501

        self._all_dimensions = None
        self._all_fields = None
        self._client_id = None
        self._columns = None
        self._dataset = None
        self._dimensions = None
        self._filters = None
        self._granularity = None
        self._include_goals = None
        self._intervals = None
        self._limit = None
        self._lookups = None
        self._metrics = None
        self._mode = None
        self._query_type = None
        self._sort = None
        self._unique_limit = None
        self.discriminator = None

        if all_dimensions is not None:
            self.all_dimensions = all_dimensions
        if all_fields is not None:
            self.all_fields = all_fields
        self.client_id = client_id
        if columns is not None:
            self.columns = columns
        self.dataset = dataset
        if dimensions is not None:
            self.dimensions = dimensions
        if filters is not None:
            self.filters = filters
        if granularity is not None:
            self.granularity = granularity
        if include_goals is not None:
            self.include_goals = include_goals
        if intervals is not None:
            self.intervals = intervals
        if limit is not None:
            self.limit = limit
        if lookups is not None:
            self.lookups = lookups
        if metrics is not None:
            self.metrics = metrics
        if mode is not None:
            self.mode = mode
        if query_type is not None:
            self.query_type = query_type
        if sort is not None:
            self.sort = sort
        if unique_limit is not None:
            self.unique_limit = unique_limit

    @property
    def all_dimensions(self):
        """Gets the all_dimensions of this DataView.  # noqa: E501


        :return: The all_dimensions of this DataView.  # noqa: E501
        :rtype: bool
        """
        return self._all_dimensions

    @all_dimensions.setter
    def all_dimensions(self, all_dimensions):
        """Sets the all_dimensions of this DataView.


        :param all_dimensions: The all_dimensions of this DataView.  # noqa: E501
        :type: bool
        """

        self._all_dimensions = all_dimensions

    @property
    def all_fields(self):
        """Gets the all_fields of this DataView.  # noqa: E501


        :return: The all_fields of this DataView.  # noqa: E501
        :rtype: bool
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this DataView.


        :param all_fields: The all_fields of this DataView.  # noqa: E501
        :type: bool
        """

        self._all_fields = all_fields

    @property
    def client_id(self):
        """Gets the client_id of this DataView.  # noqa: E501


        :return: The client_id of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DataView.


        :param client_id: The client_id of this DataView.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def columns(self):
        """Gets the columns of this DataView.  # noqa: E501


        :return: The columns of this DataView.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataView.


        :param columns: The columns of this DataView.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def dataset(self):
        """Gets the dataset of this DataView.  # noqa: E501


        :return: The dataset of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataView.


        :param dataset: The dataset of this DataView.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def dimensions(self):
        """Gets the dimensions of this DataView.  # noqa: E501


        :return: The dimensions of this DataView.  # noqa: E501
        :rtype: list[DataViewDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DataView.


        :param dimensions: The dimensions of this DataView.  # noqa: E501
        :type: list[DataViewDimension]
        """

        self._dimensions = dimensions

    @property
    def filters(self):
        """Gets the filters of this DataView.  # noqa: E501


        :return: The filters of this DataView.  # noqa: E501
        :rtype: list[DataViewFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DataView.


        :param filters: The filters of this DataView.  # noqa: E501
        :type: list[DataViewFilter]
        """

        self._filters = filters

    @property
    def granularity(self):
        """Gets the granularity of this DataView.  # noqa: E501


        :return: The granularity of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this DataView.


        :param granularity: The granularity of this DataView.  # noqa: E501
        :type: str
        """

        self._granularity = granularity

    @property
    def include_goals(self):
        """Gets the include_goals of this DataView.  # noqa: E501


        :return: The include_goals of this DataView.  # noqa: E501
        :rtype: bool
        """
        return self._include_goals

    @include_goals.setter
    def include_goals(self, include_goals):
        """Sets the include_goals of this DataView.


        :param include_goals: The include_goals of this DataView.  # noqa: E501
        :type: bool
        """

        self._include_goals = include_goals

    @property
    def intervals(self):
        """Gets the intervals of this DataView.  # noqa: E501


        :return: The intervals of this DataView.  # noqa: E501
        :rtype: list[str]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this DataView.


        :param intervals: The intervals of this DataView.  # noqa: E501
        :type: list[str]
        """

        self._intervals = intervals

    @property
    def limit(self):
        """Gets the limit of this DataView.  # noqa: E501


        :return: The limit of this DataView.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DataView.


        :param limit: The limit of this DataView.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def lookups(self):
        """Gets the lookups of this DataView.  # noqa: E501


        :return: The lookups of this DataView.  # noqa: E501
        :rtype: list[DataViewLookup]
        """
        return self._lookups

    @lookups.setter
    def lookups(self, lookups):
        """Sets the lookups of this DataView.


        :param lookups: The lookups of this DataView.  # noqa: E501
        :type: list[DataViewLookup]
        """

        self._lookups = lookups

    @property
    def metrics(self):
        """Gets the metrics of this DataView.  # noqa: E501


        :return: The metrics of this DataView.  # noqa: E501
        :rtype: list[DataViewMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DataView.


        :param metrics: The metrics of this DataView.  # noqa: E501
        :type: list[DataViewMetric]
        """

        self._metrics = metrics

    @property
    def mode(self):
        """Gets the mode of this DataView.  # noqa: E501


        :return: The mode of this DataView.  # noqa: E501
        :rtype: DataViewMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DataView.


        :param mode: The mode of this DataView.  # noqa: E501
        :type: DataViewMode
        """

        self._mode = mode

    @property
    def query_type(self):
        """Gets the query_type of this DataView.  # noqa: E501


        :return: The query_type of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this DataView.


        :param query_type: The query_type of this DataView.  # noqa: E501
        :type: str
        """

        self._query_type = query_type

    @property
    def sort(self):
        """Gets the sort of this DataView.  # noqa: E501


        :return: The sort of this DataView.  # noqa: E501
        :rtype: list[DataViewSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DataView.


        :param sort: The sort of this DataView.  # noqa: E501
        :type: list[DataViewSort]
        """

        self._sort = sort

    @property
    def unique_limit(self):
        """Gets the unique_limit of this DataView.  # noqa: E501


        :return: The unique_limit of this DataView.  # noqa: E501
        :rtype: list[DataViewUniqueLimit]
        """
        return self._unique_limit

    @unique_limit.setter
    def unique_limit(self, unique_limit):
        """Sets the unique_limit of this DataView.


        :param unique_limit: The unique_limit of this DataView.  # noqa: E501
        :type: list[DataViewUniqueLimit]
        """

        self._unique_limit = unique_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
