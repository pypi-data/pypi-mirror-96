# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PartnerBatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'dt_u': 'datetime',
        'entity_type': 'str',
        'integration_type_id': 'str',
        'post_data': 'list[PartnerPostData]',
        'record_count': 'int'
    }

    attribute_map = {
        'id': '_id',
        'dt_u': 'dt_u',
        'entity_type': 'entity_type',
        'integration_type_id': 'integration_type_id',
        'post_data': 'post_data',
        'record_count': 'record_count'
    }

    def __init__(self, id=None, dt_u=None, entity_type=None, integration_type_id=None, post_data=None, record_count=None):  # noqa: E501
        """PartnerBatch - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._dt_u = None
        self._entity_type = None
        self._integration_type_id = None
        self._post_data = None
        self._record_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if dt_u is not None:
            self.dt_u = dt_u
        self.entity_type = entity_type
        if integration_type_id is not None:
            self.integration_type_id = integration_type_id
        if post_data is not None:
            self.post_data = post_data
        if record_count is not None:
            self.record_count = record_count

    @property
    def id(self):
        """Gets the id of this PartnerBatch.  # noqa: E501


        :return: The id of this PartnerBatch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartnerBatch.


        :param id: The id of this PartnerBatch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def dt_u(self):
        """Gets the dt_u of this PartnerBatch.  # noqa: E501


        :return: The dt_u of this PartnerBatch.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this PartnerBatch.


        :param dt_u: The dt_u of this PartnerBatch.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def entity_type(self):
        """Gets the entity_type of this PartnerBatch.  # noqa: E501


        :return: The entity_type of this PartnerBatch.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PartnerBatch.


        :param entity_type: The entity_type of this PartnerBatch.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def integration_type_id(self):
        """Gets the integration_type_id of this PartnerBatch.  # noqa: E501


        :return: The integration_type_id of this PartnerBatch.  # noqa: E501
        :rtype: str
        """
        return self._integration_type_id

    @integration_type_id.setter
    def integration_type_id(self, integration_type_id):
        """Sets the integration_type_id of this PartnerBatch.


        :param integration_type_id: The integration_type_id of this PartnerBatch.  # noqa: E501
        :type: str
        """

        self._integration_type_id = integration_type_id

    @property
    def post_data(self):
        """Gets the post_data of this PartnerBatch.  # noqa: E501


        :return: The post_data of this PartnerBatch.  # noqa: E501
        :rtype: list[PartnerPostData]
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """Sets the post_data of this PartnerBatch.


        :param post_data: The post_data of this PartnerBatch.  # noqa: E501
        :type: list[PartnerPostData]
        """

        self._post_data = post_data

    @property
    def record_count(self):
        """Gets the record_count of this PartnerBatch.  # noqa: E501


        :return: The record_count of this PartnerBatch.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this PartnerBatch.


        :param record_count: The record_count of this PartnerBatch.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
