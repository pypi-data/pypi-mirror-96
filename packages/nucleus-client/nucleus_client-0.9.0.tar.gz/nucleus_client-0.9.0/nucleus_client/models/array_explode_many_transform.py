# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArrayExplodeManyTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column_mappings': 'ColumnMapping',
        'output_index_column': 'str'
    }

    attribute_map = {
        'column_mappings': 'column_mappings',
        'output_index_column': 'output_index_column'
    }

    def __init__(self, column_mappings=None, output_index_column=None):  # noqa: E501
        """ArrayExplodeManyTransform - a model defined in OpenAPI"""  # noqa: E501

        self._column_mappings = None
        self._output_index_column = None
        self.discriminator = None

        self.column_mappings = column_mappings
        if output_index_column is not None:
            self.output_index_column = output_index_column

    @property
    def column_mappings(self):
        """Gets the column_mappings of this ArrayExplodeManyTransform.  # noqa: E501


        :return: The column_mappings of this ArrayExplodeManyTransform.  # noqa: E501
        :rtype: ColumnMapping
        """
        return self._column_mappings

    @column_mappings.setter
    def column_mappings(self, column_mappings):
        """Sets the column_mappings of this ArrayExplodeManyTransform.


        :param column_mappings: The column_mappings of this ArrayExplodeManyTransform.  # noqa: E501
        :type: ColumnMapping
        """
        if column_mappings is None:
            raise ValueError("Invalid value for `column_mappings`, must not be `None`")  # noqa: E501

        self._column_mappings = column_mappings

    @property
    def output_index_column(self):
        """Gets the output_index_column of this ArrayExplodeManyTransform.  # noqa: E501


        :return: The output_index_column of this ArrayExplodeManyTransform.  # noqa: E501
        :rtype: str
        """
        return self._output_index_column

    @output_index_column.setter
    def output_index_column(self, output_index_column):
        """Sets the output_index_column of this ArrayExplodeManyTransform.


        :param output_index_column: The output_index_column of this ArrayExplodeManyTransform.  # noqa: E501
        :type: str
        """

        self._output_index_column = output_index_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayExplodeManyTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
