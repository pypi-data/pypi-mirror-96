# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArrayTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'explode': 'ArrayExplodeTransform',
        'explode_many': 'ArrayExplodeManyTransform',
        'len': 'CollectionSizeTransform',
        'length': 'CollectionSizeTransform',
        'size': 'CollectionSizeTransform'
    }

    attribute_map = {
        'explode': 'explode',
        'explode_many': 'explode_many',
        'len': 'len',
        'length': 'length',
        'size': 'size'
    }

    def __init__(self, explode=None, explode_many=None, len=None, length=None, size=None):  # noqa: E501
        """ArrayTransform - a model defined in OpenAPI"""  # noqa: E501

        self._explode = None
        self._explode_many = None
        self._len = None
        self._length = None
        self._size = None
        self.discriminator = None

        if explode is not None:
            self.explode = explode
        if explode_many is not None:
            self.explode_many = explode_many
        if len is not None:
            self.len = len
        if length is not None:
            self.length = length
        if size is not None:
            self.size = size

    @property
    def explode(self):
        """Gets the explode of this ArrayTransform.  # noqa: E501


        :return: The explode of this ArrayTransform.  # noqa: E501
        :rtype: ArrayExplodeTransform
        """
        return self._explode

    @explode.setter
    def explode(self, explode):
        """Sets the explode of this ArrayTransform.


        :param explode: The explode of this ArrayTransform.  # noqa: E501
        :type: ArrayExplodeTransform
        """

        self._explode = explode

    @property
    def explode_many(self):
        """Gets the explode_many of this ArrayTransform.  # noqa: E501


        :return: The explode_many of this ArrayTransform.  # noqa: E501
        :rtype: ArrayExplodeManyTransform
        """
        return self._explode_many

    @explode_many.setter
    def explode_many(self, explode_many):
        """Sets the explode_many of this ArrayTransform.


        :param explode_many: The explode_many of this ArrayTransform.  # noqa: E501
        :type: ArrayExplodeManyTransform
        """

        self._explode_many = explode_many

    @property
    def len(self):
        """Gets the len of this ArrayTransform.  # noqa: E501


        :return: The len of this ArrayTransform.  # noqa: E501
        :rtype: CollectionSizeTransform
        """
        return self._len

    @len.setter
    def len(self, len):
        """Sets the len of this ArrayTransform.


        :param len: The len of this ArrayTransform.  # noqa: E501
        :type: CollectionSizeTransform
        """

        self._len = len

    @property
    def length(self):
        """Gets the length of this ArrayTransform.  # noqa: E501


        :return: The length of this ArrayTransform.  # noqa: E501
        :rtype: CollectionSizeTransform
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ArrayTransform.


        :param length: The length of this ArrayTransform.  # noqa: E501
        :type: CollectionSizeTransform
        """

        self._length = length

    @property
    def size(self):
        """Gets the size of this ArrayTransform.  # noqa: E501


        :return: The size of this ArrayTransform.  # noqa: E501
        :rtype: CollectionSizeTransform
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ArrayTransform.


        :param size: The size of this ArrayTransform.  # noqa: E501
        :type: CollectionSizeTransform
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
