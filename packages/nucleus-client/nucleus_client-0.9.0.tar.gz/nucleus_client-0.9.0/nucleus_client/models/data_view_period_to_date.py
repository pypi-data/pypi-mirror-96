# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataViewPeriodToDate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'begin': 'date',
        'granularity': 'str'
    }

    attribute_map = {
        'begin': 'begin',
        'granularity': 'granularity'
    }

    def __init__(self, begin=None, granularity=None):  # noqa: E501
        """DataViewPeriodToDate - a model defined in OpenAPI"""  # noqa: E501

        self._begin = None
        self._granularity = None
        self.discriminator = None

        if begin is not None:
            self.begin = begin
        self.granularity = granularity

    @property
    def begin(self):
        """Gets the begin of this DataViewPeriodToDate.  # noqa: E501


        :return: The begin of this DataViewPeriodToDate.  # noqa: E501
        :rtype: date
        """
        return self._begin

    @begin.setter
    def begin(self, begin):
        """Sets the begin of this DataViewPeriodToDate.


        :param begin: The begin of this DataViewPeriodToDate.  # noqa: E501
        :type: date
        """

        self._begin = begin

    @property
    def granularity(self):
        """Gets the granularity of this DataViewPeriodToDate.  # noqa: E501


        :return: The granularity of this DataViewPeriodToDate.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this DataViewPeriodToDate.


        :param granularity: The granularity of this DataViewPeriodToDate.  # noqa: E501
        :type: str
        """
        if granularity is None:
            raise ValueError("Invalid value for `granularity`, must not be `None`")  # noqa: E501

        self._granularity = granularity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewPeriodToDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
