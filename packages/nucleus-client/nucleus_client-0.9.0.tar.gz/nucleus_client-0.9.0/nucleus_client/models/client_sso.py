# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientSso(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_code_url': 'str',
        'claims': 'list[str]',
        'client_id': 'str',
        'id_issuer': 'str',
        'id_token_alg': 'str',
        'id_token_key_type': 'str',
        'id_token_rsa_key': 'str',
        'prompt': 'str',
        'redirect_uri': 'str',
        'secret': 'str',
        'token_authentication_method': 'str',
        'token_exchange_url': 'str',
        'token_fields': 'list[str]',
        'token_request_values_in_url': 'bool',
        'type': 'str',
        'user_info_url': 'str'
    }

    attribute_map = {
        'auth_code_url': 'auth_code_url',
        'claims': 'claims',
        'client_id': 'client_id',
        'id_issuer': 'id_issuer',
        'id_token_alg': 'id_token_alg',
        'id_token_key_type': 'id_token_key_type',
        'id_token_rsa_key': 'id_token_rsa_key',
        'prompt': 'prompt',
        'redirect_uri': 'redirect_uri',
        'secret': 'secret',
        'token_authentication_method': 'token_authentication_method',
        'token_exchange_url': 'token_exchange_url',
        'token_fields': 'token_fields',
        'token_request_values_in_url': 'token_request_values_in_url',
        'type': 'type',
        'user_info_url': 'user_info_url'
    }

    def __init__(self, auth_code_url=None, claims=None, client_id=None, id_issuer=None, id_token_alg=None, id_token_key_type=None, id_token_rsa_key=None, prompt=None, redirect_uri=None, secret=None, token_authentication_method=None, token_exchange_url=None, token_fields=None, token_request_values_in_url=None, type=None, user_info_url=None):  # noqa: E501
        """ClientSso - a model defined in OpenAPI"""  # noqa: E501

        self._auth_code_url = None
        self._claims = None
        self._client_id = None
        self._id_issuer = None
        self._id_token_alg = None
        self._id_token_key_type = None
        self._id_token_rsa_key = None
        self._prompt = None
        self._redirect_uri = None
        self._secret = None
        self._token_authentication_method = None
        self._token_exchange_url = None
        self._token_fields = None
        self._token_request_values_in_url = None
        self._type = None
        self._user_info_url = None
        self.discriminator = None

        if auth_code_url is not None:
            self.auth_code_url = auth_code_url
        if claims is not None:
            self.claims = claims
        if client_id is not None:
            self.client_id = client_id
        if id_issuer is not None:
            self.id_issuer = id_issuer
        if id_token_alg is not None:
            self.id_token_alg = id_token_alg
        if id_token_key_type is not None:
            self.id_token_key_type = id_token_key_type
        if id_token_rsa_key is not None:
            self.id_token_rsa_key = id_token_rsa_key
        if prompt is not None:
            self.prompt = prompt
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if secret is not None:
            self.secret = secret
        if token_authentication_method is not None:
            self.token_authentication_method = token_authentication_method
        if token_exchange_url is not None:
            self.token_exchange_url = token_exchange_url
        if token_fields is not None:
            self.token_fields = token_fields
        if token_request_values_in_url is not None:
            self.token_request_values_in_url = token_request_values_in_url
        if type is not None:
            self.type = type
        if user_info_url is not None:
            self.user_info_url = user_info_url

    @property
    def auth_code_url(self):
        """Gets the auth_code_url of this ClientSso.  # noqa: E501


        :return: The auth_code_url of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._auth_code_url

    @auth_code_url.setter
    def auth_code_url(self, auth_code_url):
        """Sets the auth_code_url of this ClientSso.


        :param auth_code_url: The auth_code_url of this ClientSso.  # noqa: E501
        :type: str
        """

        self._auth_code_url = auth_code_url

    @property
    def claims(self):
        """Gets the claims of this ClientSso.  # noqa: E501


        :return: The claims of this ClientSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this ClientSso.


        :param claims: The claims of this ClientSso.  # noqa: E501
        :type: list[str]
        """

        self._claims = claims

    @property
    def client_id(self):
        """Gets the client_id of this ClientSso.  # noqa: E501


        :return: The client_id of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientSso.


        :param client_id: The client_id of this ClientSso.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def id_issuer(self):
        """Gets the id_issuer of this ClientSso.  # noqa: E501


        :return: The id_issuer of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._id_issuer

    @id_issuer.setter
    def id_issuer(self, id_issuer):
        """Sets the id_issuer of this ClientSso.


        :param id_issuer: The id_issuer of this ClientSso.  # noqa: E501
        :type: str
        """

        self._id_issuer = id_issuer

    @property
    def id_token_alg(self):
        """Gets the id_token_alg of this ClientSso.  # noqa: E501


        :return: The id_token_alg of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._id_token_alg

    @id_token_alg.setter
    def id_token_alg(self, id_token_alg):
        """Sets the id_token_alg of this ClientSso.


        :param id_token_alg: The id_token_alg of this ClientSso.  # noqa: E501
        :type: str
        """

        self._id_token_alg = id_token_alg

    @property
    def id_token_key_type(self):
        """Gets the id_token_key_type of this ClientSso.  # noqa: E501


        :return: The id_token_key_type of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._id_token_key_type

    @id_token_key_type.setter
    def id_token_key_type(self, id_token_key_type):
        """Sets the id_token_key_type of this ClientSso.


        :param id_token_key_type: The id_token_key_type of this ClientSso.  # noqa: E501
        :type: str
        """

        self._id_token_key_type = id_token_key_type

    @property
    def id_token_rsa_key(self):
        """Gets the id_token_rsa_key of this ClientSso.  # noqa: E501


        :return: The id_token_rsa_key of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._id_token_rsa_key

    @id_token_rsa_key.setter
    def id_token_rsa_key(self, id_token_rsa_key):
        """Sets the id_token_rsa_key of this ClientSso.


        :param id_token_rsa_key: The id_token_rsa_key of this ClientSso.  # noqa: E501
        :type: str
        """

        self._id_token_rsa_key = id_token_rsa_key

    @property
    def prompt(self):
        """Gets the prompt of this ClientSso.  # noqa: E501


        :return: The prompt of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this ClientSso.


        :param prompt: The prompt of this ClientSso.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this ClientSso.  # noqa: E501


        :return: The redirect_uri of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this ClientSso.


        :param redirect_uri: The redirect_uri of this ClientSso.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def secret(self):
        """Gets the secret of this ClientSso.  # noqa: E501


        :return: The secret of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ClientSso.


        :param secret: The secret of this ClientSso.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def token_authentication_method(self):
        """Gets the token_authentication_method of this ClientSso.  # noqa: E501


        :return: The token_authentication_method of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._token_authentication_method

    @token_authentication_method.setter
    def token_authentication_method(self, token_authentication_method):
        """Sets the token_authentication_method of this ClientSso.


        :param token_authentication_method: The token_authentication_method of this ClientSso.  # noqa: E501
        :type: str
        """

        self._token_authentication_method = token_authentication_method

    @property
    def token_exchange_url(self):
        """Gets the token_exchange_url of this ClientSso.  # noqa: E501


        :return: The token_exchange_url of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._token_exchange_url

    @token_exchange_url.setter
    def token_exchange_url(self, token_exchange_url):
        """Sets the token_exchange_url of this ClientSso.


        :param token_exchange_url: The token_exchange_url of this ClientSso.  # noqa: E501
        :type: str
        """

        self._token_exchange_url = token_exchange_url

    @property
    def token_fields(self):
        """Gets the token_fields of this ClientSso.  # noqa: E501


        :return: The token_fields of this ClientSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_fields

    @token_fields.setter
    def token_fields(self, token_fields):
        """Sets the token_fields of this ClientSso.


        :param token_fields: The token_fields of this ClientSso.  # noqa: E501
        :type: list[str]
        """

        self._token_fields = token_fields

    @property
    def token_request_values_in_url(self):
        """Gets the token_request_values_in_url of this ClientSso.  # noqa: E501


        :return: The token_request_values_in_url of this ClientSso.  # noqa: E501
        :rtype: bool
        """
        return self._token_request_values_in_url

    @token_request_values_in_url.setter
    def token_request_values_in_url(self, token_request_values_in_url):
        """Sets the token_request_values_in_url of this ClientSso.


        :param token_request_values_in_url: The token_request_values_in_url of this ClientSso.  # noqa: E501
        :type: bool
        """

        self._token_request_values_in_url = token_request_values_in_url

    @property
    def type(self):
        """Gets the type of this ClientSso.  # noqa: E501


        :return: The type of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientSso.


        :param type: The type of this ClientSso.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_info_url(self):
        """Gets the user_info_url of this ClientSso.  # noqa: E501


        :return: The user_info_url of this ClientSso.  # noqa: E501
        :rtype: str
        """
        return self._user_info_url

    @user_info_url.setter
    def user_info_url(self, user_info_url):
        """Sets the user_info_url of this ClientSso.


        :param user_info_url: The user_info_url of this ClientSso.  # noqa: E501
        :type: str
        """

        self._user_info_url = user_info_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientSso):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
