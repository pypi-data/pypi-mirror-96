# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProlearnCourse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'credits': 'list[ProlearnCredit]',
        'customer_product_id': 'str',
        'display_name': 'str',
        'name': 'str',
        'updated': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'created': 'Created',
        'credits': 'Credits',
        'customer_product_id': 'CustomerProductId',
        'display_name': 'DisplayName',
        'name': 'Name',
        'updated': 'Updated',
        'id': 'id'
    }

    def __init__(self, created=None, credits=None, customer_product_id=None, display_name=None, name=None, updated=None, id=None):  # noqa: E501
        """ProlearnCourse - a model defined in OpenAPI"""  # noqa: E501

        self._created = None
        self._credits = None
        self._customer_product_id = None
        self._display_name = None
        self._name = None
        self._updated = None
        self._id = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if credits is not None:
            self.credits = credits
        self.customer_product_id = customer_product_id
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        self.updated = updated
        self.id = id

    @property
    def created(self):
        """Gets the created of this ProlearnCourse.  # noqa: E501


        :return: The created of this ProlearnCourse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProlearnCourse.


        :param created: The created of this ProlearnCourse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def credits(self):
        """Gets the credits of this ProlearnCourse.  # noqa: E501


        :return: The credits of this ProlearnCourse.  # noqa: E501
        :rtype: list[ProlearnCredit]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this ProlearnCourse.


        :param credits: The credits of this ProlearnCourse.  # noqa: E501
        :type: list[ProlearnCredit]
        """

        self._credits = credits

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this ProlearnCourse.  # noqa: E501


        :return: The customer_product_id of this ProlearnCourse.  # noqa: E501
        :rtype: str
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this ProlearnCourse.


        :param customer_product_id: The customer_product_id of this ProlearnCourse.  # noqa: E501
        :type: str
        """
        if customer_product_id is None:
            raise ValueError("Invalid value for `customer_product_id`, must not be `None`")  # noqa: E501

        self._customer_product_id = customer_product_id

    @property
    def display_name(self):
        """Gets the display_name of this ProlearnCourse.  # noqa: E501


        :return: The display_name of this ProlearnCourse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProlearnCourse.


        :param display_name: The display_name of this ProlearnCourse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this ProlearnCourse.  # noqa: E501


        :return: The name of this ProlearnCourse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProlearnCourse.


        :param name: The name of this ProlearnCourse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def updated(self):
        """Gets the updated of this ProlearnCourse.  # noqa: E501


        :return: The updated of this ProlearnCourse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ProlearnCourse.


        :param updated: The updated of this ProlearnCourse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this ProlearnCourse.  # noqa: E501


        :return: The id of this ProlearnCourse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProlearnCourse.


        :param id: The id of this ProlearnCourse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProlearnCourse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
