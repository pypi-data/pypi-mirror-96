# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DatetimeRangeTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_column': 'str',
        'end_value': 'str',
        'interval': 'float',
        'output_column': 'str',
        'selector': 'str',
        'start_column': 'str'
    }

    attribute_map = {
        'end_column': 'end_column',
        'end_value': 'end_value',
        'interval': 'interval',
        'output_column': 'output_column',
        'selector': 'selector',
        'start_column': 'start_column'
    }

    def __init__(self, end_column=None, end_value=None, interval=None, output_column=None, selector=None, start_column=None):  # noqa: E501
        """DatetimeRangeTransform - a model defined in OpenAPI"""  # noqa: E501

        self._end_column = None
        self._end_value = None
        self._interval = None
        self._output_column = None
        self._selector = None
        self._start_column = None
        self.discriminator = None

        if end_column is not None:
            self.end_column = end_column
        if end_value is not None:
            self.end_value = end_value
        if interval is not None:
            self.interval = interval
        self.output_column = output_column
        self.selector = selector
        self.start_column = start_column

    @property
    def end_column(self):
        """Gets the end_column of this DatetimeRangeTransform.  # noqa: E501


        :return: The end_column of this DatetimeRangeTransform.  # noqa: E501
        :rtype: str
        """
        return self._end_column

    @end_column.setter
    def end_column(self, end_column):
        """Sets the end_column of this DatetimeRangeTransform.


        :param end_column: The end_column of this DatetimeRangeTransform.  # noqa: E501
        :type: str
        """

        self._end_column = end_column

    @property
    def end_value(self):
        """Gets the end_value of this DatetimeRangeTransform.  # noqa: E501


        :return: The end_value of this DatetimeRangeTransform.  # noqa: E501
        :rtype: str
        """
        return self._end_value

    @end_value.setter
    def end_value(self, end_value):
        """Sets the end_value of this DatetimeRangeTransform.


        :param end_value: The end_value of this DatetimeRangeTransform.  # noqa: E501
        :type: str
        """

        self._end_value = end_value

    @property
    def interval(self):
        """Gets the interval of this DatetimeRangeTransform.  # noqa: E501


        :return: The interval of this DatetimeRangeTransform.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this DatetimeRangeTransform.


        :param interval: The interval of this DatetimeRangeTransform.  # noqa: E501
        :type: float
        """

        self._interval = interval

    @property
    def output_column(self):
        """Gets the output_column of this DatetimeRangeTransform.  # noqa: E501


        :return: The output_column of this DatetimeRangeTransform.  # noqa: E501
        :rtype: str
        """
        return self._output_column

    @output_column.setter
    def output_column(self, output_column):
        """Sets the output_column of this DatetimeRangeTransform.


        :param output_column: The output_column of this DatetimeRangeTransform.  # noqa: E501
        :type: str
        """
        if output_column is None:
            raise ValueError("Invalid value for `output_column`, must not be `None`")  # noqa: E501

        self._output_column = output_column

    @property
    def selector(self):
        """Gets the selector of this DatetimeRangeTransform.  # noqa: E501


        :return: The selector of this DatetimeRangeTransform.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this DatetimeRangeTransform.


        :param selector: The selector of this DatetimeRangeTransform.  # noqa: E501
        :type: str
        """
        if selector is None:
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    @property
    def start_column(self):
        """Gets the start_column of this DatetimeRangeTransform.  # noqa: E501


        :return: The start_column of this DatetimeRangeTransform.  # noqa: E501
        :rtype: str
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this DatetimeRangeTransform.


        :param start_column: The start_column of this DatetimeRangeTransform.  # noqa: E501
        :type: str
        """
        if start_column is None:
            raise ValueError("Invalid value for `start_column`, must not be `None`")  # noqa: E501

        self._start_column = start_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatetimeRangeTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
