# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NumberTransform(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abs': 'NumberUnaryTransform',
        'add': 'NumberBinaryTransform',
        'add_value': 'NumberBinaryValueTransform',
        'bucket': 'NumberBucketTransform',
        'cast': 'NumberCastTransform',
        'ceil': 'NumberUnaryTransform',
        'constant': 'NumberConstantTransform',
        'default': 'NumberDefaultTransform',
        'div': 'NumberBinaryTransform',
        'div_value': 'NumberBinaryValueTransform',
        'divide': 'NumberBinaryTransform',
        'divide_value': 'NumberBinaryValueTransform',
        'floor': 'NumberUnaryTransform',
        'mod': 'NumberBinaryTransform',
        'mod_value': 'NumberBinaryValueTransform',
        'mul': 'NumberBinaryTransform',
        'mul_value': 'NumberBinaryValueTransform',
        'multiply': 'NumberBinaryTransform',
        'multiply_value': 'NumberBinaryValueTransform',
        'negate': 'NumberUnaryTransform',
        'negative': 'NumberUnaryTransform',
        'round': 'NumberUnaryTransform',
        'sub': 'NumberBinaryTransform',
        'sub_value': 'NumberBinaryValueTransform',
        'subtract': 'NumberBinaryTransform',
        'subtract_value': 'NumberBinaryValueTransform'
    }

    attribute_map = {
        'abs': 'abs',
        'add': 'add',
        'add_value': 'add_value',
        'bucket': 'bucket',
        'cast': 'cast',
        'ceil': 'ceil',
        'constant': 'constant',
        'default': 'default',
        'div': 'div',
        'div_value': 'div_value',
        'divide': 'divide',
        'divide_value': 'divide_value',
        'floor': 'floor',
        'mod': 'mod',
        'mod_value': 'mod_value',
        'mul': 'mul',
        'mul_value': 'mul_value',
        'multiply': 'multiply',
        'multiply_value': 'multiply_value',
        'negate': 'negate',
        'negative': 'negative',
        'round': 'round',
        'sub': 'sub',
        'sub_value': 'sub_value',
        'subtract': 'subtract',
        'subtract_value': 'subtract_value'
    }

    def __init__(self, abs=None, add=None, add_value=None, bucket=None, cast=None, ceil=None, constant=None, default=None, div=None, div_value=None, divide=None, divide_value=None, floor=None, mod=None, mod_value=None, mul=None, mul_value=None, multiply=None, multiply_value=None, negate=None, negative=None, round=None, sub=None, sub_value=None, subtract=None, subtract_value=None):  # noqa: E501
        """NumberTransform - a model defined in OpenAPI"""  # noqa: E501

        self._abs = None
        self._add = None
        self._add_value = None
        self._bucket = None
        self._cast = None
        self._ceil = None
        self._constant = None
        self._default = None
        self._div = None
        self._div_value = None
        self._divide = None
        self._divide_value = None
        self._floor = None
        self._mod = None
        self._mod_value = None
        self._mul = None
        self._mul_value = None
        self._multiply = None
        self._multiply_value = None
        self._negate = None
        self._negative = None
        self._round = None
        self._sub = None
        self._sub_value = None
        self._subtract = None
        self._subtract_value = None
        self.discriminator = None

        if abs is not None:
            self.abs = abs
        if add is not None:
            self.add = add
        if add_value is not None:
            self.add_value = add_value
        if bucket is not None:
            self.bucket = bucket
        if cast is not None:
            self.cast = cast
        if ceil is not None:
            self.ceil = ceil
        if constant is not None:
            self.constant = constant
        if default is not None:
            self.default = default
        if div is not None:
            self.div = div
        if div_value is not None:
            self.div_value = div_value
        if divide is not None:
            self.divide = divide
        if divide_value is not None:
            self.divide_value = divide_value
        if floor is not None:
            self.floor = floor
        if mod is not None:
            self.mod = mod
        if mod_value is not None:
            self.mod_value = mod_value
        if mul is not None:
            self.mul = mul
        if mul_value is not None:
            self.mul_value = mul_value
        if multiply is not None:
            self.multiply = multiply
        if multiply_value is not None:
            self.multiply_value = multiply_value
        if negate is not None:
            self.negate = negate
        if negative is not None:
            self.negative = negative
        if round is not None:
            self.round = round
        if sub is not None:
            self.sub = sub
        if sub_value is not None:
            self.sub_value = sub_value
        if subtract is not None:
            self.subtract = subtract
        if subtract_value is not None:
            self.subtract_value = subtract_value

    @property
    def abs(self):
        """Gets the abs of this NumberTransform.  # noqa: E501


        :return: The abs of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._abs

    @abs.setter
    def abs(self, abs):
        """Sets the abs of this NumberTransform.


        :param abs: The abs of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._abs = abs

    @property
    def add(self):
        """Gets the add of this NumberTransform.  # noqa: E501


        :return: The add of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._add

    @add.setter
    def add(self, add):
        """Sets the add of this NumberTransform.


        :param add: The add of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._add = add

    @property
    def add_value(self):
        """Gets the add_value of this NumberTransform.  # noqa: E501


        :return: The add_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._add_value

    @add_value.setter
    def add_value(self, add_value):
        """Sets the add_value of this NumberTransform.


        :param add_value: The add_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._add_value = add_value

    @property
    def bucket(self):
        """Gets the bucket of this NumberTransform.  # noqa: E501


        :return: The bucket of this NumberTransform.  # noqa: E501
        :rtype: NumberBucketTransform
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this NumberTransform.


        :param bucket: The bucket of this NumberTransform.  # noqa: E501
        :type: NumberBucketTransform
        """

        self._bucket = bucket

    @property
    def cast(self):
        """Gets the cast of this NumberTransform.  # noqa: E501


        :return: The cast of this NumberTransform.  # noqa: E501
        :rtype: NumberCastTransform
        """
        return self._cast

    @cast.setter
    def cast(self, cast):
        """Sets the cast of this NumberTransform.


        :param cast: The cast of this NumberTransform.  # noqa: E501
        :type: NumberCastTransform
        """

        self._cast = cast

    @property
    def ceil(self):
        """Gets the ceil of this NumberTransform.  # noqa: E501


        :return: The ceil of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._ceil

    @ceil.setter
    def ceil(self, ceil):
        """Sets the ceil of this NumberTransform.


        :param ceil: The ceil of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._ceil = ceil

    @property
    def constant(self):
        """Gets the constant of this NumberTransform.  # noqa: E501


        :return: The constant of this NumberTransform.  # noqa: E501
        :rtype: NumberConstantTransform
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """Sets the constant of this NumberTransform.


        :param constant: The constant of this NumberTransform.  # noqa: E501
        :type: NumberConstantTransform
        """

        self._constant = constant

    @property
    def default(self):
        """Gets the default of this NumberTransform.  # noqa: E501


        :return: The default of this NumberTransform.  # noqa: E501
        :rtype: NumberDefaultTransform
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this NumberTransform.


        :param default: The default of this NumberTransform.  # noqa: E501
        :type: NumberDefaultTransform
        """

        self._default = default

    @property
    def div(self):
        """Gets the div of this NumberTransform.  # noqa: E501


        :return: The div of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._div

    @div.setter
    def div(self, div):
        """Sets the div of this NumberTransform.


        :param div: The div of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._div = div

    @property
    def div_value(self):
        """Gets the div_value of this NumberTransform.  # noqa: E501


        :return: The div_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._div_value

    @div_value.setter
    def div_value(self, div_value):
        """Sets the div_value of this NumberTransform.


        :param div_value: The div_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._div_value = div_value

    @property
    def divide(self):
        """Gets the divide of this NumberTransform.  # noqa: E501


        :return: The divide of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._divide

    @divide.setter
    def divide(self, divide):
        """Sets the divide of this NumberTransform.


        :param divide: The divide of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._divide = divide

    @property
    def divide_value(self):
        """Gets the divide_value of this NumberTransform.  # noqa: E501


        :return: The divide_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._divide_value

    @divide_value.setter
    def divide_value(self, divide_value):
        """Sets the divide_value of this NumberTransform.


        :param divide_value: The divide_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._divide_value = divide_value

    @property
    def floor(self):
        """Gets the floor of this NumberTransform.  # noqa: E501


        :return: The floor of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this NumberTransform.


        :param floor: The floor of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._floor = floor

    @property
    def mod(self):
        """Gets the mod of this NumberTransform.  # noqa: E501


        :return: The mod of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._mod

    @mod.setter
    def mod(self, mod):
        """Sets the mod of this NumberTransform.


        :param mod: The mod of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._mod = mod

    @property
    def mod_value(self):
        """Gets the mod_value of this NumberTransform.  # noqa: E501


        :return: The mod_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._mod_value

    @mod_value.setter
    def mod_value(self, mod_value):
        """Sets the mod_value of this NumberTransform.


        :param mod_value: The mod_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._mod_value = mod_value

    @property
    def mul(self):
        """Gets the mul of this NumberTransform.  # noqa: E501


        :return: The mul of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._mul

    @mul.setter
    def mul(self, mul):
        """Sets the mul of this NumberTransform.


        :param mul: The mul of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._mul = mul

    @property
    def mul_value(self):
        """Gets the mul_value of this NumberTransform.  # noqa: E501


        :return: The mul_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._mul_value

    @mul_value.setter
    def mul_value(self, mul_value):
        """Sets the mul_value of this NumberTransform.


        :param mul_value: The mul_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._mul_value = mul_value

    @property
    def multiply(self):
        """Gets the multiply of this NumberTransform.  # noqa: E501


        :return: The multiply of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._multiply

    @multiply.setter
    def multiply(self, multiply):
        """Sets the multiply of this NumberTransform.


        :param multiply: The multiply of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._multiply = multiply

    @property
    def multiply_value(self):
        """Gets the multiply_value of this NumberTransform.  # noqa: E501


        :return: The multiply_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._multiply_value

    @multiply_value.setter
    def multiply_value(self, multiply_value):
        """Sets the multiply_value of this NumberTransform.


        :param multiply_value: The multiply_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._multiply_value = multiply_value

    @property
    def negate(self):
        """Gets the negate of this NumberTransform.  # noqa: E501


        :return: The negate of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this NumberTransform.


        :param negate: The negate of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._negate = negate

    @property
    def negative(self):
        """Gets the negative of this NumberTransform.  # noqa: E501


        :return: The negative of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this NumberTransform.


        :param negative: The negative of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._negative = negative

    @property
    def round(self):
        """Gets the round of this NumberTransform.  # noqa: E501


        :return: The round of this NumberTransform.  # noqa: E501
        :rtype: NumberUnaryTransform
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this NumberTransform.


        :param round: The round of this NumberTransform.  # noqa: E501
        :type: NumberUnaryTransform
        """

        self._round = round

    @property
    def sub(self):
        """Gets the sub of this NumberTransform.  # noqa: E501


        :return: The sub of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this NumberTransform.


        :param sub: The sub of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._sub = sub

    @property
    def sub_value(self):
        """Gets the sub_value of this NumberTransform.  # noqa: E501


        :return: The sub_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._sub_value

    @sub_value.setter
    def sub_value(self, sub_value):
        """Sets the sub_value of this NumberTransform.


        :param sub_value: The sub_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._sub_value = sub_value

    @property
    def subtract(self):
        """Gets the subtract of this NumberTransform.  # noqa: E501


        :return: The subtract of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryTransform
        """
        return self._subtract

    @subtract.setter
    def subtract(self, subtract):
        """Sets the subtract of this NumberTransform.


        :param subtract: The subtract of this NumberTransform.  # noqa: E501
        :type: NumberBinaryTransform
        """

        self._subtract = subtract

    @property
    def subtract_value(self):
        """Gets the subtract_value of this NumberTransform.  # noqa: E501


        :return: The subtract_value of this NumberTransform.  # noqa: E501
        :rtype: NumberBinaryValueTransform
        """
        return self._subtract_value

    @subtract_value.setter
    def subtract_value(self, subtract_value):
        """Sets the subtract_value of this NumberTransform.


        :param subtract_value: The subtract_value of this NumberTransform.  # noqa: E501
        :type: NumberBinaryValueTransform
        """

        self._subtract_value = subtract_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumberTransform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
