# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TopNTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset': 'IntegrationDataset',
        'filters': 'Filter',
        'joins': 'Join',
        'n_rows': 'float',
        'output_column': 'str',
        'partition': 'TopNTaskPartition',
        'post_filters': 'Filter',
        'post_transforms': 'Transform',
        'select': 'list[str]',
        'sort': 'TopNTaskSort',
        'transforms': 'Transform'
    }

    attribute_map = {
        'dataset': 'dataset',
        'filters': 'filters',
        'joins': 'joins',
        'n_rows': 'n_rows',
        'output_column': 'output_column',
        'partition': 'partition',
        'post_filters': 'post_filters',
        'post_transforms': 'post_transforms',
        'select': 'select',
        'sort': 'sort',
        'transforms': 'transforms'
    }

    def __init__(self, dataset=None, filters=None, joins=None, n_rows=None, output_column=None, partition=None, post_filters=None, post_transforms=None, select=None, sort=None, transforms=None):  # noqa: E501
        """TopNTask - a model defined in OpenAPI"""  # noqa: E501

        self._dataset = None
        self._filters = None
        self._joins = None
        self._n_rows = None
        self._output_column = None
        self._partition = None
        self._post_filters = None
        self._post_transforms = None
        self._select = None
        self._sort = None
        self._transforms = None
        self.discriminator = None

        self.dataset = dataset
        if filters is not None:
            self.filters = filters
        if joins is not None:
            self.joins = joins
        if n_rows is not None:
            self.n_rows = n_rows
        if output_column is not None:
            self.output_column = output_column
        self.partition = partition
        if post_filters is not None:
            self.post_filters = post_filters
        if post_transforms is not None:
            self.post_transforms = post_transforms
        if select is not None:
            self.select = select
        self.sort = sort
        if transforms is not None:
            self.transforms = transforms

    @property
    def dataset(self):
        """Gets the dataset of this TopNTask.  # noqa: E501


        :return: The dataset of this TopNTask.  # noqa: E501
        :rtype: IntegrationDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this TopNTask.


        :param dataset: The dataset of this TopNTask.  # noqa: E501
        :type: IntegrationDataset
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def filters(self):
        """Gets the filters of this TopNTask.  # noqa: E501


        :return: The filters of this TopNTask.  # noqa: E501
        :rtype: Filter
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this TopNTask.


        :param filters: The filters of this TopNTask.  # noqa: E501
        :type: Filter
        """

        self._filters = filters

    @property
    def joins(self):
        """Gets the joins of this TopNTask.  # noqa: E501


        :return: The joins of this TopNTask.  # noqa: E501
        :rtype: Join
        """
        return self._joins

    @joins.setter
    def joins(self, joins):
        """Sets the joins of this TopNTask.


        :param joins: The joins of this TopNTask.  # noqa: E501
        :type: Join
        """

        self._joins = joins

    @property
    def n_rows(self):
        """Gets the n_rows of this TopNTask.  # noqa: E501


        :return: The n_rows of this TopNTask.  # noqa: E501
        :rtype: float
        """
        return self._n_rows

    @n_rows.setter
    def n_rows(self, n_rows):
        """Sets the n_rows of this TopNTask.


        :param n_rows: The n_rows of this TopNTask.  # noqa: E501
        :type: float
        """

        self._n_rows = n_rows

    @property
    def output_column(self):
        """Gets the output_column of this TopNTask.  # noqa: E501


        :return: The output_column of this TopNTask.  # noqa: E501
        :rtype: str
        """
        return self._output_column

    @output_column.setter
    def output_column(self, output_column):
        """Sets the output_column of this TopNTask.


        :param output_column: The output_column of this TopNTask.  # noqa: E501
        :type: str
        """

        self._output_column = output_column

    @property
    def partition(self):
        """Gets the partition of this TopNTask.  # noqa: E501


        :return: The partition of this TopNTask.  # noqa: E501
        :rtype: TopNTaskPartition
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this TopNTask.


        :param partition: The partition of this TopNTask.  # noqa: E501
        :type: TopNTaskPartition
        """
        if partition is None:
            raise ValueError("Invalid value for `partition`, must not be `None`")  # noqa: E501

        self._partition = partition

    @property
    def post_filters(self):
        """Gets the post_filters of this TopNTask.  # noqa: E501


        :return: The post_filters of this TopNTask.  # noqa: E501
        :rtype: Filter
        """
        return self._post_filters

    @post_filters.setter
    def post_filters(self, post_filters):
        """Sets the post_filters of this TopNTask.


        :param post_filters: The post_filters of this TopNTask.  # noqa: E501
        :type: Filter
        """

        self._post_filters = post_filters

    @property
    def post_transforms(self):
        """Gets the post_transforms of this TopNTask.  # noqa: E501


        :return: The post_transforms of this TopNTask.  # noqa: E501
        :rtype: Transform
        """
        return self._post_transforms

    @post_transforms.setter
    def post_transforms(self, post_transforms):
        """Sets the post_transforms of this TopNTask.


        :param post_transforms: The post_transforms of this TopNTask.  # noqa: E501
        :type: Transform
        """

        self._post_transforms = post_transforms

    @property
    def select(self):
        """Gets the select of this TopNTask.  # noqa: E501


        :return: The select of this TopNTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this TopNTask.


        :param select: The select of this TopNTask.  # noqa: E501
        :type: list[str]
        """

        self._select = select

    @property
    def sort(self):
        """Gets the sort of this TopNTask.  # noqa: E501


        :return: The sort of this TopNTask.  # noqa: E501
        :rtype: TopNTaskSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this TopNTask.


        :param sort: The sort of this TopNTask.  # noqa: E501
        :type: TopNTaskSort
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501

        self._sort = sort

    @property
    def transforms(self):
        """Gets the transforms of this TopNTask.  # noqa: E501


        :return: The transforms of this TopNTask.  # noqa: E501
        :rtype: Transform
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this TopNTask.


        :param transforms: The transforms of this TopNTask.  # noqa: E501
        :type: Transform
        """

        self._transforms = transforms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopNTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
