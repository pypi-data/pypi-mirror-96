# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SnapshotDatasetTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'previous_period_extension_interval': 'RefreshInterval',
        'snapshot_frequency': 'str'
    }

    attribute_map = {
        'previous_period_extension_interval': 'previous_period_extension_interval',
        'snapshot_frequency': 'snapshot_frequency'
    }

    def __init__(self, previous_period_extension_interval=None, snapshot_frequency=None):  # noqa: E501
        """SnapshotDatasetTask - a model defined in OpenAPI"""  # noqa: E501

        self._previous_period_extension_interval = None
        self._snapshot_frequency = None
        self.discriminator = None

        if previous_period_extension_interval is not None:
            self.previous_period_extension_interval = previous_period_extension_interval
        if snapshot_frequency is not None:
            self.snapshot_frequency = snapshot_frequency

    @property
    def previous_period_extension_interval(self):
        """Gets the previous_period_extension_interval of this SnapshotDatasetTask.  # noqa: E501


        :return: The previous_period_extension_interval of this SnapshotDatasetTask.  # noqa: E501
        :rtype: RefreshInterval
        """
        return self._previous_period_extension_interval

    @previous_period_extension_interval.setter
    def previous_period_extension_interval(self, previous_period_extension_interval):
        """Sets the previous_period_extension_interval of this SnapshotDatasetTask.


        :param previous_period_extension_interval: The previous_period_extension_interval of this SnapshotDatasetTask.  # noqa: E501
        :type: RefreshInterval
        """

        self._previous_period_extension_interval = previous_period_extension_interval

    @property
    def snapshot_frequency(self):
        """Gets the snapshot_frequency of this SnapshotDatasetTask.  # noqa: E501


        :return: The snapshot_frequency of this SnapshotDatasetTask.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_frequency

    @snapshot_frequency.setter
    def snapshot_frequency(self, snapshot_frequency):
        """Sets the snapshot_frequency of this SnapshotDatasetTask.


        :param snapshot_frequency: The snapshot_frequency of this SnapshotDatasetTask.  # noqa: E501
        :type: str
        """

        self._snapshot_frequency = snapshot_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotDatasetTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
