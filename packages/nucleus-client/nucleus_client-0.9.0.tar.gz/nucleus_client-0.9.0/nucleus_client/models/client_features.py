# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientFeatures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_upload': 'bool',
        'default_login_policy': 'str',
        'default_user_id': 'str',
        'default_user_token': 'str',
        'glossary': 'bool',
        'page_editor': 'bool',
        'sso': 'bool',
        'user_roles': 'bool'
    }

    attribute_map = {
        'dataset_upload': 'dataset_upload',
        'default_login_policy': 'default_login_policy',
        'default_user_id': 'default_user_id',
        'default_user_token': 'default_user_token',
        'glossary': 'glossary',
        'page_editor': 'page_editor',
        'sso': 'sso',
        'user_roles': 'user_roles'
    }

    def __init__(self, dataset_upload=None, default_login_policy=None, default_user_id=None, default_user_token=None, glossary=None, page_editor=None, sso=None, user_roles=None):  # noqa: E501
        """ClientFeatures - a model defined in OpenAPI"""  # noqa: E501

        self._dataset_upload = None
        self._default_login_policy = None
        self._default_user_id = None
        self._default_user_token = None
        self._glossary = None
        self._page_editor = None
        self._sso = None
        self._user_roles = None
        self.discriminator = None

        if dataset_upload is not None:
            self.dataset_upload = dataset_upload
        if default_login_policy is not None:
            self.default_login_policy = default_login_policy
        if default_user_id is not None:
            self.default_user_id = default_user_id
        if default_user_token is not None:
            self.default_user_token = default_user_token
        if glossary is not None:
            self.glossary = glossary
        if page_editor is not None:
            self.page_editor = page_editor
        if sso is not None:
            self.sso = sso
        if user_roles is not None:
            self.user_roles = user_roles

    @property
    def dataset_upload(self):
        """Gets the dataset_upload of this ClientFeatures.  # noqa: E501


        :return: The dataset_upload of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._dataset_upload

    @dataset_upload.setter
    def dataset_upload(self, dataset_upload):
        """Sets the dataset_upload of this ClientFeatures.


        :param dataset_upload: The dataset_upload of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._dataset_upload = dataset_upload

    @property
    def default_login_policy(self):
        """Gets the default_login_policy of this ClientFeatures.  # noqa: E501


        :return: The default_login_policy of this ClientFeatures.  # noqa: E501
        :rtype: str
        """
        return self._default_login_policy

    @default_login_policy.setter
    def default_login_policy(self, default_login_policy):
        """Sets the default_login_policy of this ClientFeatures.


        :param default_login_policy: The default_login_policy of this ClientFeatures.  # noqa: E501
        :type: str
        """

        self._default_login_policy = default_login_policy

    @property
    def default_user_id(self):
        """Gets the default_user_id of this ClientFeatures.  # noqa: E501


        :return: The default_user_id of this ClientFeatures.  # noqa: E501
        :rtype: str
        """
        return self._default_user_id

    @default_user_id.setter
    def default_user_id(self, default_user_id):
        """Sets the default_user_id of this ClientFeatures.


        :param default_user_id: The default_user_id of this ClientFeatures.  # noqa: E501
        :type: str
        """

        self._default_user_id = default_user_id

    @property
    def default_user_token(self):
        """Gets the default_user_token of this ClientFeatures.  # noqa: E501


        :return: The default_user_token of this ClientFeatures.  # noqa: E501
        :rtype: str
        """
        return self._default_user_token

    @default_user_token.setter
    def default_user_token(self, default_user_token):
        """Sets the default_user_token of this ClientFeatures.


        :param default_user_token: The default_user_token of this ClientFeatures.  # noqa: E501
        :type: str
        """

        self._default_user_token = default_user_token

    @property
    def glossary(self):
        """Gets the glossary of this ClientFeatures.  # noqa: E501


        :return: The glossary of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._glossary

    @glossary.setter
    def glossary(self, glossary):
        """Sets the glossary of this ClientFeatures.


        :param glossary: The glossary of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._glossary = glossary

    @property
    def page_editor(self):
        """Gets the page_editor of this ClientFeatures.  # noqa: E501


        :return: The page_editor of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._page_editor

    @page_editor.setter
    def page_editor(self, page_editor):
        """Sets the page_editor of this ClientFeatures.


        :param page_editor: The page_editor of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._page_editor = page_editor

    @property
    def sso(self):
        """Gets the sso of this ClientFeatures.  # noqa: E501


        :return: The sso of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this ClientFeatures.


        :param sso: The sso of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._sso = sso

    @property
    def user_roles(self):
        """Gets the user_roles of this ClientFeatures.  # noqa: E501


        :return: The user_roles of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this ClientFeatures.


        :param user_roles: The user_roles of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
