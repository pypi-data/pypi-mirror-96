# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'field_name': 'str',
        'field_type': 'str',
        'is_primary_key': 'bool',
        'is_time_stamp': 'bool',
        'source_column': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'field_name': 'field_name',
        'field_type': 'field_type',
        'is_primary_key': 'is_primary_key',
        'is_time_stamp': 'is_time_stamp',
        'source_column': 'source_column'
    }

    def __init__(self, display_name=None, field_name=None, field_type=None, is_primary_key=None, is_time_stamp=None, source_column=None):  # noqa: E501
        """UploadField - a model defined in OpenAPI"""  # noqa: E501

        self._display_name = None
        self._field_name = None
        self._field_type = None
        self._is_primary_key = None
        self._is_time_stamp = None
        self._source_column = None
        self.discriminator = None

        self.display_name = display_name
        self.field_name = field_name
        if field_type is not None:
            self.field_type = field_type
        if is_primary_key is not None:
            self.is_primary_key = is_primary_key
        if is_time_stamp is not None:
            self.is_time_stamp = is_time_stamp
        self.source_column = source_column

    @property
    def display_name(self):
        """Gets the display_name of this UploadField.  # noqa: E501


        :return: The display_name of this UploadField.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UploadField.


        :param display_name: The display_name of this UploadField.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def field_name(self):
        """Gets the field_name of this UploadField.  # noqa: E501


        :return: The field_name of this UploadField.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this UploadField.


        :param field_name: The field_name of this UploadField.  # noqa: E501
        :type: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this UploadField.  # noqa: E501


        :return: The field_type of this UploadField.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this UploadField.


        :param field_type: The field_type of this UploadField.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this UploadField.  # noqa: E501


        :return: The is_primary_key of this UploadField.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this UploadField.


        :param is_primary_key: The is_primary_key of this UploadField.  # noqa: E501
        :type: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def is_time_stamp(self):
        """Gets the is_time_stamp of this UploadField.  # noqa: E501


        :return: The is_time_stamp of this UploadField.  # noqa: E501
        :rtype: bool
        """
        return self._is_time_stamp

    @is_time_stamp.setter
    def is_time_stamp(self, is_time_stamp):
        """Sets the is_time_stamp of this UploadField.


        :param is_time_stamp: The is_time_stamp of this UploadField.  # noqa: E501
        :type: bool
        """

        self._is_time_stamp = is_time_stamp

    @property
    def source_column(self):
        """Gets the source_column of this UploadField.  # noqa: E501


        :return: The source_column of this UploadField.  # noqa: E501
        :rtype: str
        """
        return self._source_column

    @source_column.setter
    def source_column(self, source_column):
        """Sets the source_column of this UploadField.


        :param source_column: The source_column of this UploadField.  # noqa: E501
        :type: str
        """
        if source_column is None:
            raise ValueError("Invalid value for `source_column`, must not be `None`")  # noqa: E501

        self._source_column = source_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
