# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_client(self, client_code, **kwargs):  # noqa: E501
        """Reactivates a client by client code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_client(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_client_with_http_info(client_code, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_client_with_http_info(client_code, **kwargs)  # noqa: E501
            return data

    def activate_client_with_http_info(self, client_code, **kwargs):  # noqa: E501
        """Reactivates a client by client code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_client_with_http_info(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_code' is set
        if ('client_code' not in local_var_params or
                local_var_params['client_code'] is None):
            raise ValueError("Missing the required parameter `client_code` when calling `activate_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_code' in local_var_params:
            path_params['client_code'] = local_var_params['client_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients/activate/code-{client_code}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def activate_user(self, activation_key, **kwargs):  # noqa: E501
        """Activates a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_user(activation_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key: (required)
        :param UserActivation body:
        :return: VirtualUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_user_with_http_info(activation_key, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_user_with_http_info(activation_key, **kwargs)  # noqa: E501
            return data

    def activate_user_with_http_info(self, activation_key, **kwargs):  # noqa: E501
        """Activates a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_user_with_http_info(activation_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key: (required)
        :param UserActivation body:
        :return: VirtualUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['activation_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'activation_key' is set
        if ('activation_key' not in local_var_params or
                local_var_params['activation_key'] is None):
            raise ValueError("Missing the required parameter `activation_key` when calling `activate_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activation_key' in local_var_params:
            path_params['activation_key'] = local_var_params['activation_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/user-activations/{activation_key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_api_key(self, **kwargs):  # noqa: E501
        """Add an API user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_api_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param ApiUser body:
        :return: ApiUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_api_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_api_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_api_key_with_http_info(self, **kwargs):  # noqa: E501
        """Add an API user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_api_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param ApiUser body:
        :return: ApiUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_api_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api-keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_block_type(self, **kwargs):  # noqa: E501
        """Add a new block type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_block_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockType body:
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_block_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_block_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_block_type_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new block type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_block_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockType body:
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_block_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_client(self, **kwargs):  # noqa: E501
        """Add new client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Client body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_client_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_client_with_http_info(self, **kwargs):  # noqa: E501
        """Add new client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Client body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dataset(self, client_id, **kwargs):  # noqa: E501
        """Add a new dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Dataset body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dataset_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dataset_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_dataset_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Add a new dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Dataset body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dataset_metadata(self, client_id, **kwargs):  # noqa: E501
        """Retrieves meta information about data stored in Druid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset_metadata(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DatasetMetadata body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dataset_metadata_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dataset_metadata_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_dataset_metadata_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Retrieves meta information about data stored in Druid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset_metadata_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DatasetMetadata body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dataset_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_dataset_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/dataset-metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_download_request(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) download request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_download_request(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DownloadV1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_download_request_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_download_request_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_download_request_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) download request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_download_request_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DownloadV1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_download_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_download_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/download-requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_download_request_0(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) download request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_download_request_0(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DownloadV2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_download_request_0_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_download_request_0_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_download_request_0_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) download request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_download_request_0_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DownloadV2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_download_request_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_download_request_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/download-requests/v2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_entity_batch(self, **kwargs):  # noqa: E501
        """Adds a new entity batch, and queues a task to process it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_entity_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param EntityBatch body:
        :return: BatchReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_entity_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_entity_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_entity_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new entity batch, and queues a task to process it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_entity_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param EntityBatch body:
        :return: BatchReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_entity_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/entity-batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_full_page(self, client_id, **kwargs):  # noqa: E501
        """Creates a page without removing blocks, widgets, or block_order attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_full_page(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_full_page_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_full_page_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_full_page_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Creates a page without removing blocks, widgets, or block_order attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_full_page_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_full_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_full_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/full', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_geodata(self, geo_type, **kwargs):  # noqa: E501
        """Adds a new geo mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_geodata(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :param GeoData body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
        else:
            (data) = self.add_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
            return data

    def add_geodata_with_http_info(self, geo_type, **kwargs):  # noqa: E501
        """Adds a new geo mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_geodata_with_http_info(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :param GeoData body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['geo_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_geodata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'geo_type' is set
        if ('geo_type' not in local_var_params or
                local_var_params['geo_type'] is None):
            raise ValueError("Missing the required parameter `geo_type` when calling `add_geodata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geo_type' in local_var_params:
            query_params.append(('geo_type', local_var_params['geo_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/geodata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_goal(self, client_id, **kwargs):  # noqa: E501
        """Adds a new goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_goal(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Goal body:
        :return: Goal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_goal_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_goal_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_goal_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_goal_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Goal body:
        :return: Goal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_goal" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/goals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Goal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_higher_logic_activity(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Higher Logic callback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_higher_logic_activity(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_higher_logic_activity_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_higher_logic_activity_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
            return data

    def add_higher_logic_activity_with_http_info(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Higher Logic callback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_higher_logic_activity_with_http_info(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'integration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_higher_logic_activity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_higher_logic_activity`")  # noqa: E501
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `add_higher_logic_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/callbacks/higher-logic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_integration(self, client_id, **kwargs):  # noqa: E501
        """Adds a new integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Integration body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_integration_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_integration_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_integration_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Integration body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_integration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_integration_sync_request(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Run a sync integration      Responses:          204: The sync request was successfully queued  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration_sync_request(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :param str sync_method:
        :param str param1:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_integration_sync_request_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_integration_sync_request_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
            return data

    def add_integration_sync_request_with_http_info(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Run a sync integration      Responses:          204: The sync request was successfully queued  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration_sync_request_with_http_info(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :param str sync_method:
        :param str param1:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'integration_id', 'sync_method', 'param1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_integration_sync_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_integration_sync_request`")  # noqa: E501
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `add_integration_sync_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501
        if 'sync_method' in local_var_params:
            query_params.append(('sync_method', local_var_params['sync_method']))  # noqa: E501
        if 'param1' in local_var_params:
            query_params.append(('param1', local_var_params['param1']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/integration-sync-requests/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_integration_type(self, **kwargs):  # noqa: E501
        """Add a new integration type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationType body:
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_integration_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_integration_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_integration_type_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new integration type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_integration_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationType body:
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_integration_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integration-types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_page(self, client_id, **kwargs):  # noqa: E501
        """Creates a page from a page template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param TemplatedPage body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_page_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_page_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_page_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Creates a page from a page template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param TemplatedPage body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_page_publication(self, page_id, client_id, **kwargs):  # noqa: E501
        """Updates page with publication information      Responses:          201: Page was updated with publication information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page_publication(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PagePublications body:
        :return: PagePublications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_page_publication_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_page_publication_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def add_page_publication_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Updates page with publication information      Responses:          201: Page was updated with publication information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page_publication_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PagePublications body:
        :return: PagePublications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_page_publication" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `add_page_publication`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_page_publication`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-publications/{page_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagePublications',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_page_template(self, **kwargs):  # noqa: E501
        """Add a new page template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageTemplate body:
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_page_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_page_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_page_template_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new page template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_page_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PageTemplate body:
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_page_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_partner_batch(self, integration_type_id, **kwargs):  # noqa: E501
        """Adds a new partner batch, and queues a task to process it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_partner_batch(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :param PartnerBatch body:
        :return: BatchReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_partner_batch_with_http_info(integration_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_partner_batch_with_http_info(integration_type_id, **kwargs)  # noqa: E501
            return data

    def add_partner_batch_with_http_info(self, integration_type_id, **kwargs):  # noqa: E501
        """Adds a new partner batch, and queues a task to process it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_partner_batch_with_http_info(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :param PartnerBatch body:
        :return: BatchReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_partner_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_type_id' is set
        if ('integration_type_id' not in local_var_params or
                local_var_params['integration_type_id'] is None):
            raise ValueError("Missing the required parameter `integration_type_id` when calling `add_partner_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'integration_type_id' in local_var_params:
            query_params.append(('integration_type_id', local_var_params['integration_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/entity-batches/partner-batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_password_reset_request(self, client_id, **kwargs):  # noqa: E501
        """Creates a new request to reset a user's password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_password_reset_request(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param PasswordResetRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_password_reset_request_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_password_reset_request_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_password_reset_request_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Creates a new request to reset a user's password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_password_reset_request_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param PasswordResetRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_password_reset_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_password_reset_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/password-reset-requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_prolearn_activity(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Prolearn callback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prolearn_activity(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_prolearn_activity_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_prolearn_activity_with_http_info(client_id, integration_id, **kwargs)  # noqa: E501
            return data

    def add_prolearn_activity_with_http_info(self, client_id, integration_id, **kwargs):  # noqa: E501
        """Prolearn callback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prolearn_activity_with_http_info(client_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'integration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_prolearn_activity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_prolearn_activity`")  # noqa: E501
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `add_prolearn_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/callbacks/prolearn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_report(self, client_id, **kwargs):  # noqa: E501
        """Add a new report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_report(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ReportAdd body:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_report_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_report_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_report_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Add a new report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_report_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ReportAdd body:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_report_config(self, client_id, **kwargs):  # noqa: E501
        """Add a new report_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_report_config(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ReportConfig body:
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_report_config_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_report_config_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_report_config_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Add a new report_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_report_config_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ReportConfig body:
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_report_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_report_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_role(self, client_id, **kwargs):  # noqa: E501
        """Adds a new role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_role_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_role_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_role_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Role body:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_role_permission(self, client_id, role_id, **kwargs):  # noqa: E501
        """Adds a new permission to a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_permission(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :param RolePermission body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_role_permission_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_role_permission_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
            return data

    def add_role_permission_with_http_info(self, client_id, role_id, **kwargs):  # noqa: E501
        """Adds a new permission to a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_permission_with_http_info(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :param RolePermission body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'role_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_permission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_role_permission`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `add_role_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/role-permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_term(self, client_id, **kwargs):  # noqa: E501
        """Adds a new term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_term(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Term body:
        :return: Term
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_term_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_term_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_term_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_term_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Term body:
        :return: Term
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_term" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/terms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Term',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_upload_request(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) upload request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_upload_request(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Upload body:
        :return: Upload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_upload_request_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_upload_request_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_upload_request_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new (pending) upload request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_upload_request_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param Upload body:
        :return: Upload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_upload_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_upload_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/upload-requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Upload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user(self, **kwargs):  # noqa: E501
        """Adds a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param VirtualUser body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_user_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param VirtualUser body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_0(self, **kwargs):  # noqa: E501
        """Notifies administrator that user has been added or deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param NotifyUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_user_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_user_0_with_http_info(self, **kwargs):  # noqa: E501
        """Notifies administrator that user has been added or deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param NotifyUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/admin-notify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_1(self, user_idtoken, **kwargs):  # noqa: E501
        """Adds a new user token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_1(user_idtoken, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_idtoken: (required)
        :param str client_id:
        :param UserToken body:
        :return: UserToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_1_with_http_info(user_idtoken, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_1_with_http_info(user_idtoken, **kwargs)  # noqa: E501
            return data

    def add_user_1_with_http_info(self, user_idtoken, **kwargs):  # noqa: E501
        """Adds a new user token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_1_with_http_info(user_idtoken, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_idtoken: (required)
        :param str client_id:
        :param UserToken body:
        :return: UserToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_idtoken', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_idtoken' is set
        if ('user_idtoken' not in local_var_params or
                local_var_params['user_idtoken'] is None):
            raise ValueError("Missing the required parameter `user_idtoken` when calling `add_user_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_idtoken' in local_var_params:
            path_params['user_id&gt;/token'] = local_var_params['user_idtoken']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id>/token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_role(self, client_id, role_id, **kwargs):  # noqa: E501
        """Add a user to a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_role(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :param UserRole body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_role_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_role_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
            return data

    def add_user_role_with_http_info(self, client_id, role_id, **kwargs):  # noqa: E501
        """Add a user to a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_role_with_http_info(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :param UserRole body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'role_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_user_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `add_user_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/user-roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_view(self, client_id, **kwargs):  # noqa: E501
        """Adds a new view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_view(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param View body:
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_view_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_view_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def add_view_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Adds a new view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_view_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param View body:
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_view" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/views', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='View',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_widget_type(self, **kwargs):  # noqa: E501
        """Adds a new widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_widget_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetType body:
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_widget_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_widget_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_widget_type_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_widget_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetType body:
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_widget_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_password(self, user_id, **kwargs):  # noqa: E501
        """Changes a users password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_password(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param PasswordChangeRequest body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_password_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_password_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def change_password_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Changes a users password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_password_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param PasswordChangeRequest body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_password" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `change_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/password-changes/{user_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cleanup_dataset_segments(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Cleanup old segments for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cleanup_dataset_segments(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cleanup_dataset_segments_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.cleanup_dataset_segments_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
            return data

    def cleanup_dataset_segments_with_http_info(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Cleanup old segments for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cleanup_dataset_segments_with_http_info(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'activity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cleanup_dataset_segments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `cleanup_dataset_segments`")  # noqa: E501
        # verify the required parameter 'activity_type' is set
        if ('activity_type' not in local_var_params or
                local_var_params['activity_type'] is None):
            raise ValueError("Missing the required parameter `activity_type` when calling `cleanup_dataset_segments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/maintenance/cleanup-dataset-segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_package(self, client_codes, **kwargs):  # noqa: E501
        """Creates a new client package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_package(client_codes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_codes: (required)
        :param int limit:
        :param bool include_custom_activities:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_package_with_http_info(client_codes, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_package_with_http_info(client_codes, **kwargs)  # noqa: E501
            return data

    def create_client_package_with_http_info(self, client_codes, **kwargs):  # noqa: E501
        """Creates a new client package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_package_with_http_info(client_codes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_codes: (required)
        :param int limit:
        :param bool include_custom_activities:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_codes', 'limit', 'include_custom_activities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_codes' is set
        if ('client_codes' not in local_var_params or
                local_var_params['client_codes'] is None):
            raise ValueError("Missing the required parameter `client_codes` when calling `create_client_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_codes' in local_var_params:
            query_params.append(('client_codes', local_var_params['client_codes']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'include_custom_activities' in local_var_params:
            query_params.append(('include_custom_activities', local_var_params['include_custom_activities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/client-packages/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_activity_by_key(self, external_key, client_id, integration_id, activity_type, **kwargs):  # noqa: E501
        """Hard delete an activity by external key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity_by_key(external_key, client_id, integration_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_key: (required)
        :param str client_id: (required)
        :param str integration_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_activity_by_key_with_http_info(external_key, client_id, integration_id, activity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_activity_by_key_with_http_info(external_key, client_id, integration_id, activity_type, **kwargs)  # noqa: E501
            return data

    def delete_activity_by_key_with_http_info(self, external_key, client_id, integration_id, activity_type, **kwargs):  # noqa: E501
        """Hard delete an activity by external key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity_by_key_with_http_info(external_key, client_id, integration_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_key: (required)
        :param str client_id: (required)
        :param str integration_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['external_key', 'client_id', 'integration_id', 'activity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_activity_by_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'external_key' is set
        if ('external_key' not in local_var_params or
                local_var_params['external_key'] is None):
            raise ValueError("Missing the required parameter `external_key` when calling `delete_activity_by_key`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_activity_by_key`")  # noqa: E501
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `delete_activity_by_key`")  # noqa: E501
        # verify the required parameter 'activity_type' is set
        if ('activity_type' not in local_var_params or
                local_var_params['activity_type'] is None):
            raise ValueError("Missing the required parameter `activity_type` when calling `delete_activity_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_key' in local_var_params:
            path_params['external_key'] = local_var_params['external_key']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activities/external-key-{external_key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_api_key(self, user_id, client_id, **kwargs):  # noqa: E501
        """Deletes an API user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_key(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_api_key_with_http_info(self, user_id, client_id, **kwargs):  # noqa: E501
        """Deletes an API user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_key_with_http_info(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_api_key`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api-keys/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_block_type(self, block_type_id, **kwargs):  # noqa: E501
        """Deletes a block type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_block_type(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
            return data

    def delete_block_type_with_http_info(self, block_type_id, **kwargs):  # noqa: E501
        """Deletes a block type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_block_type_with_http_info(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['block_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_block_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type_id' is set
        if ('block_type_id' not in local_var_params or
                local_var_params['block_type_id'] is None):
            raise ValueError("Missing the required parameter `block_type_id` when calling `delete_block_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_type_id' in local_var_params:
            path_params['block_type_id'] = local_var_params['block_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types/{block_type_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client(self, client_id, **kwargs):  # noqa: E501
        """Deletes a client by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def delete_client_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Deletes a client by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in local_var_params:
            path_params['client_id'] = local_var_params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dataset(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Deletes a dataset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_dataset_with_http_info(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Deletes a dataset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset_with_http_info(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dataset_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in local_var_params or
                local_var_params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `delete_dataset`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in local_var_params:
            path_params['dataset_id'] = local_var_params['dataset_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_goal(self, goal_id, client_id, **kwargs):  # noqa: E501
        """Deletes a goal by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_goal(goal_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_goal_with_http_info(goal_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_goal_with_http_info(goal_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_goal_with_http_info(self, goal_id, client_id, **kwargs):  # noqa: E501
        """Deletes a goal by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_goal_with_http_info(goal_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['goal_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_goal" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'goal_id' is set
        if ('goal_id' not in local_var_params or
                local_var_params['goal_id'] is None):
            raise ValueError("Missing the required parameter `goal_id` when calling `delete_goal`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'goal_id' in local_var_params:
            path_params['goal_id'] = local_var_params['goal_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/goals/{goal_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_integration(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Deletes an integration by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_integration(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_integration_with_http_info(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Deletes an integration by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_integration_with_http_info(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_integration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `delete_integration`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in local_var_params:
            path_params['integration_id'] = local_var_params['integration_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes a page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_page_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes a page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `delete_page`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_preference(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes page preferences for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_preference(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_page_preference_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes page preferences for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_preference_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_preference" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `delete_page_preference`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_page_preference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-preferences/page-id-{page_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_publication(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes publication information for a page      Responses:          204: Page publication information was successfully deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_publication(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_publication_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_publication_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_page_publication_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Deletes publication information for a page      Responses:          204: Page publication information was successfully deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_publication_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_publication" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `delete_page_publication`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_page_publication`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-publications/{page_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_template(self, page_template_id, **kwargs):  # noqa: E501
        """Deletes a page template by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_template(page_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_template_with_http_info(page_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_template_with_http_info(page_template_id, **kwargs)  # noqa: E501
            return data

    def delete_page_template_with_http_info(self, page_template_id, **kwargs):  # noqa: E501
        """Deletes a page template by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_template_with_http_info(page_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_template_id' is set
        if ('page_template_id' not in local_var_params or
                local_var_params['page_template_id'] is None):
            raise ValueError("Missing the required parameter `page_template_id` when calling `delete_page_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_template_id' in local_var_params:
            path_params['page_template_id'] = local_var_params['page_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates/{page_template_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page_template_by_slug(self, slug, **kwargs):  # noqa: E501
        """Deletes all page templates with the specified slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_template_by_slug(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_template_by_slug_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_template_by_slug_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def delete_page_template_by_slug_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Deletes all page templates with the specified slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_template_by_slug_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page_template_by_slug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in local_var_params or
                local_var_params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `delete_page_template_by_slug`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in local_var_params:
            path_params['slug'] = local_var_params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates/slug-{slug}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_report(self, report_id, client_id, **kwargs):  # noqa: E501
        """Deletes a report by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_report_with_http_info(self, report_id, client_id, **kwargs):  # noqa: E501
        """Deletes a report by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report_with_http_info(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if ('report_id' not in local_var_params or
                local_var_params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `delete_report`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/reports/{report_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_report_config(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Deletes a report_config by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report_config(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_report_config_with_http_info(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Deletes a report_config by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report_config_with_http_info(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_config_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_report_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_config_id' is set
        if ('report_config_id' not in local_var_params or
                local_var_params['report_config_id'] is None):
            raise ValueError("Missing the required parameter `report_config_id` when calling `delete_report_config`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_report_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_config_id' in local_var_params:
            path_params['report_config_id'] = local_var_params['report_config_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs/{report_config_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_role(self, role_id, client_id, **kwargs):  # noqa: E501
        """Deletes a role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_role_with_http_info(self, role_id, client_id, **kwargs):  # noqa: E501
        """Deletes a role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_with_http_info(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `delete_role`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in local_var_params:
            path_params['role_id'] = local_var_params['role_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_role_permission(self, role_permission_id, client_id, role_id, **kwargs):  # noqa: E501
        """Deletes a permission for a specific role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_permission(role_permission_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_permission_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_role_permission_with_http_info(role_permission_id, client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_role_permission_with_http_info(role_permission_id, client_id, role_id, **kwargs)  # noqa: E501
            return data

    def delete_role_permission_with_http_info(self, role_permission_id, client_id, role_id, **kwargs):  # noqa: E501
        """Deletes a permission for a specific role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_permission_with_http_info(role_permission_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_permission_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_permission_id', 'client_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_role_permission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_permission_id' is set
        if ('role_permission_id' not in local_var_params or
                local_var_params['role_permission_id'] is None):
            raise ValueError("Missing the required parameter `role_permission_id` when calling `delete_role_permission`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_role_permission`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `delete_role_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_permission_id' in local_var_params:
            path_params['role_permission_id'] = local_var_params['role_permission_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/role-permissions/{role_permission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_schema(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Deletes the schema associated with an activity      Responses:          204: Schema was successfully deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_schema_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_schema_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
            return data

    def delete_schema_with_http_info(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Deletes the schema associated with an activity      Responses:          204: Schema was successfully deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema_with_http_info(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'activity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_schema" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_schema`")  # noqa: E501
        # verify the required parameter 'activity_type' is set
        if ('activity_type' not in local_var_params or
                local_var_params['activity_type'] is None):
            raise ValueError("Missing the required parameter `activity_type` when calling `delete_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in local_var_params:
            path_params['client_id'] = local_var_params['client_id']  # noqa: E501

        query_params = []
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{client_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_term(self, term_id, client_id, **kwargs):  # noqa: E501
        """Deletes a term by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_term(term_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_term_with_http_info(term_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_term_with_http_info(term_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_term_with_http_info(self, term_id, client_id, **kwargs):  # noqa: E501
        """Deletes a term by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_term_with_http_info(term_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['term_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_term" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'term_id' is set
        if ('term_id' not in local_var_params or
                local_var_params['term_id'] is None):
            raise ValueError("Missing the required parameter `term_id` when calling `delete_term`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term_id' in local_var_params:
            path_params['term_id'] = local_var_params['term_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/terms/{term_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user(self, user_id, client_id, **kwargs):  # noqa: E501
        """Deletes an active user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_user_with_http_info(self, user_id, client_id, **kwargs):  # noqa: E501
        """Deletes an active user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_with_http_info(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_user`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_0(self, token_id, client_id, **kwargs):  # noqa: E501
        """Deletes an active user token by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_0(token_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_0_with_http_info(token_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_0_with_http_info(token_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_user_0_with_http_info(self, token_id, client_id, **kwargs):  # noqa: E501
        """Deletes an active user token by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_0_with_http_info(token_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['token_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in local_var_params or
                local_var_params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `delete_user_0`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_user_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_id' in local_var_params:
            path_params['token_id'] = local_var_params['token_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{token_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_role(self, user_id, client_id, role_id, **kwargs):  # noqa: E501
        """Deletes a user from a role by user ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_role(user_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_role_with_http_info(user_id, client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_role_with_http_info(user_id, client_id, role_id, **kwargs)  # noqa: E501
            return data

    def delete_user_role_with_http_info(self, user_id, client_id, role_id, **kwargs):  # noqa: E501
        """Deletes a user from a role by user ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_role_with_http_info(user_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_user_role`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_user_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `delete_user_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/user-roles/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_widget_type(self, widget_type_id, **kwargs):  # noqa: E501
        """Deletes an existing widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_widget_type(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
            return data

    def delete_widget_type_with_http_info(self, widget_type_id, **kwargs):  # noqa: E501
        """Deletes an existing widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_widget_type_with_http_info(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['widget_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_widget_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'widget_type_id' is set
        if ('widget_type_id' not in local_var_params or
                local_var_params['widget_type_id'] is None):
            raise ValueError("Missing the required parameter `widget_type_id` when calling `delete_widget_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'widget_type_id' in local_var_params:
            path_params['widget_type_id'] = local_var_params['widget_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types/{widget_type_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_key(self, user_id, client_id, **kwargs):  # noqa: E501
        """Get an API user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_key(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: ApiUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_api_key_with_http_info(self, user_id, client_id, **kwargs):  # noqa: E501
        """Get an API user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_key_with_http_info(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: ApiUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_api_key`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api-keys/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_type(self, block_type_id, **kwargs):  # noqa: E501
        """Get a block type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_type(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
            return data

    def get_block_type_with_http_info(self, block_type_id, **kwargs):  # noqa: E501
        """Get a block type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_type_with_http_info(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['block_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type_id' is set
        if ('block_type_id' not in local_var_params or
                local_var_params['block_type_id'] is None):
            raise ValueError("Missing the required parameter `block_type_id` when calling `get_block_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_type_id' in local_var_params:
            path_params['block_type_id'] = local_var_params['block_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types/{block_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_type_by_name(self, block_type_name, **kwargs):  # noqa: E501
        """Get a block type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_type_by_name(block_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_name: (required)
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_type_by_name_with_http_info(block_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_type_by_name_with_http_info(block_type_name, **kwargs)  # noqa: E501
            return data

    def get_block_type_by_name_with_http_info(self, block_type_name, **kwargs):  # noqa: E501
        """Get a block type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_type_by_name_with_http_info(block_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_name: (required)
        :return: BlockType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['block_type_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_type_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type_name' is set
        if ('block_type_name' not in local_var_params or
                local_var_params['block_type_name'] is None):
            raise ValueError("Missing the required parameter `block_type_name` when calling `get_block_type_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_type_name' in local_var_params:
            path_params['block_type_name'] = local_var_params['block_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types/name-{block_type_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client(self, client_id, **kwargs):  # noqa: E501
        """Get client by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_client_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get client by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in local_var_params:
            path_params['client_id'] = local_var_params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_by_code(self, client_code, **kwargs):  # noqa: E501
        """Gets a client by client code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_by_code(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_by_code_with_http_info(client_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_by_code_with_http_info(client_code, **kwargs)  # noqa: E501
            return data

    def get_client_by_code_with_http_info(self, client_code, **kwargs):  # noqa: E501
        """Gets a client by client code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_by_code_with_http_info(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_by_code" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_code' is set
        if ('client_code' not in local_var_params or
                local_var_params['client_code'] is None):
            raise ValueError("Missing the required parameter `client_code` when calling `get_client_by_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_code' in local_var_params:
            path_params['client_code'] = local_var_params['client_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients/code-{client_code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Get a dataset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_dataset_with_http_info(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Get a dataset by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_with_http_info(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dataset_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in local_var_params or
                local_var_params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `get_dataset`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in local_var_params:
            path_params['dataset_id'] = local_var_params['dataset_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset_by_name(self, dataset_name, client_id, **kwargs):  # noqa: E501
        """Get a dataset by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_by_name(dataset_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_name: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_by_name_with_http_info(dataset_name, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_by_name_with_http_info(dataset_name, client_id, **kwargs)  # noqa: E501
            return data

    def get_dataset_by_name_with_http_info(self, dataset_name, client_id, **kwargs):  # noqa: E501
        """Get a dataset by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_by_name_with_http_info(dataset_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_name: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dataset_name', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in local_var_params or
                local_var_params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `get_dataset_by_name`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_dataset_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in local_var_params:
            path_params['dataset_name'] = local_var_params['dataset_name']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/name-{dataset_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset_by_slug(self, dataset_slug, client_id, **kwargs):  # noqa: E501
        """Get a dataset by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_by_slug(dataset_slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_slug: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_by_slug_with_http_info(dataset_slug, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_by_slug_with_http_info(dataset_slug, client_id, **kwargs)  # noqa: E501
            return data

    def get_dataset_by_slug_with_http_info(self, dataset_slug, client_id, **kwargs):  # noqa: E501
        """Get a dataset by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_by_slug_with_http_info(dataset_slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_slug: (required)
        :param str client_id: (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dataset_slug', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_by_slug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dataset_slug' is set
        if ('dataset_slug' not in local_var_params or
                local_var_params['dataset_slug'] is None):
            raise ValueError("Missing the required parameter `dataset_slug` when calling `get_dataset_by_slug`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_dataset_by_slug`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_slug' in local_var_params:
            path_params['dataset_slug'] = local_var_params['dataset_slug']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/slug-{dataset_slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_download(self, download_id, client_id, **kwargs):  # noqa: E501
        """Gets data for a completed download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_download(download_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: (required)
        :param str client_id: (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_download_with_http_info(download_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_download_with_http_info(download_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_download_with_http_info(self, download_id, client_id, **kwargs):  # noqa: E501
        """Gets data for a completed download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_download_with_http_info(download_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: (required)
        :param str client_id: (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['download_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'download_id' is set
        if ('download_id' not in local_var_params or
                local_var_params['download_id'] is None):
            raise ValueError("Missing the required parameter `download_id` when calling `get_download`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'download_id' in local_var_params:
            path_params['download_id'] = local_var_params['download_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/downloads/{download_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_download_request(self, download_id, client_id, **kwargs):  # noqa: E501
        """Gets a download request by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_download_request(download_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: (required)
        :param str client_id: (required)
        :return: DownloadV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_download_request_with_http_info(download_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_download_request_with_http_info(download_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_download_request_with_http_info(self, download_id, client_id, **kwargs):  # noqa: E501
        """Gets a download request by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_download_request_with_http_info(download_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: (required)
        :param str client_id: (required)
        :return: DownloadV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['download_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_download_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'download_id' is set
        if ('download_id' not in local_var_params or
                local_var_params['download_id'] is None):
            raise ValueError("Missing the required parameter `download_id` when calling `get_download_request`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_download_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'download_id' in local_var_params:
            path_params['download_id'] = local_var_params['download_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/download-requests/{download_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity_batch(self, batch_id, client_id, **kwargs):  # noqa: E501
        """Gets an entity batch by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_batch(batch_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str batch_id: (required)
        :param str client_id: (required)
        :return: EntityBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_batch_with_http_info(batch_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_batch_with_http_info(batch_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_entity_batch_with_http_info(self, batch_id, client_id, **kwargs):  # noqa: E501
        """Gets an entity batch by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_batch_with_http_info(batch_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str batch_id: (required)
        :param str client_id: (required)
        :return: EntityBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in local_var_params or
                local_var_params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `get_entity_batch`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_entity_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in local_var_params:
            path_params['batch_id'] = local_var_params['batch_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/entity-batches/{batch_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity_batch_health(self, client_id, **kwargs):  # noqa: E501
        """Gets a health summary of processed entity batches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_batch_health(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param datetime after:
        :return: list[EntityBatchHealth]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_batch_health_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_batch_health_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_entity_batch_health_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Gets a health summary of processed entity batches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_batch_health_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param datetime after:
        :return: list[EntityBatchHealth]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_batch_health" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_entity_batch_health`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'after' in local_var_params:
            query_params.append(('after', local_var_params['after']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/entity-batches/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EntityBatchHealth]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_filter_values(self, client_id, **kwargs):  # noqa: E501
        """Retrieves a list of possible values for a given set of dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter_values(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param bool prepare_segments:
        :param DataViewFilterValue body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_filter_values_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_filter_values_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_filter_values_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Retrieves a list of possible values for a given set of dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter_values_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param bool prepare_segments:
        :param DataViewFilterValue body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'prepare_segments', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filter_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_filter_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'prepare_segments' in local_var_params:
            query_params.append(('prepare_segments', local_var_params['prepare_segments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/data-views/filter-values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_goal_by_goal(self, goal, client_id, **kwargs):  # noqa: E501
        """Gets a goal by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_goal_by_goal(goal, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal: (required)
        :param str client_id: (required)
        :return: Goal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_goal_by_goal_with_http_info(goal, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_goal_by_goal_with_http_info(goal, client_id, **kwargs)  # noqa: E501
            return data

    def get_goal_by_goal_with_http_info(self, goal, client_id, **kwargs):  # noqa: E501
        """Gets a goal by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_goal_by_goal_with_http_info(goal, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal: (required)
        :param str client_id: (required)
        :return: Goal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['goal', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_goal_by_goal" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'goal' is set
        if ('goal' not in local_var_params or
                local_var_params['goal'] is None):
            raise ValueError("Missing the required parameter `goal` when calling `get_goal_by_goal`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_goal_by_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'goal' in local_var_params:
            path_params['goal'] = local_var_params['goal']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/goals/id-{goal}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Goal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Gets an integration by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_integration_with_http_info(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Gets an integration by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_with_http_info(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :return: Integration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `get_integration`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in local_var_params:
            path_params['integration_id'] = local_var_params['integration_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Integration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration_type(self, integration_type_id, **kwargs):  # noqa: E501
        """Get integration type by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_type(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_integration_type_with_http_info(integration_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_type_with_http_info(integration_type_id, **kwargs)  # noqa: E501
            return data

    def get_integration_type_with_http_info(self, integration_type_id, **kwargs):  # noqa: E501
        """Get integration type by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_type_with_http_info(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_type_id' is set
        if ('integration_type_id' not in local_var_params or
                local_var_params['integration_type_id'] is None):
            raise ValueError("Missing the required parameter `integration_type_id` when calling `get_integration_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_type_id' in local_var_params:
            path_params['integration_type_id'] = local_var_params['integration_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integration-types/{integration_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration_type_by_name(self, integration_type_name, **kwargs):  # noqa: E501
        """Get integration type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_type_by_name(integration_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_name: (required)
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_integration_type_by_name_with_http_info(integration_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_type_by_name_with_http_info(integration_type_name, **kwargs)  # noqa: E501
            return data

    def get_integration_type_by_name_with_http_info(self, integration_type_name, **kwargs):  # noqa: E501
        """Get integration type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_integration_type_by_name_with_http_info(integration_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_name: (required)
        :return: IntegrationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_type_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration_type_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_type_name' is set
        if ('integration_type_name' not in local_var_params or
                local_var_params['integration_type_name'] is None):
            raise ValueError("Missing the required parameter `integration_type_name` when calling `get_integration_type_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_type_name' in local_var_params:
            path_params['integration_type_name'] = local_var_params['integration_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integration-types/name-{integration_type_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs_overview(self, **kwargs):  # noqa: E501
        """Gets an overview of data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_overview(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :return: JobOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_jobs_overview_with_http_info(self, **kwargs):  # noqa: E501
        """Gets an overview of data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_overview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :return: JobOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs_overview" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/jobs/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobOverview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page(self, page_id, client_id, **kwargs):  # noqa: E501
        """Gets a page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_page_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Gets a page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `get_page`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page_by_slug(self, slug, client_id, **kwargs):  # noqa: E501
        """Gets a page by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_by_slug(slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :param str client_id: (required)
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_by_slug_with_http_info(slug, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_by_slug_with_http_info(slug, client_id, **kwargs)  # noqa: E501
            return data

    def get_page_by_slug_with_http_info(self, slug, client_id, **kwargs):  # noqa: E501
        """Gets a page by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_by_slug_with_http_info(slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :param str client_id: (required)
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['slug', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page_by_slug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in local_var_params or
                local_var_params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `get_page_by_slug`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_page_by_slug`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in local_var_params:
            path_params['slug'] = local_var_params['slug']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/slug-{slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page_preference(self, page_id, client_id, **kwargs):  # noqa: E501
        """Gets page preferences for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_preference(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: PagePreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_page_preference_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Gets page preferences for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_preference_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :return: PagePreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page_preference" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `get_page_preference`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_page_preference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-preferences/page-id-{page_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagePreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page_template(self, page_template_id, **kwargs):  # noqa: E501
        """Gets a page template by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_template(page_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_id: (required)
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_template_with_http_info(page_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_template_with_http_info(page_template_id, **kwargs)  # noqa: E501
            return data

    def get_page_template_with_http_info(self, page_template_id, **kwargs):  # noqa: E501
        """Gets a page template by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_template_with_http_info(page_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_id: (required)
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_template_id' is set
        if ('page_template_id' not in local_var_params or
                local_var_params['page_template_id'] is None):
            raise ValueError("Missing the required parameter `page_template_id` when calling `get_page_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_template_id' in local_var_params:
            path_params['page_template_id'] = local_var_params['page_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates/{page_template_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page_template_by_slug(self, slug, **kwargs):  # noqa: E501
        """Gets a page template by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_template_by_slug(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_template_by_slug_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_template_by_slug_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def get_page_template_by_slug_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Gets a page template by slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_template_by_slug_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: (required)
        :return: PageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page_template_by_slug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in local_var_params or
                local_var_params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `get_page_template_by_slug`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in local_var_params:
            path_params['slug'] = local_var_params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates/slug-{slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_password_reset_by_key(self, reset_key, **kwargs):  # noqa: E501
        """Gets a user by the reset key associated with them  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_password_reset_by_key(reset_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reset_key: (required)
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_password_reset_by_key_with_http_info(reset_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_password_reset_by_key_with_http_info(reset_key, **kwargs)  # noqa: E501
            return data

    def get_password_reset_by_key_with_http_info(self, reset_key, **kwargs):  # noqa: E501
        """Gets a user by the reset key associated with them  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_password_reset_by_key_with_http_info(reset_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reset_key: (required)
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['reset_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_password_reset_by_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'reset_key' is set
        if ('reset_key' not in local_var_params or
                local_var_params['reset_key'] is None):
            raise ValueError("Missing the required parameter `reset_key` when calling `get_password_reset_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reset_key' in local_var_params:
            path_params['reset_key'] = local_var_params['reset_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/password-resets/{reset_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report(self, report_id, client_id, **kwargs):  # noqa: E501
        """Get a report by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_report_with_http_info(self, report_id, client_id, **kwargs):  # noqa: E501
        """Get a report by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_with_http_info(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if ('report_id' not in local_var_params or
                local_var_params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `get_report`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/reports/{report_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_config(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Get a report_config by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_config(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_report_config_with_http_info(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Get a report_config by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_config_with_http_info(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_config_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_config_id' is set
        if ('report_config_id' not in local_var_params or
                local_var_params['report_config_id'] is None):
            raise ValueError("Missing the required parameter `report_config_id` when calling `get_report_config`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_report_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_config_id' in local_var_params:
            path_params['report_config_id'] = local_var_params['report_config_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs/{report_config_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_config_by_name(self, report_config_name, client_id, **kwargs):  # noqa: E501
        """Get a report_config by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_config_by_name(report_config_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_name: (required)
        :param str client_id: (required)
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_config_by_name_with_http_info(report_config_name, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_config_by_name_with_http_info(report_config_name, client_id, **kwargs)  # noqa: E501
            return data

    def get_report_config_by_name_with_http_info(self, report_config_name, client_id, **kwargs):  # noqa: E501
        """Get a report_config by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_config_by_name_with_http_info(report_config_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_name: (required)
        :param str client_id: (required)
        :return: ReportConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_config_name', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_config_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_config_name' is set
        if ('report_config_name' not in local_var_params or
                local_var_params['report_config_name'] is None):
            raise ValueError("Missing the required parameter `report_config_name` when calling `get_report_config_by_name`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_report_config_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_config_name' in local_var_params:
            path_params['report_config_name'] = local_var_params['report_config_name']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs/name-{report_config_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role(self, role_id, client_id, **kwargs):  # noqa: E501
        """Gets a role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_role_with_http_info(self, role_id, client_id, **kwargs):  # noqa: E501
        """Gets a role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_with_http_info(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `get_role`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in local_var_params:
            path_params['role_id'] = local_var_params['role_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_by_name(self, role_name, client_id, **kwargs):  # noqa: E501
        """Gets a role by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_by_name(role_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_name: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_by_name_with_http_info(role_name, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_by_name_with_http_info(role_name, client_id, **kwargs)  # noqa: E501
            return data

    def get_role_by_name_with_http_info(self, role_name, client_id, **kwargs):  # noqa: E501
        """Gets a role by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_by_name_with_http_info(role_name, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_name: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_name', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_name' is set
        if ('role_name' not in local_var_params or
                local_var_params['role_name'] is None):
            raise ValueError("Missing the required parameter `role_name` when calling `get_role_by_name`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_role_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_name' in local_var_params:
            path_params['role_name'] = local_var_params['role_name']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles/name-{role_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_by_slug(self, role_slug, client_id, **kwargs):  # noqa: E501
        """Gets a role slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_by_slug(role_slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_slug: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_by_slug_with_http_info(role_slug, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_by_slug_with_http_info(role_slug, client_id, **kwargs)  # noqa: E501
            return data

    def get_role_by_slug_with_http_info(self, role_slug, client_id, **kwargs):  # noqa: E501
        """Gets a role slug  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_by_slug_with_http_info(role_slug, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_slug: (required)
        :param str client_id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_slug', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_by_slug" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_slug' is set
        if ('role_slug' not in local_var_params or
                local_var_params['role_slug'] is None):
            raise ValueError("Missing the required parameter `role_slug` when calling `get_role_by_slug`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_role_by_slug`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_slug' in local_var_params:
            path_params['role_slug'] = local_var_params['role_slug']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles/slug-{role_slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_permission(self, role_permission_id, client_id, role_id, **kwargs):  # noqa: E501
        """Gets a permission for a specific role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_permission(role_permission_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_permission_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: RolePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_permission_with_http_info(role_permission_id, client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_permission_with_http_info(role_permission_id, client_id, role_id, **kwargs)  # noqa: E501
            return data

    def get_role_permission_with_http_info(self, role_permission_id, client_id, role_id, **kwargs):  # noqa: E501
        """Gets a permission for a specific role by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_permission_with_http_info(role_permission_id, client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_permission_id: (required)
        :param str client_id: (required)
        :param str role_id: (required)
        :return: RolePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_permission_id', 'client_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_permission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_permission_id' is set
        if ('role_permission_id' not in local_var_params or
                local_var_params['role_permission_id'] is None):
            raise ValueError("Missing the required parameter `role_permission_id` when calling `get_role_permission`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_role_permission`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `get_role_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_permission_id' in local_var_params:
            path_params['role_permission_id'] = local_var_params['role_permission_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/role-permissions/{role_permission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RolePermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema(self, schema_id, client_id, **kwargs):  # noqa: E501
        """Get a schema by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema(schema_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :param str client_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_with_http_info(schema_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_with_http_info(schema_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_schema_with_http_info(self, schema_id, client_id, **kwargs):  # noqa: E501
        """Get a schema by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_with_http_info(schema_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :param str client_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['schema_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'schema_id' is set
        if ('schema_id' not in local_var_params or
                local_var_params['schema_id'] is None):
            raise ValueError("Missing the required parameter `schema_id` when calling `get_schema`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_id' in local_var_params:
            path_params['schema_id'] = local_var_params['schema_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{schema_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_term_by_term(self, term, client_id, **kwargs):  # noqa: E501
        """Gets a term by term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_term_by_term(term, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param str client_id: (required)
        :return: Term
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_term_by_term_with_http_info(term, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_term_by_term_with_http_info(term, client_id, **kwargs)  # noqa: E501
            return data

    def get_term_by_term_with_http_info(self, term, client_id, **kwargs):  # noqa: E501
        """Gets a term by term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_term_by_term_with_http_info(term, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param str client_id: (required)
        :return: Term
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['term', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_term_by_term" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in local_var_params or
                local_var_params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_term_by_term`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_term_by_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term' in local_var_params:
            path_params['term'] = local_var_params['term']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/terms/term-{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Term',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upload_request(self, upload_id, client_id, **kwargs):  # noqa: E501
        """Gets an upload request by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_request(upload_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload_id: (required)
        :param str client_id: (required)
        :return: Upload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_upload_request_with_http_info(upload_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upload_request_with_http_info(upload_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_upload_request_with_http_info(self, upload_id, client_id, **kwargs):  # noqa: E501
        """Gets an upload request by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_upload_request_with_http_info(upload_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload_id: (required)
        :param str client_id: (required)
        :return: Upload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upload_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upload_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in local_var_params or
                local_var_params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `get_upload_request`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_upload_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upload_id' in local_var_params:
            path_params['upload_id'] = local_var_params['upload_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/upload-requests/{upload_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Upload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, user_id, **kwargs):  # noqa: E501
        """Gets a user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Gets a user by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_activation_by_key(self, activation_key, **kwargs):  # noqa: E501
        """Gets the user associated with an activation key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_activation_by_key(activation_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key: (required)
        :return: VirtualUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_activation_by_key_with_http_info(activation_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_activation_by_key_with_http_info(activation_key, **kwargs)  # noqa: E501
            return data

    def get_user_activation_by_key_with_http_info(self, activation_key, **kwargs):  # noqa: E501
        """Gets the user associated with an activation key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_activation_by_key_with_http_info(activation_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key: (required)
        :return: VirtualUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['activation_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_activation_by_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'activation_key' is set
        if ('activation_key' not in local_var_params or
                local_var_params['activation_key'] is None):
            raise ValueError("Missing the required parameter `activation_key` when calling `get_user_activation_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activation_key' in local_var_params:
            path_params['activation_key'] = local_var_params['activation_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/user-activations/{activation_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_by_email(self, email, **kwargs):  # noqa: E501
        """Gets a user by email address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_by_email(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_by_email_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_by_email_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def get_user_by_email_with_http_info(self, email, **kwargs):  # noqa: E501
        """Gets a user by email address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_by_email_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['email', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_email" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in local_var_params or
                local_var_params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `get_user_by_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in local_var_params:
            path_params['email'] = local_var_params['email']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/email-{email}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_by_idtoken(self, user_idtoken, client_id, **kwargs):  # noqa: E501
        """List active tokens associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_by_idtoken(user_idtoken, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_idtoken: (required)
        :param str client_id: (required)
        :return: list[UserToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_by_idtoken_with_http_info(user_idtoken, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_by_idtoken_with_http_info(user_idtoken, client_id, **kwargs)  # noqa: E501
            return data

    def get_user_by_idtoken_with_http_info(self, user_idtoken, client_id, **kwargs):  # noqa: E501
        """List active tokens associated with a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_by_idtoken_with_http_info(user_idtoken, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_idtoken: (required)
        :param str client_id: (required)
        :return: list[UserToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_idtoken', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_idtoken" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_idtoken' is set
        if ('user_idtoken' not in local_var_params or
                local_var_params['user_idtoken'] is None):
            raise ValueError("Missing the required parameter `user_idtoken` when calling `get_user_by_idtoken`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_user_by_idtoken`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_idtoken' in local_var_params:
            path_params['user_id&gt;/token'] = local_var_params['user_idtoken']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id>/token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view(self, view_id, client_id, **kwargs):  # noqa: E501
        """Get a view by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view(view_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str client_id: (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_with_http_info(view_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_with_http_info(view_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_view_with_http_info(self, view_id, client_id, **kwargs):  # noqa: E501
        """Get a view by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_with_http_info(view_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str client_id: (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['view_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in local_var_params or
                local_var_params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `get_view`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in local_var_params:
            path_params['view_id'] = local_var_params['view_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/views/{view_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='View',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_by_keys(self, hash_keys, client_id, **kwargs):  # noqa: E501
        """Get a list of views by hash key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_by_keys(hash_keys, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash_keys: (required)
        :param str client_id: (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_by_keys_with_http_info(hash_keys, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_by_keys_with_http_info(hash_keys, client_id, **kwargs)  # noqa: E501
            return data

    def get_view_by_keys_with_http_info(self, hash_keys, client_id, **kwargs):  # noqa: E501
        """Get a list of views by hash key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_by_keys_with_http_info(hash_keys, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash_keys: (required)
        :param str client_id: (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['hash_keys', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_by_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hash_keys' is set
        if ('hash_keys' not in local_var_params or
                local_var_params['hash_keys'] is None):
            raise ValueError("Missing the required parameter `hash_keys` when calling `get_view_by_keys`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_view_by_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash_keys' in local_var_params:
            path_params['hash_keys'] = local_var_params['hash_keys']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/views/view-hashes-{hash_keys}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='View',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_widget_type(self, widget_type_id, **kwargs):  # noqa: E501
        """Get widget type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_type(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
            return data

    def get_widget_type_with_http_info(self, widget_type_id, **kwargs):  # noqa: E501
        """Get widget type by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_type_with_http_info(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['widget_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_widget_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'widget_type_id' is set
        if ('widget_type_id' not in local_var_params or
                local_var_params['widget_type_id'] is None):
            raise ValueError("Missing the required parameter `widget_type_id` when calling `get_widget_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'widget_type_id' in local_var_params:
            path_params['widget_type_id'] = local_var_params['widget_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types/{widget_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_widget_type_by_name(self, widget_type_name, **kwargs):  # noqa: E501
        """Get widget type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_type_by_name(widget_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_name: (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_widget_type_by_name_with_http_info(widget_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_widget_type_by_name_with_http_info(widget_type_name, **kwargs)  # noqa: E501
            return data

    def get_widget_type_by_name_with_http_info(self, widget_type_name, **kwargs):  # noqa: E501
        """Get widget type by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_type_by_name_with_http_info(widget_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_name: (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['widget_type_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_widget_type_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'widget_type_name' is set
        if ('widget_type_name' not in local_var_params or
                local_var_params['widget_type_name'] is None):
            raise ValueError("Missing the required parameter `widget_type_name` when calling `get_widget_type_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'widget_type_name' in local_var_params:
            path_params['widget_type_name'] = local_var_params['widget_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types/name-{widget_type_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_activities(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Get activities from a dataset in JSON or CSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activities(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :param str integration_id:
        :param str format:
        :param bool all:
        :param int page:
        :return: list[Activity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_activities_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_activities_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
            return data

    def list_activities_with_http_info(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Get activities from a dataset in JSON or CSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activities_with_http_info(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :param str integration_id:
        :param str format:
        :param bool all:
        :param int page:
        :return: list[Activity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'activity_type', 'integration_id', 'format', 'all', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_activities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_activities`")  # noqa: E501
        # verify the required parameter 'activity_type' is set
        if ('activity_type' not in local_var_params or
                local_var_params['activity_type'] is None):
            raise ValueError("Missing the required parameter `activity_type` when calling `list_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501
        if 'format' in local_var_params:
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'all' in local_var_params:
            query_params.append(('all', local_var_params['all']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Activity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_api_keys(self, client_id, **kwargs):  # noqa: E501
        """List all API users associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_api_keys(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[ApiUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_api_keys_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_api_keys_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_api_keys_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all API users associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_api_keys_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[ApiUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_api_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_api_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_block_types(self, **kwargs):  # noqa: E501
        """List all block types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_block_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BlockType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_block_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_block_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_block_types_with_http_info(self, **kwargs):  # noqa: E501
        """List all block types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_block_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BlockType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_block_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlockType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_packages(self, **kwargs):  # noqa: E501
        """List available client packages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_packages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code:
        :param str from_env:
        :return: list[ClientPackage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_packages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_client_packages_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_client_packages_with_http_info(self, **kwargs):  # noqa: E501
        """List available client packages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_packages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code:
        :param str from_env:
        :return: list[ClientPackage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_code', 'from_env']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_packages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_code' in local_var_params:
            query_params.append(('client_code', local_var_params['client_code']))  # noqa: E501
        if 'from_env' in local_var_params:
            query_params.append(('from_env', local_var_params['from_env']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/client-packages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientPackage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_settings(self, client_id, **kwargs):  # noqa: E501
        """List all client-specific settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_settings(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: ClientSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_settings_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_settings_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_client_settings_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all client-specific settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_settings_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: ClientSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_settings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/client-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_clients(self, **kwargs):  # noqa: E501
        """List all clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_clients(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_clients_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_clients_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_clients_with_http_info(self, **kwargs):  # noqa: E501
        """List all clients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_clients_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_clients" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Client]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_completed_jobs(self, **kwargs):  # noqa: E501
        """Gets a list of completed data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_completed_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str status:
        :param str type:
        :param int page:
        :param int per_page:
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_completed_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_completed_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_completed_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of completed data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_completed_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str status:
        :param str type:
        :param int page:
        :param int per_page:
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'status', 'type', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_completed_jobs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/jobs/completed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Job]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_datasets(self, client_id, **kwargs):  # noqa: E501
        """List all datasets associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_datasets(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_datasets_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_datasets_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_datasets_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all datasets associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_datasets_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_datasets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dataset]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_download_requests(self, client_id, **kwargs):  # noqa: E501
        """Gets all unexpired download requests for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_download_requests(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str status:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_download_requests_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_download_requests_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_download_requests_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Gets all unexpired download requests for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_download_requests_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str status:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_download_requests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_download_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/download-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_entity_batches(self, **kwargs):  # noqa: E501
        """List all entity batches associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entity_batches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param datetime dt:
        :param int page:
        :return: list[EntityBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_entity_batches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_entity_batches_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_entity_batches_with_http_info(self, **kwargs):  # noqa: E501
        """List all entity batches associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_entity_batches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param datetime dt:
        :param int page:
        :return: list[EntityBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'dt', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_entity_batches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'dt' in local_var_params:
            query_params.append(('dt', local_var_params['dt']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/entity-batches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EntityBatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_geodata(self, geo_type, **kwargs):  # noqa: E501
        """List all geodata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_geodata(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :return: list[GeoData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
            return data

    def list_geodata_with_http_info(self, geo_type, **kwargs):  # noqa: E501
        """List all geodata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_geodata_with_http_info(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :return: list[GeoData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['geo_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_geodata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'geo_type' is set
        if ('geo_type' not in local_var_params or
                local_var_params['geo_type'] is None):
            raise ValueError("Missing the required parameter `geo_type` when calling `list_geodata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geo_type' in local_var_params:
            query_params.append(('geo_type', local_var_params['geo_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/geodata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GeoData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_goals(self, client_id, **kwargs):  # noqa: E501
        """List all goals associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_goals(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Goal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_goals_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_goals_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_goals_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all goals associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_goals_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Goal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_goals" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_goals`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/goals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Goal]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_incomplete_jobs(self, **kwargs):  # noqa: E501
        """Gets a list of incomplete data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incomplete_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str status:
        :param str type:
        :param int page:
        :param int per_page:
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_incomplete_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_incomplete_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_incomplete_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of incomplete data processing jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incomplete_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str status:
        :param str type:
        :param int page:
        :param int per_page:
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'status', 'type', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_incomplete_jobs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/jobs/incomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Job]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_integration_types(self, **kwargs):  # noqa: E501
        """List all integration types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_integration_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IntegrationType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_integration_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_integration_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_integration_types_with_http_info(self, **kwargs):  # noqa: E501
        """List all integration types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_integration_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IntegrationType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_integration_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integration-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IntegrationType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_integrations(self, **kwargs):  # noqa: E501
        """List all integrations associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_integrations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str integration_type_id:
        :return: list[Integration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_integrations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_integrations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_integrations_with_http_info(self, **kwargs):  # noqa: E501
        """List all integrations associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_integrations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :param str integration_type_id:
        :return: list[Integration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'integration_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_integrations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_type_id' in local_var_params:
            query_params.append(('integration_type_id', local_var_params['integration_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Integration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_maintenance(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Cleanup for a dataset      Responses:          202: Delete task was successfully queued  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_maintenance(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_maintenance_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_maintenance_with_http_info(client_id, activity_type, **kwargs)  # noqa: E501
            return data

    def list_maintenance_with_http_info(self, client_id, activity_type, **kwargs):  # noqa: E501
        """Cleanup for a dataset      Responses:          202: Delete task was successfully queued  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_maintenance_with_http_info(client_id, activity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str activity_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'activity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_maintenance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_maintenance`")  # noqa: E501
        # verify the required parameter 'activity_type' is set
        if ('activity_type' not in local_var_params or
                local_var_params['activity_type'] is None):
            raise ValueError("Missing the required parameter `activity_type` when calling `list_maintenance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/admin/maintenance/delete-datasource', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_page_preferences(self, client_id, **kwargs):  # noqa: E501
        """List all page preferences associated with a client for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_page_preferences(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[PagePreferences]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_page_preferences_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_page_preferences_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_page_preferences_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all page preferences associated with a client for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_page_preferences_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[PagePreferences]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_page_preferences" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_page_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PagePreferences]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_page_templates(self, **kwargs):  # noqa: E501
        """List all page templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_page_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PageTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_page_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_page_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_page_templates_with_http_info(self, **kwargs):  # noqa: E501
        """List all page templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_page_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PageTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_page_templates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PageTemplate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pages(self, client_id, **kwargs):  # noqa: E501
        """List all pages associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pages(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Page]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pages_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pages_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_pages_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all pages associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pages_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Page]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_pages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pages_by_page_template(self, page_template_slug, **kwargs):  # noqa: E501
        """List all pages associated with a particular page template and optionally client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pages_by_page_template(page_template_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_slug: (required)
        :param str client_id:
        :return: list[Page]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pages_by_page_template_with_http_info(page_template_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pages_by_page_template_with_http_info(page_template_slug, **kwargs)  # noqa: E501
            return data

    def list_pages_by_page_template_with_http_info(self, page_template_slug, **kwargs):  # noqa: E501
        """List all pages associated with a particular page template and optionally client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pages_by_page_template_with_http_info(page_template_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_template_slug: (required)
        :param str client_id:
        :return: list[Page]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_template_slug', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pages_by_page_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_template_slug' is set
        if ('page_template_slug' not in local_var_params or
                local_var_params['page_template_slug'] is None):
            raise ValueError("Missing the required parameter `page_template_slug` when calling `list_pages_by_page_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_template_slug' in local_var_params:
            path_params['page_template_slug'] = local_var_params['page_template_slug']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/page-template-slug-{page_template_slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_report_configs(self, client_id, **kwargs):  # noqa: E501
        """List all report_configs associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_report_configs(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[ReportConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_report_configs_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_report_configs_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_report_configs_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all report_configs associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_report_configs_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[ReportConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_report_configs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_report_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReportConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_reports(self, client_id, **kwargs):  # noqa: E501
        """List all reports associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_reports(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Report]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_reports_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_reports_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_reports_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all reports associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_reports_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Report]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_reports" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Report]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_role_permissions(self, client_id, role_id, **kwargs):  # noqa: E501
        """List all permissions for a specific role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_role_permissions(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :return: list[RolePermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_role_permissions_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_role_permissions_with_http_info(client_id, role_id, **kwargs)  # noqa: E501
            return data

    def list_role_permissions_with_http_info(self, client_id, role_id, **kwargs):  # noqa: E501
        """List all permissions for a specific role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_role_permissions_with_http_info(client_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str role_id: (required)
        :return: list[RolePermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_role_permissions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_role_permissions`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `list_role_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'role_id' in local_var_params:
            query_params.append(('role_id', local_var_params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/role-permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RolePermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_roles(self, client_id, **kwargs):  # noqa: E501
        """List roles associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_roles_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_roles_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_roles_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List roles associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_roles" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_schemas(self, client_id, **kwargs):  # noqa: E501
        """List all schemas associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_schemas(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id:
        :param str activity_type:
        :param bool has_data:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_schemas_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_schemas_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_schemas_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all schemas associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_schemas_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str integration_id:
        :param str activity_type:
        :param bool has_data:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'integration_id', 'activity_type', 'has_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_schemas" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_schemas`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'integration_id' in local_var_params:
            query_params.append(('integration_id', local_var_params['integration_id']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501
        if 'has_data' in local_var_params:
            query_params.append(('has_data', local_var_params['has_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/schemas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_terms(self, client_id, **kwargs):  # noqa: E501
        """List all terms associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_terms(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Term]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_terms_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_terms_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_terms_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List all terms associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_terms_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[Term]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_terms" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_terms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/terms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Term]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_upload_requests(self, client_id, **kwargs):  # noqa: E501
        """Gets all unexpired upload requests for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_requests(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str status:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_upload_requests_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_upload_requests_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_upload_requests_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Gets all unexpired upload requests for the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_upload_requests_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str status:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_upload_requests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_upload_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/upload-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_roles(self, user_id, client_id, **kwargs):  # noqa: E501
        """List all roles for a specific user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_roles(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_roles_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_roles_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
            return data

    def list_user_roles_with_http_info(self, user_id, client_id, **kwargs):  # noqa: E501
        """List all roles for a specific user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_roles_with_http_info(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_roles" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_user_roles`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_user_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/user-roles/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_users(self, client_id, **kwargs):  # noqa: E501
        """List active users associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[NormalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_users_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_users_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_users_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List active users associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[NormalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NormalUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_views(self, client_id, **kwargs):  # noqa: E501
        """List metadata for all views associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_views(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[View]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_views_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_views_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def list_views_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List metadata for all views associated with a client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_views_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :return: list[View]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_views" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/views', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[View]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_widget_types(self, **kwargs):  # noqa: E501
        """List all widget types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_widget_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WidgetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_widget_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_widget_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_widget_types_with_http_info(self, **kwargs):  # noqa: E501
        """List all widget types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_widget_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WidgetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_widget_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WidgetType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_client_package(self, client_code, **kwargs):  # noqa: E501
        """Imports data for a client into the current environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_client_package(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :param str from_env:
        :param str integration:
        :param str activity_type:
        :param bool include_custom_activities:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_client_package_with_http_info(client_code, **kwargs)  # noqa: E501
        else:
            (data) = self.load_client_package_with_http_info(client_code, **kwargs)  # noqa: E501
            return data

    def load_client_package_with_http_info(self, client_code, **kwargs):  # noqa: E501
        """Imports data for a client into the current environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_client_package_with_http_info(client_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_code: (required)
        :param str from_env:
        :param str integration:
        :param str activity_type:
        :param bool include_custom_activities:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_code', 'from_env', 'integration', 'activity_type', 'include_custom_activities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_client_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_code' is set
        if ('client_code' not in local_var_params or
                local_var_params['client_code'] is None):
            raise ValueError("Missing the required parameter `client_code` when calling `load_client_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_code' in local_var_params:
            query_params.append(('client_code', local_var_params['client_code']))  # noqa: E501
        if 'from_env' in local_var_params:
            query_params.append(('from_env', local_var_params['from_env']))  # noqa: E501
        if 'integration' in local_var_params:
            query_params.append(('integration', local_var_params['integration']))  # noqa: E501
        if 'activity_type' in local_var_params:
            query_params.append(('activity_type', local_var_params['activity_type']))  # noqa: E501
        if 'include_custom_activities' in local_var_params:
            query_params.append(('include_custom_activities', local_var_params['include_custom_activities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/client-packages/load', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def me(self, **kwargs):  # noqa: E501
        """Get data about the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.me_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.me_with_http_info(**kwargs)  # noqa: E501
            return data

    def me_with_http_info(self, **kwargs):  # noqa: E501
        """Get data about the authenticated user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/users/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query(self, client_id, **kwargs):  # noqa: E501
        """Performs a query against an existing dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DataView body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def query_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Performs a query against an existing dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param DataView body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/data-views', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_full_page(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_full_page(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_full_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_full_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def replace_full_page_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_full_page_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_full_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `replace_full_page`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `replace_full_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/full/{page_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_page(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_page(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def replace_page_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_page_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PageFull body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `replace_page`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `replace_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/{page_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_templated_page(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces from a page template an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_templated_page(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param TemplatedPage body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_templated_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_templated_page_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def replace_templated_page_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Replaces from a page template an existing page by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_templated_page_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param TemplatedPage body:
        :return: Page
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_templated_page" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `replace_templated_page`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `replace_templated_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/pages/templated/{page_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Page',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_password(self, reset_key, **kwargs):  # noqa: E501
        """Resets a user's password to the specified password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_password(reset_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reset_key: (required)
        :param PasswordResetChange body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_password_with_http_info(reset_key, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_password_with_http_info(reset_key, **kwargs)  # noqa: E501
            return data

    def reset_password_with_http_info(self, reset_key, **kwargs):  # noqa: E501
        """Resets a user's password to the specified password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_password_with_http_info(reset_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reset_key: (required)
        :param PasswordResetChange body:
        :return: NormalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['reset_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_password" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'reset_key' is set
        if ('reset_key' not in local_var_params or
                local_var_params['reset_key'] is None):
            raise ValueError("Missing the required parameter `reset_key` when calling `reset_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reset_key' in local_var_params:
            path_params['reset_key'] = local_var_params['reset_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/password-resets/{reset_key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NormalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_api_key(self, user_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing API user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_api_key(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :param UpdateApiUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_api_key_with_http_info(user_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_api_key_with_http_info(self, user_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing API user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_api_key_with_http_info(user_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id: (required)
        :param UpdateApiUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_api_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_api_key`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api-keys/{user_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_block_type(self, block_type_id, **kwargs):  # noqa: E501
        """Updates an existing block type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_block_type(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :param BlockType body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_block_type_with_http_info(block_type_id, **kwargs)  # noqa: E501
            return data

    def update_block_type_with_http_info(self, block_type_id, **kwargs):  # noqa: E501
        """Updates an existing block type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_block_type_with_http_info(block_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_type_id: (required)
        :param BlockType body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['block_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_block_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type_id' is set
        if ('block_type_id' not in local_var_params or
                local_var_params['block_type_id'] is None):
            raise ValueError("Missing the required parameter `block_type_id` when calling `update_block_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_type_id' in local_var_params:
            path_params['block_type_id'] = local_var_params['block_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/block-types/{block_type_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client(self, client_id, **kwargs):  # noqa: E501
        """Updates an existing client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ClientUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def update_client_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Updates an existing client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param ClientUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in local_var_params:
            path_params['client_id'] = local_var_params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_setting(self, client_id, client_id2, **kwargs):  # noqa: E501
        """Insert or update new client-specific settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_setting(client_id, client_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str client_id2: (required)
        :param ClientSettingsUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_setting_with_http_info(client_id, client_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_setting_with_http_info(client_id, client_id2, **kwargs)  # noqa: E501
            return data

    def update_client_setting_with_http_info(self, client_id, client_id2, **kwargs):  # noqa: E501
        """Insert or update new client-specific settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_setting_with_http_info(client_id, client_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: (required)
        :param str client_id2: (required)
        :param ClientSettingsUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['client_id', 'client_id2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_setting" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_setting`")  # noqa: E501
        # verify the required parameter 'client_id2' is set
        if ('client_id2' not in local_var_params or
                local_var_params['client_id2'] is None):
            raise ValueError("Missing the required parameter `client_id2` when calling `update_client_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in local_var_params:
            path_params['client_id'] = local_var_params['client_id']  # noqa: E501

        query_params = []
        if 'client_id2' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/client-settings/client-id-{client_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dataset(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dataset(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :param DatasetUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dataset_with_http_info(dataset_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_dataset_with_http_info(self, dataset_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dataset_with_http_info(dataset_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: (required)
        :param str client_id: (required)
        :param DatasetUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dataset_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in local_var_params or
                local_var_params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `update_dataset`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in local_var_params:
            path_params['dataset_id'] = local_var_params['dataset_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{dataset_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_geodata(self, geo_type, **kwargs):  # noqa: E501
        """Updates an existing geo type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_geodata(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :param GeoData body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_geodata_with_http_info(geo_type, **kwargs)  # noqa: E501
            return data

    def update_geodata_with_http_info(self, geo_type, **kwargs):  # noqa: E501
        """Updates an existing geo type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_geodata_with_http_info(geo_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str geo_type: (required)
        :param GeoData body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['geo_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_geodata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'geo_type' is set
        if ('geo_type' not in local_var_params or
                local_var_params['geo_type'] is None):
            raise ValueError("Missing the required parameter `geo_type` when calling `update_geodata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geo_type' in local_var_params:
            query_params.append(('geo_type', local_var_params['geo_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/geodata/update', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_goal(self, goal_id, **kwargs):  # noqa: E501
        """Updates an existing goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_goal(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :param str client_id:
        :param Goal body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_goal_with_http_info(goal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_goal_with_http_info(goal_id, **kwargs)  # noqa: E501
            return data

    def update_goal_with_http_info(self, goal_id, **kwargs):  # noqa: E501
        """Updates an existing goal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_goal_with_http_info(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str goal_id: (required)
        :param str client_id:
        :param Goal body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['goal_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_goal" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'goal_id' is set
        if ('goal_id' not in local_var_params or
                local_var_params['goal_id'] is None):
            raise ValueError("Missing the required parameter `goal_id` when calling `update_goal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'goal_id' in local_var_params:
            path_params['goal_id'] = local_var_params['goal_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/goals/{goal_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_integration(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :param IntegrationUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_integration_with_http_info(integration_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_integration_with_http_info(self, integration_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_with_http_info(integration_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: (required)
        :param str client_id: (required)
        :param IntegrationUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_integration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in local_var_params or
                local_var_params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `update_integration`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in local_var_params:
            path_params['integration_id'] = local_var_params['integration_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{integration_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_integration_type(self, integration_type_id, **kwargs):  # noqa: E501
        """Updates an existing integration type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_type(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :param IntegrationTypeUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_integration_type_with_http_info(integration_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_integration_type_with_http_info(integration_type_id, **kwargs)  # noqa: E501
            return data

    def update_integration_type_with_http_info(self, integration_type_id, **kwargs):  # noqa: E501
        """Updates an existing integration type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_type_with_http_info(integration_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_type_id: (required)
        :param IntegrationTypeUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['integration_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_integration_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'integration_type_id' is set
        if ('integration_type_id' not in local_var_params or
                local_var_params['integration_type_id'] is None):
            raise ValueError("Missing the required parameter `integration_type_id` when calling `update_integration_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_type_id' in local_var_params:
            path_params['integration_type_id'] = local_var_params['integration_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/integration-types/{integration_type_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_page_preference(self, page_id, client_id, **kwargs):  # noqa: E501
        """Add or update a page preference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_preference(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PagePreferencesUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_page_preference_with_http_info(page_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_page_preference_with_http_info(self, page_id, client_id, **kwargs):  # noqa: E501
        """Add or update a page preference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_page_preference_with_http_info(page_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_id: (required)
        :param str client_id: (required)
        :param PagePreferencesUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_page_preference" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_id' is set
        if ('page_id' not in local_var_params or
                local_var_params['page_id'] is None):
            raise ValueError("Missing the required parameter `page_id` when calling `update_page_preference`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_page_preference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_id' in local_var_params:
            path_params['page_id'] = local_var_params['page_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/page-preferences/page-id-{page_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_report(self, report_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_report(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :param ReportUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_report_with_http_info(report_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_report_with_http_info(self, report_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_report_with_http_info(report_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_id: (required)
        :param str client_id: (required)
        :param ReportUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if ('report_id' not in local_var_params or
                local_var_params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `update_report`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/reports/{report_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_report_config(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing report_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_report_config(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :param ReportConfigUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_report_config_with_http_info(report_config_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_report_config_with_http_info(self, report_config_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing report_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_report_config_with_http_info(report_config_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_config_id: (required)
        :param str client_id: (required)
        :param ReportConfigUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['report_config_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_report_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_config_id' is set
        if ('report_config_id' not in local_var_params or
                local_var_params['report_config_id'] is None):
            raise ValueError("Missing the required parameter `report_config_id` when calling `update_report_config`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_report_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_config_id' in local_var_params:
            path_params['report_config_id'] = local_var_params['report_config_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/report-configs/{report_config_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_role(self, role_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :param RoleUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_role_with_http_info(role_id, client_id, **kwargs)  # noqa: E501
            return data

    def update_role_with_http_info(self, role_id, client_id, **kwargs):  # noqa: E501
        """Updates an existing role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role_with_http_info(role_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: (required)
        :param str client_id: (required)
        :param RoleUpdate body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['role_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in local_var_params or
                local_var_params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `update_role`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in local_var_params or
                local_var_params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in local_var_params:
            path_params['role_id'] = local_var_params['role_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_term(self, term_id, **kwargs):  # noqa: E501
        """Updates an existing term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_term(term_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term_id: (required)
        :param str client_id:
        :param Term body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_term_with_http_info(term_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_term_with_http_info(term_id, **kwargs)  # noqa: E501
            return data

    def update_term_with_http_info(self, term_id, **kwargs):  # noqa: E501
        """Updates an existing term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_term_with_http_info(term_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term_id: (required)
        :param str client_id:
        :param Term body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['term_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_term" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'term_id' is set
        if ('term_id' not in local_var_params or
                local_var_params['term_id'] is None):
            raise ValueError("Missing the required parameter `term_id` when calling `update_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term_id' in local_var_params:
            path_params['term_id'] = local_var_params['term_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/terms/{term_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user(self, user_id, **kwargs):  # noqa: E501
        """Updates an existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id:
        :param UpdateUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def update_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Updates an existing user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str client_id:
        :param UpdateUser body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['user_id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in local_var_params or
                local_var_params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in local_var_params:
            path_params['user_id'] = local_var_params['user_id']  # noqa: E501

        query_params = []
        if 'client_id' in local_var_params:
            query_params.append(('client_id', local_var_params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_widget_type(self, widget_type_id, **kwargs):  # noqa: E501
        """Updates an existing widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_widget_type(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :param WidgetType body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_widget_type_with_http_info(widget_type_id, **kwargs)  # noqa: E501
            return data

    def update_widget_type_with_http_info(self, widget_type_id, **kwargs):  # noqa: E501
        """Updates an existing widget type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_widget_type_with_http_info(widget_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str widget_type_id: (required)
        :param WidgetType body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['widget_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_widget_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'widget_type_id' is set
        if ('widget_type_id' not in local_var_params or
                local_var_params['widget_type_id'] is None):
            raise ValueError("Missing the required parameter `widget_type_id` when calling `update_widget_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'widget_type_id' in local_var_params:
            path_params['widget_type_id'] = local_var_params['widget_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/widget-types/{widget_type_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
