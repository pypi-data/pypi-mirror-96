from __future__ import absolute_import, division, print_function, unicode_literals

import logging
from typing import Set

from ufo2ft.filters import BaseFilter
from ufoLib2.objects.font import Font
from ufoLib2.objects.glyph import Glyph
import math
import re, os
import datetime
from ..config import SetConfig

# from fontParts.world import *

# from fontParts.fontshell import RFont

logger = logging.getLogger(__name__)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

class FixFontinfo(BaseFilter):

    def set_context(self, font: Font, glyphSet: Set[Glyph]):

        highest_point = font.bounds.yMax
        lowest_point = font.bounds.yMin

        def round_up(n, decimals=-1):
            multiplier = 10 ** decimals
            return math.ceil(n * multiplier) / multiplier

        win_ascent = int(abs(round_up(abs(highest_point))))
        win_descent = int(abs(round_up(abs(lowest_point))))

        typo_ascender = win_ascent
        typo_descender = - win_descent

        hhea_ascender = typo_ascender
        hhea_descender = typo_descender

        typo_lineGap = int(round_up(0.12 * (typo_ascender + typo_descender)))
        hhea_lineGap = typo_lineGap

        if "Devanagari" in font.info.familyName:
            font.info.openTypeNameSampleText = "рд╕рднреА рдордиреБрд╖реНрдпреЛрдВ рдХреЛ рдЧреМрд░рд╡ рдФрд░ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХреЗ рдорд╛рдорд▓реЗ рдореЗрдВ рдЬрдиреНрдордЬрд╛рдд рд╕реНрд╡рддрдиреНрддреНрд░рддрд╛ рдФрд░ рд╕рдорд╛рдирддрд╛ рдкреНрд░рд╛рдкреНрдд рд╣реИред"
        if "Gujarati" in font.info.familyName:
            font.info.openTypeNameSampleText = "рккрлНрк░ркдрк┐рк╖рлНркарк╛ ркЕркирлЗ ркЕркзрк┐ркХрк╛рк░рлЛркирлА ркжрлГрк╖рлНркЯрк┐ркП рк╕рк░рлНрк╡ ркорк╛ркирк╡рлЛ ркЬркирлНркоркерлА рк╕рлНрк╡ркдркВркдрлНрк░ ркЕркирлЗ рк╕ркорк╛рки рк╣рлЛркп ркЫрлЗ."
        if "Gurmukhi" in font.info.familyName:
            font.info.openTypeNameSampleText = "ри╕ри╛ри░ри╛ риориирйБрй▒риЦрйА рикри░ри┐ри╡ри╛ри░ риЖрикригрйА риори╣ри┐риори╛, ри╕ри╝ри╛рии риЕридрйЗ ри╣рй▒риХри╛риВ рижрйЗ рикрй▒риЦрйЛриВ риЬриирио ридрйЛриВ ри╣рйА риЖриЬри╝ри╛риж ри╣рйИ риЕридрйЗ ри╕рйБридрйЗ ри╕ри┐рй▒риз ри╕ри╛ри░рйЗ ри▓рйЛриХ римри░ри╛римри░ ри╣рииред"
        if "Bangla" in font.info.familyName:
            font.info.openTypeNameSampleText = "рж╕ржорж╕рзНржд ржорж╛ржирзБрж╖ рж╕рзНржмрж╛ржзрзАржиржнрж╛ржмрзЗ рж╕ржорж╛ржи ржорж░рзНржпрж╛ржжрж╛ ржПржмржВ ржЕржзрж┐ржХрж╛рж░ ржирж┐ржпрж╝рзЗ ржЬржирзНржоржЧрзНрж░рж╣ржг ржХрж░рзЗред"
        if "Bengali" in font.info.familyName:
            font.info.openTypeNameSampleText = "рж╕ржорж╕рзНржд ржорж╛ржирзБрж╖ рж╕рзНржмрж╛ржзрзАржиржнрж╛ржмрзЗ рж╕ржорж╛ржи ржорж░рзНржпрж╛ржжрж╛ ржПржмржВ ржЕржзрж┐ржХрж╛рж░ ржирж┐ржпрж╝рзЗ ржЬржирзНржоржЧрзНрж░рж╣ржг ржХрж░рзЗред"
        if "Odia" in font.info.familyName:
            font.info.openTypeNameSampleText = "рм╕рммрнБ рмормирнБрм╖рнНрмп рмЬрмирнНрмормХрм╛рм│рм░рнБ рм╕рнНрммрм╛рмзрнАрми. рм╕рнЗрморм╛рмирмЩрнНрмХрм░ рморм░рнНрмпрнНрмпрм╛рмжрм╛ рмУ рмЕрмзрм┐рмХрм╛рм░ рм╕рморм╛рми."
        if "Telugu" in font.info.familyName:
            font.info.openTypeNameSampleText = "р░кр▒Нр░░р░др░┐р░кр░др▒Нр░др░┐р░╕р▒Нр░╡р░др▒Нр░╡р░ор▒Бр░▓ р░╡р░┐р░╖р░пр░ор▒Бр░и р░ор░╛р░ир░╡р▒Бр░▓р▒Жр░▓р▒Нр░▓р░░р▒Бр░ир▒Б р░Ьр░ир▒Нр░ор░др░Г р░╕р▒Нр░╡р░др░Вр░др▒Нр░░р▒Бр░▓р▒Бр░ир▒Б р░╕р░ор░╛р░ир▒Бр░▓р▒Бр░ир▒Б р░ир░Чр▒Бр░жр▒Бр░░р▒Б."
        if "Kannada" in font.info.familyName:
            font.info.openTypeNameSampleText = "р▓Ор▓▓р│Нр▓▓р▓╛ р▓ор▓╛р▓ир▓╡р▓░р│В р▓╕р│Нр▓╡р▓др▓Вр▓др│Нр▓░р▓░р▓╛р▓Чр▓┐р▓пр│З р▓Ьр▓ир▓┐р▓╕р▓┐р▓жр│Нр▓зр▓╛р▓░р│Ж. р▓╣р▓╛р▓Чр│В р▓Шр▓ир▓др│Ж р▓ор▓др│Нр▓др│Б р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╕р▓ор▓╛р▓ир▓░р▓╛р▓Чр▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж."
        if "Malayalam" in font.info.familyName:
            font.info.openTypeNameSampleText = "р┤ор┤ир╡Бр┤╖р╡Нр┤пр┤░р╡Жр┤▓р╡Нр┤▓р┤╛р┤╡р┤░р╡Бр┤В р┤др╡Бр┤▓р╡Нр┤пр┤╛р┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Лр┤Яр╡Бр┤В р┤Ер┤ир╡Нр┤др┤╕р╡Нр┤╕р╡Лр┤Яр╡Бр┤В р┤╕р╡Нр┤╡р┤╛р┤др┤ир╡Нр┤др╡Нр┤░р╡Нр┤пр┤др╡Нр┤др╡Лр┤Яр╡Бр┤Вр┤Хр╡Вр┤Яр┤┐ р┤Ьр┤ир┤┐р┤Ър╡Нр┤Ър┤┐р┤Яр╡Нр┤Яр╡Бр┤│р╡Нр┤│р┤╡р┤░р┤╛р┤гр╡НтАМ."
        if "Tamil" in font.info.familyName:
            font.info.openTypeNameSampleText = "рооройро┐родрокрпН рокро┐ро▒ро┐ро╡ро┐ропро┐ройро░рпН роЪроХро▓ро░рпБроорпН роЪрпБродроирпНродро┐ро░рооро╛роХро╡рпЗ рокро┐ро▒роХрпНроХро┐ройрпНро▒ройро░рпН; роЕро╡ро░рпНроХро│рпН роородро┐рокрпНрокро┐ро▓рпБроорпН, роЙро░ро┐роорпИроХро│ро┐ро▓рпБроорпН роЪроорооро╛ройро╡ро░рпНроХро│рпН, роЕро╡ро░рпНроХро│рпН роиро┐ропро╛ропродрпНродрпИропрпБроорпН рооройроЪрпНроЪро╛роЯрпНроЪро┐ропрпИропрпБроорпН роЗропро▒рпНрокрогрпНрокро╛роХрокрпН рокрпЖро▒рпНро▒ро╡ро░рпНроХро│рпН."
        if "Sinhala" in font.info.familyName:
            font.info.openTypeNameSampleText = "р╖Гр╖Тр╢║р╢╜р╖Ф р╢╕р╢▒р╖Фр╖Вр╖КтАНр╢║р╢║р╖Э р╢▒р╖Тр╢пр╖Др╖Гр╖Кр╖А р╢Лр╢┤р╢н р╢╜р╢╢р╖П р╢Зр╢н. р╢Ьр╢╗р╖Фр╢нр╖Кр╖Ар╢║р╖Щр╢▒р╖К р╖Др╖П р╢Ер╢║р╖Тр╢нр╖Тр╖Ар╖Пр╖Гр╖Тр╢Ър╢╕р╖Кр╖Ар╢╜р╖Тр╢▒р╖К р╖Гр╢╕р╖Пр╢▒ р╖Ар╖Щр╢нр╖Т."
        if "Takri" in font.info.familyName:
            font.info.openTypeNameSampleText = "ЁСЪЮЁСЪе-ЁСЪЮЁСЪе ЁСЪЦЁСЪдЁСЪоЁСЪгЁСЪ│ ЁСЪДЁСЪвЁСЪд ЁСЪаЁСЪЩЁСЪнЁСЪЭЁСЪп ЁСЪПЁСЪ┤ЁСЪФ ЁСЪЭЁСЪвЁСЪпЁСЪл ЁСЪЭЁСЪоЁСЪЩ ЁСЪКЁСЪнЁСЪеЁСЪСЁСЪ│ ЁСЪ╕ЁСЪнЁСЪЭЁСЪп ЁСЪиЁСЪнЁСЪйЁСЪ▓ЁСЪл ЁСЪАЁСЪлЁСЪЫЁСЪд ЁСЪиЁСЪ▒ЁСЪлЁСЪКЁСЪнЁСЪл ЁСЪ╕ЁСЪФЁСЪп ЁСЪТЁСЪ▒ЁСЪХ-ЁСЪвЁСЪ▒ЁСЪХ ЁСЪСЁСЪпЁСЪЭЁСЪн ЁСЪЫЁСЪп ЁСЪЮЁСЪФЁСЪпрее"
        if "Latin" in font.info.familyName:
            font.info.openTypeNameSampleText = "Quick Brown fox jumps over the lazy dog and steals the golden apple"

        # win_ascent = 1000
        # win_descent = 240
        # typo_ascender = 1050   # Indesign
        # typo_descender = -350   # Indesign
        # hhea_ascender = 1050
        # hhea_descender = -350
        # hhea_lineGap = 100
        # typo_lineGap = 100   # Indesign

        cf_weight = 0
        cf_win_a = 0
        cf_win_d = 0
        cf_typo_a = 0
        cf_typo_d = 0
        cf_hhea_a = 0
        cf_hhea_d = 0
        cf_hhea_l = 0
        cf_typo_l = 0
        font_name = ""

        verticalmatrixdir = os.path.join(os.path.join(os.getcwd(),"temp"), "verticalmatrix.txt")

        if not os.path.isfile(verticalmatrixdir):
            with open(verticalmatrixdir, "w") as f:
                f.close()

        with open(verticalmatrixdir) as f:
            vm = f.readlines()
            for l in vm:
                l = l.replace("\n","")
                k = l.split(":")
                if k[0] == "name":
                    font_name = k[1]
                if k[0] == "weight":
                    cf_weight = int(k[1])
                if k[0] == "win_a":
                    cf_win_a = int(k[1])
                if k[0] == "win_d":
                    cf_win_d = int(k[1])
                if k[0] == "typo_a":
                    cf_typo_a = int(k[1])
                if k[0] == "typo_d":
                    cf_typo_d = int(k[1])
                if k[0] == "hhea_a":
                    cf_hhea_a = int(k[1])
                if k[0] == "hhea_d":
                    cf_hhea_d = int(k[1])
                if k[0] == "hhea_l":
                    cf_hhea_l = int(k[1])
                if k[0] == "typo_l":
                    cf_typo_l = int(k[1])

        f.close()
        if font_name == font.info.familyName:

            if cf_win_a <= win_ascent:
                cf_win_a = win_ascent
            if cf_win_d <= win_descent:
                cf_win_d = win_descent
            if cf_typo_a <= typo_ascender:
                cf_typo_a = typo_ascender
            if cf_typo_d >= typo_descender:
                cf_typo_d = typo_descender
            if cf_hhea_a <= hhea_ascender:
                cf_hhea_a = hhea_ascender
            if cf_hhea_d >= hhea_descender:
                cf_hhea_d = hhea_descender
            if cf_hhea_l <= hhea_lineGap:
                cf_hhea_l = hhea_lineGap
            if cf_typo_l <= typo_lineGap:
                cf_typo_l = typo_lineGap

            with open(verticalmatrixdir, "w") as ff:
                ff.write("name:" + font_name + "\n")
                ff.write("weight:" + str(cf_weight) + "\n")
                ff.write("win_a:" + str(cf_win_a) + "\n")
                ff.write("win_d:" + str(cf_win_d) + "\n")
                ff.write("typo_a:" + str(cf_typo_a) + "\n")
                ff.write("typo_d:" + str(cf_typo_d) + "\n")
                ff.write("hhea_a:" + str(cf_hhea_a) + "\n")
                ff.write("hhea_d:" + str(cf_hhea_d) + "\n")
                ff.write("hhea_l:" + str(cf_hhea_l) + "\n")
                ff.write("typo_l:" + str(cf_typo_l) + "\n")
            ff.close()
        else:
            font_name = font.info.familyName
            cf_weight = font.info.openTypeOS2WeightClass
            cf_win_a = win_ascent
            cf_win_d = win_descent
            cf_typo_a = typo_ascender
            cf_typo_d = typo_descender
            cf_hhea_a = hhea_ascender
            cf_hhea_d = hhea_descender
            cf_hhea_l = hhea_lineGap
            cf_typo_l = typo_lineGap
            with open(verticalmatrixdir, "w") as ff:
                ff.write("name:" + font_name + "\n")
                ff.write("weight:" + str(cf_weight) + "\n")
                ff.write("win_a:" + str(cf_win_a) + "\n")
                ff.write("win_d:" + str(cf_win_d) + "\n")
                ff.write("typo_a:" + str(cf_typo_a) + "\n")
                ff.write("typo_d:" + str(cf_typo_d) + "\n")
                ff.write("hhea_a:" + str(cf_hhea_a) + "\n")
                ff.write("hhea_d:" + str(cf_hhea_d) + "\n")
                ff.write("hhea_l:" + str(cf_hhea_l) + "\n")
                ff.write("typo_l:" + str(cf_typo_l) + "\n")
            ff.close()



        print("===========")

        win_ascent = cf_win_a
        win_descent = cf_win_d
        typo_ascender = cf_typo_a
        typo_descender = cf_typo_d
        hhea_ascender = cf_hhea_a
        hhea_descender = cf_hhea_d
        hhea_lineGap = cf_hhea_l
        typo_lineGap = cf_typo_l

        print("win_ascent " + str(win_ascent))
        print("win_descent " + str(win_descent))
        print("typo_ascender " + str(typo_ascender))
        print("typo_descender " + str(typo_descender))
        print("hhea_ascender " + str(hhea_ascender))
        print("hhea_descender " + str(hhea_descender))
        print("hhea_lineGap " + str(hhea_lineGap))
        print("typo_lineGap " + str(typo_lineGap))


        font.info.openTypeOS2WinAscent = win_ascent
        font.info.openTypeOS2WinDescent = win_descent
        font.info.openTypeOS2TypoAscender = typo_ascender
        font.info.openTypeOS2TypoDescender = typo_descender
        font.info.openTypeHheaAscender = hhea_ascender
        font.info.openTypeHheaDescender = hhea_descender
        font.info.openTypeHheaLineGap = hhea_lineGap
        font.info.openTypeOS2TypoLineGap = typo_lineGap

        # Getting font info from configuration


        config = SetConfig()
        config.read()


        # Applying gathered font info

        cr = font.info.copyright

        if cr:
            years = re.findall("\d{4}", cr)
            if years:
                initial_release_year = min(years)
        else:
            initial_release_year = str(datetime.date.today().year)

        current_year = str(datetime.date.today().year)

        if initial_release_year == str(current_year):
            release_year_range = initial_release_year
        else:
            release_year_range = initial_release_year + "-{}".format(str(current_year))

        if config.copyright:
            font.info.copyright = config.copyright.format(release_year_range,config.manufacturer)
        if config.designer_url:
            if (not font.info.openTypeNameDesignerURL) or (font.info.openTypeNameDesignerURL == "~"):
                font.info.openTypeNameDesignerURL = config.designer_url
        if config.manufacturer:
            font.info.openTypeNameManufacturer = config.manufacturer
        if config.manufacturer_url:
            font.info.openTypeNameManufacturerURL = config.manufacturer_url
        if config.license:
            font.info.openTypeNameLicense = config.license
        if config.license_url:
            font.info.openTypeNameLicenseURL = config.license_url
        if config.vendor_id:
            font.info.openTypeOS2VendorID = config.vendor_id

        tm = font.info.familyName.split(" ")

        if config.trademark:
            font.info.trademark = config.trademark.format(tm[0],config.manufacturer)

        # fsType: Everything is allowed
        font.info.openTypeOS2Type = []

        # Only Preview and print
        #font.info.openTypeOS2Type.insert(0, 2)
        # font.info.openTypeOS2Type[0]=2


        delattr(font.info, 'openTypeHeadFlags')
        # If not removed this causes the problem when the generated font tile is converted to other formats.


        # Use Typo Matrix = True
        font.info.openTypeOS2Selection = [7]

        logger.info("Generated font info")

        return super().set_context(font, glyphSet)

    def filter(self, glyph: Glyph):
        return False
