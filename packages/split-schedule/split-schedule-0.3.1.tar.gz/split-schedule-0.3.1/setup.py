# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['split_schedule']

package_data = \
{'': ['*']}

install_requires = \
['openpyxl>=3.0.5,<4.0.0', 'pandas>=1.2.2,<2.0.0']

setup_kwargs = {
    'name': 'split-schedule',
    'version': '0.3.1',
    'description': 'Split schedule into smaller class sizes',
    'long_description': '# Split Schedule\n\n[![Tests Status](https://github.com/sanders41/split_schedule/workflows/Testing/badge.svg?branch=main&event=push)](https://github.com/sanders41/split-schedule/actions?query=workflow%3ATesting+branch%3Amain+event%3Apush)\n[![Lint Status](https://github.com/sanders41/split_schedule/workflows/Linting/badge.svg?branch=main&event=push)](https://github.com/sanders41/split-schedule/actions?query=workflow%3ALinting+branch%3Amain+event%3Apush)\n[![Coverage](https://codecov.io/github/sanders41/split-schedule/coverage.svg?branch=main)](https://codecov.io/gh/sanders41/split-schedule)\n\nThis package takes a class list and reduces the number of students in each class by a specified amount. This is done by splitting the classes across days. Each individual student\'s day is kept the same for each of his/her classes.\n\nThe class list should be supplied as an Excel(xlsx) file with all students on a single sheet, a csv file, or a Pandas DataFrame containing the columns:\n\n- block = The class period as a number (i.e. 1, 2, 3, etc.)\n- class = The name of the class\n- student = The name of the student\n\nThe generated schedule will contain the fillowing columns:\n\n- block = The class period as a number (i.e. 1, 2, 3, etc.)\n- class = The name of the class\n- total_students = The total number of students for a block across all days\n- max_students = The maximum number of students allowed in a block each day\n- num_classes = The total number of days needed in order to allow for the maximum class size\n- day_number = The day for the class. This can be used as desired. For example 1 = Monday, 2 = Tuesday, etc.\n- student = The name of the student\n\n## Installation\n\n**Note:** Python 3.8 or greater is required\n\nUsing a virtual environmnet is recommended for installing this package. Once the virtual environment is created and activated install the package with:\n\n```sh\npip install split-schedule\n```\n\n## Usage\n\n### ScheduleBuilder Methods\n\n- build_schedule_from_df: Builds the schedule from a Pandas DataFrame\n  - df: The DataFrame that contains the schedule to split\n  - reduce_by (optinal): The amount by which the class size should be reduced. Default = 0.2\n  - smallest_allowed (optinal): The smallest a class should be. This can be used to override the reduce_by amount in cases where the class would be smaller than the desired amount. For example if classes are being reduced 50% (0.5) if the smallest allowd class is 10 and a class has 10 students at the start, then all 10 of these students would be kept in one class rather than reducing the size below 10. Default = 1\n  - max_tries (optinal): The maximum number of times the program will restart itself tying to find a viable schedule. If the maximum number of tries is exceded with no viable schedule found a SchedulingError error will occur meaning no possible way was found to split the schedule with parameters supplied. Default = 10\n  - verbose (optinal): Setting verbose to True will result in log output being written to the terminal as the schedule is being build. Default = False\n- build_schedule_from_file: Builds the schedule from either an Excel(xlsx) file or a csv file.\n  - schedule_file_path: The path to the schedule file, including the name of the file. The file path can be either a string or a Path object. Excel files in xlsx format or csv files are accepted.\n  - reduce_by (optinal): The amount by which the class size should be reduced. Default = 0.2\n  - smallest_allowed (optinal): The smallest a class should be. This can be used to override the reduce_by amount in cases where the class would be smaller than the desired amount. For example if classes are being reduced 50% (0.5) if the smallest allowd class is 10 and a class has 10 students at the start, then all 10 of these students would be kept in one class rather than reducing the size below 10. Default = 1\n  - max_tries (optinal): The maximum number of times the program will restart itself tying to find a viable schedule. If the maximum number of tries is exceded with no viable schedule found a SchedulingError error will occur meaning no possible way was found to split the schedule with parameters supplied. Default = 10\n  - verbose (optinal): Setting verbose to True will result in log output being written to the terminal as the schedule is being build. Default = False\n- save_schedule: Saves the generated schedule to a file.\n  - save_path: The path to which the generated schedule file should be saved, including the desired name of the file. The file path can be either a string or a Path object. Excel files in xlsx format or csv files are accepted.\n\n### ScheduleBuilder Properties\n\n- final_schedule_df: This is a Pandas DataFrame that contains the generated schedule. Before the schedule is created the property will be `None`\n\n## Examples\n\n**Note:** Examples uses Mac/Linux type file paths. For Windows use paths like `c:\\path\\to\\original_file.xlsx` and `c:\\path\\to\\generated_schedule.xlsx`.\n\nCreate a schedule from an Excel file, then save the generated schedule to another Excel file.\n\n```python\nfrom split_schedule import ScheduleBuilder\n\nschedule_builder = ScheduleBuilder()\nschedule_builder.build_schedule_from_file("/path/to/file.xlsx")\nschedule_builder.save_schedule("/path/to/generated_schedule.xlsx")\n```\n\nCreate a schedule from an Excel file, then print the resulting schedule DataFrame.\n\n```python\nfrom split_schedule import ScheduleBuilder\n\nschedule_builder = ScheduleBuilder()\nschedule_builder.build_schedule_from_file("/path/to/file.xlsx")\nprint(schedule_builder.final_schedule_df)\n```\n',
    'author': 'Paul Sanders',
    'author_email': 'psanders1@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/sanders41/split-schedule',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
