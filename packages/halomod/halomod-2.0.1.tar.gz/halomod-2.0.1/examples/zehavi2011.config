################################################################################
#                                                                              #
#                         HALOMOD-FIT CONFIG FILE                              #
#                                                                              #
################################################################################
# This is a template configuration file for halmod-fit. Specify each parameter #
# tailored to your application. All optional arguments are clearly marked      #
# and if you don't want it to be set, just put a "#" at the start of the line. #
#                                                                              #
# The important part is the specification of the paramaters used in the fit.   #
# This can be done in several ways. All parameters are specified as a list     #
# containing information about the prior. The first element of the list is     #
# always the type of prior distribution. This can take the values "unif",      #
# "log" (a log-uniform distribution) or "norm". A "unif" distribution          #
# is always specified as ["unif", min,max,guess], where <guess> is the initial #
# guess for the fit. It can be set to None (note the capital N) for automatic  #
# guessing. "log" takes the same arguments, except that each is in log-space.  #
# "norm" will usually take the arguments ["norm", mean, stdev, guess].         #
#                                                                              #
# There is a major exception to the above, in the case of cosmological         #
# parameters. These come under the heading cosmo_paramsParams. In addition to  #
# the above, these may take the distribution "cov", a multivariate normal      #
# distribution (this is specified simply as ["cov",guess]. The covariance      #
# matrix for this distribution is specified by choosing a set of CMB results   #
# for the covar_data parameter. If this is not set, an error will occur when   #
# trying to use "cov" priors. Additionally, if covar_data is set, then "norm"  #
# priors can be specified as ["norm",guess], where the mean and stdev will be  #
# gotten from the same dataset.                                                #
#                                                                              #
# Any parameters that are specified in a sub-dictionary (eg. cosmo_params)     #
# must be set under a section heading "<dictname>Params".                      #
#                                                                              #
# Finally the other parameters of the model, which are not varied, can be      #
# specified under the Model section (with same variable names as in the        #
# HaloModel constructor).                                                      #
################################################################################

# THIS IS SPECIFICALLY AN EXAMPLE FILE FOR RUNNING THE FIT FOR W_P(R_P) ON THE
# SDSS DR7 DATA FROM ZEHAVI(2011) FOR LUMINOSITY THRESHOLD Mr <-20.5.
# THE CORRESPONDING wp(rp) AND COVARIANCE FILES CAN BE FOUND IN THIS DIRECTORY.

[Data] #========================================================================
# * data_file: a file with 2 (or optionally 3) columns. The first column is the
#              ordinate values to fit to (eg. r), and the second is the values
#              of the fitted quantity (eg. xi). The third column, if present,
#              is the std. dev., which will be used to calculate the chi^2
#              likelihood if present. The ordinate and fitted values should be
#              in the same units as the relevant Framework quantity.
# * cov_file: [OPTIONAL] if present, it will be preferentially used to calculate
#             the chi^2 likelihood. It should contain a square covariance matrix,
#             the same length as the data in ``data_file``.
#===============================================================================
data_file   = wprp.example    ;
# cov_file    = cov.example    ; OPTIONAL

[Constraints] # ALL OPTIONAL ===================================================
# Specify here any constraints to be placed on the output. This is specified as
# the parameter name, with its value being a list of [val, stdev].
#===============================================================================
mean_tracer_den = [0.00318,0.0016]

[RunOptions] #==================================================================
# * framework: The full import path to the Framework class to be used (eg. could
#             be hmf.Massfunction, or halomod.HaloModel).
# * relax:    if True, an error in calculation just results in -inf for the
#             likelihood, rather than the whole thing crashing. Note that this
#             will not catch errors in underlying C/fortran code (eg. in CAMB).
# * nthreads: specifies number of threads to use, but this will automatically get
#             set to 1 if CAMB is being used on each iteration (otherwise the
#             program will hang). Set to 0 for automatic discovery.
# * xval:     The name of the ordinate quantity. Can take values [M,k,r] only.
# * quantity: the name of the quantity to fit (in the ``framework`` class).
# * der_params: a set of parameters to keep chains for in addition to
#             ``quantity`` (usually derived parameters of the main calculation).
#             Note that if any of these is a part of a dictionary, it must be
#             prefixed with the name of the dictionary plus a colon (see
#             example below). These are written in python list syntax, with
#             square braces.
# * der_quants: a set of quantities to keep chains for in addition to
#             ``quantity`` (not single parameters). Same rules as `der_params`,
#             except this should be for quantities like `dndm` or `corr_gal_2h`.
#===============================================================================
framework   = halomod.ProjectedCF  ;
relax       = False      ;
nthreads    = 0          ;
xval        = rp         ;
quantity    = projected_corr_gal       ;
der_params  = ["bias_effective","mass_effective","satellite_fraction","hod_params:M_min"] ;
der_quants  = [] ;

[FitOptions] #==================================================================
# * fit_type: either 'opt', 'mcmc' or 'both'. Specifies whether to do downhill
#             gradient optimization, full MCMC, or both, with the optimization
#             setting the initial guess for the MCMC.
#===============================================================================
fit_type = mcmc ;

[MCMC] #========================================================================
# * nsamples: The number of samples *per walker* in the MCMC chain.
# * nwalkers: An even number at least twice the number of parameters in the fit.
#             The recommendation is to go as big as possible (>~100).
# * burnin:   The length of the burn-in period (per walker). It can be specified
#             as an integer, or as a list of 3 numbers: [min,s,max]
#             In this case, min iterations will definitely be burnt in.
#             Then it will try to keep running until s*acorr < chain_length.
#             Usual values of s may be ~5. If this condition is met, burnin will
#             stop and thereafter the samples will be kept. If max is reached,
#             burnin will cease also, though this may indicate an error.
#===============================================================================
nsamples    = 300      ; Number of samples to run (per walker)
burnin      = 0        ; Burnin size (per walker)
nwalkers    = 50       ; Number of walkers

[Downhill] # ALL OPTIONAL ======================================================
# ** kwargs : Here specify any arguments that can be passed to scipy's `minimize`
#             routine. Whatever is not specified is left as default.
#             Some common options are `disp`, `maxiter`, `method` and `tol`.
#===============================================================================
maxiter = 100

[IO] #==========================================================================
# * outdir : Directory to write all results to (it will be created if necessary)
# * chunks : How many samples to take before writing to file (per walker)
#===============================================================================
outdir      = results  ;
chunks      = 50       ;

############## PARAMETERS TO BE FIT ############################################

[cosmo_paramsParams] # ALL OPTIONAL ============================================
# Here the cosmological parameters to be fit can be set (typically none at all).
# NOTE: this doesn't set the fiducial cosmology, just the parameters that are to
# be fitted (see below for fiducial model parameters).
#
# Read the heading text for information on how to set the priors. If "cov" is to
# be used for any parameter, the covar_data setting MUST BE SET, and should be
# either Planck15,Planck13, WMAP9, WMAP7, WMAP5 or WMAP3.
#===============================================================================
#covar_data  = Planck13 ;

#sigma_8     = ["cov", 0.1,    2,0.8]
#n           = ["cov", 0.966]
#Ob0   	     = ["unif", 0.005, 0.1, 0.05]
#Om0         = ["norm", 0.3]

[OtherParams] # ALL OPTIONAL ===================================================
# Any parameters to be fit that are passed directly to the ``framework`` can be
# set here. Parameters that are passed within dictionaries (model parameters)
# must be set in their own section (see below)
#===============================================================================
#wdm_mass    = ["unif", 0.05,500, 200.0]


[hod_paramsParams] # ALL OPTIONAL ==============================================
# This provides an example of a fit-parameter section that will be sent to the
# ``framework`` in a dictionary (called hod_params).
#===============================================================================
M_1         = ["unif", 10.85, 16.2, 13.43]
M_0         = ["unif", 9.0, 15.0, 11.62]
sig_logm    = ["unif", 0.001, 1.0, 0.17]
alpha       = ["unif", 0.8,   1.5, 1.15]
M_min       = ["unif", 10.0, 14.0, 12.14]

[Model] #=======================================================================
# These parameters constitute the base model of the calculation. They can
# be specified individually (all values will try to be read in as python types,
# so dicts can be specified like they would in python), or as a single "pickle"
# file, which contains a pickle output of a certain Framework instance with the
# parameters already set. An example of such a file is output every time the
# fit is run.
#===============================================================================
# model_file =   ; OPTIONAL file with pickled model in it (overrides below options)

# ----- Cosmology ------
n=0.95
sigma_8=0.8
cosmo_params={"H0":70.0,"Om0":0.25,"Ob0":0.045}

# ----- Models ------
sd_bias_model=Tinker_SD05
exclusion_model=NgMatched_
hod_model=Zheng05
transfer_model=CAMB
hc_spectrum=nonlinear
takahashi=False
halo_concentration_model=Duffy08
halo_concentration_params={"a":11.0,"b":0.13,"c":1.0,"ms":2.26e12}
bias_model=Tinker10
hmf_model=Tinker10

# ----- Accuracy/Timing -----
lnk_min=-8
lnk_max=6
dlnk=0.02
transfer_params={"transfer__kmax":300,"transfer__k_per_logint":15}
dlog10m=0.04
rnum = 50

# ----- Survey ------
proj_limit=60.0
z=0.07 ; this is a guess from their plot ?!
