---

classes:
  DifferentialDrivePoseEstimator:
    shared_ptr: false
    subpackage: estimator
    doc: |
      This class wraps an Unscented Kalman Filter to fuse latency-compensated
      vision measurements with differential drive encoder measurements. It will
      correct for noisy vision measurements and encoder drift. It is intended to be
      an easy drop-in for :class:`DifferentialDriveOdometry`. In fact, if you never call
      :meth:`addVisionMeasurement`, and only call :meth:`update`, this will behave exactly the
      same as DifferentialDriveOdometry.

      :meth:`update` should be called every robot loop (if your robot loops are faster or
      slower than the default, then you should change the nominal delta time via
      the constructor).

      :meth:`addVisionMeasurement` can be called as infrequently as you want; if you
      never call it, then this class will behave like regular encoder odometry.

      Our state-space system is:

      :math:`x = [[x, y, theta, dist_l, dist_r]]^T` in the field
      coordinate system.

      :math:`u = [[d_l, d_r, dtheta]]^T` (robot-relative velocities) --
      NB: using velocities make things considerably easier, because it means that
      teams don't have to worry about getting an accurate model. Basically, we
      suspect that it's easier for teams to get good encoder data than it is for
      them to perform system identification well enough to get a good model

      :math:`y = [[x, y, theta]]^T` from vision,
      or :math:`y = [[dist_l, dist_r, theta]]` from encoders and gyro.
    methods:
      DifferentialDrivePoseEstimator:
        param_override:
          nominalDt:
            default: 0.02_s
      SetVisionMeasurementStdDevs:
      ResetPosition:
      GetEstimatedPosition:
      AddVisionMeasurement:
      Update:
      UpdateWithTime:
