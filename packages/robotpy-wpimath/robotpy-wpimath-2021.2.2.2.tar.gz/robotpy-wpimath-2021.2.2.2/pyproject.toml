[build-system]
requires = [
  "robotpy-build>=2020.6.0,<2021.0.0",
  "robotpy-wpiutil>=2021.2.2.0,<2022.0.0",
]

[tool.robotpy-build]
base_package = "wpimath"

[tool.robotpy-build.wrappers."wpimath._impl".maven_lib_download]
artifact_id = "wpimath-cpp"
group_id = "edu.wpi.first.wpimath"
repo_url = "https://frcmaven.wpi.edu/artifactory/release"
version = "2021.2.2"

libs = ["wpimath"]

[tool.robotpy-build.wrappers."wpimath._impl"]
depends = ["wpiutil"]
extra_includes = ["wpimath/_impl/src", "wpimath/_impl/src/eigen", "wpimath/_impl/src/type_casters"]
name = "wpimath_cpp"

[tool.robotpy-build.wrappers."wpimath._impl".type_casters]
"units_acceleration_type_caster.h" = [
  "units::feet_per_second_squared",
  "units::feet_per_second_squared",
  "units::feet_per_second_squared_t",
  "units::meters_per_second_squared",
  "units::meters_per_second_squared",
  "units::meters_per_second_squared_t",
  "units::standard_gravity",
  "units::standard_gravity",
  "units::standard_gravity_t",
]
"units_angle_type_caster.h" = [
  "units::arcminute",
  "units::arcminute_t",
  "units::arcminutes",
  "units::arcsecond",
  "units::arcsecond_t",
  "units::arcseconds",
  "units::degree",
  "units::degree_t",
  "units::degrees",
  "units::gradian",
  "units::gradian_t",
  "units::gradians",
  "units::kiloradian",
  "units::kiloradian_t",
  "units::kiloradians",
  "units::microradian",
  "units::microradian_t",
  "units::microradians",
  "units::milliarcsecond",
  "units::milliarcsecond_t",
  "units::milliarcseconds",
  "units::milliradian",
  "units::milliradian_t",
  "units::milliradians",
  "units::nanoradian",
  "units::nanoradian_t",
  "units::nanoradians",
  "units::radian",
  "units::radian_t",
  "units::radians",
  "units::turn",
  "units::turn_t",
  "units::turns",
]
"units_angular_velocity_type_caster.h" = [
  "units::degrees_per_second",
  "units::degrees_per_second",
  "units::degrees_per_second_t",
  "units::milliarcseconds_per_year",
  "units::milliarcseconds_per_year",
  "units::milliarcseconds_per_year_t",
  "units::radians_per_second",
  "units::radians_per_second",
  "units::radians_per_second_t",
  "units::revolutions_per_minute",
  "units::revolutions_per_minute",
  "units::revolutions_per_minute_t",
]
"units_area_type_caster.h" = [
  "units::acre",
  "units::acre_t",
  "units::acres",
  "units::hectare",
  "units::hectare_t",
  "units::hectares",
  "units::square_feet",
  "units::square_foot",
  "units::square_foot_t",
  "units::square_inch",
  "units::square_inch_t",
  "units::square_inches",
  "units::square_kilometer",
  "units::square_kilometer_t",
  "units::square_kilometers",
  "units::square_meter",
  "units::square_meter_t",
  "units::square_meters",
  "units::square_mile",
  "units::square_mile_t",
  "units::square_miles",
]
"units_capacitance_type_caster.h" = [
  "units::farad",
  "units::farad_t",
  "units::farads",
  "units::kilofarad",
  "units::kilofarad_t",
  "units::kilofarads",
  "units::microfarad",
  "units::microfarad_t",
  "units::microfarads",
  "units::millifarad",
  "units::millifarad_t",
  "units::millifarads",
  "units::nanofarad",
  "units::nanofarad_t",
  "units::nanofarads",
]
"units_charge_type_caster.h" = [
  "units::ampere_hour",
  "units::ampere_hour_t",
  "units::ampere_hours",
  "units::coulomb",
  "units::coulomb_t",
  "units::coulombs",
  "units::kiloampere_hour",
  "units::kiloampere_hour_t",
  "units::kiloampere_hours",
  "units::kilocoulomb",
  "units::kilocoulomb_t",
  "units::kilocoulombs",
  "units::microampere_hour",
  "units::microampere_hour_t",
  "units::microampere_hours",
  "units::microcoulomb",
  "units::microcoulomb_t",
  "units::microcoulombs",
  "units::milliampere_hour",
  "units::milliampere_hour_t",
  "units::milliampere_hours",
  "units::millicoulomb",
  "units::millicoulomb_t",
  "units::millicoulombs",
  "units::nanoampere_hour",
  "units::nanoampere_hour_t",
  "units::nanoampere_hours",
  "units::nanocoulomb",
  "units::nanocoulomb_t",
  "units::nanocoulombs",
]
"units_concentration_type_caster.h" = [
  "units::parts_per_billion",
  "units::parts_per_million",
  "units::parts_per_trillion",
  "units::percent",
  "units::percent",
  "units::percent_t",
  "units::ppb",
  "units::ppb_t",
  "units::ppm",
  "units::ppm_t",
  "units::ppt",
  "units::ppt_t",
]
"units_conductance_type_caster.h" = [
  "units::kilosiemens",
  "units::kilosiemens",
  "units::kilosiemens_t",
  "units::microsiemens",
  "units::microsiemens",
  "units::microsiemens_t",
  "units::millisiemens",
  "units::millisiemens",
  "units::millisiemens_t",
  "units::nanosiemens",
  "units::nanosiemens",
  "units::nanosiemens_t",
  "units::siemens",
  "units::siemens",
  "units::siemens_t",
]
"units_current_type_caster.h" = [
  "units::ampere",
  "units::ampere_t",
  "units::amperes",
  "units::kiloampere",
  "units::kiloampere_t",
  "units::kiloamperes",
  "units::microampere",
  "units::microampere_t",
  "units::microamperes",
  "units::milliampere",
  "units::milliampere_t",
  "units::milliamperes",
  "units::nanoampere",
  "units::nanoampere_t",
  "units::nanoamperes",
]
"units_data_type_caster.h" = [
  "units::exabit",
  "units::exabit_t",
  "units::exabits",
  "units::exabyte",
  "units::exabyte_t",
  "units::exabytes",
]
"units_data_transfer_rate_type_caster.h" = [
  "units::exabits_per_second",
  "units::exabits_per_second",
  "units::exabits_per_second_t",
  "units::exabytes_per_second",
  "units::exabytes_per_second",
  "units::exabytes_per_second_t",
]
"units_density_type_caster.h" = [
  "units::grams_per_milliliter",
  "units::grams_per_milliliter",
  "units::grams_per_milliliter_t",
  "units::kilograms_per_cubic_meter",
  "units::kilograms_per_cubic_meter",
  "units::kilograms_per_cubic_meter_t",
  "units::kilograms_per_liter",
  "units::kilograms_per_liter",
  "units::kilograms_per_liter_t",
  "units::ounces_per_cubic_foot",
  "units::ounces_per_cubic_foot",
  "units::ounces_per_cubic_foot_t",
  "units::ounces_per_cubic_inch",
  "units::ounces_per_cubic_inch",
  "units::ounces_per_cubic_inch_t",
  "units::ounces_per_gallon",
  "units::ounces_per_gallon",
  "units::ounces_per_gallon_t",
  "units::pounds_per_cubic_foot",
  "units::pounds_per_cubic_foot",
  "units::pounds_per_cubic_foot_t",
  "units::pounds_per_cubic_inch",
  "units::pounds_per_cubic_inch",
  "units::pounds_per_cubic_inch_t",
  "units::pounds_per_gallon",
  "units::pounds_per_gallon",
  "units::pounds_per_gallon_t",
  "units::slugs_per_cubic_foot",
  "units::slugs_per_cubic_foot",
  "units::slugs_per_cubic_foot_t",
]
"units_energy_type_caster.h" = [
  "units::british_thermal_unit",
  "units::british_thermal_unit_59",
  "units::british_thermal_unit_59_t",
  "units::british_thermal_unit_iso",
  "units::british_thermal_unit_iso_t",
  "units::british_thermal_unit_t",
  "units::british_thermal_units",
  "units::british_thermal_units_59",
  "units::british_thermal_units_iso",
  "units::calorie",
  "units::calorie_t",
  "units::calories",
  "units::foot_pound",
  "units::foot_pound_t",
  "units::foot_pounds",
  "units::joule",
  "units::joule_t",
  "units::joules",
  "units::kilocalorie",
  "units::kilocalorie_t",
  "units::kilocalories",
  "units::kilojoule",
  "units::kilojoule_t",
  "units::kilojoules",
  "units::kilowatt_hour",
  "units::kilowatt_hour_t",
  "units::kilowatt_hours",
  "units::microcalorie",
  "units::microcalorie_t",
  "units::microcalories",
  "units::microjoule",
  "units::microjoule_t",
  "units::microjoules",
  "units::millicalorie",
  "units::millicalorie_t",
  "units::millicalories",
  "units::millijoule",
  "units::millijoule_t",
  "units::millijoules",
  "units::nanocalorie",
  "units::nanocalorie_t",
  "units::nanocalories",
  "units::nanojoule",
  "units::nanojoule_t",
  "units::nanojoules",
  "units::therm",
  "units::therm_t",
  "units::therms",
  "units::watt_hour",
  "units::watt_hour_t",
  "units::watt_hours",
]
"units_force_type_caster.h" = [
  "units::dyne",
  "units::dyne_t",
  "units::dynes",
  "units::kilonewton",
  "units::kilonewton_t",
  "units::kilonewtons",
  "units::kilopond",
  "units::kilopond_t",
  "units::kiloponds",
  "units::micronewton",
  "units::micronewton_t",
  "units::micronewtons",
  "units::millinewton",
  "units::millinewton_t",
  "units::millinewtons",
  "units::nanonewton",
  "units::nanonewton_t",
  "units::nanonewtons",
  "units::newton",
  "units::newton_t",
  "units::newtons",
  "units::pound",
  "units::pound_t",
  "units::poundal",
  "units::poundal_t",
  "units::poundals",
  "units::pounds",
]
"units_frequency_type_caster.h" = [
  "units::hertz",
  "units::hertz",
  "units::hertz_t",
  "units::kilohertz",
  "units::kilohertz",
  "units::kilohertz_t",
  "units::microhertz",
  "units::microhertz",
  "units::microhertz_t",
  "units::millihertz",
  "units::millihertz",
  "units::millihertz_t",
  "units::nanohertz",
  "units::nanohertz",
  "units::nanohertz_t",
]
"units_illuminance_type_caster.h" = [
  "units::footcandle",
  "units::footcandle_t",
  "units::footcandles",
  "units::kilolux",
  "units::kilolux_t",
  "units::kiloluxes",
  "units::lumens_per_square_inch",
  "units::lumens_per_square_inch",
  "units::lumens_per_square_inch_t",
  "units::lux",
  "units::lux_t",
  "units::luxes",
  "units::microlux",
  "units::microlux_t",
  "units::microluxes",
  "units::millilux",
  "units::millilux_t",
  "units::milliluxes",
  "units::nanolux",
  "units::nanolux_t",
  "units::nanoluxes",
  "units::phot",
  "units::phot_t",
  "units::phots",
]
"units_impedance_type_caster.h" = [
  "units::kiloohm",
  "units::kiloohm_t",
  "units::kiloohms",
  "units::microohm",
  "units::microohm_t",
  "units::microohms",
  "units::milliohm",
  "units::milliohm_t",
  "units::milliohms",
  "units::nanoohm",
  "units::nanoohm_t",
  "units::nanoohms",
  "units::ohm",
  "units::ohm_t",
  "units::ohms",
]
"units_inductance_type_caster.h" = [
  "units::henries",
  "units::henry",
  "units::henry_t",
  "units::kilohenries",
  "units::kilohenry",
  "units::kilohenry_t",
  "units::microhenries",
  "units::microhenry",
  "units::microhenry_t",
  "units::millihenries",
  "units::millihenry",
  "units::millihenry_t",
  "units::nanohenries",
  "units::nanohenry",
  "units::nanohenry_t",
]
"units_length_type_caster.h" = [
  "units::angstrom",
  "units::angstrom_t",
  "units::angstroms",
  "units::astronicalUnit",
  "units::astronicalUnit_t",
  "units::astronicalUnits",
  "units::chain",
  "units::chain_t",
  "units::chains",
  "units::cubit",
  "units::cubit_t",
  "units::cubits",
  "units::fathom",
  "units::fathom_t",
  "units::fathoms",
  "units::feet",
  "units::foot",
  "units::foot_t",
  "units::furlong",
  "units::furlong_t",
  "units::furlongs",
  "units::hand",
  "units::hand_t",
  "units::hands",
  "units::inch",
  "units::inch_t",
  "units::inches",
  "units::kilometer",
  "units::kilometer_t",
  "units::kilometers",
  "units::league",
  "units::league_t",
  "units::leagues",
  "units::lightyear",
  "units::lightyear_t",
  "units::lightyears",
  "units::meter",
  "units::meter_t",
  "units::meters",
  "units::micrometer",
  "units::micrometer_t",
  "units::micrometers",
  "units::mil",
  "units::mil_t",
  "units::mile",
  "units::mile_t",
  "units::miles",
  "units::millimeter",
  "units::millimeter_t",
  "units::millimeters",
  "units::mils",
  "units::nanometer",
  "units::nanometer_t",
  "units::nanometers",
  "units::nauticalLeague",
  "units::nauticalLeague_t",
  "units::nauticalLeagues",
  "units::nauticalMile",
  "units::nauticalMile_t",
  "units::nauticalMiles",
  "units::parsec",
  "units::parsec_t",
  "units::parsecs",
  "units::yard",
  "units::yard_t",
  "units::yards",
]
"units_luminous_flux_type_caster.h" = [
  "units::kilolumen",
  "units::kilolumen_t",
  "units::kilolumens",
  "units::lumen",
  "units::lumen_t",
  "units::lumens",
  "units::microlumen",
  "units::microlumen_t",
  "units::microlumens",
  "units::millilumen",
  "units::millilumen_t",
  "units::millilumens",
  "units::nanolumen",
  "units::nanolumen_t",
  "units::nanolumens",
]
"units_luminous_intensity_type_caster.h" = [
  "units::candela",
  "units::candela_t",
  "units::candelas",
  "units::kilocandela",
  "units::kilocandela_t",
  "units::kilocandelas",
  "units::microcandela",
  "units::microcandela_t",
  "units::microcandelas",
  "units::millicandela",
  "units::millicandela_t",
  "units::millicandelas",
  "units::nanocandela",
  "units::nanocandela_t",
  "units::nanocandelas",
]
"units_magnetic_field_strength_type_caster.h" = [
  "units::gauss",
  "units::gauss",
  "units::gauss_t",
  "units::kilotesla",
  "units::kilotesla_t",
  "units::kiloteslas",
  "units::microtesla",
  "units::microtesla_t",
  "units::microteslas",
  "units::millitesla",
  "units::millitesla_t",
  "units::milliteslas",
  "units::nanotesla",
  "units::nanotesla_t",
  "units::nanoteslas",
  "units::tesla",
  "units::tesla_t",
  "units::teslas",
]
"units_magnetic_flux_type_caster.h" = [
  "units::kiloweber",
  "units::kiloweber_t",
  "units::kilowebers",
  "units::maxwell",
  "units::maxwell_t",
  "units::maxwells",
  "units::microweber",
  "units::microweber_t",
  "units::microwebers",
  "units::milliweber",
  "units::milliweber_t",
  "units::milliwebers",
  "units::nanoweber",
  "units::nanoweber_t",
  "units::nanowebers",
  "units::weber",
  "units::weber_t",
  "units::webers",
]
"units_mass_type_caster.h" = [
  "units::carat",
  "units::carat_t",
  "units::carats",
  "units::gram",
  "units::gram_t",
  "units::grams",
  "units::kilogram",
  "units::kilogram_t",
  "units::kilograms",
  "units::long_ton",
  "units::long_ton_t",
  "units::long_tons",
  "units::metric_ton",
  "units::metric_ton_t",
  "units::metric_tons",
  "units::microgram",
  "units::microgram_t",
  "units::micrograms",
  "units::milligram",
  "units::milligram_t",
  "units::milligrams",
  "units::nanogram",
  "units::nanogram_t",
  "units::nanograms",
  "units::ounce",
  "units::ounce_t",
  "units::ounces",
  "units::pound",
  "units::pound_t",
  "units::pounds",
  "units::short_ton",
  "units::short_ton_t",
  "units::short_tons",
  "units::slug",
  "units::slug_t",
  "units::slugs",
  "units::stone",
  "units::stone",
  "units::stone_t",
]
"units_moment_of_inertia_type_caster.h" = [
  "units::kilogram_square_meter",
  "units::kilogram_square_meter_t",
  "units::kilogram_square_meters",
]
"units_power_type_caster.h" = [
  "units::horsepower",
  "units::horsepower",
  "units::horsepower_t",
  "units::kilowatt",
  "units::kilowatt_t",
  "units::kilowatts",
  "units::microwatt",
  "units::microwatt_t",
  "units::microwatts",
  "units::milliwatt",
  "units::milliwatt_t",
  "units::milliwatts",
  "units::nanowatt",
  "units::nanowatt_t",
  "units::nanowatts",
  "units::watt",
  "units::watt_t",
  "units::watts",
]
"units_pressure_type_caster.h" = [
  "units::atmosphere",
  "units::atmosphere_t",
  "units::atmospheres",
  "units::bar",
  "units::bar_t",
  "units::bars",
  "units::kilopascal",
  "units::kilopascal_t",
  "units::kilopascals",
  "units::mbar",
  "units::mbar_t",
  "units::mbars",
  "units::micropascal",
  "units::micropascal_t",
  "units::micropascals",
  "units::millipascal",
  "units::millipascal_t",
  "units::millipascals",
  "units::nanopascal",
  "units::nanopascal_t",
  "units::nanopascals",
  "units::pascal",
  "units::pascal_t",
  "units::pascals",
  "units::pounds_per_square_inch",
  "units::pounds_per_square_inch",
  "units::pounds_per_square_inch_t",
  "units::torr",
  "units::torr_t",
  "units::torrs",
]
"units_radiation_type_caster.h" = [
  "units::becquerel",
  "units::becquerel_t",
  "units::becquerels",
  "units::curie",
  "units::curie_t",
  "units::curies",
  "units::gray",
  "units::gray_t",
  "units::grays",
  "units::kilobecquerel",
  "units::kilobecquerel_t",
  "units::kilobecquerels",
  "units::kilogray",
  "units::kilogray_t",
  "units::kilograys",
  "units::kilosievert",
  "units::kilosievert_t",
  "units::kilosieverts",
  "units::microbecquerel",
  "units::microbecquerel_t",
  "units::microbecquerels",
  "units::microgray",
  "units::microgray_t",
  "units::micrograys",
  "units::microsievert",
  "units::microsievert_t",
  "units::microsieverts",
  "units::millibecquerel",
  "units::millibecquerel_t",
  "units::millibecquerels",
  "units::milligray",
  "units::milligray_t",
  "units::milligrays",
  "units::millisievert",
  "units::millisievert_t",
  "units::millisieverts",
  "units::nanobecquerel",
  "units::nanobecquerel_t",
  "units::nanobecquerels",
  "units::nanogray",
  "units::nanogray_t",
  "units::nanograys",
  "units::nanosievert",
  "units::nanosievert_t",
  "units::nanosieverts",
  "units::rad",
  "units::rad_t",
  "units::rads",
  "units::rutherford",
  "units::rutherford_t",
  "units::rutherfords",
  "units::sievert",
  "units::sievert_t",
  "units::sieverts",
]
"units_solid_angle_type_caster.h" = [
  "units::degree_squared",
  "units::degree_squared_t",
  "units::degrees_squared",
  "units::kilosteradian",
  "units::kilosteradian_t",
  "units::kilosteradians",
  "units::microsteradian",
  "units::microsteradian_t",
  "units::microsteradians",
  "units::millisteradian",
  "units::millisteradian_t",
  "units::millisteradians",
  "units::nanosteradian",
  "units::nanosteradian_t",
  "units::nanosteradians",
  "units::spat",
  "units::spat_t",
  "units::spats",
  "units::steradian",
  "units::steradian_t",
  "units::steradians",
]
"units_substance_type_caster.h" = ["units::mole", "units::mole_t", "units::moles"]
"units_temperature_type_caster.h" = [
  "units::celsius",
  "units::celsius",
  "units::celsius_t",
  "units::fahrenheit",
  "units::fahrenheit",
  "units::fahrenheit_t",
  "units::kelvin",
  "units::kelvin",
  "units::kelvin_t",
  "units::rankine",
  "units::rankine",
  "units::rankine_t",
  "units::reaumur",
  "units::reaumur",
  "units::reaumur_t",
]
"units_time_type_caster.h" = [
  "units::day",
  "units::day_t",
  "units::days",
  "units::gregorian_year",
  "units::gregorian_year_t",
  "units::gregorian_years",
  "units::hour",
  "units::hour_t",
  "units::hours",
  "units::julian_year",
  "units::julian_year_t",
  "units::julian_years",
  "units::kilosecond",
  "units::kilosecond_t",
  "units::kiloseconds",
  "units::microsecond",
  "units::microsecond_t",
  "units::microseconds",
  "units::millisecond",
  "units::millisecond_t",
  "units::milliseconds",
  "units::minute",
  "units::minute_t",
  "units::minutes",
  "units::nanosecond",
  "units::nanosecond_t",
  "units::nanoseconds",
  "units::second",
  "units::second_t",
  "units::seconds",
  "units::week",
  "units::week_t",
  "units::weeks",
  "units::year",
  "units::year_t",
  "units::years",
]
"units_torque_type_caster.h" = [
  "units::foot_pound",
  "units::foot_pound_t",
  "units::foot_poundal",
  "units::foot_poundal_t",
  "units::foot_poundals",
  "units::foot_pounds",
  "units::inch_pound",
  "units::inch_pound_t",
  "units::inch_pounds",
  "units::meter_kilogram",
  "units::meter_kilogram_t",
  "units::meter_kilograms",
  "units::newton_meter",
  "units::newton_meter_t",
  "units::newton_meters",
]
"units_velocity_type_caster.h" = [
  "units::feet_per_second",
  "units::feet_per_second",
  "units::feet_per_second_t",
  "units::kilometers_per_hour",
  "units::kilometers_per_hour",
  "units::kilometers_per_hour_t",
  "units::knot",
  "units::knot_t",
  "units::knots",
  "units::meters_per_second",
  "units::meters_per_second",
  "units::meters_per_second_t",
  "units::miles_per_hour",
  "units::miles_per_hour",
  "units::miles_per_hour_t",
]
"units_voltage_type_caster.h" = [
  "units::abvolt",
  "units::abvolt_t",
  "units::abvolts",
  "units::kilovolt",
  "units::kilovolt_t",
  "units::kilovolts",
  "units::microvolt",
  "units::microvolt_t",
  "units::microvolts",
  "units::millivolt",
  "units::millivolt_t",
  "units::millivolts",
  "units::nanovolt",
  "units::nanovolt_t",
  "units::nanovolts",
  "units::statvolt",
  "units::statvolt_t",
  "units::statvolts",
  "units::volt",
  "units::volt_t",
  "units::volts",
]
"units_volume_type_caster.h" = [
  "units::barrel",
  "units::barrel_t",
  "units::barrels",
  "units::bushel",
  "units::bushel_t",
  "units::bushels",
  "units::cord",
  "units::cord_t",
  "units::cords",
  "units::cubic_fathom",
  "units::cubic_fathom_t",
  "units::cubic_fathoms",
  "units::cubic_feet",
  "units::cubic_foot",
  "units::cubic_foot_t",
  "units::cubic_inch",
  "units::cubic_inch_t",
  "units::cubic_inches",
  "units::cubic_kilometer",
  "units::cubic_kilometer_t",
  "units::cubic_kilometers",
  "units::cubic_meter",
  "units::cubic_meter_t",
  "units::cubic_meters",
  "units::cubic_mile",
  "units::cubic_mile_t",
  "units::cubic_miles",
  "units::cubic_millimeter",
  "units::cubic_millimeter_t",
  "units::cubic_millimeters",
  "units::cubic_yard",
  "units::cubic_yard_t",
  "units::cubic_yards",
  "units::cup",
  "units::cup_t",
  "units::cups",
  "units::dash",
  "units::dash_t",
  "units::dashes",
  "units::dram",
  "units::dram_t",
  "units::drams",
  "units::drop",
  "units::drop_t",
  "units::drops",
  "units::fifth",
  "units::fifth_t",
  "units::fifths",
  "units::fluid_ounce",
  "units::fluid_ounce_t",
  "units::fluid_ounces",
  "units::gallon",
  "units::gallon_t",
  "units::gallons",
  "units::gill",
  "units::gill_t",
  "units::gills",
  "units::kiloliter",
  "units::kiloliter_t",
  "units::kiloliters",
  "units::liter",
  "units::liter_t",
  "units::liters",
  "units::microliter",
  "units::microliter_t",
  "units::microliters",
  "units::milliliter",
  "units::milliliter_t",
  "units::milliliters",
  "units::nanoliter",
  "units::nanoliter_t",
  "units::nanoliters",
  "units::peck",
  "units::peck_t",
  "units::pecks",
  "units::pinch",
  "units::pinch_t",
  "units::pinches",
  "units::pint",
  "units::pint_t",
  "units::pints",
  "units::quart",
  "units::quart_t",
  "units::quarts",
  "units::sack",
  "units::sack_t",
  "units::sacks",
  "units::shot",
  "units::shot_t",
  "units::shots",
  "units::strike",
  "units::strike_t",
  "units::strikes",
  "units::tablespoon",
  "units::tablespoon_t",
  "units::tablespoons",
  "units::teaspoon",
  "units::teaspoon_t",
  "units::teaspoons",
]

"units_compound_type_caster.h" = [
  "units::compound_unit",
  "units::curvature_t",
  "units::inverse",
]
"units_misc_type_caster.h" = [
  "units::dimensionless",
  "units::dimensionless_t",
  "units::dimensionless::dimensionless",
  "units::dimensionless::dimensionless_t",
  "units::scalar",
  "units::scalar_t",
  "units::dimensionless::scalar",
  "units::dimensionless::scalar_t",
]

[tool.robotpy-build.wrappers."wpimath"]
depends = ["wpiutil", "wpimath_cpp"]
name = "wpimath"
extension = "_wpimath"
sources = ["wpimath/src/wpimath.cpp"]
generation_data = "gen"
generate = [
  { LinearFilter = "frc/LinearFilter.h" },
  { MathUtil = "frc/MathUtil.h" },
  { MedianFilter = "frc/MedianFilter.h" },
]

[tool.robotpy-build.wrappers."wpimath._controls"]
name = "wpimath_controls"
extension = "_controls"
sources = ["wpimath/_controls/controls.cpp"]
depends = ["wpiutil", "wpimath_cpp", "wpimath_geometry", "wpimath_kinematics"]
generation_data = "gen/controls"
generate = [
  # frc/controller
  { ArmFeedforward = "frc/controller/ArmFeedforward.h" },
  { ControlAffinePlantInversionFeedforward = "frc/controller/ControlAffinePlantInversionFeedforward.h" },
  { ElevatorFeedforward = "frc/controller/ElevatorFeedforward.h" },
  { LinearPlantInversionFeedforward = "frc/controller/LinearPlantInversionFeedforward.h" },
  { LinearQuadraticRegulator = "frc/controller/LinearQuadraticRegulator.h" },
  { SimpleMotorFeedforward = "frc/controller/SimpleMotorFeedforward.h" },
  # frc/estimator
  # { AngleStatistics = "frc/estimator/AngleStatistics.h" },
  { DifferentialDrivePoseEstimator = "frc/estimator/DifferentialDrivePoseEstimator.h" },
  { ExtendedKalmanFilter = "frc/estimator/ExtendedKalmanFilter.h" },
  { KalmanFilter = "frc/estimator/KalmanFilter.h" },
  # { KalmanFilterLatencyCompensator = "frc/estimator/KalmanFilterLatencyCompensator.h" },
  { MecanumDrivePoseEstimator = "frc/estimator/MecanumDrivePoseEstimator.h" },
  # { MerweScaledSigmaPoints = "frc/estimator/MerweScaledSigmaPoints.h" },
  { SwerveDrivePoseEstimator = "frc/estimator/SwerveDrivePoseEstimator.h" },
  # { UnscentedKalmanFilter = "frc/estimator/UnscentedKalmanFilter.h" },
  # { UnscentedTransform = "frc/estimator/UnscentedTransform.h" },
  # frc/system
  # { Discretization = "frc/system/Discretization.h" },
  { LinearSystem = "frc/system/LinearSystem.h" },
  { LinearSystemLoop = "frc/system/LinearSystemLoop.h" },
  # { NumericalJacobian = "frc/system/NumericalJacobian.h" },
  # { RungeKutta = "frc/system/RungeKutta.h" },
  # frc/system/plant
  { DCMotor = "frc/system/plant/DCMotor.h" },
  { LinearSystemId = "frc/system/plant/LinearSystemId.h" },
]

[tool.robotpy-build.wrappers."wpimath.geometry"]

name = "wpimath_geometry"
extension = "_geometry"
extra_includes = ["wpimath/geometry/include"]
sources = ["wpimath/geometry/geometry.cpp"]
depends = ["wpiutil", "wpimath_cpp"]
generation_data = "gen/geometry"
generate = [
  # frc/geometry
  { Pose2d = "frc/geometry/Pose2d.h" },
  { Rotation2d = "frc/geometry/Rotation2d.h" },
  { Transform2d = "frc/geometry/Transform2d.h" },
  { Translation2d = "frc/geometry/Translation2d.h" },
  { Twist2d = "frc/geometry/Twist2d.h" },
]


[tool.robotpy-build.wrappers."wpimath.kinematics"]

name = "wpimath_kinematics"
extension = "_kinematics"
sources = ["wpimath/kinematics/kinematics.cpp"]
depends = ["wpiutil", "wpimath_cpp", "wpimath_geometry"]
generation_data = "gen/kinematics"
generate = [
  # frc/kinematics
  { ChassisSpeeds = "frc/kinematics/ChassisSpeeds.h" },
  { DifferentialDriveKinematics = "frc/kinematics/DifferentialDriveKinematics.h" },
  { DifferentialDriveOdometry = "frc/kinematics/DifferentialDriveOdometry.h" },
  { DifferentialDriveWheelSpeeds = "frc/kinematics/DifferentialDriveWheelSpeeds.h" },
  { MecanumDriveKinematics = "frc/kinematics/MecanumDriveKinematics.h" },
  { MecanumDriveOdometry = "frc/kinematics/MecanumDriveOdometry.h" },
  { MecanumDriveWheelSpeeds = "frc/kinematics/MecanumDriveWheelSpeeds.h" },
  { SwerveDriveKinematics = "frc/kinematics/SwerveDriveKinematics.h" },
  { SwerveDriveOdometry = "frc/kinematics/SwerveDriveOdometry.h" },
  { SwerveModuleState = "frc/kinematics/SwerveModuleState.h" },
]

[tool.robotpy-build.wrappers."wpimath.spline"]

name = "wpimath_spline"
extension = "_spline"
sources = ["wpimath/spline/spline.cpp"]
depends = ["wpiutil", "wpimath_cpp", "wpimath_geometry"]
generation_data = "gen/spline"
generate = [
  # frc/spline
  { CubicHermiteSpline = "frc/spline/CubicHermiteSpline.h" },
  { QuinticHermiteSpline = "frc/spline/QuinticHermiteSpline.h" },
  { Spline = "frc/spline/Spline.h" },
  { SplineHelper = "frc/spline/SplineHelper.h" },
  { SplineParameterizer = "frc/spline/SplineParameterizer.h" },
]

[tool.robotpy-build.wrappers."wpimath.trajectory"]
name = "wpimath_trajectory"
extension = "_trajectory"
sources = ["wpimath/trajectory/trajectory.cpp"]
depends = [
  "wpiutil",
  "wpimath_cpp",
  "wpimath_controls",
  "wpimath_geometry",
  "wpimath_kinematics",
  "wpimath_spline",
]
generation_data = "gen/trajectory"
generate = [
  # frc/trajectory
  { Trajectory = "frc/trajectory/Trajectory.h" },
  { TrajectoryConfig = "frc/trajectory/TrajectoryConfig.h" },
  { TrajectoryGenerator = "frc/trajectory/TrajectoryGenerator.h" },
  { TrajectoryParameterizer = "frc/trajectory/TrajectoryParameterizer.h" },
  { TrajectoryUtil = "frc/trajectory/TrajectoryUtil.h" },
  { TrapezoidProfile = "frc/trajectory/TrapezoidProfile.h" },

  # frc/trajectory/constraint
  { CentripetalAccelerationConstraint = "frc/trajectory/constraint/CentripetalAccelerationConstraint.h" },
  { DifferentialDriveKinematicsConstraint = "frc/trajectory/constraint/DifferentialDriveKinematicsConstraint.h" },
  { DifferentialDriveVoltageConstraint = "frc/trajectory/constraint/DifferentialDriveVoltageConstraint.h" },
  { EllipticalRegionConstraint = "frc/trajectory/constraint/EllipticalRegionConstraint.h" },
  { MaxVelocityConstraint = "frc/trajectory/constraint/MaxVelocityConstraint.h" },
  { MecanumDriveKinematicsConstraint = "frc/trajectory/constraint/MecanumDriveKinematicsConstraint.h" },
  { RectangularRegionConstraint = "frc/trajectory/constraint/RectangularRegionConstraint.h" },
  { SwerveDriveKinematicsConstraint = "frc/trajectory/constraint/SwerveDriveKinematicsConstraint.h" },
  { TrajectoryConstraint = "frc/trajectory/constraint/TrajectoryConstraint.h" },
]


[tool.robotpy-build.metadata]
author = "RobotPy Development Team"
author_email = "robotpy@googlegroups.com"
description = "Binary wrapper for FRC WPIMath library"
install_requires = ["robotpy-wpiutil>=2021.2.2.0,<2022.0.0"]
license = "BSD-3-Clause"
name = "robotpy-wpimath"
url = "https://github.com/robotpy/robotpy-wpimath"
