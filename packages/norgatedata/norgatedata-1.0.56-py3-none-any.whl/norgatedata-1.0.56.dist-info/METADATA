Metadata-Version: 2.1
Name: norgatedata
Version: 1.0.56
Summary: Python interface to financial data provided by Norgate Data
Home-page: https://norgatedata.com
Author: NorgateData Pty Ltd
Author-email: support@norgatedata.com
License: EULA
Platform: UNKNOWN
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Win32 (MS Windows)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Topic :: Office/Business :: Financial :: Investment
Requires-Python: >3.5.0
Description-Content-Type: text/markdown
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: requests
Requires-Dist: logbook


![alt text](https://norgatedata.com/assets/images/norgate-data-logo-400x188.svg "Norgate Data")


Python interface to financial market data provided by [Norgate Data](https://norgatedata.com).

- [Basics](#basics)
  * [Requirements](#requirements)
  * [Installation](#installation)
  * [Upgrades](#upgrades)
  * [Usage](#usage)
- [Price Data](#price-data)
    + [Examples](#examples)
    + [Datetime formats](#datetime-formats)
    + [Dividend Notes](#dividend-notes)
- [Time Series Data](#time-series-data)
    + [Index Constituents](#index-constituents)
    + [Major Exchange Listed](#major-exchange-listed)
    + [Capital Event](#capital-event)
    + [Dividend Yield](#dividend-yield)
    + [Padding Status](#padding-status)
    + [Unadjusted Close](#unadjusted-close)
- [Single Value Data](#single-value-data)
  * [Metadata](#metadata)
    + [Security information](#security-information)
    + [Classifications](#classifications)
    + [Futures metadata](#futures-metadata)
  * [Fundamental data](#fundamental-data)
- [Security lists](#security-lists)
  * [Watchlists](#watchlists)
  * [Databases](#databases)
- [Other informational functions](#other-informational-functions)
- [Additional notes](#additional-notes)
  * [Accessing data by assetid instead of symbol](#accessing-data-by-assetid-instead-of-symbol)
  * [Error Handling](#error-handling)
  * [Multithreading / Multiprocessing compatibility](#multithreading---multiprocessing-compatibility)
- [Python Quant/Backtesting Package Integration](#python-quant-backtesting-package-integration)
  * [Zipline](#zipline)
  * [Backtrader](#backtrader)
  * [pybacktest](#pybacktest)
  * [Tensorflow](#tensorflow)
  * [Keras](#keras)
  * [More Python Quant/Backtesting/Machine Learning/Neural Network Packages](#more-python-quant-backtesting-machine-learning-neural-network-packages)
- [Support](#support)


# Basics

## Requirements

* Python 3.5+ (has been tested with 3.5, 3.6, 3.7, 3.8, 3.9)
* Microsoft Windows
* Either NumPy or Pandas
* Active [Norgate Data](https://norgatedata.com/) subscription
* Norgate Data Updater software installed and running
* Writable local user folder named .norgatedata (or defined in environment variable NORGATEDATA_ROOT)

Note: The "Norgate Data Updater" application (NDU) is a Windows-only application. NDU must be running for this Python package to work.


## Installation

```sh
pip install norgatedata
```

## Upgrades

To receive upgrades/updates

```sh
pip install norgatedata --upgrade
```

## Usage

```py
import norgatedata
```

---

# Price Data

Price data is provided in multiple formats: NumPy recarray, NumPy ndarray or Pandas DataFrame.  This is determined through the format parameter.  If not specified, the default is NumPy recarray.

Dates are determined by passing in any (or none) of the following named parameters:
```py
# start_date and end_date can be provided as a string (YYYY-MM-DD or YYYYMMDD format), 
# datetime, Pandas Timestamp, or NumPy datetime64.  All types work!
start_date = '1990-01-01'   
end_date = '2000-01-01'   # If not specified, the end date is today
limit = 50  # This provides the last X records
interval = 'D' # D=Daily, W=Weekly, M=Monthly - the date given is the last date of the interval 
```

Price & Volume adjustment allows you to adjust historical stock prices and volumes to account for the effect of capital events and dividends.  
```py
priceadjust = norgatedata.StockPriceAdjustmentType.NONE
priceadjust = norgatedata.StockPriceAdjustmentType.CAPITAL
priceadjust = norgatedata.StockPriceAdjustmentType.CAPITALSPECIAL
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN # Default

```
Date padding allows you to repeat the prior close on days where no price record would otherwise exist.
```py
padding_setting = norgatedata.PaddingType.NONE  # Default
padding_setting = norgatedata.PaddingType.ALLMARKETDAYS
padding_setting = norgatedata.PaddingType.ALLWEEKDAYS
padding_setting = norgatedata.PaddingType.ALLCALENDARDAYS
```

Columns returned include Date, Open, High, Low, and Close.    For certain instruments, additional columns are provided where applicable including: Volume (Stocks, some Indices, some Indicators, Futures), Turnover (Stocks, some Indices, some Indicators), Unadjusted Close (Stocks), Dividend (Stocks), Open Interest (Futures, ASX Exchange Traded Options), Delivery Month (Continuous Futures).

### Examples
```py
import norgatedata
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN 
padding_setting = norgatedata.PaddingType.NONE   
symbol = 'AAPL'
start_date = '1990-01-01'
timeseriesformat = 'numpy-recarray'

# Provides data on GOOG from 1990 until today in 
# a NumPy recarray format, with explicitly set stock price 
# adjustment and padding settings
pricedata_recarray = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
)

# Now in a Pandas-compatible format
import pandas as pd
timeseriesformat = 'pandas-dataframe'
start_date = pd.Timestamp('1900-01-01') # we can also provide dates as a Pandas Timestamp
pricedata_dataframe = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
)

# Weekly data instead
timeseriesformat = 'pandas-dataframe'
start_date = pd.Timestamp('1900-01-01') # we can also provide dates as a Pandas Timestamp
pricedata_dataframe = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
    interval='W'
)

# Now in a Numpy Ndarray
import numpy as np
timeseriesformat = 'numpy-ndarray'
start_date = np.datetime64('1900-01-01') # we can also provide dates as a Numpy datetime64
pricedata_ndarray = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
)

# Now limiting results to final 500 bars
pricedata_dataframe = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    limit=500,
    timeseriesformat=timeseriesformat,
)

# Now limiting results to a specific date range
end_date='1999-12-31'
pricedata_dataframe = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    end_date = end_date,
    timeseriesformat=timeseriesformat,
)

# Now using a numerical unchanging assetid instead of a symbol
timeseriesformat = 'pandas-dataframe'
assetid = 136817
pricedata_dataframe = norgatedata.price_timeseries(
    assetid,
    limit=500,
    timeseriesformat=timeseriesformat,
)
```

### Datetime formats

By default, NumPy ndarray and recarray provides datetime64 formattted as '<M8[D]' (daily dates) as timezone naive.  Pandas dataframes default to use datetime64 formattted as '[ns]' to match Pandas Timestamp, as timezone naive.

These can be altered with the following parameters:

```py
datetimeformat='<desired format>'
```
allowed values are:
* 'datetime' : Provides Python datetime.datetime objects
* 'date' : Provides Python datetime.date objects
* 'datetime64ns': Provides timezone-naive NumPy datetime64 in 'datetime64[ns]' format
* 'datetime64ms': Provides timezone-naive NumPy 'datetime64[ms]' format
* 'm8d': Provides timezone-naive NumPy datetime64 in '<M8[D]' format

```py
timezone='<desired timezone>'
```
This will allocate the dates into the timezone as shown on any of the time series functions. Times will still be shown as 00:00:00.
Accepts a string with valid timezones such as 'UTC', 'US/Eastern' etc.

### Dividend Notes

Dividends shown in the price_timeseries Dividend column depending on whether or not they have already been accounted for in the data by the "Price Adjustment" method.  
* If the data is adjusted for capital reconstructions only, then the sum of both special and ordinary dividends for that day are shown.  
* If the data is adjusted for capital reconstructions and special dividends, then only the sum of ordinary dividends for that day are shown. 
* If the data is adjusted for capital reconstructions, special dividends and ordinary dividends, then no information is shown.  

Dividend/Distribution information is shown as of the day before the ex-date - i.e. if you are holding the security at the close, you will be entitled to the dividend/distribution.

---

# Time Series Data

###  Index Constituents

To determine whether a stock was an index constituent on a particular date, you can use the index constituent timeseries function.  You can also pass in an existing
NumPy ndarray or Pandas Dataframe and a new column will be added and returned

```py
symbol = 'AAPL'
indexname = 'Russell 3000'
indexname = 'S&P 500'  # Can also be an index symbol, such as $SPX, $RUI etc.

idx = norgatedata.index_constituent_timeseries(
    symbol,
    indexname,
    timeseriesformat = "numpy-recarray",
)

idx = norgatedata.index_constituent_timeseries(
    symbol,
    indexname,
    padding_setting = padding_setting,
    start_date = start_date,
    limit = -1,
    timeseriesformat  = "numpy-ndarray",
)

idx = norgatedata.index_constituent_timeseries(
    symbol,
    indexname,
    padding_setting = padding_setting,
    start_date = start_date,
    limit = -1,
    timeseriesformat  = "pandas-dataframe",
)

# Let's pass in data from a recarray for TWTR

import norgatedata
import pandas as pd
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN
padding_setting = norgatedata.PaddingType.NONE
symbol='TWTR'
timeseriesformat = 'numpy-recarray'
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN
padding_setting = norgatedata.PaddingType.NONE
pricedata_recarray = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    timeseriesformat = timeseriesformat,
)

# and now make the call to index_constituent_timeseries
pricedata_recarray2 = norgatedata.index_constituent_timeseries(
    symbol,
    indexname,
    padding_setting = padding_setting,
    limit = -1,
    numpy_recarray = pricedata_recarray,
    timeseriesformat = timeseriesformat,
)

# Alternative using pandas dataframes instead:

import norgatedata
import pandas as pd
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN
padding_setting = norgatedata.PaddingType.NONE
symbol='TWTR'
timeseriesformat = 'pandas-dataframe'
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN
padding_setting = norgatedata.PaddingType.NONE
pricedata_df = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    timeseriesformat = timeseriesformat,
)

# and now make the call to index_constituent_timeseries
pricedata_df2 = norgatedata.index_constituent_timeseries(
    symbol,
    indexname,
    padding_setting = padding_setting,
    limit = -1,
    pandas_dataframe = pricedata_df,
    timeseriesformat = timeseriesformat,
)

```

### Major Exchange Listed

```py
majexch = norgatedata.major_exchange_listed_timeseries(
    symbol,
    timeseriesformat = "numpy-recarray")
```

Provides indication about US stocks on whether they are listed on a major exchange (e.g. NYSE, Nasdaq, NYSE American, NYSE Arca, Cboe BZX, IEX) (value = 1) or as an OTC/Pink Sheet stock (value = 0) for each trading date is available for all Equities and ETPs.

Note:  Data is only available for this item from 2000 onwards.

### Capital Event

```py
capevent = norgatedata.capital_event_timeseries(
    symbol,
    timeseriesformat = "numpy-recarray")
```

This indicator will show when a capital event occurred. Effective on holding the security at the close on the day prior to the ex-date. Events include splits, reverse splits, bonus issues, stock dividends (dividends paid as stock) and complex reorganizations of capital (value = 1, otherwise if there is no event, value = 0)


### Dividend Yield

```py
divyield = norgatedata.dividend_yield_timeseries(
    symbol,
    timeseriesformat = "numpy-recarray",
)
```

This indicator uses a trailing 12 month sum of all split-adjusted ordinary dividends and is calculated daily against the close price. New dividends are incorporated on the entitlement date (the trading day prior to the ex-dividend date) after which the trailing 12 month sum of dividends is recalculated. Special dividends, distributions and spin-offs are not included. The lookback period is adaptive to take into account slight variations in ex-dividend dates from year-to-year.

### Padding Status

```py
paddingstatus = norgatedata.padding_status_timeseries(
    symbol,
    timeseriesformat = "numpy-recarray",
)
```

This indicator will show when a price record has been padded in accordance with the Date Padding setting. If the Date Padding is set to "No padding" then this indicator will not return any values.


### Unadjusted Close

This is not normally needed, as Unadjusted Close is provided in the price timeseries.  
It is provided here to be used as a helper routine for other Python libraries such
as zipline-norgatedata.

```py
unadjclose = norgatedata.unadjusted_close_timeseries(
    symbol,
    timeseriesformat = "numpy-recarray",
)
```

---

# Single Value Data

## Metadata

### Security information

#### Assetid / Symbol Translation

```py
symbol = 'AMZN'
assetid = norgatedata.assetid(symbol)
```

Provides a unique unchanging ID generated by Norgate.

```py
assetid = 129769 
symbol = norgatedata.symbol(assetid)
```

Translates assetid to the current symbol.

#### Domicile

```py
domicile = norgatedata.domicile(symbol)
```

Provides the country code for the domicile of the company.

#### Currency

```py
currency = norgatedata.currency(symbol)
```

Currency that the security trades in.

#### Short Exchange Name

```py
exchange_name = norgatedata.exchange_name(symbol)
```

Short name of the exchange for the security (e.g. NYSE, Nasdaq, NYSE Arca, NYSE American, ASX etc.)

#### Full Exchange Name

```py
exchange_name_full = norgatedata.exchange_name_full(symbol)
```

Provides long name of the exchange (e.g. New York Stock Exchange, Australian Securities Exchange etc.)

#### Security Name

```py
security_name = norgatedata.security_name(symbol)
```
Provides the name of the security.  e.g. GE would return General Electric Co Common.

#### Base Type

```py
base_type = norgatedata.base_type(symbol)
```

Provides the base type of a security.    Values include Stock Market, Futures Market, Commodity Cash & Forwards, Foreign Exchange, Economic.

#### Subtype1

```py
subtype1 = norgatedata.subtype1(symbol)
```

Provides subtype1 of the security.    Values include Equity, Hybrid, Derivative, Debt, Exchange Traded Product, Business Activity, Employment, Prices, Money, National Accounts, Index, Currency Cross, Bullion Cross, Cryptocurrency.

#### Subtype2

```py
subtype2 = norgatedata.subtype2(symbol)
```

Provides subtype2 of the security. Values include Operating/Holding Company, Investment Company, Special Purpose Company, Exchange Traded Note, Structured Product, Exchange Traded Fund, Exchange Traded Managed Fund, Third Party Trust Preferred, Corporate Unit, Convertible Corporate Unit, Convertible Preferred, Preferred, Convertible Debt, Exchange Traded Option, Right, Company Option, Warrant, Senior Debt, Junior Debt, Coin, Token.

#### Subtype3

```py
subtype3 = norgatedata.subtype3(symbol)
```

Provides subtype3 of the security.   Values include Master Limited Partnership, Royalty Trust, Infrastructure Fund, Closed End Fund, Other Listed Managed Investment, Business Development Company/Pooled Development Fund, Other Listed Investment Vehicle, Absolute Return Fund, Equity Unit, Right, Contingent Value Right, Litigation Trust, Liquidation Trust, Special Purpose Acquisition Company.

#### Financial Summary

```py
financial_summary = norgatedata.financial_summary(symbol)
```

Provides a few paragraphs summarising the current financial status of the company.

#### Business Summary

```py
business_summary = norgatedata.business_summary(symbol)
```

Provides a few paragraphs summarising the operations of the company.

#### First Quoted Date


```py
first_quoted_date = norgatedata.first_quoted_date(symbol)
first_quoted_date = norgatedata.first_quoted_date(symbol,datetimeformat = 'iso')
first_quoted_date = norgatedata.first_quoted_date(symbol,datetimeformat = 'pandas-timestamp')
first_quoted_date = norgatedata.first_quoted_date(symbol,datetimeformat = 'numpy-datetime64')
first_quoted_date = norgatedata.first_quoted_date(symbol,datetimeformat = 'datetime')
```

Provides a date for the first day the security traded.By default the datetimeformat is an ISO string (YYYY-MM-DD), but you can also specify other formats too.


#### Last Quoted Date

```py
last_quoted_date = norgatedata.last_quoted_date(symbol)
last_quoted_date = norgatedata.last_quoted_date(symbol,datetimeformat = 'iso')
last_quoted_date = norgatedata.last_quoted_date(symbol,datetimeformat = 'pandas-timestamp')
last_quoted_date = norgatedata.last_quoted_date(symbol,datetimeformat = 'numpy-datetime64')
last_quoted_date = norgatedata.last_quoted_date(symbol,datetimeformat = 'datetime')
```

Provides a date for the last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the final day of trading.  By default the format is an ISO string (YYYY-MM-DD), but you can also specify other formats too.
Will provide None if there is no last quoted date.

#### Second Last Quoted Date

```py
second_last_quoted_date = norgatedata.second_last_quoted_date(symbol)
second_last_quoted_date = norgatedata.second_last_quoted_date(symbol,datetimeformat = 'iso')
second_last_quoted_date = norgatedata.second_last_quoted_date(symbol,datetimeformat = 'pandas-timestamp')
second_last_quoted_date = norgatedata.second_last_quoted_date(symbol,datetimeformat = 'numpy-datetime64')
second_last_quoted_date = norgatedata.second_last_quoted_date(symbol,datetimeformat = 'datetime')
```

Provides a date for the second last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the trading day prior to the last quoted day.
Will provide None if there is no last quoted date.

### Classifications

Mechanisms are provided to obtain the most detailed classification, classification at a level and an industry index that corresponds to the given symbol.


#### Classification

```py
schemename = 'NorgateDataFuturesClassification'
schemename = 'TRBC'
schemename = 'GICS'
classificationresulttype = 'ClassificationId'
classificationresulttype = 'Name'
classification = norgatedata.classification(
    symbol,
    schemename,
    classificationresulttype,
)
```

Provides the classification for a given security as a string.    Returns None if there is no classification available.

#### Classification At Level

```py
schemename = 'TRBC'
schemename = 'GICS'
classificationresulttype = 'ClassificationId'
classificationresulttype = 'Name'
level = 1
level = 4
classificationatlevel = norgatedata.classification_at_level(
    symbol,
    schemename,
    classificationresulttype,
    level,
)
```

Provides the classification for a given security, at a given level of the classification scheme as a string.  Returns None if there is no classification available.

#### Corresponding Industry Index


```py
symbol='GE'
indexfamilycode = '$SPX'
indexfamilycode = '$SP1500'
level = 3
indexreturntype = 'PR'
indexreturntype = 'TR'
indexsymbol = norgatedata.corresponding_industry_index(
    symbol,
    indexfamilycode,
    level,
    indexreturntype,
)
```

Provides the symbol of a corresponding index, at a given level of the classification scheme.  Returns None if there is no classification for the current symbol or no currently-trading index that matches.

#### Shares Outstanding / Shares Float


```py
symbol='GE'
sharesout,sharesoutdate = norgatedata.sharesoutstanding(symbol)
sharesout,sharesoutdate = norgatedata.sharesoutstanding(symbol,datetimeformat = 'iso')
sharesout,sharesoutdate = norgatedata.sharesoutstanding(symbol,datetimeformat = 'pandas-timestamp')
sharesout,sharesoutdate = norgatedata.sharesoutstanding(symbol,datetimeformat = 'numpy-datetime64')
sharesout,sharesoutdate = norgatedata.sharesoutstanding(symbol,datetimeformat = 'datetime')
```

Provides the number of shares outstanding and date on which this was last modified for a given security.  By default, the date is provided as a string in YYYY-MM-DD format, but other date formats can be specified.


```py
symbol='GE'
sharesfloat,sharesfloatdate = norgatedata.sharesfloat(symbol)
sharesfloat,sharesfloatdate = norgatedata.sharesfloat(symbol,datetimeformat = 'iso')
sharesfloat,sharesfloatdate = norgatedata.sharesfloat(symbol,datetimeformat = 'pandas-timestamp')
sharesfloat,sharesfloatdate = norgatedata.sharesfloat(symbol,datetimeformat = 'numpy-datetime64')
sharesfloat,sharesfloatdate = norgatedata.sharesfloat(symbol,datetimeformat = 'datetime')
```

Provides the number of free float shares and date on which this was last modified for a given security.  By default, the date is provided as a string in YYYY-MM-DD format, but other date formats can be specified.

### Futures metadata

#### Tick size 

Provides the current tick value (i.e. the change in value of one contract for a single tick that the futures contract moves.) for a given market.

```py
symbol='CL-2017X'
tick_size = norgatedata.tick_size(symbol)
```

#### Point Value


```py
symbol='CL-2017X'
point_value = norgatedata.point_value(symbol)
```

Provides the point value (i.e. the change in value of one contract for whole point that the futures contract moves.) for a given futures market.

#### Margin

```py
symbol='CL-2017X'
margin = norgatedata.margin(symbol)
```

Provides the current margin for a given futures contract, futures market session symbol or futures market symbol.

#### First Notice Date

```py
symbol='CL-2017X'
first_notice_date = norgatedata.first_notice_date(symbol)
first_notice_date = norgatedata.first_notice_date(symbol,datetimeformat = 'iso')
first_notice_date = norgatedata.first_notice_date(symbol,datetimeformat = 'pandas-timestamp')
first_notice_date = norgatedata.first_notice_date(symbol,datetimeformat = 'numpy-datetime64')
first_notice_date = norgatedata.first_notice_date(symbol,datetimeformat = 'datetime')
```

For deliverable commodity contracts that permit delivery prior to the end of trading, this is the first date that delivery notices can be provided for a given futures contract.
For futures contracts that are not deliverable (or only deliverable at the end of trading) then None is provided.

#### Lowest Ever Tick Size

```py
symbol='CL-2017X'
lowest_ever_tick_size = norgatedata.lowest_ever_tick_size(symbol)
```

Provides the lowest ever tick size for a given futures market.  

#### Session Type

```py
symbol='FDAX-2019Z'
sessiontype = norgatedata.session_type(symbol)
# Returns "Electronic"

symbol='FDAX9-2019Z'
sessiontype = norgatedata.session_type(symbol)
# Returns "Electronic (Last)"

session_symbol='FDAX9'
sessiontype = norgatedata.session_type(session_symbol)
# Returns "Electronic (Last)"
```

Returns the session type for a given symbol or session symbol.


#### Market Name

```py
market_symbol='CL'
marketname = norgatedata.futures_market_name(market_symbol)
# Returns "Crude Oil"
```

Provides the name of the futures market

#### Futures Market Session Name

```py
session_symbol='FDAX9'
session_name = norgatedata.futures_market_session_name(session_symbol)
# Returns "DAX (L)"
```

Provides the name of the futures market session

#### Futures Market Session Symbol

```py
symbol='FDAX9-2020Z'
session_symbol = norgatedata.futures_market_session_symbol(symbol)
# Returns "FDAX9"
```

Provides the session symbol for a given futures contract

#### Futures Market Symbol

```py
symbol='FDAX9-2020Z'
session_symbol = norgatedata.futures_market_symbol(symbol)
# Returns "FDAX"
```

Provides the market symbol for a given futures contract.

#### Futures Market Session Contracts

```py
session_symbol='FDAX9'
session_symbol = norgatedata.futures_market_session_contracts(session_symbol)
# Returns a list ['FDAX9-2005Z', 'FDAX9-2006H', ..., 'FDAX9-2021M']
```

Provides all contracts (active and expired) for a given futures session symbol.


#### Futures Market Symbols

```py
market_symbols = norgatedata.futures_market_symbols()
# Returns a list ['6A', '6B', ... 'FCE', 'FDAX', 'FESX', 'FGBL',  ... 'ZT', 'ZW']'
```

Provides a list of all futures market symbols.

#### Futures Market Session Symbols

```py
session_symbols = norgatedata.futures_market_session_symbols()
# Returns a list ['6A', '6B', ... 'FCE', 'FDAX', 'FDAX9', 'FESX', 'FEX9', 'FGBL',  ...  'ZT', 'ZW']'
```

Provides a list of all futures market session symbols.




#### Notes

Note:  For all futures metadata the "symbol" can be individual futures contract, a continuous contract symbol, the futures market session symbol or the futures market symbol.  (e.g. FDAX9-2019Z, &FDAX9, FDAX9, FDAX respectively).  The only exception to this is any date-related metadata, which can only be performed on the individual futures contract.  



## Fundamental data

```py
symbol = 'GE'
# A selection of field examples - many more are available
fieldname = 'mktcap'
fieldname = 'ttmepsxlcx'
fieldname = 'peexclxor'
fieldname = 'projepsq'
fieldname = 'sharesoutstanding'
fieldname = 'sharesfloat'
fundavalue,fundadate = norgatedata.fundamental(symbol,fieldname)
fundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,datetimeformat = 'iso')
fundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,datetimeformat = 'pandas-timestamp')
fundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,datetimeformat = 'numpy-datetime64')
fundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,datetimeformat = 'datetime')

```

Provides the [current fundamentals](https://norgatedata.com/data-content-tables.php#current-fundamentals)

Returns the field and the date applicable to the field (e.g. the last day of the quarter to which it applies, or for current ratios the most recent date of change).  By default, the date is provided as a string in YYYY-MM-DD format, but other date formats can be specified.

Returns None,None if the fieldname is not available for that security.

---

# Security lists

## Watchlists

Python can retrieve the contents of any watchlist that exists in [NDU's WatchList Library](https://norgatedata.com/ndu-watchlist-library.php)

When you create a watchlist, you can make it as broad or narrow as you like. To have a dynamic watchlist for the entire "Stock Market", don't apply any filters.

The symbols of a watchlist can be retrieved into a Python list using the watchlist_symbols() and watchlist() functions.  

#### Watchlist Symbols

```py
watchlistname = 'S&P 500'
symbols = norgatedata.watchlist_symbols(watchlistname)

watchlistname = 'Russell 3000 Current & Past'
symbols = norgatedata.watchlist_symbols(watchlistname)
```

#### Watchlist Securities


If you want the symbol, assetid and name of each security, use the watchlist function

```py
watchlistname = 'Russell 3000 Current & Past'
wlcontents = norgatedata.watchlist(watchlistname)
````

#### Available Watchlists

To retrieve the names of all of the watchlists within Norgate Data's watchlist library, use  the watchlists() function

```py
allwatchlistnames = norgatedata.watchlists()
```

## Databases

Python can retrieve the contents of any database available in a subscription. You can see which databases are available by opening NDU and clicking on the "Database" tab.

As an example, a subscriber to US Stocks at the Platinum level should see the following databases in the "Database List":
'US Equities', 'US Equities Delisted', 'US Indices', 'World Indices','Economic', 'Forex Spot', and 'Futures Continuous'.

#### Database Symbols

```py
databasename = 'US Equities'
symbols = norgatedata.database_symbols(databasename)

databasename = 'World Indices'
symbols = norgatedata.database_symbols(databasename)
```

#### Database Securities

If you want the symbol, assetid and name of each security provided, use the database function:

```py
databasename = 'AU Equities'
databasecontents = norgatedata.database(databasename)
````

#### Available Databases

To retrieve the names of all available databases, use the databases() function.

```py
alldatabasenames = norgatedata.databases()
```

## Futures Symbols

See Futures Market Symbols and Futures Market Session Symbols above.

---

# Other informational functions

* norgatedata.last_database_update_time(database) - returns a datetime object when information was updated for a given database, where database is the shortened form for each database.  Database names include au, aueto, auwarrant, auindex, ca, caindex, us, usindex, cashcommodity, economic, future, forex, contfuture, worldindex

* norgatedata.last_price_update_time(symbol) datetime when price was last updated for the given symbol

* norgatedata.status() - shows whether NDU is running (returns True if running, or False if not)

---

# Additional notes

## Accessing data by assetid instead of symbol

Instead of using a security's symbol, you can obtain its unique Norgate-provided identity known as assetid.  This is an unchanging number and is therefore useful when storing positions/orders into data files where the symbol may change in the future.

All of the calls above that reference 'symbol' (as a string) can also take an assetid (as an integer).  For example, symbol MSFT = assetid 134016.  symbol AMZN = assetid 129769.

## Error Handling

If an invalid symbol or invalid parameters are specified, then the ValueError exception will be raised.

The logger module will also output human-interpretable detail relating to the error.

If there is no data available (for example, a informational or fundamental field that is not reported for that company), then None is returned, except in the case where multiple values are expected eg. (None, None).

## Multithreading / Multiprocessing compatibility

The norgatedata package is compatible with multithreading and multiprocessing libraries/packages, to take advantage of multiple CPU cores.  This can result in a significant reduction in runtime by running operations in parallel, depending upon workload.

---

# Python Quant/Backtesting Package Integration

All of the routines developed in this module provide the data that can be used for backtesting/scanning of data.  There are many backtesting packages developed that use Python.  In this section, we provide more information about how to use with popular backtesting python packages with sample code and/or links to Norgate-developed integration packages.

## Zipline

The package: [zipline-norgatedata](https://pypi.org/project/zipline-norgatedata/) provides a tight integration between [Zipline](https://zipline.io/) and [Norgate Data](https://norgatedata.com/)

Key Features

* Survivorship bias-free bundles
* Incorporates time series data such as historical index membership and dividend yield into Zipline's Pipeline mechanism
* No modifications to the Zipline code base (except to fix problems with installation and obsolete calls that crash Zipline)
* Simple bundle creation
* Easy ingestion of equities data into Zipline with a simple list of symbols you want to incorporate and/or import your own symbol lists and/or use pre-built or user-created watchlists from Norgate Data
* Easy ingestion of futures data into Zipline with a simple list of symbols you want to incorporate, futures market sessions you want to incorporate,  and/or use pre-built or user-created watchlists from Norgate Data

## Backtrader

[Backtrader](https://www.backtrader.com/) is a Python framework for backtesting and trading.

To create a "data feed" of a given symbol:

```py
import backtrader as bt
import norgatedata

# ... your code here ...
cerebro = bt.Cerebro()  # create a "Cerebro" engine instance
# ... your code here ...

# Obtain a Pandas dataframe for a given security from Norgate Data
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN 
padding_setting = norgatedata.PaddingType.NONE   
symbol = 'AAPL'
start_date = '2010-01-01'
timeseriesformat = 'pandas-dataframe'
pricedata_dataframe = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
)

# Rename columns to suit Backtrader
pricedata_dataframe.rename(
    columns={ 'Open':'open',  'High':'high', 'Low':'low', 'Close':'close', 'Volume':'volume', 'Open Interest':'open interest'},
    inplace=True)

# Backtrader can convert this dataframe into its own internal format with:
data = bt.feeds.PandasData(dataname=pricedata_dataframe)
cerebro.adddata(data)  # Add the data feed
# ... your code here ...

```


## pybacktest

[pybacktest](https://github.com/ematvey/pybacktest) is a backesting package for simple backtests against a single security.  It is no longer maintained by its author but it is still functional.

Pre-requisites:
* Python 3.5-3.9
* [Git](https://git-scm.com/downloads)
* Virtual Environment (e.g. Anaconda)

Here's how we installed it:

Install the 64 bit [MiniConda](https://docs.conda.io/en/latest/miniconda.html) or [Anaconda Distribution](https://www.anaconda.com/distribution/).

Install the 64 bit version of [Git](https://git-scm.com/downloads) and used all default options at install time.

Start an Anaconda (base) prompt, create an environment and install the appropriate versions of packages as follows:

````
conda create -n pybacktest39 python=3.9
conda activate pybacktest39
pip install git+https://github.com/ematvey/pybacktest.git
pip install pandas_datareader
pip install norgatedata
````

Here's a sample piece of code that uses data from Norgate data.


```py
import norgatedata
import pybacktest
import pandas

# Obtain data from Norgate Data first, in Pandas dataframe format
priceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN 
padding_setting = norgatedata.PaddingType.NONE   
symbol = 'AAPL'
start_date = '2010-01-01'
timeseriesformat = 'pandas-dataframe'
ohlc = norgatedata.price_timeseries(
    symbol,
    stock_price_adjustment_setting = priceadjust,
    padding_setting = padding_setting,
    start_date = start_date,
    timeseriesformat=timeseriesformat,
)

# Change column names
ohlc.rename(
    columns={'Open':'O', 'High':'H', 'Low':'L', 'Close':'C', 'Volume':'V'},
    inplace=True)

# sample pybacktest code:
ms = ohlc.C.rolling(50).mean()
ml = ohlc.L.rolling(100).mean()
buy = cover = (ms > ml) & (ms.shift() < ml.shift())
sell = short = (ms < ml) & (ms.shift() > ml.shift())

backtestresults = pybacktest.Backtest(locals())
```

## Tensorflow

[Tensorflow](https://www.tensorflow.org)

Use the convert_to_tensor() function to convert a Numpy Array for use with the [TensorFlow machine learning platform](https://www.tensorflow.org)

Also: [TF Quant Finance](https://github.com/google/tf-quant-finance)

##  Keras

[Keras](https://keras.io/)

Use the tensorflow.keras.backend.variable() to convert a Numpy Array for use with the [Keras deep learning library](https://keras.io)

## More Python Quant/Backtesting/Machine Learning/Neural Network Packages

Here is a list of Python packages that might be worthwhile examining to incoroporate data from Norgate Data.  Some of these might be abandonware too.  Let us know if there's more worthy of integration.

* [AlephNull](https://github.com/CarterBain/AlephNull)
* [alphatools](https://github.com/marketneutral/alphatools)
* [analzyer](https://github.com/llazzaro/analyzer) - fork of Ultrafinance
* [atspy](https://github.com/firmai/atspy)
* [Auquan Toolbox](https://bitbucket.org/auquan/auquantoolbox/wiki/Home)
* [backtesting](https://kernc.github.io/backtesting.py/)
* [bt](http://pmorissette.github.io/bt/index.html)
* [bulbea](https://github.com/achillesrasquinha/bulbea)
* [DX Analytics](https://dx-analytics.com/)
* [EliteQuant_Python](https://github.com/EliteQuant/EliteQuant_Python)
* [empyrical](https://github.com/quantopian/empyrical)
* [finmarketpy](https://github.com/cuemacro/finmarketpy) possibly by extending https://github.com/cuemacro/findatapy
* [ibridgepy](http://www.ibridgepy.com/)
* [Lean](https://github.com/QuantConnect/Lean)
* [mfinlab](https://github.com/hudson-and-thames/mlfinlab)
* [pandas-ta](https://github.com/twopirllc/pandas-ta)
* [pandas-talib](https://github.com/femtotrader/pandas_talib)
* [Performance Analytics](https://pypi.org/project/PerformanceAnalytics/) - port of the R
* [Pinkfish](http://fja05680.github.io/pinkfish/)
* [presso](https://github.com/wynfred/presso)
* [ProfitPy](https://code.google.com/archive/p/profitpy/)
* [Prophet](https://github.com/Emsu/prophet)
* [PyAlgoTrade](https://github.com/gbeced/pyalgotrade)
* [Pyfolio](https://github.com/quantopian/pyfolio)
* [PyThalesians](http://www.thalesians.com/finance/index.php/PyThalesians)
* [pyti](https://github.com/kylejusticemagnuson/pyti)
* [pyqstrat](https://pypi.org/project/pyqstrat/)
* [pysystemtrade](https://github.com/robcarver17/pysystemtrade)
* [QSForex](https://github.com/mhallsmoore/qsforex)
* [QSTrader](https://github.com/mhallsmoore/qstrader/)
* [QTPyLib](https://github.com/ranaroussi/qtpylib)
* [quant](https://github.com/maihde/quant)
* [QuantSoftware Toolkit](https://github.com/QuantSoftware/QuantSoftwareToolkit)
* [Quantdom](https://github.com/constverum/Quantdom)
* [Quantib](https://www.quantlib.org/)
* [RQalpha](https://github.com/ricequant/rqalpha)
* [sktime](https://github.com/alan-turing-institute/sktime)
* [stock_backtester](https://github.com/mtqwerty/stock_backtester)
* [ta](https://github.com/bukosabino/ta)
* [ta_backtest](https://github.com/benyblack/ta_backtest)
* [TA-Lib](https://github.com/mrjbq7/ta-lib)
* [talib](https://pypi.org/project/TA-Lib/)
* [tia: Toolkit for integration and analysis](https://github.com/bpsmith/tia)
* [tslearn](https://github.com/tslearn-team/tslearn)
* [Trading with Python](http://www.tradingwithpython.com/)
* [Ultra-Finance](https://github.com/panpanpandas/ultrafinance) - Also see analyzer above
* [vector-bt](https://github.com/polakowo/vectorbt)
* [visualize-wealth](https://github.com/benjaminmgross/visualize-wealth)

---

# Support

[Norgate Data support](https://norgatedata.com/contact.php)



