# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pypolsar',
 'pypolsar.filters',
 'pypolsar.geo',
 'pypolsar.io',
 'pypolsar.io.project',
 'pypolsar.io.rat',
 'pypolsar.misc',
 'pypolsar.opertaions',
 'pypolsar.plot',
 'pypolsar.polsar',
 'pypolsar.polsar.calibration',
 'pypolsar.polsar.classification',
 'pypolsar.polsar.decomposition',
 'pypolsar.polsar.filters',
 'pypolsar.polsar.parameters',
 'pypolsar.stats',
 'pypolsar.utils']

package_data = \
{'': ['*']}

install_requires = \
['cython>=0.29.21,<0.30.0',
 'h5py>=2.10.0,<3.0.0',
 'mako>=1.1.3,<2.0.0',
 'matplotlib>=3.3.2,<4.0.0',
 'numba>=0.51.2,<0.52.0',
 'numpy>=1.19.2,<2.0.0',
 'pillow>=7.2.0,<8.0.0',
 'pre-commit>=2.5.1,<3.0.0',
 'readline>=6.2.4,<7.0.0',
 'rich>=2.2.2,<3.0.0',
 'scikit-image>=0.17.2,<0.18.0',
 'scipy>=1.5.2,<2.0.0',
 'seaborn>=0.11.0,<0.12.0',
 'typer[all]>=0.2.1,<0.3.0',
 'xarray>=0.16.0,<0.17.0']

extras_require = \
{':python_version < "3.8"': ['importlib_metadata>=1.6.0,<2.0.0']}

entry_points = \
{'console_scripts': ['pypolsar = pypolsar.__main__:app']}

setup_kwargs = {
    'name': 'pypolsar',
    'version': '2.1.0',
    'description': 'PyPolSAR is a python module for Polarimetric Synthetic Aperture Radar (PolSAR) data processing.',
    'long_description': '# PyPolSAR\n\n<div align="center">\n\n[![Build status](https://github.com/IslamAlam/pypolsar/workflows/build/badge.svg?branch=master&event=push)](https://github.com/IslamAlam/pypolsar/actions?query=workflow%3Abuild)\n[![Python Version](https://img.shields.io/pypi/pyversions/pypolsar.svg)](https://pypi.org/project/pypolsar/)\n[![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/IslamAlam/pypolsar/pulls?utf8=%E2%9C%93&q=is%3Apr%20author%3Aapp%2Fdependabot)\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Security: bandit](https://img.shields.io/badge/security-bandit-green.svg)](https://github.com/PyCQA/bandit)\n[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/IslamAlam/pypolsar/blob/master/.pre-commit-config.yaml)\n[![Semantic Versions](https://img.shields.io/badge/%F0%9F%9A%80-semantic%20versions-informational.svg)](https://github.com/IslamAlam/pypolsar/releases)\n[![License](https://img.shields.io/github/license/IslamAlam/pypolsar)](https://github.com/IslamAlam/pypolsar/blob/master/LICENSE)\n\nPyPolSAR is a python module for Polarimetric Synthetic Aperture Radar (PolSAR) data processing.\n</div>\n\nDocumentation & Software Citation\n\nTo see the latest full documentation click on [here](https://pypolsar.readthedocs.io/en/latest/).\n\nIf you use the software in a publication then please cite it using the Zenodo DOI. Be aware that this badge links to the latest package version.\n\nPlease select your specific version at [to do in future] to get the DOI of that version. You should normally always use the DOI for the specific version of your record in citations. This is to ensure that other researchers can access the exact research artefact you used for reproducibility.\n\nYou can find additional information regarding DOI versioning at http://help.zenodo.org/#versioning\n\nInstallation\nThis package should be installable through pip which downloads the package from the python package repository Pypi. However, pypolsar also needs some packages that depend on C or Fortran libraries (like netCDF4). They should be installed first with conda. See http://conda.pydata.org/docs/ on how to use it. We recommend using either Anaconda or Miniconda.\n\n```bash\nconda install -c conda-forge numpy scipy pandas netCDF4 cython libgdal gdal\n```\nAfterwards pypolsar can be installed via pip.\n\n```bash\n pip install pypolsar\n```    \nYou can also install all needed (conda and pip) dependencies at once using the following commands after cloning this repository. This is recommended for developers of the package. Note that the git --recursive flag will clone test-data, which is needed by some tests.\n\n```bash\ngit clone https://github.com/IslamAlam/pypolsar.git --recursive\ncd pypolsar\nconda create -n pypolsar python=3.6 # or any supported python version\nsource activate pypolsar\nconda update -f environment.yml -n pypolsar\npython setup.py develop\n```\n\n\n### Initial setting up\n\n- Set up [Dependabot](https://docs.github.com/en/github/administering-a-repository/enabling-and-disabling-version-updates#enabling-github-dependabot-version-updates) to ensure you have the latest dependencies.\n- Set up [Stale bot](https://github.com/apps/stale) for automatic issue closing.\n\n### Poetry\n\nAll manipulations with dependencies are executed through Poetry. If you\'re new to it, look through [the documentation](https://python-poetry.org/docs/).\n\n<details>\n<summary>Notes about Poetry</summary>\n<p>\n\nPoetry\'s [commands](https://python-poetry.org/docs/cli/#commands) are very intuitive and easy to learn, like:\n\n- `poetry add numpy`\n- `poetry run pytest`\n- `poetry build`\n- etc\n\n</p>\n</details>\n\n### Building your package\n\nBuilding a new version of the application contains steps:\n\n- Bump the version of your package `poetry version <version>`. You can pass the new version explicitly, or a rule such as `major`, `minor`, or `patch`. For more details, refer to the [Semantic Versions](https://semver.org/) standard.\n- Make a commit to `GitHub`.\n- Create a `GitHub release`.\n- And... publish 🙂 `poetry publish --build`\n\n## What\'s next\n\nWell, that\'s up to you. I can only recommend the packages and articles that helped me.\n\nPackages:\n\n- [`Typer`](https://github.com/tiangolo/typer) is great for creating CLI applications.\n- [`Rich`](https://github.com/willmcgugan/rich) makes it easy to add beautiful formatting in the terminal.\n- [`FastAPI`](https://github.com/tiangolo/fastapi) is a type-driven asynchronous web framework.\n- [`IceCream`](https://github.com/gruns/icecream) is a little library for sweet and creamy debugging\n\nArticles:\n\n- [Open Source Guides](https://opensource.guide/)\n- [GitHub Actions Documentation](https://help.github.com/en/actions)\n- Maybe you would like to add [gitmoji](https://gitmoji.carloscuesta.me/) to commit names. This is really funny. 😄\n\n## 🚀 Features\n\nFor your development we\'ve prepared:\n\n- Supports for `Python 3.7` and higher.\n- [`Poetry`](https://python-poetry.org/) as the dependencies manager. See configuration in [`pyproject.toml`](https://github.com/IslamAlam/pypolsar/blob/master/pyproject.toml) and [`setup.cfg`](https://github.com/IslamAlam/pypolsar/blob/master/setup.cfg).\n- Power of [`black`](https://github.com/psf/black), [`isort`](https://github.com/timothycrosley/isort) and [`pyupgrade`](https://github.com/asottile/pyupgrade) formatters.\n- Ready-to-use [`pre-commit`](https://pre-commit.com/) hooks with formatters above.\n- Type checks with the configured [`mypy`](https://mypy.readthedocs.io).\n- Testing with [`pytest`](https://docs.pytest.org/en/latest/).\n- Docstring checks with [`darglint`](https://github.com/terrencepreilly/darglint).\n- Security checks with [`safety`](https://github.com/pyupio/safety) and [`bandit`](https://github.com/PyCQA/bandit).\n- Well-made [`.editorconfig`](https://github.com/IslamAlam/pypolsar/blob/master/.editorconfig), [`.dockerignore`](https://github.com/IslamAlam/pypolsar/blob/master/.dockerignore), and [`.gitignore`](https://github.com/IslamAlam/pypolsar/blob/master/.gitignore). You don\'t have to worry about those things.\n\nFor building and deployment:\n\n- `GitHub` integration.\n- [`Makefile`](https://github.com/IslamAlam/pypolsar/blob/master/Makefile#L89) for building routines. Everything is already set up for security checks, codestyle checks, code formatting, testing, linting, docker builds, etc. More details at [Makefile summary](#makefile-usage)).\n- [Dockerfile](https://github.com/IslamAlam/pypolsar/blob/master/docker/Dockerfile) for your package.\n- `Github Actions` with predefined [build workflow](https://github.com/IslamAlam/pypolsar/blob/master/.github/workflows/build.yml) as the default CI/CD.\n- Always up-to-date dependencies with [`@dependabot`](https://dependabot.com/) (You will only [enable it](https://docs.github.com/en/github/administering-a-repository/enabling-and-disabling-version-updates#enabling-github-dependabot-version-updates)).\n- Automatic drafts of new releases with [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). It creates a list of changes based on labels in merged `Pull Requests`. You can see labels (aka `categories`) in [`release-drafter.yml`](https://github.com/IslamAlam/pypolsar/blob/master/.github/release-drafter.yml). Works perfectly with [Semantic Versions](https://semver.org/) specification.\n\nFor creating your open source community:\n\n- Ready-to-use [Pull Requests templates](https://github.com/IslamAlam/pypolsar/blob/master/.github/PULL_REQUEST_TEMPLATE.md) and several [Issue templates](https://github.com/IslamAlam/pypolsar/tree/master/.github/ISSUE_TEMPLATE).\n- Files such as: `LICENSE`, `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`, and `SECURITY.md` are generated automatically.\n- [`Stale bot`](https://github.com/apps/stale) that closes abandoned issues after a period of inactivity. (You will only [need to setup free plan](https://github.com/marketplace/stale)). Configuration is [here](https://github.com/IslamAlam/pypolsar/blob/master/.github/.stale.yml).\n- [Semantic Versions](https://semver.org/) specification with [`Release Drafter`](https://github.com/marketplace/actions/release-drafter).\n\n## Installation\n\n```bash\npip install pypolsar\n```\n\nor install with `Poetry`\n\n```bash\npoetry add pypolsar\n```\n\nThen you can run\n\n```bash\npypolsar --help\n```\n\n```bash\npypolsar --name Roman\n```\n\nor if installed with `Poetry`:\n\n```bash\npoetry run pypolsar --help\n```\n\n```bash\npoetry run pypolsar --name Roman\n```\n\n### Makefile usage\n\n[`Makefile`](https://github.com/IslamAlam/pypolsar/blob/master/Makefile) contains many functions for fast assembling and convenient work.\n\n<details>\n<summary>1. Download Poetry</summary>\n<p>\n\n```bash\nmake download-poetry\n```\n\n</p>\n</details>\n\n<details>\n<summary>2. Install all dependencies and pre-commit hooks</summary>\n<p>\n\n```bash\nmake install\n```\n\nIf you do not want to install pre-commit hooks, run the command with the NO_PRE_COMMIT flag:\n\n```bash\nmake install NO_PRE_COMMIT=1\n```\n\n</p>\n</details>\n\n<details>\n<summary>3. Check the security of your code</summary>\n<p>\n\n```bash\nmake check-safety\n```\n\nThis command launches a `Poetry` and `Pip` integrity check as well as identifies security issues with `Safety` and `Bandit`. By default, the build will not crash if any of the items fail. But you can set `STRICT=1` for the entire build, or you can configure strictness for each item separately.\n\n```bash\nmake check-safety STRICT=1\n```\n\nor only for `safety`:\n\n```bash\nmake check-safety SAFETY_STRICT=1\n```\n\nmultiple\n\n```bash\nmake check-safety PIP_STRICT=1 SAFETY_STRICT=1\n```\n\n> List of flags for `check-safety` (can be set to `1` or `0`): `STRICT`, `POETRY_STRICT`, `PIP_STRICT`, `SAFETY_STRICT`, `BANDIT_STRICT`.\n\n</p>\n</details>\n\n<details>\n<summary>4. Check the codestyle</summary>\n<p>\n\nThe command is similar to `check-safety` but to check the code style, obviously. It uses `Black`, `Darglint`, `Isort`, and `Mypy` inside.\n\n```bash\nmake check-style\n```\n\nIt may also contain the `STRICT` flag.\n\n```bash\nmake check-style STRICT=1\n```\n\n> List of flags for `check-style` (can be set to `1` or `0`): `STRICT`, `BLACK_STRICT`, `DARGLINT_STRICT`, `ISORT_STRICT`, `MYPY_STRICT`.\n\n</p>\n</details>\n\n<details>\n<summary>5. Run all the codestyle formaters</summary>\n<p>\n\nCodestyle uses `pre-commit` hooks, so ensure you\'ve run `make install` before.\n\n```bash\nmake codestyle\n```\n\n</p>\n</details>\n\n<details>\n<summary>6. Run tests</summary>\n<p>\n\n```bash\nmake test\n```\n\n</p>\n</details>\n\n<details>\n<summary>7. Run all the linters</summary>\n<p>\n\n```bash\nmake lint\n```\n\nthe same as:\n\n```bash\nmake test && make check-safety && make check-style\n```\n\n> List of flags for `lint` (can be set to `1` or `0`): `STRICT`, `POETRY_STRICT`, `PIP_STRICT`, `SAFETY_STRICT`, `BANDIT_STRICT`, `BLACK_STRICT`, `DARGLINT_STRICT`, `ISORT_STRICT`, `MYPY_STRICT`.\n\n</p>\n</details>\n\n<details>\n<summary>8. Build docker</summary>\n<p>\n\n```bash\nmake docker\n```\n\nwhich is equivalent to:\n\n```bash\nmake docker VERSION=latest\n```\n\nMore information [here](https://github.com/IslamAlam/pypolsar/tree/master/docker).\n\n</p>\n</details>\n\n<details>\n<summary>9. Cleanup docker</summary>\n<p>\n\n```bash\nmake clean_docker\n```\n\nor to remove all build\n\n```bash\nmake clean\n```\n\nMore information [here](https://github.com/IslamAlam/pypolsar/tree/master/docker).\n\n</p>\n</details>\n\n## 📈 Releases\n\nYou can see the list of available releases on the [GitHub Releases](https://github.com/IslamAlam/pypolsar/releases) page.\n\nWe follow [Semantic Versions](https://semver.org/) specification.\n\nWe use [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you’re ready. With the categories option, you can categorize pull requests in release notes using labels.\n\nFor Pull Request this labels are configured, by default:\n\n|               **Label**               |  **Title in Releases**  |\n|:-------------------------------------:|:----------------------:|\n| `enhancement`, `feature`              | 🚀 Features             |\n| `bug`, `refactoring`, `bugfix`, `fix` | 🔧 Fixes & Refactoring  |\n| `build`, `ci`, `testing`              | 📦 Build System & CI/CD |\n| `breaking`                            | 💥 Breaking Changes     |\n| `documentation`                       | 📝 Documentation        |\n| `dependencies`                        | ⬆️ Dependencies updates |\n\nYou can update it in [`release-drafter.yml`](https://github.com/IslamAlam/pypolsar/blob/master/.github/release-drafter.yml).\n\nGitHub creates the `bug`, `enhancement`, and `documentation` labels for you. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.\n\n## 🛡 License\n\n[![License](https://img.shields.io/github/license/IslamAlam/pypolsar)](https://github.com/IslamAlam/pypolsar/blob/master/LICENSE)\n\nThis project is licensed under the terms of the `GPL-3.0-or-later` license. See [LICENSE](https://github.com/IslamAlam/pypolsar/blob/master/LICENSE) for more details.\n\n## 📃 Citation\n\n```\n@misc{pypolsar,\n  author = {Earth-Observation},\n  title = {PyPolSAR is a python module for Polarimetric Synthetic Aperture Radar (PolSAR) data processing.},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/IslamAlam/pypolsar}}\n}\n```\n\n## Credits\n\nThis project was generated with [`python-package-template`](https://github.com/TezRomacH/python-package-template).\n',
    'author': 'Earth-Observation',
    'author_email': 'is3mansour@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/IslamAlam/pypolsar',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
