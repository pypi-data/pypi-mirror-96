# coding: utf-8

"""
    Data Repository API

    This document defines the REST API for Data Repository. **Status: design in progress** There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned. ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes. ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are. But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser. I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors. This might be something about my browser or environment, so give it a try yourself and see how it goes. ## Merging the DRS standard swagger into this swagger ## The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409.   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_repo_client.configuration import Configuration


class IngestRequestModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'table': 'str',
        'path': 'str',
        'format': 'str',
        'load_tag': 'str',
        'max_bad_records': 'int',
        'ignore_unknown_values': 'bool',
        'csv_field_delimiter': 'str',
        'csv_quote': 'str',
        'csv_skip_leading_rows': 'int',
        'csv_allow_quoted_newlines': 'bool',
        'csv_null_marker': 'str'
    }

    attribute_map = {
        'table': 'table',
        'path': 'path',
        'format': 'format',
        'load_tag': 'load_tag',
        'max_bad_records': 'max_bad_records',
        'ignore_unknown_values': 'ignore_unknown_values',
        'csv_field_delimiter': 'csv_field_delimiter',
        'csv_quote': 'csv_quote',
        'csv_skip_leading_rows': 'csv_skip_leading_rows',
        'csv_allow_quoted_newlines': 'csv_allow_quoted_newlines',
        'csv_null_marker': 'csv_null_marker'
    }

    def __init__(self, table=None, path=None, format=None, load_tag=None, max_bad_records=None, ignore_unknown_values=True, csv_field_delimiter=',', csv_quote='"', csv_skip_leading_rows=None, csv_allow_quoted_newlines=True, csv_null_marker='', local_vars_configuration=None):  # noqa: E501
        """IngestRequestModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._table = None
        self._path = None
        self._format = None
        self._load_tag = None
        self._max_bad_records = None
        self._ignore_unknown_values = None
        self._csv_field_delimiter = None
        self._csv_quote = None
        self._csv_skip_leading_rows = None
        self._csv_allow_quoted_newlines = None
        self._csv_null_marker = None
        self.discriminator = None

        self.table = table
        self.path = path
        self.format = format
        if load_tag is not None:
            self.load_tag = load_tag
        if max_bad_records is not None:
            self.max_bad_records = max_bad_records
        if ignore_unknown_values is not None:
            self.ignore_unknown_values = ignore_unknown_values
        if csv_field_delimiter is not None:
            self.csv_field_delimiter = csv_field_delimiter
        if csv_quote is not None:
            self.csv_quote = csv_quote
        if csv_skip_leading_rows is not None:
            self.csv_skip_leading_rows = csv_skip_leading_rows
        if csv_allow_quoted_newlines is not None:
            self.csv_allow_quoted_newlines = csv_allow_quoted_newlines
        if csv_null_marker is not None:
            self.csv_null_marker = csv_null_marker

    @property
    def table(self):
        """Gets the table of this IngestRequestModel.  # noqa: E501

        Dataset, table, and column names follow this pattern. This should be used for the name of any object in the system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.   # noqa: E501

        :return: The table of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this IngestRequestModel.

        Dataset, table, and column names follow this pattern. This should be used for the name of any object in the system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.   # noqa: E501

        :param table: The table of this IngestRequestModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and table is None:  # noqa: E501
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                table is not None and len(table) > 63):
            raise ValueError("Invalid value for `table`, length must be less than or equal to `63`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                table is not None and len(table) < 1):
            raise ValueError("Invalid value for `table`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                table is not None and not re.search(r'^[a-zA-Z0-9][_a-zA-Z0-9]*$', table)):  # noqa: E501
            raise ValueError(r"Invalid value for `table`, must be a follow pattern or equal to `/^[a-zA-Z0-9][_a-zA-Z0-9]*$/`")  # noqa: E501

        self._table = table

    @property
    def path(self):
        """Gets the path of this IngestRequestModel.  # noqa: E501

        gs path to a file in a bucket accessible to data repo  # noqa: E501

        :return: The path of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IngestRequestModel.

        gs path to a file in a bucket accessible to data repo  # noqa: E501

        :param path: The path of this IngestRequestModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def format(self):
        """Gets the format of this IngestRequestModel.  # noqa: E501


        :return: The format of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this IngestRequestModel.


        :param format: The format of this IngestRequestModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["csv", "json"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def load_tag(self):
        """Gets the load_tag of this IngestRequestModel.  # noqa: E501

        client-specified tag for a data or file load. If no id is specified, we use the string form of the job create time as the tag.   # noqa: E501

        :return: The load_tag of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._load_tag

    @load_tag.setter
    def load_tag(self, load_tag):
        """Sets the load_tag of this IngestRequestModel.

        client-specified tag for a data or file load. If no id is specified, we use the string form of the job create time as the tag.   # noqa: E501

        :param load_tag: The load_tag of this IngestRequestModel.  # noqa: E501
        :type: str
        """

        self._load_tag = load_tag

    @property
    def max_bad_records(self):
        """Gets the max_bad_records of this IngestRequestModel.  # noqa: E501

        max number of bad records to skip; applies to JSON and CSV  # noqa: E501

        :return: The max_bad_records of this IngestRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._max_bad_records

    @max_bad_records.setter
    def max_bad_records(self, max_bad_records):
        """Sets the max_bad_records of this IngestRequestModel.

        max number of bad records to skip; applies to JSON and CSV  # noqa: E501

        :param max_bad_records: The max_bad_records of this IngestRequestModel.  # noqa: E501
        :type: int
        """

        self._max_bad_records = max_bad_records

    @property
    def ignore_unknown_values(self):
        """Gets the ignore_unknown_values of this IngestRequestModel.  # noqa: E501

        skip extra data; applies to JSON and CSV  # noqa: E501

        :return: The ignore_unknown_values of this IngestRequestModel.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_unknown_values

    @ignore_unknown_values.setter
    def ignore_unknown_values(self, ignore_unknown_values):
        """Sets the ignore_unknown_values of this IngestRequestModel.

        skip extra data; applies to JSON and CSV  # noqa: E501

        :param ignore_unknown_values: The ignore_unknown_values of this IngestRequestModel.  # noqa: E501
        :type: bool
        """

        self._ignore_unknown_values = ignore_unknown_values

    @property
    def csv_field_delimiter(self):
        """Gets the csv_field_delimiter of this IngestRequestModel.  # noqa: E501

        field separator  # noqa: E501

        :return: The csv_field_delimiter of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._csv_field_delimiter

    @csv_field_delimiter.setter
    def csv_field_delimiter(self, csv_field_delimiter):
        """Sets the csv_field_delimiter of this IngestRequestModel.

        field separator  # noqa: E501

        :param csv_field_delimiter: The csv_field_delimiter of this IngestRequestModel.  # noqa: E501
        :type: str
        """

        self._csv_field_delimiter = csv_field_delimiter

    @property
    def csv_quote(self):
        """Gets the csv_quote of this IngestRequestModel.  # noqa: E501

        quoting character  # noqa: E501

        :return: The csv_quote of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._csv_quote

    @csv_quote.setter
    def csv_quote(self, csv_quote):
        """Sets the csv_quote of this IngestRequestModel.

        quoting character  # noqa: E501

        :param csv_quote: The csv_quote of this IngestRequestModel.  # noqa: E501
        :type: str
        """

        self._csv_quote = csv_quote

    @property
    def csv_skip_leading_rows(self):
        """Gets the csv_skip_leading_rows of this IngestRequestModel.  # noqa: E501

        number of header rows to skip  # noqa: E501

        :return: The csv_skip_leading_rows of this IngestRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._csv_skip_leading_rows

    @csv_skip_leading_rows.setter
    def csv_skip_leading_rows(self, csv_skip_leading_rows):
        """Sets the csv_skip_leading_rows of this IngestRequestModel.

        number of header rows to skip  # noqa: E501

        :param csv_skip_leading_rows: The csv_skip_leading_rows of this IngestRequestModel.  # noqa: E501
        :type: int
        """

        self._csv_skip_leading_rows = csv_skip_leading_rows

    @property
    def csv_allow_quoted_newlines(self):
        """Gets the csv_allow_quoted_newlines of this IngestRequestModel.  # noqa: E501


        :return: The csv_allow_quoted_newlines of this IngestRequestModel.  # noqa: E501
        :rtype: bool
        """
        return self._csv_allow_quoted_newlines

    @csv_allow_quoted_newlines.setter
    def csv_allow_quoted_newlines(self, csv_allow_quoted_newlines):
        """Sets the csv_allow_quoted_newlines of this IngestRequestModel.


        :param csv_allow_quoted_newlines: The csv_allow_quoted_newlines of this IngestRequestModel.  # noqa: E501
        :type: bool
        """

        self._csv_allow_quoted_newlines = csv_allow_quoted_newlines

    @property
    def csv_null_marker(self):
        """Gets the csv_null_marker of this IngestRequestModel.  # noqa: E501


        :return: The csv_null_marker of this IngestRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._csv_null_marker

    @csv_null_marker.setter
    def csv_null_marker(self, csv_null_marker):
        """Sets the csv_null_marker of this IngestRequestModel.


        :param csv_null_marker: The csv_null_marker of this IngestRequestModel.  # noqa: E501
        :type: str
        """

        self._csv_null_marker = csv_null_marker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IngestRequestModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IngestRequestModel):
            return True

        return self.to_dict() != other.to_dict()
