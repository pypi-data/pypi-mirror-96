# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['wdata']

package_data = \
{'': ['*']}

install_requires = \
['numpy>=1.19.4,<2.0.0',
 'pytz>=2020.4,<2021.0',
 'tzlocal>=2.1,<3.0',
 'zope.interface>=5.2.0,<6.0.0']

setup_kwargs = {
    'name': 'wdata',
    'version': '0.1.2',
    'description': 'W-Data format for superfluid dynamics and the W-SLDA Toolkit.',
    'long_description': 'W-data Format\n=============\n\nThis project contains tools for working with and manipulating the\nW-data format used for analyzing superfluid data.\n\nThis format was originally derived from the W-SLDA project led by\nGabriel Wlazlowski as documented here:\n\nhttp://git2.if.pw.edu.pl/gabrielw/cold-atoms/wikis/W-data-format\n\nHere we augment this format slightly to facilitate working with\nPython.\n\nGeneralizations\n---------------\n\nThe original format required a `.wtxt` file with lots of relevant\ninformation.  Here we generalize the format to allow this information\nto be specified in the data files, which we allow to be in the NPY\nformat.\n\nInstallation\n------------\n\n```bash\npip install wdata\n```\n\nBasic Usage\n-----------\n\nThe W-data format stores various arrays representing physical\nquantities such as the density (real), pairing field (complex),\ncurrents (3-component real vectors) etc. on a regular lattice of shape\n`Nxyz = (Nx, Ny, Nz)` at a bunch of `Nt` times.\n\nThe data is represented by two classes: \n\n* `Var`: These are the data variables such as density, currents,\n  etc. with additional metadata (ee the `wdata.io.IVar` interface for\n  details):\n  \n  * `Var.name`: Name of variable as it will appear in VisIt for example.\n  * `Var.data`: The actual data as a NumPy array.\n  * `Var.description`: Description.\n  * `Var.filename`: The file where the data is stored on disk.\n  * `Var.unit`: Unit (mainly for use in VisIt... does not affect the data.)\n\n* `WData`: This represents a complete dataset.  Some relevant\n  attributes are (see `wdata.io.IWData` for details):\n  * `WData.infofile`: Location of the infofile (see below).  This is\n    where the metadata will be stored or loaded from.\n  * `WData.variables`: List of `Var` variables.\n  * `WData.xyz`: Abscissa `(x, y, z)` shaped so that they can be used\n    with broadcasting.  I.e. `r = np.sqrt(x**2+y**2+z**2)`.\n  * `WData.t`: Array of times.\n  * `WData.dim`: Dimension of dataset.  I.e. `dim==1` for 1D simulations,\n    `dim==3` for 3D simulations.\n  * `WData.aliases`: Dictionary of aliases.  Convenience for providing\n    alternative data access in VisIt.\n  * `WData.constants`: Dictionary of constants such as `kF`, `eF`.\n\n**Minimal Example**:\n\nHere is a minimal set of data:\n\n```python\nimport numpy as np\nnp.random.seed(3)\nfrom wdata.io import WData, Var\n\nNt = 10 \nNxyz = (4, 8, 16)\ndxyz = (0.3, 0.2, 0.1)\ndt = 0.1\nNtxyz = (Nt,) + Nxyz\n\ndensity = np.random.random(Ntxyz)\n\ndata = WData(prefix=\'dataset\', data_dir=\'_example_wdata\',\n             Nxyz=Nxyz, dxyz=dxyz,\n             variables=[Var(density=density)],\n             Nt=Nt)\ndata.save(force=True)\n```\n\nThis will make a directory `_example_wdata` with infofile\n`_example_wdata/dataset.wtxt`:\n\n```bash\n$ tree _example_wdata\n_example_wdata\n|-- dataset.wtxt\n`-- dataset_density.wdat\n\n0 directories, 2 files\n$ cat _example_wdata/dataset.wtxt\n# Generated by wdata.io: [2020-12-18 06:41:29 UTC+0000 = 2020-12-17 22:41:29 PST-0800]\n\nNX               4    # Lattice size in X direction\nNY               8    #             ... Y ...\nNZ              16    #             ... Z ...\nDX             0.3    # Spacing in X direction\nDY             0.2    #        ... Y ...\nDZ             0.1    #        ... Z ...\nprefix     dataset    # datafile prefix: <prefix>_<var>.<format>\ndatadim          3    # Block size: 1:NX, 2:NX*NY, 3:NX*NY*NZ\ncycles          10    # Number Nt of frames/cycles per dataset\nt0               0    # Time value of first frame\ndt               1    # Time interval between frames\n\n# variables\n# tag       name    type    unit    format    # description\nvar      density    real    none      wdat    # density\n```\n\nThe data can be loaded by specifying the infofile:\n\n```python\nfrom wdata.io import WData\ndata = WData.load(\'_example_wdata/dataset.wtxt\')\n```\n\nThe data could be plotted using [PyVista](https://docs.pyvista.org)\nfor example (the random data will not look so good...):\n\n```python\nimport numpy as np\nimport pyvista as pv\nfrom wdata.io import WData\n\ndata = WData.load(\'_example_wdata/dataset.wtxt\')\nn = data.density[0]\n\ngrid = pv.StructuredGrid(*np.meshgrid(*data.xyz))\ngrid["vol"] = n.flatten(order="F")\ncontours = grid.contour(np.linspace(n.min(), n.max(), 5))\n\np = pv.Plotter()\np.add_mesh(contours, scalars=contours.points[:, 2])\np.show()\n```\n\nThe recommended way to save data is to create variables for the data,\ntimes, and abscissa, then store this:\n\n```bash\nimport numpy as np\nfrom wdata.io import WData, Var\n\nnp.random.seed(3)\n\nNt = 10\nNxyz = (32, 32, 32)\ndxyz = (10.0/32, 10.0/32, 10.0/32)\ndt = 0.1\n\n# Abscissa.  Not strictly needed, but if you have them, then use them\n# instead.\nt = np.arange(Nt)*dt\nxyz = np.meshgrid(*[(np.arange(_N)-_N/2)*_dx\n                    for _N, _dx in zip(Nxyz, dxyz)],\n                  sparse=True, indexing=\'ij\')\n\n# Now make the WData object and save the data.\nNtxyz = (Nt,) + Nxyz\nw = np.pi/t.max()\nws = [1.0 + 0.5*np.cos(w*t), \n      1.0 + 0.5*np.sin(w*t),\n      1.0 + 0*t]\ndensity = np.exp(-sum((_x[None,...].T*_w).T**2/2 for _x, _w in zip(xyz, ws)))\ndelta = np.random.random(Ntxyz) + np.random.random(Ntxyz)*1j - 0.5 - 0.5j\ncurrent = np.random.random((Nt, 3,) + Nxyz) - 0.5\n\nvariables = [\n    Var(density=density),\n    Var(delta=delta),\n    Var(current=current)\n]\n    \ndata = WData(prefix=\'dataset2\', \n             data_dir=\'_example_wdata/\',\n             xyz=xyz, t=t,\n             variables=variables)\ndata.save()\n```\n\nNow load and plot the data:\n\n```bash\nimport numpy as np\nimport pyvista as pv\n\nfrom wdata.io import WData\ndata = WData.load(infofile=\'_example_wdata/dataset2.wtxt\')\n\nn = data.density[0]\n\ngrid = pv.StructuredGrid(*np.meshgrid(*data.xyz))\ngrid["vol"] = n.flatten(order="F")\ncontours = grid.contour(np.linspace(n.min(), n.max(), 5))\n\np = pv.Plotter()\np.add_mesh(contours, scalars=contours.points[:, 2])\np.show()\n```\n\nDeveloper Notes\n===============\nFor distribution we use [poetry](https://python-poetry.org) and for testing we use\n[nox](https://nox.thea.codes).  To test the code:\n\n```bash\nnox\n```\n',
    'author': 'Michael McNeil Forbes',
    'author_email': 'mforbes@alum.mit.edu',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
