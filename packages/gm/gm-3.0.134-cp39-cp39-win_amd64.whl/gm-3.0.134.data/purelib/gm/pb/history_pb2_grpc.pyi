from typing import Any, Optional

class HistoryServiceStub:
    GetCurrentTicks: Any = ...
    GetHistoryTicks: Any = ...
    GetHistoryBars: Any = ...
    GetHistoryTicksN: Any = ...
    GetHistoryBarsN: Any = ...
    GetBenchmarkReturn: Any = ...
    def __init__(self, channel: Any) -> None: ...

class HistoryServiceServicer:
    def GetCurrentTicks(self, request: Any, context: Any) -> None: ...
    def GetHistoryTicks(self, request: Any, context: Any) -> None: ...
    def GetHistoryBars(self, request: Any, context: Any) -> None: ...
    def GetHistoryTicksN(self, request: Any, context: Any) -> None: ...
    def GetHistoryBarsN(self, request: Any, context: Any) -> None: ...
    def GetBenchmarkReturn(self, request: Any, context: Any) -> None: ...

def add_HistoryServiceServicer_to_server(servicer: Any, server: Any) -> None: ...

class HistoryService:
    @staticmethod
    def GetCurrentTicks(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
    @staticmethod
    def GetHistoryTicks(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
    @staticmethod
    def GetHistoryBars(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
    @staticmethod
    def GetHistoryTicksN(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
    @staticmethod
    def GetHistoryBarsN(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
    @staticmethod
    def GetBenchmarkReturn(request: Any, target: Any, options: Any = ..., channel_credentials: Optional[Any] = ..., call_credentials: Optional[Any] = ..., compression: Optional[Any] = ..., wait_for_ready: Optional[Any] = ..., timeout: Optional[Any] = ..., metadata: Optional[Any] = ...): ...
