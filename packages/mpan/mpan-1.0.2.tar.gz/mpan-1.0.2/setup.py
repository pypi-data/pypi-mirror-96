# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['mpan']
setup_kwargs = {
    'name': 'mpan',
    'version': '1.0.2',
    'description': "A parsing library for the UK's MPAN energy standard",
    'long_description': '[![Limejump logo](https://raw.githubusercontent.com/limejump/mpan/master/logo.png)](https://limejump.com/)\n\n\n# mpan\n\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n`mpan` is a library to help you parse the UK energy industry\'s MPAN number format.\n\n\n## How it works\n\n```python\nfrom mpan import MPAN\n\n\nmpan = MPAN("A valid MPAN")\n```\n\nJust import the library and pass it the MPAN you want to parse.  In response\nyou get a handy `MPAN` object with a number of convenient properties:\n\n\n### The Basics\n\nThe most common use is likely to be in examining the "core":\n\n```python\nmpan = MPAN("001112221312345678907")\n\nmpan.top_line    # "00111222"\nmpan.core        # "1312345678907"\nmpan.identifier  # "12345678"\nmpan.is_short    # False\nmpan.is_long     # True\nmpan.as_short    # "1312345678907"\n\nmpan = MPAN("1312345678907")\n\nmpan.top_line    # None\nmpan.core        # "1312345678907"\nmpan.identifier  # "12345678"\nmpan.is_short    # True\nmpan.is_long     # False\nmpan.as_short    # "1312345678907"\n```\n\n\n### The Top Line\n\nYou can also go deeper though, and interrogate the top line:\n\n```python\nmpan = MPAN("001112221312345678907")\n\nmpan.profile_class                       # A ProfileClass instance\nmpan.profile_class.identifier            # "00"\nmpan.profile_class.description           # "Half-hourly supply (import and export)"\nmpan.profile_class.is_valid              # True\n\nmpan.meter_time_switch_code              # A MeterTimeSwitchCode instance\nmpan.meter_time_switch_code.identifier   # "111"\nmpan.meter_time_switch_code.description  # "DNO specific"\nmpan.meter_time_switch_code.is_valid     # True\n\nmpan.line_loss_factor_class              # "222"\n```\n\nNote however that if you don\'t supply a long MPAN, this library can\'t help you:\n\n```python\nmpan = MPAN("1312345678907")\n\nmpan.profile_class           # None\nmpan.meter_time_switch_code  # None\nmpan.line_loss_factor_class  # None\n```\n\n\n### The Distributor\n\nThe `core` can also be broken up to look into the `distributor`, which is a\nlittle tricky, since the distributor id can either refer to a DNO (which has a\nknown set of properties) or an IDNO (which has a different set).  We handle\nthis discrepancy by returning `None` in cases where the requested information\nis unavailable:\n\n```python\nmpan = MPAN("2099999999993")\n\nmpan.distributor                   # A Distributor instance\nmpan.distributor.identifier        # "20"\nmpan.distributor.area              # "Southern England"\nmpan.distributor.gsp_group_id      # "_H"\nmpan.distributor.operator          # "Scottish & Southern Electricity Networks"\nmpan.distributor.participant_id    # "SOUT"\nmpan.distributor.is_dno            # True\nmpan.distributor.is_idno           # False\nmpan.distributor.is_valid          # True\nmpan.distributor.licensee          # None\nmpan.distributor.mpas_operator_id  # None\nmpan.distributor.name              # None\n\nmpan = MPAN("2499999999991")\n\nmpan.distributor                   # A Distributor instance\nmpan.distributor.identifier        # "24"\nmpan.distributor.area              # None\nmpan.distributor.gsp_group_id      # None\nmpan.distributor.operator          # None\nmpan.distributor.participant_id    # None\nmpan.distributor.is_dno            # False\nmpan.distributor.is_idno           # True\nmpan.distributor.is_valid          # True\nmpan.distributor.licensee          # "Independent Power Networks"\nmpan.distributor.mpas_operator_id  # "IPNL"\nmpan.distributor.name              # "Envoy"\n```\n\n\n### Aliases\n\nFor people who want to limit the number of characters they\'re typing, we\nrecognise a few standard acronyms:\n\n```python\nmpan.pc    # Profile Class\nmpan.mtc   # Meter Time Switch Code\nmpan.llfc  # Line Loss Factor Class\n```\n\n\n### Validation Options\n\nYou\'ve got choices for validation.  `.is_valid()` will check your MPAN string\nand return a boolean value indicating whether it\'s valid or not, while you can\ncall `.check()` on an `MPAN` instance, which will explode with an\n`InvalidMpanError` if your string doesn\'t check out.\n\n> An important note about validation\n>\n> There are four aspects of validation performed by the validation checks\n> below: the profile class and meter time switch code (if provided as part of\n> the top line in a long MPAN) will be checked against a list of known values,\n> the distributor from the core will be similarly checked, and finally the\n> formula for the check digit will be applied.\n\n```python\nfrom mpan import InvalidMPANError, MPAN\n\n\nMPAN("2499999999991").is_valid          # True\nMPAN("2499999999990").is_valid          # False  (bad checksum)\nMPAN("8699999999991").is_valid          # False  (bad distributor)\nMPAN("001112221312345678907").is_valid  # True\nMPAN("991112221312345678907").is_valid  # False  (bad profile class)\nMPAN("000002221312345678907").is_valid  # False  (bad meter time switch code)\n\nMPAN("I am not an MPAN")                # InvalidMPANError\n\ntry:\n    MPAN("2499999999991").check()  # Returns None\n    MPAN("2499999999990").check()  # Raises an InvalidMPANError\nexcept InvalidMPANError:\n    print("This MPAN is broken")\n```\n\nThere\'s also a shortcut if you just want validation:\n\n```python\nfrom mpan import is_valid\n\n\nis_valid("2499999999991")  # True\n```\n\n\n## Installation\n\nIt\'s on PyPI:\n\n```shell\n$ pip install mpan\n```\n\n\n## Requirements\n\nThis is a pure-python module with no external dependencies.  However, you\'ll\nneed to be running Python 3.8 or higher.\n\n\n## Development\n\n### Setting up a Local Development Environment\n\nWe\'re using [Poetry](https://python-poetry.org/), so if you want to make some\nchanges, you should install that and then just run `poetry install`.  This will\npull in all the development dependencies like `pytest`, `isort`, etc.\n\n\n### Deployment/Releases\n\nTo build, use Poetry:\n\n```shell\n$ poetry build\n```\n\nTo publish a new release, use Poetry for that too:\n\n```shell\n$ poetry publish\n```\n\n\n## Testing\n\nWhen inside your virtualenv, just run:\n\n```shell\n$ pytest\n```\n\n\n## External Documentation\n\nThis is based largely on the [Wikipedia article](https://en.wikipedia.org/wiki/Meter_Point_Administration_Number)\non the MPAN standard.  The validation code for example is cribbed right from\nthere.\n\n\n## Changelog\n\n\n### 1.0.1\n\n* Initial release\n\n\n### 1.0.2\n\n* Minor change to use a new contact email\n\n\n### 1.0.3\n\n* Bugfix: The `is_valid()` shortcut now returns `False` when an unparseable\n  MPAN is passed in, rather than exploding with an `InvalidMpanError`.\n* Added lots more documentation to the README.\n',
    'author': 'Limejump Developers',
    'author_email': 'opensource@limejump.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/limejump/mpan',
    'py_modules': modules,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
