# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybldc', [dirname(__file__)])
        except ImportError:
            import _pybldc
            return _pybldc
        if fp is not None:
            try:
                _mod = imp.load_module('_pybldc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybldc = swig_import_helper()
    del swig_import_helper
else:
    import _pybldc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def fit(PyFunc, tm_ar, obs_ar, par_ar, wt_ar, fix_ar):
    return _pybldc.fit(PyFunc, tm_ar, obs_ar, par_ar, wt_ar, fix_ar)
fit = _pybldc.fit

def interpolate(tm_array, cnt_array, out_array):
    return _pybldc.interpolate(tm_array, cnt_array, out_array)
interpolate = _pybldc.interpolate

def integrate(tm_array, cnt_array, out_array):
    return _pybldc.integrate(tm_array, cnt_array, out_array)
integrate = _pybldc.integrate

def conv_exp(tm_array, par_array, a_array, b_array):
    return _pybldc.conv_exp(tm_array, par_array, a_array, b_array)
conv_exp = _pybldc.conv_exp

def pconv_exp(tm_array, par_array, a_array, b_array):
    return _pybldc.pconv_exp(tm_array, par_array, a_array, b_array)
pconv_exp = _pybldc.pconv_exp

def gaus(avg, sd, iseed):
    return _pybldc.gaus(avg, sd, iseed)
gaus = _pybldc.gaus

def ran(avg, sd, iseed):
    return _pybldc.ran(avg, sd, iseed)
ran = _pybldc.ran

def mullin(indep_y_ar, dep_x_ar, wt_ar, weight, cst):
    return _pybldc.mullin(indep_y_ar, dep_x_ar, wt_ar, weight, cst)
mullin = _pybldc.mullin

def polfit(deg_pol, dep_y_ar, dep_x_ar, wt_ar, weight):
    return _pybldc.polfit(deg_pol, dep_y_ar, dep_x_ar, wt_ar, weight)
polfit = _pybldc.polfit

def filter(x_ar, y_ar):
    return _pybldc.filter(x_ar, y_ar)
filter = _pybldc.filter

def spline(x_ar, y_ar, p_ar):
    return _pybldc.spline(x_ar, y_ar, p_ar)
spline = _pybldc.spline
# This file is compatible with both classic and new-style classes.

cvar = _pybldc.cvar

