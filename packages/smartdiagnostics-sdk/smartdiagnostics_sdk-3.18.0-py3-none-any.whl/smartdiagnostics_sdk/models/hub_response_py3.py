# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class HubResponse(Model):
    """HubResponse.

    :param id:
    :type id: long
    :param receiver:
    :type receiver: ~smartdiagnostics_sdk.models.ReceiverChild
    :param location:
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    :param corporation:
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param serial_number:
    :type serial_number: str
    :param nickname:
    :type nickname: str
    :param power_type_id: Possible values include: 'Unspecified', 'DC (24V)',
     'Battery', 'AC (120V)'
    :type power_type_id: str or ~smartdiagnostics_sdk.models.enum
    :param firmware_version:
    :type firmware_version: str
    :param hub_type_id: Possible values include: 'Unknown', 'Version 1
     (SevenPort)'
    :type hub_type_id: str or ~smartdiagnostics_sdk.models.enum
    :param created:
    :type created: datetime
    :param updated:
    :type updated: datetime
    :param packet_success_rate:
    :type packet_success_rate: float
    :param wireless_efficiency:
    :type wireless_efficiency: float
    :param is_online:
    :type is_online: bool
    :param triggering_enabled:
    :type triggering_enabled: bool
    :param ports:
    :type ports: list[~smartdiagnostics_sdk.models.HubPortChild]
    """

    _validation = {
        'serial_number': {'max_length': 16},
        'nickname': {'max_length': 50},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'long'},
        'receiver': {'key': 'Receiver', 'type': 'ReceiverChild'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'serial_number': {'key': 'SerialNumber', 'type': 'str'},
        'nickname': {'key': 'Nickname', 'type': 'str'},
        'power_type_id': {'key': 'PowerTypeId', 'type': 'str'},
        'firmware_version': {'key': 'FirmwareVersion', 'type': 'str'},
        'hub_type_id': {'key': 'HubTypeId', 'type': 'str'},
        'created': {'key': 'Created', 'type': 'iso-8601'},
        'updated': {'key': 'Updated', 'type': 'iso-8601'},
        'packet_success_rate': {'key': 'PacketSuccessRate', 'type': 'float'},
        'wireless_efficiency': {'key': 'WirelessEfficiency', 'type': 'float'},
        'is_online': {'key': 'IsOnline', 'type': 'bool'},
        'triggering_enabled': {'key': 'TriggeringEnabled', 'type': 'bool'},
        'ports': {'key': 'Ports', 'type': '[HubPortChild]'},
    }

    def __init__(self, *, id: int=None, receiver=None, location=None, corporation=None, serial_number: str=None, nickname: str=None, power_type_id=None, firmware_version: str=None, hub_type_id=None, created=None, updated=None, packet_success_rate: float=None, wireless_efficiency: float=None, is_online: bool=None, triggering_enabled: bool=None, ports=None, **kwargs) -> None:
        super(HubResponse, self).__init__(**kwargs)
        self.id = id
        self.receiver = receiver
        self.location = location
        self.corporation = corporation
        self.serial_number = serial_number
        self.nickname = nickname
        self.power_type_id = power_type_id
        self.firmware_version = firmware_version
        self.hub_type_id = hub_type_id
        self.created = created
        self.updated = updated
        self.packet_success_rate = packet_success_rate
        self.wireless_efficiency = wireless_efficiency
        self.is_online = is_online
        self.triggering_enabled = triggering_enabled
        self.ports = ports
