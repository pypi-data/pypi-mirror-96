# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TreeItemResponse(Model):
    """TreeItemResponse.

    All required parameters must be populated in order to send to Azure.

    :param tree_item_type: Required. Possible values include: 'Asset',
     'MonitoringPoint', 'IndicatorGroup', 'Group', 'AnalyticModel'
    :type tree_item_type: str or ~smartdiagnostics_sdk.models.enum
    :param sort_order: Required.
    :type sort_order: int
    :param has_children: Required.
    :type has_children: bool
    :param alarm_severity_level: Required.
    :type alarm_severity_level: int
    :param asset_class_code:
    :type asset_class_code: str
    :param is_collector_dependent_system:
    :type is_collector_dependent_system: bool
    :param asset_type:
    :type asset_type: ~smartdiagnostics_sdk.models.AssetTypeChild
    :param asset_category:
    :type asset_category: ~smartdiagnostics_sdk.models.AssetCategoryChild
    :param asset_size:
    :type asset_size: ~smartdiagnostics_sdk.models.AssetSizeChild
    :param parent:
    :type parent: ~smartdiagnostics_sdk.models.ParentChild
    :param children:
    :type children: list[~smartdiagnostics_sdk.models.DescendantChild]
    :param hierarchy:
    :type hierarchy: list[~smartdiagnostics_sdk.models.HierarchyChild]
    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param abbreviation:
    :type abbreviation: str
    :param active: Required.
    :type active: bool
    :param is_paused: Required.
    :type is_paused: bool
    :param is_snoozed: Required.
    :type is_snoozed: bool
    :param created: Required.
    :type created: datetime
    :param corporation: Required.
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param location: Required.
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    """

    _validation = {
        'tree_item_type': {'required': True},
        'sort_order': {'required': True},
        'has_children': {'required': True},
        'alarm_severity_level': {'required': True},
        'id': {'required': True},
        'name': {'required': True},
        'active': {'required': True},
        'is_paused': {'required': True},
        'is_snoozed': {'required': True},
        'created': {'required': True},
        'corporation': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'tree_item_type': {'key': 'TreeItemType', 'type': 'str'},
        'sort_order': {'key': 'SortOrder', 'type': 'int'},
        'has_children': {'key': 'HasChildren', 'type': 'bool'},
        'alarm_severity_level': {'key': 'AlarmSeverityLevel', 'type': 'int'},
        'asset_class_code': {'key': 'AssetClassCode', 'type': 'str'},
        'is_collector_dependent_system': {'key': 'IsCollectorDependentSystem', 'type': 'bool'},
        'asset_type': {'key': 'AssetType', 'type': 'AssetTypeChild'},
        'asset_category': {'key': 'AssetCategory', 'type': 'AssetCategoryChild'},
        'asset_size': {'key': 'AssetSize', 'type': 'AssetSizeChild'},
        'parent': {'key': 'Parent', 'type': 'ParentChild'},
        'children': {'key': 'Children', 'type': '[DescendantChild]'},
        'hierarchy': {'key': 'Hierarchy', 'type': '[HierarchyChild]'},
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'abbreviation': {'key': 'Abbreviation', 'type': 'str'},
        'active': {'key': 'Active', 'type': 'bool'},
        'is_paused': {'key': 'IsPaused', 'type': 'bool'},
        'is_snoozed': {'key': 'IsSnoozed', 'type': 'bool'},
        'created': {'key': 'Created', 'type': 'iso-8601'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
    }

    def __init__(self, *, tree_item_type, sort_order: int, has_children: bool, alarm_severity_level: int, id: str, name: str, active: bool, is_paused: bool, is_snoozed: bool, created, corporation, location, asset_class_code: str=None, is_collector_dependent_system: bool=None, asset_type=None, asset_category=None, asset_size=None, parent=None, children=None, hierarchy=None, abbreviation: str=None, **kwargs) -> None:
        super(TreeItemResponse, self).__init__(**kwargs)
        self.tree_item_type = tree_item_type
        self.sort_order = sort_order
        self.has_children = has_children
        self.alarm_severity_level = alarm_severity_level
        self.asset_class_code = asset_class_code
        self.is_collector_dependent_system = is_collector_dependent_system
        self.asset_type = asset_type
        self.asset_category = asset_category
        self.asset_size = asset_size
        self.parent = parent
        self.children = children
        self.hierarchy = hierarchy
        self.id = id
        self.name = name
        self.abbreviation = abbreviation
        self.active = active
        self.is_paused = is_paused
        self.is_snoozed = is_snoozed
        self.created = created
        self.corporation = corporation
        self.location = location
