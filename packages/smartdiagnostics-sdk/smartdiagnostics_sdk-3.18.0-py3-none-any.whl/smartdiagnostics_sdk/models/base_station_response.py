# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BaseStationResponse(Model):
    """BaseStationResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: long
    :param serial_number: Required.
    :type serial_number: str
    :param nickname:
    :type nickname: str
    :param location:
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    :param corporation:
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param last_status_update:
    :type last_status_update: datetime
    :param push_to_stage:
    :type push_to_stage: bool
    :param release_ring:
    :type release_ring: ~smartdiagnostics_sdk.models.ReleaseRingChild
    :param targeted_software_release:
    :type targeted_software_release:
     ~smartdiagnostics_sdk.models.TargetedSoftwareReleaseChild
    :param current_software_release:
    :type current_software_release:
     ~smartdiagnostics_sdk.models.CurrentSoftwareReleaseChild
    :param hardware_revision:
    :type hardware_revision:
     ~smartdiagnostics_sdk.models.HardwareRevisionChild
    :param receiver:
    :type receiver: ~smartdiagnostics_sdk.models.ReceiverChild
    :param last_data_update:
    :type last_data_update: datetime
    :param is_online:
    :type is_online: bool
    """

    _validation = {
        'id': {'required': True},
        'serial_number': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'long'},
        'serial_number': {'key': 'SerialNumber', 'type': 'str'},
        'nickname': {'key': 'Nickname', 'type': 'str'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'last_status_update': {'key': 'LastStatusUpdate', 'type': 'iso-8601'},
        'push_to_stage': {'key': 'PushToStage', 'type': 'bool'},
        'release_ring': {'key': 'ReleaseRing', 'type': 'ReleaseRingChild'},
        'targeted_software_release': {'key': 'TargetedSoftwareRelease', 'type': 'TargetedSoftwareReleaseChild'},
        'current_software_release': {'key': 'CurrentSoftwareRelease', 'type': 'CurrentSoftwareReleaseChild'},
        'hardware_revision': {'key': 'HardwareRevision', 'type': 'HardwareRevisionChild'},
        'receiver': {'key': 'Receiver', 'type': 'ReceiverChild'},
        'last_data_update': {'key': 'LastDataUpdate', 'type': 'iso-8601'},
        'is_online': {'key': 'IsOnline', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(BaseStationResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.nickname = kwargs.get('nickname', None)
        self.location = kwargs.get('location', None)
        self.corporation = kwargs.get('corporation', None)
        self.last_status_update = kwargs.get('last_status_update', None)
        self.push_to_stage = kwargs.get('push_to_stage', None)
        self.release_ring = kwargs.get('release_ring', None)
        self.targeted_software_release = kwargs.get('targeted_software_release', None)
        self.current_software_release = kwargs.get('current_software_release', None)
        self.hardware_revision = kwargs.get('hardware_revision', None)
        self.receiver = kwargs.get('receiver', None)
        self.last_data_update = kwargs.get('last_data_update', None)
        self.is_online = kwargs.get('is_online', None)
