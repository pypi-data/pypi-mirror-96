# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AssetResponse(Model):
    """AssetResponse.

    All required parameters must be populated in order to send to Azure.

    :param supplier:
    :type supplier: str
    :param manufacturer:
    :type manufacturer: str
    :param model_name:
    :type model_name: str
    :param location_notes:
    :type location_notes: str
    :param notes:
    :type notes: str
    :param generic_input:
    :type generic_input: str
    :param is_operator_view:
    :type is_operator_view: bool
    :param type:
    :type type: ~smartdiagnostics_sdk.models.AssetTypeChild
    :param category:
    :type category: ~smartdiagnostics_sdk.models.AssetCategoryChild
    :param size:
    :type size: ~smartdiagnostics_sdk.models.AssetSizeChild
    :param economics:
    :type economics: ~smartdiagnostics_sdk.models.AssetEconomicsChild
    :param running_speed:
    :type running_speed: ~smartdiagnostics_sdk.models.AssetRunningSpeedChild
    :param criticality:
    :type criticality: ~smartdiagnostics_sdk.models.AssetCriticalityChild
    :param drum_roll:
    :type drum_roll: ~smartdiagnostics_sdk.models.AssetDrumRollChild
    :param hierarchy:
    :type hierarchy: list[~smartdiagnostics_sdk.models.HierarchyChild]
    :param parent:
    :type parent: ~smartdiagnostics_sdk.models.ParentChild
    :param children:
    :type children: list[~smartdiagnostics_sdk.models.DescendantChild]
    :param tags:
    :type tags: list[~smartdiagnostics_sdk.models.TagChild]
    :param analytics_models:
    :type analytics_models:
     list[~smartdiagnostics_sdk.models.AnalyticsModelChild]
    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param abbreviation:
    :type abbreviation: str
    :param active: Required.
    :type active: bool
    :param is_paused: Required.
    :type is_paused: bool
    :param is_snoozed: Required.
    :type is_snoozed: bool
    :param created: Required.
    :type created: datetime
    :param corporation: Required.
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param location: Required.
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'active': {'required': True},
        'is_paused': {'required': True},
        'is_snoozed': {'required': True},
        'created': {'required': True},
        'corporation': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'supplier': {'key': 'Supplier', 'type': 'str'},
        'manufacturer': {'key': 'Manufacturer', 'type': 'str'},
        'model_name': {'key': 'ModelName', 'type': 'str'},
        'location_notes': {'key': 'LocationNotes', 'type': 'str'},
        'notes': {'key': 'Notes', 'type': 'str'},
        'generic_input': {'key': 'GenericInput', 'type': 'str'},
        'is_operator_view': {'key': 'IsOperatorView', 'type': 'bool'},
        'type': {'key': 'Type', 'type': 'AssetTypeChild'},
        'category': {'key': 'Category', 'type': 'AssetCategoryChild'},
        'size': {'key': 'Size', 'type': 'AssetSizeChild'},
        'economics': {'key': 'Economics', 'type': 'AssetEconomicsChild'},
        'running_speed': {'key': 'RunningSpeed', 'type': 'AssetRunningSpeedChild'},
        'criticality': {'key': 'Criticality', 'type': 'AssetCriticalityChild'},
        'drum_roll': {'key': 'DrumRoll', 'type': 'AssetDrumRollChild'},
        'hierarchy': {'key': 'Hierarchy', 'type': '[HierarchyChild]'},
        'parent': {'key': 'Parent', 'type': 'ParentChild'},
        'children': {'key': 'Children', 'type': '[DescendantChild]'},
        'tags': {'key': 'Tags', 'type': '[TagChild]'},
        'analytics_models': {'key': 'AnalyticsModels', 'type': '[AnalyticsModelChild]'},
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'abbreviation': {'key': 'Abbreviation', 'type': 'str'},
        'active': {'key': 'Active', 'type': 'bool'},
        'is_paused': {'key': 'IsPaused', 'type': 'bool'},
        'is_snoozed': {'key': 'IsSnoozed', 'type': 'bool'},
        'created': {'key': 'Created', 'type': 'iso-8601'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
    }

    def __init__(self, **kwargs):
        super(AssetResponse, self).__init__(**kwargs)
        self.supplier = kwargs.get('supplier', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.model_name = kwargs.get('model_name', None)
        self.location_notes = kwargs.get('location_notes', None)
        self.notes = kwargs.get('notes', None)
        self.generic_input = kwargs.get('generic_input', None)
        self.is_operator_view = kwargs.get('is_operator_view', None)
        self.type = kwargs.get('type', None)
        self.category = kwargs.get('category', None)
        self.size = kwargs.get('size', None)
        self.economics = kwargs.get('economics', None)
        self.running_speed = kwargs.get('running_speed', None)
        self.criticality = kwargs.get('criticality', None)
        self.drum_roll = kwargs.get('drum_roll', None)
        self.hierarchy = kwargs.get('hierarchy', None)
        self.parent = kwargs.get('parent', None)
        self.children = kwargs.get('children', None)
        self.tags = kwargs.get('tags', None)
        self.analytics_models = kwargs.get('analytics_models', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.abbreviation = kwargs.get('abbreviation', None)
        self.active = kwargs.get('active', None)
        self.is_paused = kwargs.get('is_paused', None)
        self.is_snoozed = kwargs.get('is_snoozed', None)
        self.created = kwargs.get('created', None)
        self.corporation = kwargs.get('corporation', None)
        self.location = kwargs.get('location', None)
