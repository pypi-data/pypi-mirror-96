# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TagResponse(Model):
    """TagResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param active: Required.
    :type active: bool
    :param type: Required. Possible values include: 'General', 'Components',
     'Make', 'Model', 'Location', 'Orientation', 'Asset', 'AssetCode',
     'Picture'
    :type type: str or ~smartdiagnostics_sdk.models.enum
    :param is_global:
    :type is_global: bool
    :param created: Required.
    :type created: datetime
    :param updated: Required.
    :type updated: datetime
    :param location: Required.
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'active': {'required': True},
        'type': {'required': True},
        'created': {'required': True},
        'updated': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'active': {'key': 'Active', 'type': 'bool'},
        'type': {'key': 'Type', 'type': 'str'},
        'is_global': {'key': 'IsGlobal', 'type': 'bool'},
        'created': {'key': 'Created', 'type': 'iso-8601'},
        'updated': {'key': 'Updated', 'type': 'iso-8601'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
    }

    def __init__(self, **kwargs):
        super(TagResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.active = kwargs.get('active', None)
        self.type = kwargs.get('type', None)
        self.is_global = kwargs.get('is_global', None)
        self.created = kwargs.get('created', None)
        self.updated = kwargs.get('updated', None)
        self.location = kwargs.get('location', None)
