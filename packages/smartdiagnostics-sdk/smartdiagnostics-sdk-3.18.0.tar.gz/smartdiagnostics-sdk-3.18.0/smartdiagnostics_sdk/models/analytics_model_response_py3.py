# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AnalyticsModelResponse(Model):
    """AnalyticsModelResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: int
    :param name: Required.
    :type name: str
    :param version: Required.
    :type version: str
    :param type: Possible values include: 'SMARTIndicator', 'Classifier'
    :type type: str or ~smartdiagnostics_sdk.models.enum
    :param created:
    :type created: datetime
    :param group_type: Possible values include: 'Asset', 'MonitoringPoint',
     'IndicatorGroup', 'Group', 'AnalyticModel'
    :type group_type: str or ~smartdiagnostics_sdk.models.enum
    :param is_global:
    :type is_global: bool
    :param is_deprecated:
    :type is_deprecated: bool
    :param indicators:
    :type indicators:
     list[~smartdiagnostics_sdk.models.AnalyticsModelIndicatorChild]
    :param properties:
    :type properties: list[~smartdiagnostics_sdk.models.PropertyChild]
    :param related_models:
    :type related_models:
     list[~smartdiagnostics_sdk.models.AnalyticsModelRelatedModelChild]
    :param created_by:
    :type created_by: ~smartdiagnostics_sdk.models.UserChild
    :param corporation:
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param location:
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    :param triggers:
    :type triggers: list[~smartdiagnostics_sdk.models.TriggerChild]
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'version': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'int'},
        'name': {'key': 'Name', 'type': 'str'},
        'version': {'key': 'Version', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'created': {'key': 'Created', 'type': 'iso-8601'},
        'group_type': {'key': 'GroupType', 'type': 'str'},
        'is_global': {'key': 'IsGlobal', 'type': 'bool'},
        'is_deprecated': {'key': 'IsDeprecated', 'type': 'bool'},
        'indicators': {'key': 'Indicators', 'type': '[AnalyticsModelIndicatorChild]'},
        'properties': {'key': 'Properties', 'type': '[PropertyChild]'},
        'related_models': {'key': 'RelatedModels', 'type': '[AnalyticsModelRelatedModelChild]'},
        'created_by': {'key': 'CreatedBy', 'type': 'UserChild'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
        'triggers': {'key': 'Triggers', 'type': '[TriggerChild]'},
    }

    def __init__(self, *, id: int, name: str, version: str, type=None, created=None, group_type=None, is_global: bool=None, is_deprecated: bool=None, indicators=None, properties=None, related_models=None, created_by=None, corporation=None, location=None, triggers=None, **kwargs) -> None:
        super(AnalyticsModelResponse, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.version = version
        self.type = type
        self.created = created
        self.group_type = group_type
        self.is_global = is_global
        self.is_deprecated = is_deprecated
        self.indicators = indicators
        self.properties = properties
        self.related_models = related_models
        self.created_by = created_by
        self.corporation = corporation
        self.location = location
        self.triggers = triggers
