# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ReceiverResponse(Model):
    """ReceiverResponse.

    :param id:
    :type id: long
    :param serial_number:
    :type serial_number: str
    :param firmware_version:
    :type firmware_version: str
    :param network_id:
    :type network_id: str
    :param receiver_type: Possible values include: 'BaseStation', 'Repeater'
    :type receiver_type: str or ~smartdiagnostics_sdk.models.enum
    :param rf_channel:
    :type rf_channel: int
    :param pending_rf_channel:
    :type pending_rf_channel: int
    :param mac_address:
    :type mac_address: str
    :param radio_mac_address:
    :type radio_mac_address: str
    :param location:
    :type location: ~smartdiagnostics_sdk.models.LocationChild
    :param corporation:
    :type corporation: ~smartdiagnostics_sdk.models.CorporationChild
    :param nodes:
    :type nodes: list[~smartdiagnostics_sdk.models.NodeChild]
    :param nickname:
    :type nickname: str
    """

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'long'},
        'serial_number': {'key': 'SerialNumber', 'type': 'str'},
        'firmware_version': {'key': 'FirmwareVersion', 'type': 'str'},
        'network_id': {'key': 'NetworkId', 'type': 'str'},
        'receiver_type': {'key': 'ReceiverType', 'type': 'str'},
        'rf_channel': {'key': 'RfChannel', 'type': 'int'},
        'pending_rf_channel': {'key': 'PendingRfChannel', 'type': 'int'},
        'mac_address': {'key': 'MacAddress', 'type': 'str'},
        'radio_mac_address': {'key': 'RadioMacAddress', 'type': 'str'},
        'location': {'key': 'Location', 'type': 'LocationChild'},
        'corporation': {'key': 'Corporation', 'type': 'CorporationChild'},
        'nodes': {'key': 'Nodes', 'type': '[NodeChild]'},
        'nickname': {'key': 'Nickname', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ReceiverResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.firmware_version = kwargs.get('firmware_version', None)
        self.network_id = kwargs.get('network_id', None)
        self.receiver_type = kwargs.get('receiver_type', None)
        self.rf_channel = kwargs.get('rf_channel', None)
        self.pending_rf_channel = kwargs.get('pending_rf_channel', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.radio_mac_address = kwargs.get('radio_mac_address', None)
        self.location = kwargs.get('location', None)
        self.corporation = kwargs.get('corporation', None)
        self.nodes = kwargs.get('nodes', None)
        self.nickname = kwargs.get('nickname', None)
