# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vabamorf
else:
    import _vabamorf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vabamorf.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _vabamorf.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _vabamorf.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _vabamorf.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _vabamorf.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _vabamorf.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _vabamorf.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _vabamorf.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _vabamorf.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _vabamorf.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _vabamorf.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _vabamorf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _vabamorf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _vabamorf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _vabamorf.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _vabamorf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _vabamorf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vabamorf:
_vabamorf.SwigPyIterator_swigregister(SwigPyIterator)


def cdata(ptr: "void *", nelements: "size_t"=1) -> "SWIGCDATA":
    return _vabamorf.cdata(ptr, nelements)

def memmove(data: "void *", indata: "void const *") -> "void":
    return _vabamorf.memmove(data, indata)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _vabamorf.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _vabamorf.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _vabamorf.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _vabamorf.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _vabamorf.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _vabamorf.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _vabamorf.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _vabamorf.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _vabamorf.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _vabamorf.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _vabamorf.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _vabamorf.StringVector_rend(self)

    def clear(self) -> "void":
        return _vabamorf.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _vabamorf.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _vabamorf.StringVector_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.StringVector_swiginit(self, _vabamorf.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _vabamorf.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _vabamorf.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _vabamorf.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _vabamorf.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _vabamorf.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _vabamorf.StringVector_capacity(self)
    __swig_destroy__ = _vabamorf.delete_StringVector

# Register StringVector in _vabamorf:
_vabamorf.StringVector_swigregister(StringVector)

class AnalysisVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.AnalysisVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.AnalysisVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.AnalysisVector___bool__(self)

    def __len__(self) -> "std::vector< Analysis >::size_type":
        return _vabamorf.AnalysisVector___len__(self)

    def __getslice__(self, i: "std::vector< Analysis >::difference_type", j: "std::vector< Analysis >::difference_type") -> "std::vector< Analysis,std::allocator< Analysis > > *":
        return _vabamorf.AnalysisVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.AnalysisVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Analysis >::difference_type", j: "std::vector< Analysis >::difference_type") -> "void":
        return _vabamorf.AnalysisVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.AnalysisVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Analysis >::value_type const &":
        return _vabamorf.AnalysisVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.AnalysisVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Analysis >::value_type":
        return _vabamorf.AnalysisVector_pop(self)

    def append(self, x: "Analysis") -> "void":
        return _vabamorf.AnalysisVector_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.AnalysisVector_empty(self)

    def size(self) -> "std::vector< Analysis >::size_type":
        return _vabamorf.AnalysisVector_size(self)

    def swap(self, v: "AnalysisVector") -> "void":
        return _vabamorf.AnalysisVector_swap(self, v)

    def begin(self) -> "std::vector< Analysis >::iterator":
        return _vabamorf.AnalysisVector_begin(self)

    def end(self) -> "std::vector< Analysis >::iterator":
        return _vabamorf.AnalysisVector_end(self)

    def rbegin(self) -> "std::vector< Analysis >::reverse_iterator":
        return _vabamorf.AnalysisVector_rbegin(self)

    def rend(self) -> "std::vector< Analysis >::reverse_iterator":
        return _vabamorf.AnalysisVector_rend(self)

    def clear(self) -> "void":
        return _vabamorf.AnalysisVector_clear(self)

    def get_allocator(self) -> "std::vector< Analysis >::allocator_type":
        return _vabamorf.AnalysisVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.AnalysisVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Analysis >::iterator":
        return _vabamorf.AnalysisVector_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.AnalysisVector_swiginit(self, _vabamorf.new_AnalysisVector(*args))

    def push_back(self, x: "Analysis") -> "void":
        return _vabamorf.AnalysisVector_push_back(self, x)

    def front(self) -> "std::vector< Analysis >::value_type const &":
        return _vabamorf.AnalysisVector_front(self)

    def back(self) -> "std::vector< Analysis >::value_type const &":
        return _vabamorf.AnalysisVector_back(self)

    def assign(self, n: "std::vector< Analysis >::size_type", x: "Analysis") -> "void":
        return _vabamorf.AnalysisVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.AnalysisVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.AnalysisVector_insert(self, *args)

    def reserve(self, n: "std::vector< Analysis >::size_type") -> "void":
        return _vabamorf.AnalysisVector_reserve(self, n)

    def capacity(self) -> "std::vector< Analysis >::size_type":
        return _vabamorf.AnalysisVector_capacity(self)
    __swig_destroy__ = _vabamorf.delete_AnalysisVector

# Register AnalysisVector in _vabamorf:
_vabamorf.AnalysisVector_swigregister(AnalysisVector)

class WordAnalysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vabamorf.WordAnalysis_swiginit(self, _vabamorf.new_WordAnalysis(*args))
    first = property(_vabamorf.WordAnalysis_first_get, _vabamorf.WordAnalysis_first_set)
    second = property(_vabamorf.WordAnalysis_second_get, _vabamorf.WordAnalysis_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _vabamorf.delete_WordAnalysis

# Register WordAnalysis in _vabamorf:
_vabamorf.WordAnalysis_swigregister(WordAnalysis)

class SentenceAnalysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.SentenceAnalysis_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.SentenceAnalysis___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.SentenceAnalysis___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type":
        return _vabamorf.SentenceAnalysis___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::vector< Analysis > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< Analysis > > >::difference_type") -> "std::vector< std::pair< std::string,std::vector< Analysis,std::allocator< Analysis > > >,std::allocator< std::pair< std::string,std::vector< Analysis,std::allocator< Analysis > > > > > *":
        return _vabamorf.SentenceAnalysis___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.SentenceAnalysis___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::vector< Analysis > > >::difference_type", j: "std::vector< std::pair< std::string,std::vector< Analysis > > >::difference_type") -> "void":
        return _vabamorf.SentenceAnalysis___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.SentenceAnalysis___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &":
        return _vabamorf.SentenceAnalysis___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.SentenceAnalysis___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type":
        return _vabamorf.SentenceAnalysis_pop(self)

    def append(self, x: "WordAnalysis") -> "void":
        return _vabamorf.SentenceAnalysis_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.SentenceAnalysis_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type":
        return _vabamorf.SentenceAnalysis_size(self)

    def swap(self, v: "SentenceAnalysis") -> "void":
        return _vabamorf.SentenceAnalysis_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator":
        return _vabamorf.SentenceAnalysis_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator":
        return _vabamorf.SentenceAnalysis_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::reverse_iterator":
        return _vabamorf.SentenceAnalysis_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::reverse_iterator":
        return _vabamorf.SentenceAnalysis_rend(self)

    def clear(self) -> "void":
        return _vabamorf.SentenceAnalysis_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::allocator_type":
        return _vabamorf.SentenceAnalysis_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.SentenceAnalysis_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::iterator":
        return _vabamorf.SentenceAnalysis_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.SentenceAnalysis_swiginit(self, _vabamorf.new_SentenceAnalysis(*args))

    def push_back(self, x: "WordAnalysis") -> "void":
        return _vabamorf.SentenceAnalysis_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &":
        return _vabamorf.SentenceAnalysis_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::value_type const &":
        return _vabamorf.SentenceAnalysis_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type", x: "WordAnalysis") -> "void":
        return _vabamorf.SentenceAnalysis_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.SentenceAnalysis_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.SentenceAnalysis_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type") -> "void":
        return _vabamorf.SentenceAnalysis_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::vector< Analysis > > >::size_type":
        return _vabamorf.SentenceAnalysis_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SentenceAnalysis

# Register SentenceAnalysis in _vabamorf:
_vabamorf.SentenceAnalysis_swigregister(SentenceAnalysis)

class SpellingSuggestions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.SpellingSuggestions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.SpellingSuggestions___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.SpellingSuggestions___bool__(self)

    def __len__(self) -> "std::vector< SpellingResults >::size_type":
        return _vabamorf.SpellingSuggestions___len__(self)

    def __getslice__(self, i: "std::vector< SpellingResults >::difference_type", j: "std::vector< SpellingResults >::difference_type") -> "std::vector< SpellingResults,std::allocator< SpellingResults > > *":
        return _vabamorf.SpellingSuggestions___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.SpellingSuggestions___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SpellingResults >::difference_type", j: "std::vector< SpellingResults >::difference_type") -> "void":
        return _vabamorf.SpellingSuggestions___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.SpellingSuggestions___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SpellingResults >::value_type const &":
        return _vabamorf.SpellingSuggestions___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.SpellingSuggestions___setitem__(self, *args)

    def pop(self) -> "std::vector< SpellingResults >::value_type":
        return _vabamorf.SpellingSuggestions_pop(self)

    def append(self, x: "SpellingResults") -> "void":
        return _vabamorf.SpellingSuggestions_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.SpellingSuggestions_empty(self)

    def size(self) -> "std::vector< SpellingResults >::size_type":
        return _vabamorf.SpellingSuggestions_size(self)

    def swap(self, v: "SpellingSuggestions") -> "void":
        return _vabamorf.SpellingSuggestions_swap(self, v)

    def begin(self) -> "std::vector< SpellingResults >::iterator":
        return _vabamorf.SpellingSuggestions_begin(self)

    def end(self) -> "std::vector< SpellingResults >::iterator":
        return _vabamorf.SpellingSuggestions_end(self)

    def rbegin(self) -> "std::vector< SpellingResults >::reverse_iterator":
        return _vabamorf.SpellingSuggestions_rbegin(self)

    def rend(self) -> "std::vector< SpellingResults >::reverse_iterator":
        return _vabamorf.SpellingSuggestions_rend(self)

    def clear(self) -> "void":
        return _vabamorf.SpellingSuggestions_clear(self)

    def get_allocator(self) -> "std::vector< SpellingResults >::allocator_type":
        return _vabamorf.SpellingSuggestions_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.SpellingSuggestions_pop_back(self)

    def erase(self, *args) -> "std::vector< SpellingResults >::iterator":
        return _vabamorf.SpellingSuggestions_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.SpellingSuggestions_swiginit(self, _vabamorf.new_SpellingSuggestions(*args))

    def push_back(self, x: "SpellingResults") -> "void":
        return _vabamorf.SpellingSuggestions_push_back(self, x)

    def front(self) -> "std::vector< SpellingResults >::value_type const &":
        return _vabamorf.SpellingSuggestions_front(self)

    def back(self) -> "std::vector< SpellingResults >::value_type const &":
        return _vabamorf.SpellingSuggestions_back(self)

    def assign(self, n: "std::vector< SpellingResults >::size_type", x: "SpellingResults") -> "void":
        return _vabamorf.SpellingSuggestions_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.SpellingSuggestions_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.SpellingSuggestions_insert(self, *args)

    def reserve(self, n: "std::vector< SpellingResults >::size_type") -> "void":
        return _vabamorf.SpellingSuggestions_reserve(self, n)

    def capacity(self) -> "std::vector< SpellingResults >::size_type":
        return _vabamorf.SpellingSuggestions_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SpellingSuggestions

# Register SpellingSuggestions in _vabamorf:
_vabamorf.SpellingSuggestions_swigregister(SpellingSuggestions)

class Syllables(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.Syllables_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.Syllables___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.Syllables___bool__(self)

    def __len__(self) -> "std::vector< Syllable >::size_type":
        return _vabamorf.Syllables___len__(self)

    def __getslice__(self, i: "std::vector< Syllable >::difference_type", j: "std::vector< Syllable >::difference_type") -> "std::vector< Syllable,std::allocator< Syllable > > *":
        return _vabamorf.Syllables___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.Syllables___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Syllable >::difference_type", j: "std::vector< Syllable >::difference_type") -> "void":
        return _vabamorf.Syllables___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.Syllables___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Syllable >::value_type const &":
        return _vabamorf.Syllables___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.Syllables___setitem__(self, *args)

    def pop(self) -> "std::vector< Syllable >::value_type":
        return _vabamorf.Syllables_pop(self)

    def append(self, x: "Syllable") -> "void":
        return _vabamorf.Syllables_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.Syllables_empty(self)

    def size(self) -> "std::vector< Syllable >::size_type":
        return _vabamorf.Syllables_size(self)

    def swap(self, v: "Syllables") -> "void":
        return _vabamorf.Syllables_swap(self, v)

    def begin(self) -> "std::vector< Syllable >::iterator":
        return _vabamorf.Syllables_begin(self)

    def end(self) -> "std::vector< Syllable >::iterator":
        return _vabamorf.Syllables_end(self)

    def rbegin(self) -> "std::vector< Syllable >::reverse_iterator":
        return _vabamorf.Syllables_rbegin(self)

    def rend(self) -> "std::vector< Syllable >::reverse_iterator":
        return _vabamorf.Syllables_rend(self)

    def clear(self) -> "void":
        return _vabamorf.Syllables_clear(self)

    def get_allocator(self) -> "std::vector< Syllable >::allocator_type":
        return _vabamorf.Syllables_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.Syllables_pop_back(self)

    def erase(self, *args) -> "std::vector< Syllable >::iterator":
        return _vabamorf.Syllables_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.Syllables_swiginit(self, _vabamorf.new_Syllables(*args))

    def push_back(self, x: "Syllable") -> "void":
        return _vabamorf.Syllables_push_back(self, x)

    def front(self) -> "std::vector< Syllable >::value_type const &":
        return _vabamorf.Syllables_front(self)

    def back(self) -> "std::vector< Syllable >::value_type const &":
        return _vabamorf.Syllables_back(self)

    def assign(self, n: "std::vector< Syllable >::size_type", x: "Syllable") -> "void":
        return _vabamorf.Syllables_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.Syllables_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.Syllables_insert(self, *args)

    def reserve(self, n: "std::vector< Syllable >::size_type") -> "void":
        return _vabamorf.Syllables_reserve(self, n)

    def capacity(self) -> "std::vector< Syllable >::size_type":
        return _vabamorf.Syllables_capacity(self)
    __swig_destroy__ = _vabamorf.delete_Syllables

# Register Syllables in _vabamorf:
_vabamorf.Syllables_swigregister(Syllables)

class SentenceSyllables(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vabamorf.SentenceSyllables_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vabamorf.SentenceSyllables___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vabamorf.SentenceSyllables___bool__(self)

    def __len__(self) -> "std::vector< std::vector< Syllable > >::size_type":
        return _vabamorf.SentenceSyllables___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< Syllable > >::difference_type", j: "std::vector< std::vector< Syllable > >::difference_type") -> "std::vector< std::vector< Syllable,std::allocator< Syllable > >,std::allocator< std::vector< Syllable,std::allocator< Syllable > > > > *":
        return _vabamorf.SentenceSyllables___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vabamorf.SentenceSyllables___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< Syllable > >::difference_type", j: "std::vector< std::vector< Syllable > >::difference_type") -> "void":
        return _vabamorf.SentenceSyllables___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vabamorf.SentenceSyllables___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< Syllable > >::value_type const &":
        return _vabamorf.SentenceSyllables___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vabamorf.SentenceSyllables___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< Syllable > >::value_type":
        return _vabamorf.SentenceSyllables_pop(self)

    def append(self, x: "Syllables") -> "void":
        return _vabamorf.SentenceSyllables_append(self, x)

    def empty(self) -> "bool":
        return _vabamorf.SentenceSyllables_empty(self)

    def size(self) -> "std::vector< std::vector< Syllable > >::size_type":
        return _vabamorf.SentenceSyllables_size(self)

    def swap(self, v: "SentenceSyllables") -> "void":
        return _vabamorf.SentenceSyllables_swap(self, v)

    def begin(self) -> "std::vector< std::vector< Syllable > >::iterator":
        return _vabamorf.SentenceSyllables_begin(self)

    def end(self) -> "std::vector< std::vector< Syllable > >::iterator":
        return _vabamorf.SentenceSyllables_end(self)

    def rbegin(self) -> "std::vector< std::vector< Syllable > >::reverse_iterator":
        return _vabamorf.SentenceSyllables_rbegin(self)

    def rend(self) -> "std::vector< std::vector< Syllable > >::reverse_iterator":
        return _vabamorf.SentenceSyllables_rend(self)

    def clear(self) -> "void":
        return _vabamorf.SentenceSyllables_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< Syllable > >::allocator_type":
        return _vabamorf.SentenceSyllables_get_allocator(self)

    def pop_back(self) -> "void":
        return _vabamorf.SentenceSyllables_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< Syllable > >::iterator":
        return _vabamorf.SentenceSyllables_erase(self, *args)

    def __init__(self, *args):
        _vabamorf.SentenceSyllables_swiginit(self, _vabamorf.new_SentenceSyllables(*args))

    def push_back(self, x: "Syllables") -> "void":
        return _vabamorf.SentenceSyllables_push_back(self, x)

    def front(self) -> "std::vector< std::vector< Syllable > >::value_type const &":
        return _vabamorf.SentenceSyllables_front(self)

    def back(self) -> "std::vector< std::vector< Syllable > >::value_type const &":
        return _vabamorf.SentenceSyllables_back(self)

    def assign(self, n: "std::vector< std::vector< Syllable > >::size_type", x: "Syllables") -> "void":
        return _vabamorf.SentenceSyllables_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vabamorf.SentenceSyllables_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vabamorf.SentenceSyllables_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< Syllable > >::size_type") -> "void":
        return _vabamorf.SentenceSyllables_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< Syllable > >::size_type":
        return _vabamorf.SentenceSyllables_capacity(self)
    __swig_destroy__ = _vabamorf.delete_SentenceSyllables

# Register SentenceSyllables in _vabamorf:
_vabamorf.SentenceSyllables_swigregister(SentenceSyllables)


def FSCInit() -> "bool":
    return _vabamorf.FSCInit()

def FSCTerminate() -> "void":
    return _vabamorf.FSCTerminate()
class Analysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_vabamorf.Analysis_root_get, _vabamorf.Analysis_root_set)
    ending = property(_vabamorf.Analysis_ending_get, _vabamorf.Analysis_ending_set)
    clitic = property(_vabamorf.Analysis_clitic_get, _vabamorf.Analysis_clitic_set)
    partofspeech = property(_vabamorf.Analysis_partofspeech_get, _vabamorf.Analysis_partofspeech_set)
    form = property(_vabamorf.Analysis_form_get, _vabamorf.Analysis_form_set)

    def __init__(self, *args):
        _vabamorf.Analysis_swiginit(self, _vabamorf.new_Analysis(*args))
    __swig_destroy__ = _vabamorf.delete_Analysis

# Register Analysis in _vabamorf:
_vabamorf.Analysis_swigregister(Analysis)

class Syllable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    syllable = property(_vabamorf.Syllable_syllable_get, _vabamorf.Syllable_syllable_set)
    quantity = property(_vabamorf.Syllable_quantity_get, _vabamorf.Syllable_quantity_set)
    accent = property(_vabamorf.Syllable_accent_get, _vabamorf.Syllable_accent_set)

    def __init__(self, *args):
        _vabamorf.Syllable_swiginit(self, _vabamorf.new_Syllable(*args))
    __swig_destroy__ = _vabamorf.delete_Syllable

# Register Syllable in _vabamorf:
_vabamorf.Syllable_swigregister(Syllable)

class SpellingResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    word = property(_vabamorf.SpellingResults_word_get, _vabamorf.SpellingResults_word_set)
    spelling = property(_vabamorf.SpellingResults_spelling_get, _vabamorf.SpellingResults_spelling_set)
    suggestions = property(_vabamorf.SpellingResults_suggestions_get, _vabamorf.SpellingResults_suggestions_set)

    def __init__(self, *args):
        _vabamorf.SpellingResults_swiginit(self, _vabamorf.new_SpellingResults(*args))
    __swig_destroy__ = _vabamorf.delete_SpellingResults

# Register SpellingResults in _vabamorf:
_vabamorf.SpellingResults_swigregister(SpellingResults)

class Vabamorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lexPath: "std::string const", disambLexPath: "std::string const"):
        _vabamorf.Vabamorf_swiginit(self, _vabamorf.new_Vabamorf(lexPath, disambLexPath))

    def analyze(self, sentence: "StringVector", disambiguate: "bool const", guess: "bool const", phonetic: "bool const", propername: "bool const") -> "std::vector< WordAnalysis,std::allocator< WordAnalysis > >":
        return _vabamorf.Vabamorf_analyze(self, sentence, disambiguate, guess, phonetic, propername)

    def disambiguate(self, sentence: "SentenceAnalysis") -> "std::vector< WordAnalysis,std::allocator< WordAnalysis > >":
        return _vabamorf.Vabamorf_disambiguate(self, sentence)

    def spellcheck(self, sentence: "StringVector", suggest: "bool const") -> "SpellingSuggestions":
        return _vabamorf.Vabamorf_spellcheck(self, sentence, suggest)

    def synthesize(self, lemma: "std::string const", form: "std::string const", partofspeech: "std::string const", hint: "std::string const", guess: "bool const", phon: "bool const") -> "StringVector":
        return _vabamorf.Vabamorf_synthesize(self, lemma, form, partofspeech, hint, guess, phon)
    __swig_destroy__ = _vabamorf.delete_Vabamorf

# Register Vabamorf in _vabamorf:
_vabamorf.Vabamorf_swigregister(Vabamorf)


def syllabify(word: "std::string") -> "Syllables":
    return _vabamorf.syllabify(word)

def syllabifySentence(sentence: "StringVector") -> "SentenceSyllables":
    return _vabamorf.syllabifySentence(sentence)


