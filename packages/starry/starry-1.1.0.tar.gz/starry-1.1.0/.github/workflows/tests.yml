name: tests

on:
  push:
    branches: [master,dev]
  pull_request:
    branches: [master]

jobs:
  tests:
    name: "${{ matrix.pymc-version }} on py${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.7"
            pymc-version: "pymc3==3.9.3"
            arviz-version: "arviz==0.11.1"
          - python-version: "3.8"
            pymc-version: "pymc3==3.9.3"
            arviz-version: "arviz==0.11.1"
          - python-version: "3.8"
            pymc-version: "pymc3==3.10"
            arviz-version: "arviz==0.11.1"
          - python-version: "3.8"
            pymc-version: "pymc3==3.11"
            arviz-version: ""
          - python-version: "3.8"
            pymc-version: "https://github.com/pymc-devs/pymc3/archive/master.zip"
            arviz-version: ""
          - python-version: "3.9"
            pymc-version: "pymc3==3.11"
            arviz-version: ""

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/cache@v2
        with:
          path: ~/.theano
          key: ${{ runner.os }}-${{ matrix.pymc-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.pymc-version }}-

      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: starry
          environment-file: environment.yml
          python-version: ${{ matrix.python-version }}

      - name: Set up environment
        shell: bash -l {0}
        run: |
          sudo apt-get update
          sudo apt-get install ffmpeg

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install -U pip
          python -m pip uninstall -y theano  # so that we know which version we're getting
          python -m pip install ${{ matrix.pymc-version }} ${{ matrix.arviz-version }}
          python -m pip install -e ".[tests]"
          python -c 'import theano; print(theano.__version__)'

      - name: Run tests (greedy)
        shell: bash -l {0}
        run: python -m pytest -v tests/greedy --junitxml=junit/test-results-greedy.xml --cov=starry --cov-append

      - name: Run tests (lazy)
        shell: bash -l {0}
        run: python -m pytest -v tests/lazy --junitxml=junit/test-results-lazy.xml --cov=starry --cov-append
        if: ${{ always() }}

      - name: Run extension tests (greedy)
        shell: bash -l {0}
        run: python -m pytest -v starry/extensions/tests/greedy --junitxml=junit/test-results-extensions-greedy.xml --cov=starry --cov-append
        if: ${{ always() }}

      - name: Run extension tests (lazy)
        shell: bash -l {0}
        run: python -m pytest -v starry/extensions/tests/lazy --junitxml=junit/test-results-extensions-lazy.xml --cov=starry --cov-append
        if: ${{ always() }}

      - name: Get unique id
        id: unique-id
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: |
          export JOB_ID=`echo $STRATEGY_CONTEXT | md5sum`
          echo "::set-output name=id::$JOB_ID"
        if: always()

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: junit/test-*.xml
          comment_on_pr: false

      - name: Coveralls
        uses: AndreMiras/coveralls-python-action@develop
        if: always()
        with:
          parallel: true
          flag-name: Unit Test

  coveralls_finish:
    needs: tests
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Coveralls Finished
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true
