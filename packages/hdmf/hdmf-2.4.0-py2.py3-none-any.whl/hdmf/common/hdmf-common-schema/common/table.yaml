# hdmf-schema-language=2.0.2
datasets:

- data_type_def: VectorData
  data_type_inc: Data
  doc: An n-dimensional dataset representing a column of a DynamicTable.
    If used without an accompanying VectorIndex, first dimension is
    along the rows of the DynamicTable and each step along the first
    dimension is a cell of the larger table. VectorData can also be
    used to represent a ragged array if paired with a VectorIndex.
    This allows for storing arrays of varying length in a single cell
    of the DynamicTable by indexing into this VectorData. The first
    vector is at VectorData[0:VectorIndex[0]]. The second vector is at
    VectorData[VectorIndex[0]:VectorIndex[1]], and so on.
  dims:
  - - dim0
  - - dim0
    - dim1
  - - dim0
    - dim1
    - dim2
  - - dim0
    - dim1
    - dim2
    - dim3
  shape:
  - - null
  - - null
    - null
  - - null
    - null
    - null
  - - null
    - null
    - null
    - null
  attributes:
  - name: description
    dtype: text
    doc: Description of what these vectors represent.

- data_type_def: VectorIndex
  data_type_inc: VectorData
  dtype: uint8
  doc: Used with VectorData to encode a ragged array. An array of indices
    into the first dimension of the target VectorData, and forming a map
    between the rows of a DynamicTable and the indices of the VectorData.
    The name of the VectorIndex is expected to be the name of the target
    VectorData object followed by "_index".
  dims:
  - num_rows
  shape:
  - null
  attributes:
  - name: target
    dtype:
      target_type: VectorData
      reftype: object
    doc: Reference to the target dataset that this index applies to.

- data_type_def: ElementIdentifiers
  data_type_inc: Data
  default_name: element_id
  dtype: int
  dims:
  - num_elements
  shape:
  - null
  doc: A list of unique identifiers for values within a dataset, e.g. rows of a DynamicTable.

- data_type_def: DynamicTableRegion
  data_type_inc: VectorData
  dtype: int
  doc: DynamicTableRegion provides a link from one table to an index or region of another. The `table` attribute is a
    link to another `DynamicTable`, indicating which table is referenced, and the data is int(s) indicating the row(s)
    (0-indexed) of the target array. `DynamicTableRegion`s can be used to associate rows with repeated meta-data without
    data duplication. They can also be used to create hierarchical relationships between multiple `DynamicTable`s.
    `DynamicTableRegion` objects may be paired with a `VectorIndex` object to create ragged references, so a single cell
    of a `DynamicTable` can reference many rows of another `DynamicTable`.
  dims:
  - num_rows
  shape:
  - null
  attributes:
  - name: table
    dtype:
      target_type: DynamicTable
      reftype: object
    doc: Reference to the DynamicTable object that this region applies to.
  - name: description
    dtype: text
    doc: Description of what this table region points to.

- data_type_def: VocabData
  data_type_inc: VectorData
  dtype: uint8
  doc: Data that come from a controlled vocabulary of text values. A data value of i corresponds
    to the i-th element in the 'vocabulary' array attribute.
  attributes:
  - name: vocabulary
    dtype: text
    shape:
      - null
    doc: The available items in the controlled vocabulary.

groups:

- data_type_def: DynamicTable
  data_type_inc: Container
  doc: A group containing multiple datasets that are aligned on the first dimension
    (Currently, this requirement if left up to APIs to check and enforce). These datasets
    represent different columns in the table. Apart from a column that contains unique
    identifiers for each row, there are no other required datasets. Users are free to add
    any number of custom VectorData objects (columns) here. DynamicTable also supports
    ragged array columns, where each element can be of a different size. To add a ragged
    array column, use a VectorIndex type to index the corresponding VectorData type.
    See documentation for VectorData and VectorIndex for more details.
    Unlike a compound data type, which is analogous to storing an
    array-of-structs, a DynamicTable can be thought of as a struct-of-arrays. This provides
    an alternative structure to choose from when optimizing storage for anticipated access
    patterns. Additionally, this type provides a way of creating a table without having to
    define a compound type up front. Although this convenience may be attractive, users
    should think carefully about how data will be accessed. DynamicTable is more appropriate
    for column-centric access, whereas a dataset with a compound type would be more
    appropriate for row-centric access. Finally, data size should also be taken into account.
    For small tables, performance loss may be an acceptable trade-off for the flexibility of
    a DynamicTable.
  attributes:
  - name: colnames
    dtype: text
    dims:
    - num_columns
    shape:
    - null
    doc: The names of the columns in this table. This should be used to specify
      an order to the columns.
  - name: description
    dtype: text
    doc: Description of what is in this dynamic table.
  datasets:
  - name: id
    data_type_inc: ElementIdentifiers
    dtype: int
    dims:
    - num_rows
    shape:
    - null
    doc: Array of unique identifiers for the rows of this dynamic table.
  - data_type_inc: VectorData
    doc: Vector columns, including index columns, of this dynamic table.
    quantity: '*'
