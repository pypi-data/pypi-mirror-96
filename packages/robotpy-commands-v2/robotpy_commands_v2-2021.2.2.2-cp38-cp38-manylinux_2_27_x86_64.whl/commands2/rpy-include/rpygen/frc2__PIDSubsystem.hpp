
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../src/include/frc2/command/PIDSubsystem.h>





#include <rpygen/frc2__SubsystemBase.hpp>

namespace rpygen {

using namespace frc2;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc2__PIDSubsystem = 
    Pyfrc2__SubsystemBase<
        PyTrampolineBase
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc2__PIDSubsystem : PyBasefrc2__PIDSubsystem<PyTrampolineBase, CxxBase> {
    using PyBasefrc2__PIDSubsystem<PyTrampolineBase, CxxBase>::PyBasefrc2__PIDSubsystem;



#ifndef RPYGEN_DISABLE_Periodic_v
    void Periodic() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "periodic", Periodic,);    }
#endif

#ifndef RPYGEN_DISABLE_Enable_v
    void Enable() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "enable", Enable,);    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "disable", Disable,);    }
#endif

#ifndef RPYGEN_DISABLE_GetMeasurement_v
    double GetMeasurement() override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem,PYBIND11_TYPE(double), CxxBase, "_getMeasurement", GetMeasurement,);    }
#endif

#ifndef RPYGEN_DISABLE_UseOutput_d_d
    void UseOutput(double output, double setpoint) override {
RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem,PYBIND11_TYPE(void), CxxBase, "_useOutput", UseOutput,output, setpoint);    }
#endif



    using frc2::PIDSubsystem::m_controller;

};

}; // namespace rpygen
