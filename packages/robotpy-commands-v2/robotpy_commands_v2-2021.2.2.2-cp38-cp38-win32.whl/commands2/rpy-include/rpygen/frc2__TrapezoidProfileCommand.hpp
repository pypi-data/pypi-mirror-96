
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\src\include\frc2\command\TrapezoidProfileCommand.h>

#include <frc2/command/Command.h>
#include <frc2/command/Subsystem.h>




#include <rpygen/frc2__CommandBase.hpp>

namespace rpygen {

using namespace frc2;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc2__TrapezoidProfileCommand = 
    Pyfrc2__CommandBase<
        PyTrampolineBase
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename Distance, typename CxxBase = PyTrampolineBase>
struct Pyfrc2__TrapezoidProfileCommand : PyBasefrc2__TrapezoidProfileCommand<PyTrampolineBase, CxxBase> {
    using PyBasefrc2__TrapezoidProfileCommand<PyTrampolineBase, CxxBase>::PyBasefrc2__TrapezoidProfileCommand;


using State = typename frc::TrapezoidProfile<Distance>::State;
#ifndef RPYGEN_DISABLE_Initialize_v
    void Initialize() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "initialize", Initialize,);    }
#endif

#ifndef RPYGEN_DISABLE_Execute_v
    void Execute() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "execute", Execute,);    }
#endif

#ifndef RPYGEN_DISABLE_End_b
    void End(bool interrupted) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "end", End,interrupted);    }
#endif

#ifndef RPYGEN_DISABLE_IsFinished_v
    bool IsFinished() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "isFinished", IsFinished,);    }
#endif




};

}; // namespace rpygen


namespace rpygen {

using namespace frc2;


template <typename Distance>
struct bind_frc2__TrapezoidProfileCommand {

          using State = typename frc::TrapezoidProfile<Distance>::State;


      using TrapezoidProfileCommand_Trampoline = rpygen::Pyfrc2__TrapezoidProfileCommand<typename frc2::TrapezoidProfileCommand<Distance>, Distance>;
py::class_<typename frc2::TrapezoidProfileCommand<Distance>, std::shared_ptr<typename frc2::TrapezoidProfileCommand<Distance>>, TrapezoidProfileCommand_Trampoline, CommandBase> cls_TrapezoidProfileCommand;




    py::module &m;
    std::string clsName;

bind_frc2__TrapezoidProfileCommand(py::module &m, const char * clsName) :
    cls_TrapezoidProfileCommand(m, clsName),



    m(m),
    clsName(clsName)
{}

void finish(const char * set_doc = NULL, const char * add_doc = NULL) {

    
  cls_TrapezoidProfileCommand.doc() =
    "A command that runs a TrapezoidProfile.  Useful for smoothly controlling\n"
"mechanism motion.\n"
"\n"
"@see TrapezoidProfile";

  cls_TrapezoidProfileCommand
      .def(py::init<frc::TrapezoidProfile<Distance >, std::function<void(State)>, wpi::ArrayRef<std::shared_ptr<Subsystem> >>(),
      py::arg("profile"), py::arg("output"), py::arg("requirements")=wpi::ArrayRef<std::shared_ptr<Subsystem> >{}, release_gil(), py::doc(
    "Creates a new TrapezoidProfileCommand that will execute the given\n"
"TrapezoidalProfile. Output will be piped to the provided consumer function.\n"
"\n"
":param profile: The motion profile to execute.\n"
":param output:  The consumer for the profile output.")
  )
    
      .def("initialize", &frc2::TrapezoidProfileCommand<Distance>::Initialize, release_gil()
  )
    
      .def("execute", &frc2::TrapezoidProfileCommand<Distance>::Execute, release_gil()
  )
    
      .def("end", &frc2::TrapezoidProfileCommand<Distance>::End,
      py::arg("interrupted"), release_gil()
  )
    
      .def("isFinished", &frc2::TrapezoidProfileCommand<Distance>::IsFinished, release_gil()
  )
    
;

  

    if (set_doc) {
        cls_TrapezoidProfileCommand.doc() = set_doc;
    }
    if (add_doc) {
        cls_TrapezoidProfileCommand.doc() = py::cast<std::string>(cls_TrapezoidProfileCommand.doc()) + add_doc;
    }

    
}

}; // struct bind_frc2__TrapezoidProfileCommand

}; // namespace rpygen