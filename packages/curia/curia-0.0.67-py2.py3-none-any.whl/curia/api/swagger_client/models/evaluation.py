# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Evaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.
    
    Do not edit the class manually.

    Parameters
    ----------

    Returns
    -------

    
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'roc_data_uri': 'str',
        'prc_data_uri': 'str',
        'auc': 'float',
        'accuracy': 'float',
        'specificity': 'float',
        'sensitivity': 'float',
        'qini_data_uri': 'str',
        'mean_treatment_effect': 'float',
        'total_treatment_effect': 'float',
        'feature_impact_uri': 'str',
        'model_id': 'str',
        'project_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'roc_data_uri': 'rocDataUri',
        'prc_data_uri': 'prcDataUri',
        'auc': 'auc',
        'accuracy': 'accuracy',
        'specificity': 'specificity',
        'sensitivity': 'sensitivity',
        'qini_data_uri': 'qiniDataUri',
        'mean_treatment_effect': 'meanTreatmentEffect',
        'total_treatment_effect': 'totalTreatmentEffect',
        'feature_impact_uri': 'featureImpactUri',
        'model_id': 'modelId',
        'project_id': 'projectId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, id=None, roc_data_uri=None, prc_data_uri=None, auc=None, accuracy=None, specificity=None, sensitivity=None, qini_data_uri=None, mean_treatment_effect=None, total_treatment_effect=None, feature_impact_uri=None, model_id=None, project_id=None, created_at=None, updated_at=None, version=None):  # noqa: E501
        """Evaluation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._roc_data_uri = None
        self._prc_data_uri = None
        self._auc = None
        self._accuracy = None
        self._specificity = None
        self._sensitivity = None
        self._qini_data_uri = None
        self._mean_treatment_effect = None
        self._total_treatment_effect = None
        self._feature_impact_uri = None
        self._model_id = None
        self._project_id = None
        self._created_at = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        self.id = id
        if roc_data_uri is not None:
            self.roc_data_uri = roc_data_uri
        if prc_data_uri is not None:
            self.prc_data_uri = prc_data_uri
        if auc is not None:
            self.auc = auc
        if accuracy is not None:
            self.accuracy = accuracy
        if specificity is not None:
            self.specificity = specificity
        if sensitivity is not None:
            self.sensitivity = sensitivity
        if qini_data_uri is not None:
            self.qini_data_uri = qini_data_uri
        if mean_treatment_effect is not None:
            self.mean_treatment_effect = mean_treatment_effect
        if total_treatment_effect is not None:
            self.total_treatment_effect = total_treatment_effect
        if feature_impact_uri is not None:
            self.feature_impact_uri = feature_impact_uri
        if model_id is not None:
            self.model_id = model_id
        self.project_id = project_id
        self.created_at = created_at
        self.updated_at = updated_at
        self.version = version

    @property
    def id(self):
        """Gets the id of this Evaluation.  # noqa: E501"""
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Evaluation.

        Parameters
        ----------
        id :
            The id of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def roc_data_uri(self):
        """Gets the roc_data_uri of this Evaluation.  # noqa: E501"""
        return self._roc_data_uri

    @roc_data_uri.setter
    def roc_data_uri(self, roc_data_uri):
        """Sets the roc_data_uri of this Evaluation.

        Parameters
        ----------
        roc_data_uri :
            The roc_data_uri of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._roc_data_uri = roc_data_uri

    @property
    def prc_data_uri(self):
        """Gets the prc_data_uri of this Evaluation.  # noqa: E501"""
        return self._prc_data_uri

    @prc_data_uri.setter
    def prc_data_uri(self, prc_data_uri):
        """Sets the prc_data_uri of this Evaluation.

        Parameters
        ----------
        prc_data_uri :
            The prc_data_uri of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._prc_data_uri = prc_data_uri

    @property
    def auc(self):
        """Gets the auc of this Evaluation.  # noqa: E501"""
        return self._auc

    @auc.setter
    def auc(self, auc):
        """Sets the auc of this Evaluation.

        Parameters
        ----------
        auc :
            The auc of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._auc = auc

    @property
    def accuracy(self):
        """Gets the accuracy of this Evaluation.  # noqa: E501"""
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Evaluation.

        Parameters
        ----------
        accuracy :
            The accuracy of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._accuracy = accuracy

    @property
    def specificity(self):
        """Gets the specificity of this Evaluation.  # noqa: E501"""
        return self._specificity

    @specificity.setter
    def specificity(self, specificity):
        """Sets the specificity of this Evaluation.

        Parameters
        ----------
        specificity :
            The specificity of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._specificity = specificity

    @property
    def sensitivity(self):
        """Gets the sensitivity of this Evaluation.  # noqa: E501"""
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this Evaluation.

        Parameters
        ----------
        sensitivity :
            The sensitivity of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._sensitivity = sensitivity

    @property
    def qini_data_uri(self):
        """Gets the qini_data_uri of this Evaluation.  # noqa: E501"""
        return self._qini_data_uri

    @qini_data_uri.setter
    def qini_data_uri(self, qini_data_uri):
        """Sets the qini_data_uri of this Evaluation.

        Parameters
        ----------
        qini_data_uri :
            The qini_data_uri of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._qini_data_uri = qini_data_uri

    @property
    def mean_treatment_effect(self):
        """Gets the mean_treatment_effect of this Evaluation.  # noqa: E501"""
        return self._mean_treatment_effect

    @mean_treatment_effect.setter
    def mean_treatment_effect(self, mean_treatment_effect):
        """Sets the mean_treatment_effect of this Evaluation.

        Parameters
        ----------
        mean_treatment_effect :
            The mean_treatment_effect of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._mean_treatment_effect = mean_treatment_effect

    @property
    def total_treatment_effect(self):
        """Gets the total_treatment_effect of this Evaluation.  # noqa: E501"""
        return self._total_treatment_effect

    @total_treatment_effect.setter
    def total_treatment_effect(self, total_treatment_effect):
        """Sets the total_treatment_effect of this Evaluation.

        Parameters
        ----------
        total_treatment_effect :
            The total_treatment_effect of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._total_treatment_effect = total_treatment_effect

    @property
    def feature_impact_uri(self):
        """Gets the feature_impact_uri of this Evaluation.  # noqa: E501"""
        return self._feature_impact_uri

    @feature_impact_uri.setter
    def feature_impact_uri(self, feature_impact_uri):
        """Sets the feature_impact_uri of this Evaluation.

        Parameters
        ----------
        feature_impact_uri :
            The feature_impact_uri of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._feature_impact_uri = feature_impact_uri

    @property
    def model_id(self):
        """Gets the model_id of this Evaluation.  # noqa: E501"""
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Evaluation.

        Parameters
        ----------
        model_id :
            The model_id of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """

        self._model_id = model_id

    @property
    def project_id(self):
        """Gets the project_id of this Evaluation.  # noqa: E501"""
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Evaluation.

        Parameters
        ----------
        project_id :
            The project_id of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def created_at(self):
        """Gets the created_at of this Evaluation.  # noqa: E501"""
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Evaluation.

        Parameters
        ----------
        created_at :
            The created_at of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Evaluation.  # noqa: E501"""
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Evaluation.

        Parameters
        ----------
        updated_at :
            The updated_at of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Evaluation.  # noqa: E501"""
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Evaluation.

        Parameters
        ----------
        version :
            The version of this Evaluation.  # noqa: E501

        Returns
        -------

        
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evaluation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
