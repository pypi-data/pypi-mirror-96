(self.webpackChunk_here_map_widget_for_jupyter=self.webpackChunk_here_map_widget_for_jupyter||[]).push([[271],{271:(e,r,t)=>{"use strict";t.r(r),t.d(r,{earthRadius:()=>n,factors:()=>i,unitsFactors:()=>o,areaFactors:()=>s,feature:()=>a,geometry:()=>u,point:()=>l,points:()=>m,polygon:()=>c,polygons:()=>d,lineString:()=>f,lineStrings:()=>h,featureCollection:()=>g,multiLineString:()=>w,multiPoint:()=>v,multiPolygon:()=>b,geometryCollection:()=>y,round:()=>p,radiansToLength:()=>E,lengthToRadians:()=>P,lengthToDegrees:()=>k,bearingToAzimuth:()=>x,radiansToDegrees:()=>A,degreesToRadians:()=>M,convertLength:()=>_,convertArea:()=>L,isNumber:()=>S,isObject:()=>C,validateBBox:()=>T,validateId:()=>F});var n=6371008.8,i={centimeters:100*n,centimetres:100*n,degrees:n/111325,feet:3.28084*n,inches:39.37*n,kilometers:n/1e3,kilometres:n/1e3,meters:n,metres:n,miles:n/1609.344,millimeters:1e3*n,millimetres:1e3*n,nauticalmiles:n/1852,radians:1,yards:n/1.0936},o={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/n,yards:1/1.0936},s={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function a(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function u(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return l(r).geometry;case"LineString":return f(r).geometry;case"Polygon":return c(r).geometry;case"MultiPoint":return v(r).geometry;case"MultiLineString":return w(r).geometry;case"MultiPolygon":return b(r).geometry;default:throw new Error(e+" is invalid")}}function l(e,r,t){if(void 0===t&&(t={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!S(e[0])||!S(e[1]))throw new Error("coordinates must contain numbers");return a({type:"Point",coordinates:e},r,t)}function m(e,r,t){return void 0===t&&(t={}),g(e.map((function(e){return l(e,r)})),t)}function c(e,r,t){void 0===t&&(t={});for(var n=0,i=e;n<i.length;n++){var o=i[n];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<o[o.length-1].length;s++)if(o[o.length-1][s]!==o[0][s])throw new Error("First and last Position are not equivalent.")}return a({type:"Polygon",coordinates:e},r,t)}function d(e,r,t){return void 0===t&&(t={}),g(e.map((function(e){return c(e,r)})),t)}function f(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return a({type:"LineString",coordinates:e},r,t)}function h(e,r,t){return void 0===t&&(t={}),g(e.map((function(e){return f(e,r)})),t)}function g(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function w(e,r,t){return void 0===t&&(t={}),a({type:"MultiLineString",coordinates:e},r,t)}function v(e,r,t){return void 0===t&&(t={}),a({type:"MultiPoint",coordinates:e},r,t)}function b(e,r,t){return void 0===t&&(t={}),a({type:"MultiPolygon",coordinates:e},r,t)}function y(e,r,t){return void 0===t&&(t={}),a({type:"GeometryCollection",geometries:e},r,t)}function p(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t}function E(e,r){void 0===r&&(r="kilometers");var t=i[r];if(!t)throw new Error(r+" units is invalid");return e*t}function P(e,r){void 0===r&&(r="kilometers");var t=i[r];if(!t)throw new Error(r+" units is invalid");return e/t}function k(e,r){return A(P(e,r))}function x(e){var r=e%360;return r<0&&(r+=360),r}function A(e){return e%(2*Math.PI)*180/Math.PI}function M(e){return e%360*Math.PI/180}function _(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return E(P(e,r),t)}function L(e,r,t){if(void 0===r&&(r="meters"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("area must be a positive number");var n=s[r];if(!n)throw new Error("invalid original units");var i=s[t];if(!i)throw new Error("invalid final units");return e/n*i}function S(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function C(e){return!!e&&e.constructor===Object}function T(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!S(e))throw new Error("bbox must only contain numbers")}))}function F(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}}}]);