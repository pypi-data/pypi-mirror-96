{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../ColumnFilter.svelte",
    "../../ListView.svelte",
    "../../Menu.svelte",
    "../../Pagination.svelte",
    "../../ParseView.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {onMount} from 'svelte';\n\n    import {RequestManager} from \"./kb/manager\";\n\n    import Menu from \"./Menu.svelte\";\n    import Bottom from \"./Bottom.svelte\";\n    import ListView from \"./ListView.svelte\";\n    import DetailView from \"./DetailView.svelte\";\n    import ParseView from \"./ParseView.svelte\";\n\n    let choice = \"graph\";\n    let selectKey = null;\n    let schema = null;\n    const manager = new RequestManager();\n\n    onMount(async () => {\n        schema = await manager.getSchema();\n    });\n\n\n    const updateKey = () => {\n        if (selectKey !== null) {\n            choice = \"detail\"\n        } else {\n            choice = \"graph\";\n        }\n    };\n\n    const updateChoice = () => {\n        if (choice !== \"detail\") {\n            selectKey = null;\n        }\n    };\n\n    $: updateKey(selectKey);\n    $: updateChoice(choice);\n</script>\n\n<main>\n    <Menu bind:choice={choice} />\n\n    {#if (choice === \"graph\")}\n    <div id=\"content\">\n        <ListView bind:selectKey={selectKey} schema={schema} />\n    </div>\n    {:else if (choice === \"detail\")}\n    <div id=\"content\">\n        <DetailView bind:selectKey={selectKey} schema={schema} />\n    </div>\n    {:else if (choice === \"parse\")}\n        <div id=\"content\">\n            <ParseView bind:selectKey={selectKey} />\n        </div>\n    {:else if (choice === \"api\")}\n        <iframe title=\"Swagger API\" src=\"/docs\"></iframe>\n    {:else if (choice === \"docs\")}\n        <iframe title=\"Docs\" src=\"https://www.entitykb.org/\"></iframe>\n    {/if}\n\n    <Bottom />\n</main>\n\n<style>\n    iframe {\n        width: 100%;\n        height: calc(85vh);\n        border: 0;\n    }\n    #content {\n        padding: 1em;\n        margin: 1em 3em 5em 3em;\n    }\n</style>",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let name = null;\n    export let value = null;\n    export let display = null;\n    export let options = \"\";\n\n    let inFilterMode = false;\n\n    const cancelFilter = () => {\n        inFilterMode = false;\n        value = \"\";\n    };\n\n    const openFilter = () => {\n        inFilterMode = true;\n    };\n\n    $: dispatch(\"update\", {\"name\": name, \"value\": value});\n</script>\n\n<div id=\"column\">\n    {#if inFilterMode}\n        <a class=\"clickable\" on:click={cancelFilter}>\n            <i class=\"red window close icon\"></i>\n        </a>\n        {#if options}\n            <select bind:value={value}>\n                <option value=\"\">Any {display}</option>\n            {#each options as option}\n                <option>{option}</option>\n            {/each}\n            </select>\n        {:else}\n            <input placeholder=\"{display}\" bind:value={value} autofocus>\n        {/if}\n    {:else}\n        <a class=\"clickable\" on:click={openFilter}>\n            <i class=\"blue filter icon\"></i>\n            {display}\n        </a>\n    {/if}\n</div>\n\n<style>\n    #column {\n        vertical-align: middle;\n        height: 1.5em;\n    }\n    .icon {\n        width: 1em;\n    }\n</style>\n\n",
    "<script>\n    import {onMount} from 'svelte';\n    import {RequestManager} from './kb/manager';\n\n    import Pagination from \"./Pagination.svelte\";\n    import ColumnFilter from \"./ColumnFilter.svelte\";\n\n    export let schema;\n    export let selectKey = null;\n\n    const manager = new RequestManager();\n    const nextRequest = {name: '', label: '', key: '', attribute: null};\n\n    let entities = [];\n    let page = 0;\n    $: labels = (schema !== null && schema.labels) || [];\n\n    onMount(() => {\n        refreshData();\n        setInterval(refreshData, 10);\n    });\n\n    const openRow = (key) => {\n        selectKey = key;\n    };\n\n    const onUpdate = async (event) => {\n        nextRequest[event.detail.name] = event.detail.value;\n        page = 0;\n    };\n\n    const refreshData = async () => {\n        if (manager.isAvailable(page, nextRequest)) {\n            entities = await manager.getEntities(page, nextRequest);\n        }\n    };\n</script>\n\n<div class=\"ui grid\">\n    <div class=\"eight wide column\">\n    </div>\n    <div class=\"eight wide column right aligned\">\n        <Pagination bind:page={page}/>\n    </div>\n</div>\n\n<table class=\"ui compact selectable celled striped table top aligned\">\n    <thead class=\"full-width\">\n    <tr>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"name\" display=\"Name\"\n                          on:update={onUpdate}/>\n        </th>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"label\" display=\"Label\"\n                          options={labels}\n                          on:update={onUpdate}/>\n        </th>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"key\" display=\"Key\"\n                         on:update={onUpdate}/>\n        </th>\n        <th class=\"four wide\">\n            Attributes\n            <!--\n            Removed:\n            import AttributeFilter from \"./AttributeFilter.svelte\";\n\n            If user enters value that doesn't return results\n            the search will loop through entire graph causing\n            the server to spin to 100% and preventing access.\n\n            Need to consider \"field index\" if wanting to\n            \"start\" from field value.\n            <AttributeFilter on:update={onUpdate}/>\n            -->\n        </th>\n    </tr>\n    </thead>\n    <tbody>\n    {#each entities as entity}\n        <tr on:click={openRow(entity.key)}>\n            <td>{entity.name}</td>\n            <td>{entity.label}</td>\n            <td>{entity.key}</td>\n            <td>\n                <table class=\"ui compact celled table top aligned\">\n                {#each Object.entries(entity.attributes).sort() as [name, value]}\n                    <tr class=\"top aligned\">\n                        <td class=\"four wide field_name\">{name}:</td>\n                        <td class=\"twelve wide\">\n                        {#if value instanceof Array}\n                            {#each value.slice(0, 5) as item}\n                                {item}<br/>\n                            {/each}\n                            {#if value.length > 5}\n                                <i>{value.length - 5} more...</i>\n                            {/if}\n                        {:else}\n                            {value}\n                        {/if}\n                        </td>\n                    </tr>\n                {/each}\n                </table>\n            </td>\n        </tr>\n    {/each}\n    </tbody>\n</table>\n\n<style>\n    .field_name {\n        font-weight: bold;\n        color: #444444;\n        background-color: #DDD5DD;\n    }\n</style>",
    "<script>\n    export let choice = \"admin\";\n\n    function setChoice(e) {\n        window.$(\".menu .active\").removeClass(\"active\");\n        choice = e.target.id;\n    }\n\n    $: window.$(\"#\" + choice).addClass(\"active\");\n\n</script>\n\n<div class=\"ui top menu\">\n  <div class=\"item\">\n      <i class=\"large lightbulb outline icon\"></i>\n  </div>\n  <a id=\"graph\" class=\"active item\" on:click={setChoice}>Graph</a>\n  <a id=\"parse\" class=\"item\" on:click={setChoice}>Parse</a>\n  <a id=\"api\" class=\"item\" on:click={setChoice}>API</a>\n  <a id=\"docs\" class=\"item\" on:click={setChoice}>Docs</a>\n</div>\n\n<style>\ndiv.top.menu {\n    border: 0;\n    font-size: 1.4em;\n}\n</style>",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let page = 0;\n    let items = [];\n    let addedNull = false;\n\n    function onClick(evt) {\n        page = parseInt(evt.target.attributes['data-value'].value);\n    }\n\n    function changePage() {\n        items = [];\n        let addedNull = false;\n        for (let i=0; i <= page; i++) {\n            if (i < 4) {\n                items.push(i);\n            } else if ((page - i) < 4) {\n                items.push(i);\n            } else if (!addedNull) {\n                addedNull = true;\n                items.push(null);\n            }\n        }\n        items.push(page + 1);\n\n        while (items.length < 10) {\n            items.push(null);\n        }\n\n        dispatch(\"update\", {\"name\": \"page\", \"value\": page});\n    }\n\n    $: changePage(page);\n</script>\n\n<b>Page:</b>\n\n<div class=\"ui pagination tiny menu\">\n    {#each items as item}\n        {#if item === null}\n            <a class=\"disabled item\">...</a>\n        {:else}\n        <a class=\"item\"\n           data-value={item}\n           class:active={item === page}\n           on:click={onClick}>\n            {item + 1}\n        </a>\n        {/if}\n    {/each}\n</div>\n\n<style>\n    .menu .item {\n        width: 2em;\n    }\n</style>",
    "<script>\n    import {onMount} from 'svelte';\n    import {RequestManager} from './kb/manager';\n\n    export let selectKey;\n    let text = '';\n    let labels_str = '';\n    let spans = [];\n    let labels = [];\n    let page = 0;\n\n    const manager = new RequestManager();\n\n    onMount(() => {\n        refreshData();\n        setInterval(refreshData, 10);\n    });\n\n    const openRow = (key) => {\n        selectKey = key;\n    };\n\n    const refreshData = async () => {\n        const nextRequest = {text: text, labels: labels};\n\n        if (manager.isAvailable(page, nextRequest)) {\n            let doc = await manager.getDoc(page, nextRequest);\n            spans = Boolean(doc) ? doc.spans : [];\n        }\n    };\n\n    const updateLabels = () => {\n        labels = labels_str.replace(\",\", \" \").replace(\"  \", \" \").split(\" \").map(function(item) {\n            return item.trim().toUpperCase();\n        }).filter(function (s) {\n            return s.length > 0;\n        });\n    };\n\n    $: updateLabels(labels_str);\n\n</script>\n\n<div class=\"ui grid\">\n    <div class=\"two wide column\">\n\n    </div>\n    <div class=\"twelve wide column\">\n        <h3>Enter Text:</h3>\n\n        <div class=\"ui form horizontally\">\n            <textarea bind:value={text} rows=\"15\"></textarea>\n        </div>\n\n        <h3>Labels (space-separated):</h3>\n        <div>\n            <input bind:value={labels_str} />\n            {#if labels.length > 0}\n                <ul>\n                {#each labels as label}\n                    <li>{label}</li>\n                {/each}\n                </ul>\n            {/if}\n        </div>\n\n        <br/>\n\n        <h3>Parsed Entities:</h3>\n\n        <div class=\"ui horizontally padded\">\n            <table class=\"ui compact selectable celled striped table top aligned\">\n                <thead class=\"full-width\">\n                <tr>\n                    <th class=\"two wide\">Name</th>\n                    <th class=\"two wide\">Label</th>\n                    <th class=\"two wide\">Key</th>\n                    <th class=\"four wide\">Tokens</th>\n                </tr>\n                </thead>\n                <tbody>\n                {#each spans as span}\n                <tr on:click={openRow(span.entity.key)}>\n                    <td>{span.entity.name}</td>\n                    <td>{span.entity.label}</td>\n                    <td>{span.entity.key}</td>\n                    <td>\n                        <table class=\"ui compact celled table top aligned\">\n                        {#each span.tokens as token}\n                            <tr>\n                                <td class=\"token_offset two wide column\">{token.offset}</td>\n                                <td class=\"two wide column\">{token.token}</td>\n                            </tr>\n                        {/each}\n                        </table>\n                    </td>\n                </tr>\n                {/each}\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class=\"two wide column\"></div>\n</div>\n\n<style>\n    .token_offset {\n        font-weight: bold;\n        color: #444444;\n        background-color: #DDD5DD;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAgEI,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,IAAI,CAAC,CAClB,MAAM,CAAE,CAAC,AACb,CAAC,AACD,QAAQ,cAAC,CAAC,AACN,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AAC3B,CAAC;ACzBD,OAAO,eAAC,CAAC,AACL,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,AACjB,CAAC,AACD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACd,CAAC;AC2DD,WAAW,eAAC,CAAC,AACT,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,AAC7B,CAAC;AC7FL,GAAG,IAAI,KAAK,eAAC,CAAC,AACV,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,KAAK,AACpB,CAAC;AC6BG,mBAAK,CAAC,KAAK,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,AACd,CAAC;ACiDD,aAAa,eAAC,CAAC,AACX,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,AAC7B,CAAC"
}