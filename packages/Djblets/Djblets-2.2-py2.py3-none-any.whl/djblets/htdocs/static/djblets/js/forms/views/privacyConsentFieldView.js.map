{"version":3,"sources":["privacyConsentFieldView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,QAAQ,KAAR,CAAc,uBAAd,GAAwC,SAAS,IAAT,CAAc,MAAd,CAAqB;AACzD,YAAQ;AACJ,wBAAgB;AADZ,KADiD;;AAKzD;;;;;;;;;;;;;;;;;;;;AAoBA,cAzByD,sBAyB9C,OAzB8C,EAyBrC;AAChB,aAAK,OAAL,GAAe,OAAf;;AAEA,YAAM,WAAW,KAAK,CAAL,CAAO,gCAAP,CAAjB;AACA,YAAM,eACF,SAAS,IAAT,CAAc,qCAAd,CADJ;AAEA,YAAM,eACF,SAAS,IAAT,CAAc,qCAAd,CADJ;;AAGA,aAAK,YAAL,GAAoB,aAAa,QAAb,CAAsB,OAAtB,CAApB;AACA,aAAK,YAAL,GAAoB,aAAa,QAAb,CAAsB,OAAtB,CAApB;AACA,aAAK,YAAL,GAAoB,aAAa,QAAb,CAAsB,OAAtB,CAApB;AACA,aAAK,YAAL,GAAoB,aAAa,QAAb,CAAsB,OAAtB,CAApB;AACH,KAtCwD;;;AAwCzD;;;;;;;AAOA,UA/CyD,oBA+ChD;AACL,aAAK,iBAAL;;AAEA,eAAO,IAAP;AACH,KAnDwD;;;AAqDzD;;;;;;AAMA,qBA3DyD,+BA2DrC;AAChB,YAAM,UAAU,KAAK,YAAL,CAAkB,EAAlB,CAAqB,UAArB,CAAhB;AACA,YAAM,UAAU,KAAK,YAAL,CAAkB,EAAlB,CAAqB,UAArB,CAAhB;;AAEA,aAAK,GAAL,CAAS,WAAT,CAAqB,6BAArB,EAAoD,OAApD;AACA,aAAK,GAAL,CAAS,WAAT,CAAqB,6BAArB,EAAoD,OAApD;;AAEA,aAAK,YAAL,CAAkB,IAAlB,CAAuB,UACE,KAAK,OAAL,CAAa,WADf,GAEE,KAAK,OAAL,CAAa,SAFtC;AAGA,aAAK,YAAL,CAAkB,IAAlB,CAAuB,UACE,KAAK,OAAL,CAAa,WADf,GAEE,KAAK,OAAL,CAAa,SAFtC;AAGH;AAxEwD,CAArB,CAAxC","file":"privacyConsentFieldView.js","sourcesContent":["/**\n * Manages the display of a consent field.\n *\n * This helps style consent fields to better represent the current choice\n * made, altering labels and colors. It provides no functionality beyond\n * enhancing the look of the field beyond what can be done in CSS.\n */\nDjblets.Forms.PrivacyConsentFieldView = Backbone.View.extend({\n    events: {\n        'change input': '_onConsentChanged',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     allowText (string):\n     *         Text to use for the allow action.\n     *\n     *     allowedText (string):\n     *         Text to use when the allow action is selected.\n     *\n     *     blockText (string):\n     *         Text to use for the block action.\n     *\n     *     blockedText (string):\n     *         Text to use when the block action is selected.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const $choices = this.$('.privacy-consent-field-choices');\n        const $allowChoice =\n            $choices.find('.privacy-consent-field-choice-allow');\n        const $blockChoice =\n            $choices.find('.privacy-consent-field-choice-block');\n\n        this._$allowInput = $allowChoice.children('input');\n        this._$allowLabel = $allowChoice.children('label');\n        this._$blockInput = $blockChoice.children('input');\n        this._$blockLabel = $blockChoice.children('label');\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     Djblets.Forms.PrivacyConsentFieldView:\n     *     This view, for chaining.\n     */\n    render() {\n        this._onConsentChanged();\n\n        return this;\n    },\n\n    /**\n     * Handler for when the consent choice has changed.\n     *\n     * This will toggle classes on the field's element to reflect the\n     * current consent choice, and update the labels.\n     */\n    _onConsentChanged() {\n        const allowed = this._$allowInput.is(':checked');\n        const blocked = this._$blockInput.is(':checked');\n\n        this.$el.toggleClass('privacy-consent-field-allow', allowed);\n        this.$el.toggleClass('privacy-consent-field-block', blocked);\n\n        this._$allowLabel.text(allowed\n                               ? this.options.allowedText\n                               : this.options.allowText);\n        this._$blockLabel.text(blocked\n                               ? this.options.blockedText\n                               : this.options.blockText);\n    },\n});\n"]}