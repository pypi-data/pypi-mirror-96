{"version":3,"sources":["conditionSetModelTests.es6.js"],"names":[],"mappings":"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","file":"conditionSetModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionSet', function() {\n    describe('Initialization', function() {\n        it('choicesData parsed', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                fieldName: 'my-conditions',\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice'\n                }]\n            });\n\n            expect(conditionSet.choices.length).toBe(1);\n            expect(conditionSet.choices.at(0).id).toBe('my-choice');\n            expect(conditionSet.get('lastID')).toBe(null);\n        });\n\n        it('conditionsData parsed', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op-1',\n                            name: 'My Op 1'\n                        },\n                        {\n                            id: 'my-op-2',\n                            name: 'My Op 2'\n                        }\n                    ]\n                }],\n                conditionsData: [\n                    {\n                        choiceID: 'my-choice',\n                        operatorID: 'my-op-1',\n                        value: 'abc123',\n                        valid: false,\n                        error: 'My error'\n                    },\n                    {\n                        choiceID: 'my-choice',\n                        operatorID: 'my-op-2',\n                        value: 42,\n                        valid: true\n                    }\n                ]\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(2);\n\n            let condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op-1');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            condition = conditions.at(1);\n            expect(condition.id).toBe(1);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op-2');\n            expect(condition.get('value')).toBe(42);\n            expect(condition.get('valid')).toBe(true);\n            expect(condition.get('error')).toBe(null);\n\n            expect(conditionSet.get('lastID')).toBe(1);\n        });\n\n        it('conditionsData parsed with bad choiceID', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op-1',\n                            name: 'My Op 1'\n                        },\n                        {\n                            id: 'my-op-2',\n                            name: 'My Op 2'\n                        }\n                    ]\n                }],\n                conditionsData: [\n                    {\n                        choiceID: 'invalid-choice',\n                        operatorID: 'my-op-1',\n                        value: 'abc123',\n                        valid: false,\n                        error: 'My error'\n                    }\n                ]\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice')).toBe(null);\n            expect(condition.get('operator')).toBe(null);\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n    });\n\n    describe('Adding to conditions collection', function() {\n        let conditionSet;\n\n        beforeEach(function() {\n            conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op',\n                            name: 'My Op'\n                        }\n                    ]\n                }]\n            });\n\n            expect(conditionSet.get('lastID')).toBe(null);\n        });\n\n        it('Using choice and operator IDs', function() {\n            conditionSet.conditions.add({\n                choiceID: 'my-choice',\n                operatorID: 'my-op',\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n\n        it('Using choice instance', function() {\n            conditionSet.conditions.add({\n                choiceID: conditionSet.choices.at(0),\n                operatorID: 'my-op',\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n\n        it('Using operator instance', function() {\n            conditionSet.conditions.add({\n                choiceID: 'my-choice',\n                operatorID: conditionSet.choices.at(0).operators.at(0),\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n    });\n\n    describe('Methods', function() {\n        it('addNewCondition', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                fieldName: 'my-conditions',\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [{\n                        id: 'my-op',\n                        name: 'My Op'\n                    }]\n                }]\n            });\n\n            const conditions = conditionSet.conditions;\n\n            expect(conditions.length).toBe(0);\n            expect(conditionSet.get('lastID')).toBe(null);\n\n            conditionSet.addNewCondition();\n\n            expect(conditions.length).toBe(1);\n            expect(conditionSet.get('lastID')).toBe(0);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n        });\n    });\n});\n"]}