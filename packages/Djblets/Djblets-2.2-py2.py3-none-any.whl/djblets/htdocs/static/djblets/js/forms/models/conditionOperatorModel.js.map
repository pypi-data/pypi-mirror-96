{"version":3,"sources":["conditionOperatorModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,QAAQ,KAAR,CAAc,iBAAd,GAAkC,SAAS,KAAT,CAAe,MAAf,CAAsB;AACpD,cAAU;AACN,cAAM,IADA;AAEN,kBAAU,KAFJ;AAGN,oBAAY;AAHN,KAD0C;;AAOpD;;;;;;;;;;;;;;AAcA,oBArBoD,4BAqBnC,SArBmC,EAqBxB;AACxB,YAAM,aAAa,KAAK,GAAL,CAAS,YAAT,CAAnB;;AAEA,gBAAQ,MAAR,CAAe,UAAf,EACe,kDADf;;AAGA,eAAO,IAAI,WAAW,SAAf,CAAyB,EAAE,QAAF,CAAW;AACvC,mBAAO,IAAI,WAAW,UAAf,CAA0B,EAAE,QAAF,CAAW;AACxC,2BAAW;AAD6B,aAAX,EAE9B,WAAW,SAFmB,CAA1B;AADgC,SAAX,EAI7B,WAAW,QAJkB,CAAzB,CAAP;AAKH,KAhCmD;;;AAkCpD;;;;;;;;;;;AAWA,SA7CoD,iBA6C9C,IA7C8C,EA6CxC;AACR,eAAO;AACH,gBAAI,KAAK,EADN;AAEH,kBAAM,KAAK,IAFR;AAGH,sBAAU,KAAK,QAHZ;AAIH,wBAAY,QAAQ,KAAR,CAAc,eAAd,CAA8B,mBAA9B,CACR,KAAK,UADG;AAJT,SAAP;AAOH;AArDmD,CAAtB,CAAlC","file":"conditionOperatorModel.js","sourcesContent":["/**\n * A possible operator for a condition choice.\n *\n * An operator simply stores state indicating the operator name, ID, and whether\n * the user should be prompted for a value.\n *\n * Model Attributes:\n *     name (string):\n *         The human-readable name of the operator.\n *\n *     useValue (boolean):\n *         Whether the user should be prompted for a value. Defaults to\n *         ``false``.\n *\n *     valueField (object):\n *         Information about the object handling the storage and manipulation\n *         of values for the condition. If set, it will override the default\n *         value for the condition.\n *\n *         This will have ``modelClass` and ``viewClass`` keys pointing to the\n *         object constructors for the model and view for the value field,\n *         along with ``modelData`` and ``viewData`` controlling the model\n *         attributes and view options, respectively.\n */\nDjblets.Forms.ConditionOperator = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        useValue: false,\n        valueField: null\n    },\n\n    /**\n     * Create the value field for the operator.\n     *\n     * This will construct a new instance of the view used to take values for\n     * this operator.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name for the form field.\n     *\n     * Returns:\n     *     Djblets.Forms.BaseConditionValueFieldView:\n     *     The view for the field.\n     */\n    createValueField(fieldName) {\n        const valueField = this.get('valueField');\n\n        console.assert(valueField,\n                       'This operator does not have a custom valueField.');\n\n        return new valueField.viewClass(_.defaults({\n            model: new valueField.modelClass(_.defaults({\n                fieldName: fieldName\n            }, valueField.modelData))\n        }, valueField.viewData));\n    },\n\n    /**\n     * Parse the attribute data passed to the model.\n     *\n     * Args:\n     *     data (object):\n     *         The attribute data passed to the model.\n     *\n     *  Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(data) {\n        return {\n            id: data.id,\n            name: data.name,\n            useValue: data.useValue,\n            valueField: Djblets.Forms.ConditionChoice.parseValueFieldData(\n                data.valueField)\n        };\n    }\n});\n"]}