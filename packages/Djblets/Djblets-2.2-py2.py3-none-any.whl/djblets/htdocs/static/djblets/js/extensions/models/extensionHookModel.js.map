{"version":3,"sources":["extensionHookModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,QAAQ,aAAR,GAAwB,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC1C;;;;;;AAMA,aAAW,IAP+B;;AAS1C,YAAU;AACN,eAAW;AADL,GATgC;;AAa1C;;;;;;;;;AASA,YAtB0C,wBAsB7B;AACT,QAAM,YAAY,KAAK,GAAL,CAAS,WAAT,CAAlB;;AAEA,YAAQ,MAAR,CAAe,KAAK,SAApB,EACe,mDADf;AAEA,YAAQ,MAAR,CAAe,SAAf,EACe,uDADf;;AAGA,cAAU,KAAV,CAAgB,IAAhB,CAAqB,IAArB;AACA,SAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB;;AAEA,SAAK,SAAL;AACH,GAlCyC;;;AAoC1C;;;;;;AAMA,WA1C0C,uBA0C9B,CACX;AA3CyC,CAAtB,EA4CrB;AACC;;;;;;;;;;AAUA,MAXD,gBAWM,EAXN,EAWU,OAXV,EAWmB;AACd,MAAE,IAAF,CAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,KAAhC,EAAuC,EAAvC,EAA2C,OAA3C;AACH;AAbF,CA5CqB,CAAxB","file":"extensionHookModel.js","sourcesContent":["/**\n * Base class for hooks that an extension can use to augment functionality.\n *\n * Each type of hook represents a point in the codebase that an extension\n * is able to plug functionality into.\n *\n * Subclasses are expected to set a hookPoint field in the prototype to an\n * instance of ExtensionPoint.\n *\n * Instances of an ExtensionHook subclass that extensions create will be\n * automatically registered with both the extension and the list of hooks\n * for that ExtensionHook subclass.\n *\n * Callers that use ExtensionHook subclasses to provide functionality can\n * use the subclass's each() method to loop over all registered hooks.\n */\nDjblets.ExtensionHook = Backbone.Model.extend({\n    /**\n     * An ExtensionHookPoint instance.\n     *\n     * This must be defined and instantiated by a subclass of ExtensionHook,\n     * but not by subclasses created by extensions.\n     */\n    hookPoint: null,\n\n    defaults: {\n        extension: null,\n    },\n\n    /**\n     * Initialize the hook.\n     *\n     * This will add the instance of the hook to the extension's list of\n     * hooks, and to the list of known hook instances for this hook point.\n     *\n     * After initialization, setUpHook will be called, which a subclass\n     * can use to provide additional setup.\n     */\n    initialize() {\n        const extension = this.get('extension');\n\n        console.assert(this.hookPoint,\n                       'This ExtensionHook subclass must define hookPoint');\n        console.assert(extension,\n                       'An Extension instance must be passed to ExtensionHook');\n\n        extension.hooks.push(this);\n        this.hookPoint.addHook(this);\n\n        this.setUpHook();\n    },\n\n    /**\n     * Set up additional state for the hook.\n     *\n     * This can be overridden by subclasses to provide additional\n     * functionality.\n     */\n    setUpHook() {\n    },\n}, {\n    /**\n     * Loop through each registered hook instance and call the given callback.\n     *\n     * Args:\n     *     cb (function):\n     *         The callback to call.\n     *\n     *     context (object, optional):\n     *         Optional context to use when calling the callback.\n     */\n    each(cb, context) {\n        _.each(this.prototype.hookPoint.hooks, cb, context);\n    },\n});\n"]}