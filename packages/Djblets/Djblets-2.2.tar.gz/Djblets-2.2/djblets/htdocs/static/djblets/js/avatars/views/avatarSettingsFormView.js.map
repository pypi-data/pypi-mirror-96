{"version":3,"sources":["avatarSettingsFormView.es6.js"],"names":[],"mappings":"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","file":"avatarSettingsFormView.js","sourcesContent":["(function() {\n\n\nconst [readyPromise, resolve] = Promise.withResolver();\n\n\n/**\n * A form for managing the settings of avatar services.\n *\n * This form lets you select the avatar service you wish to use, as well as\n * configure the settings for that avatar service.\n */\nDjblets.Avatars.SettingsFormView = Backbone.View.extend({\n    events: {\n        'change #id_avatar_service_id': '_onServiceChanged',\n        'submit': '_onSubmit'\n    },\n\n    /**\n     * Initialize the form.\n     */\n    initialize() {\n        console.assert(Djblets.Avatars.SettingsFormView.instance === null);\n        Djblets.Avatars.SettingsFormView.instance = this;\n        this._configForms = new Map();\n\n        this._$config = this.$('.avatar-service-configuration');\n\n        const services = this.model.get('services');\n        this.listenTo(this.model, 'change:serviceID',\n                      () => this._showHideForms());\n\n        /*\n         * The promise continuations will only be executed once the stack is\n         * unwound.\n         */\n        resolve();\n    },\n\n    /**\n     * Validate the current form upon submission.\n     *\n     * Args:\n     *     e (Event):\n     *         The form submission event.\n     */\n    _onSubmit(e) {\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n\n        if (currentForm && !currentForm.validate()) {\n            e.preventDefault();\n        }\n    },\n\n    /**\n     * Render the child forms.\n     *\n     * This will show the for the currently selected service if it has one.\n     *\n     * Returns:\n     *     Djblets.Avatars.SettingsFormView:\n     *     This view (for chaining).\n     */\n    renderForms() {\n        for (const form of this._configForms.values()) {\n            form.render();\n        }\n\n        /*\n         * Ensure that if the browser sets the value of the <select> upon\n         * refresh that we update the model accordingly.\n         */\n        this.$('#id_avatar_service_id').change();\n        this._showHideForms(true);\n\n        return this;\n    },\n\n    /**\n     * Show or hide the configuration form.\n     */\n    _showHideForms() {\n        const services = this.model.get('services');\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n        const previousID = this.model.previous('serviceID');\n        const previousForm = previousID\n            ? this._configForms.get(previousID)\n            : undefined;\n\n        if (previousForm && currentForm) {\n            previousForm.$el.hide();\n            currentForm.$el.show();\n        } else if (previousForm) {\n            previousForm.$el.hide();\n            this._$config.hide();\n        } else if (currentForm) {\n            currentForm.$el.show();\n            this._$config.show();\n        }\n\n    },\n\n    /**\n     * Handle the service being changed.\n     *\n     * Args:\n     *     e (Event):\n     *         The change event.\n     */\n    _onServiceChanged(e) {\n        const $target = $(e.target);\n        this.model.set('serviceID', $target.val());\n    }\n}, {\n    /**\n     * The form instance.\n     */\n    instance: null,\n\n    /**\n     * Add a configuration form to the instance.\n     *\n     * Args:\n     *     serviceID (string):\n     *         The unique ID for the avatar service.\n     *\n     *     formClass (constructor):\n     *         The view to use for the form.\n     */\n    addConfigForm(serviceID, formClass) {\n        Djblets.Avatars.SettingsFormView.instance._configForms.set(\n            serviceID,\n            new formClass({\n                el: $(`[data-avatar-service-id=\"${serviceID}\"]`),\n                model: Djblets.Avatars.SettingsFormView.instance.model\n            }));\n    },\n\n    /**\n     * A promise that is resolved when the avatar services form has been\n     * initialized.\n     */\n    ready: readyPromise\n});\n\n\n})();\n"]}