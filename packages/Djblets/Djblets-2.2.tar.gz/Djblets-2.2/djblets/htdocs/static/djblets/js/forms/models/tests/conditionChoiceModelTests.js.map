{"version":3,"sources":["conditionChoiceModelTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,sCAAN,EAA8C,YAAW;AACrD,aAAS,gBAAT,EAA2B,YAAW;AAClC,WAAG,qBAAH,EAA0B,YAAW;AACjC,gBAAM,SAAS,IAAI,QAAQ,KAAR,CAAc,eAAlB,CAAkC;AAC7C,oBAAI,WADyC;AAE7C,sBAAM,WAFuC;AAG7C,4BAAY;AACR,2BAAO;AACH,mCAAW,mCADR;AAEH,8BAAM;AACF,wCAAY;AADV;AAFH,qBADC;AAOR,0BAAM;AACF,mCAAW,2CADT;AAEF,8BAAM;AACF,uCAAW;AADT;AAFJ;AAPE,iBAHiC;AAiB7C,2BAAW,CACP;AACI,wBAAI,OADR;AAEI,0BAAM,OAFV;AAGI,8BAAU;AAHd,iBADO;AAjBkC,aAAlC,EAwBZ;AACC,uBAAO;AADR,aAxBY,CAAf;;AA4BA,mBAAO,OAAO,EAAd,EAAkB,IAAlB,CAAuB,WAAvB;AACA,mBAAO,OAAO,GAAP,CAAW,MAAX,CAAP,EAA2B,IAA3B,CAAgC,WAAhC;AACA,mBAAO,OAAO,GAAP,CAAW,YAAX,CAAP,EAAiC,OAAjC,CAAyC;AACrC,4BAAY,QAAQ,KAAR,CAAc,mBADW;AAErC,2BAAW;AACP,gCAAY;AADL,iBAF0B;AAKrC,2BAAW,QAAQ,KAAR,CAAc,2BALY;AAMrC,0BAAU;AACN,+BAAW;AADL;AAN2B,aAAzC;AAUA,mBAAO,OAAO,SAAP,CAAiB,MAAxB,EAAgC,IAAhC,CAAqC,CAArC;;AAEA,gBAAM,KAAK,OAAO,SAAP,CAAiB,EAAjB,CAAoB,CAApB,CAAX;AACA,mBAAO,GAAG,EAAV,EAAc,IAAd,CAAmB,OAAnB;AACA,mBAAO,GAAG,GAAH,CAAO,MAAP,CAAP,EAAuB,IAAvB,CAA4B,OAA5B;AACA,mBAAO,GAAG,GAAH,CAAO,UAAP,CAAP,EAA2B,IAA3B,CAAgC,KAAhC;AACH,SA/CD;AAgDH,KAjDD;;AAmDA,aAAS,SAAT,EAAoB,YAAW;AAC3B,WAAG,kBAAH,EAAuB,YAAW;AAC9B,gBAAM,SAAS,IAAI,QAAQ,KAAR,CAAc,eAAlB,CAAkC;AAC7C,oBAAI,WADyC;AAE7C,sBAAM,WAFuC;AAG7C,4BAAY;AACR,gCAAY,QAAQ,KAAR,CAAc,mBADlB;AAER,+BAAW;AACP,oCAAY;AADL,qBAFH;AAKR,+BAAW,QAAQ,KAAR,CAAc,2BALjB;AAMR,8BAAU;AACN,mCAAW;AADL;AANF;AAHiC,aAAlC,CAAf;;AAeA,gBAAM,aAAa,OAAO,gBAAP,CAAwB,UAAxB,CAAnB;AACA,mBAAO,WAAW,KAAX,CAAiB,GAAjB,CAAqB,WAArB,CAAP,EAA0C,IAA1C,CAA+C,UAA/C;AACH,SAlBD;AAmBH,KApBD;AAqBH,CAzED","file":"conditionChoiceModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionChoice', function() {\n    describe('Initialization', function() {\n        it('With parse and data', function() {\n            const choice = new Djblets.Forms.ConditionChoice({\n                id: 'my-choice',\n                name: 'My Choice',\n                valueField: {\n                    model: {\n                        className: 'Djblets.Forms.ConditionValueField',\n                        data: {\n                            myModelKey: 'my-value'\n                        }\n                    },\n                    view: {\n                        className: 'Djblets.Forms.ConditionValueFormFieldView',\n                        data: {\n                            myViewKey: 'my-value'\n                        }\n                    }\n                },\n                operators: [\n                    {\n                        id: 'my-op',\n                        name: 'My Op',\n                        useValue: false\n                    }\n                ]\n            }, {\n                parse: true\n            });\n\n            expect(choice.id).toBe('my-choice');\n            expect(choice.get('name')).toBe('My Choice');\n            expect(choice.get('valueField')).toEqual({\n                modelClass: Djblets.Forms.ConditionValueField,\n                modelData: {\n                    myModelKey: 'my-value'\n                },\n                viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                viewData: {\n                    myViewKey: 'my-value'\n                }\n            });\n            expect(choice.operators.length).toBe(1);\n\n            const op = choice.operators.at(0);\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Op');\n            expect(op.get('useValue')).toBe(false);\n        });\n    });\n\n    describe('Methods', function() {\n        it('createValueField', function() {\n            const choice = new Djblets.Forms.ConditionChoice({\n                id: 'my-choice',\n                name: 'My Choice',\n                valueField: {\n                    modelClass: Djblets.Forms.ConditionValueField,\n                    modelData: {\n                        myModelKey: 'my-value'\n                    },\n                    viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                    viewData: {\n                        myViewKey: 'my-value'\n                    }\n                }\n            });\n\n            const valueField = choice.createValueField('my-field');\n            expect(valueField.model.get('fieldName')).toBe('my-field');\n        });\n    });\n});\n"]}