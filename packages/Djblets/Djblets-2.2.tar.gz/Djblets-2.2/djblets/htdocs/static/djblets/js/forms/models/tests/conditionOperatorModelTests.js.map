{"version":3,"sources":["conditionOperatorModelTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,wCAAN,EAAgD,YAAW;AACvD,aAAS,gBAAT,EAA2B,YAAW;AAClC,WAAG,qBAAH,EAA0B,YAAW;AACjC,gBAAM,KAAK,IAAI,QAAQ,KAAR,CAAc,iBAAlB,CAAoC;AAC3C,oBAAI,OADuC;AAE3C,sBAAM,aAFqC;AAG3C,0BAAU,IAHiC;AAI3C,4BAAY;AACR,2BAAO;AACH,mCAAW,mCADR;AAEH,8BAAM;AACF,wCAAY;AADV;AAFH,qBADC;AAOR,0BAAM;AACF,mCAAW,2CADT;AAEF,8BAAM;AACF,uCAAW;AADT;AAFJ;AAPE;AAJ+B,aAApC,EAkBR;AACC,uBAAO;AADR,aAlBQ,CAAX;;AAsBA,mBAAO,GAAG,EAAV,EAAc,IAAd,CAAmB,OAAnB;AACA,mBAAO,GAAG,GAAH,CAAO,MAAP,CAAP,EAAuB,IAAvB,CAA4B,aAA5B;AACA,mBAAO,GAAG,GAAH,CAAO,UAAP,CAAP,EAA2B,IAA3B,CAAgC,IAAhC;AACA,mBAAO,GAAG,GAAH,CAAO,YAAP,CAAP,EAA6B,OAA7B,CAAqC;AACjC,4BAAY,QAAQ,KAAR,CAAc,mBADO;AAEjC,2BAAW;AACP,gCAAY;AADL,iBAFsB;AAKjC,2BAAW,QAAQ,KAAR,CAAc,2BALQ;AAMjC,0BAAU;AACN,+BAAW;AADL;AANuB,aAArC;AAUH,SApCD;;AAsCA,WAAG,wCAAH,EAA6C,YAAW;AACpD,gBAAM,KAAK,IAAI,QAAQ,KAAR,CAAc,iBAAlB,CAAoC;AAC3C,oBAAI,OADuC;AAE3C,sBAAM,aAFqC;AAG3C,0BAAU;AAHiC,aAApC,EAIR;AACC,uBAAO;AADR,aAJQ,CAAX;;AAQA,mBAAO,GAAG,EAAV,EAAc,IAAd,CAAmB,OAAnB;AACA,mBAAO,GAAG,GAAH,CAAO,MAAP,CAAP,EAAuB,IAAvB,CAA4B,aAA5B;AACA,mBAAO,GAAG,GAAH,CAAO,YAAP,CAAP,EAA6B,IAA7B,CAAkC,IAAlC;AACA,mBAAO,GAAG,GAAH,CAAO,UAAP,CAAP,EAA2B,IAA3B,CAAgC,IAAhC;AACH,SAbD;AAcH,KArDD;;AAuDA,aAAS,kBAAT,EAA6B,YAAW;AACpC,WAAG,wBAAH,EAA6B,YAAW;AACpC,gBAAM,KAAK,IAAI,QAAQ,KAAR,CAAc,iBAAlB,CAAoC;AAC3C,oBAAI,OADuC;AAE3C,sBAAM,aAFqC;AAG3C,4BAAY;AACR,gCAAY,QAAQ,KAAR,CAAc,mBADlB;AAER,+BAAW;AACP,oCAAY;AADL,qBAFH;AAKR,+BAAW,QAAQ,KAAR,CAAc,2BALjB;AAMR,8BAAU;AACN,mCAAW;AADL;AANF;AAH+B,aAApC,CAAX;;AAeA,gBAAM,aAAa,GAAG,gBAAH,CAAoB,UAApB,CAAnB;AACA,mBAAO,WAAW,KAAX,CAAiB,GAAjB,CAAqB,WAArB,CAAP,EAA0C,IAA1C,CAA+C,UAA/C;AACH,SAlBD;;AAoBA,WAAG,2BAAH,EAAgC,YAAW;AACvC,gBAAM,KAAK,IAAI,QAAQ,KAAR,CAAc,iBAAlB,CAAoC;AAC3C,oBAAI,OADuC;AAE3C,sBAAM;AAFqC,aAApC,CAAX;;AAKA,mBAAO;AAAA,uBAAM,GAAG,gBAAH,CAAoB,UAApB,CAAN;AAAA,aAAP,EAA8C,YAA9C,CACI,kDADJ;AAEH,SARD;AASH,KA9BD;AA+BH,CAvFD","file":"conditionOperatorModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionOperator', function() {\n    describe('Initialization', function() {\n        it('With parse and data', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                useValue: true,\n                valueField: {\n                    model: {\n                        className: 'Djblets.Forms.ConditionValueField',\n                        data: {\n                            myModelKey: 'my-value'\n                        }\n                    },\n                    view: {\n                        className: 'Djblets.Forms.ConditionValueFormFieldView',\n                        data: {\n                            myViewKey: 'my-value'\n                        }\n                    }\n                }\n            }, {\n                parse: true\n            });\n\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Operator');\n            expect(op.get('useValue')).toBe(true);\n            expect(op.get('valueField')).toEqual({\n                modelClass: Djblets.Forms.ConditionValueField,\n                modelData: {\n                    myModelKey: 'my-value'\n                },\n                viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                viewData: {\n                    myViewKey: 'my-value'\n                }\n            });\n        });\n\n        it('With parse and data, but no valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                useValue: true\n            }, {\n                parse: true\n            });\n\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Operator');\n            expect(op.get('valueField')).toBe(null);\n            expect(op.get('useValue')).toBe(true);\n        });\n    });\n\n    describe('createValueField', function() {\n        it('With custom valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                valueField: {\n                    modelClass: Djblets.Forms.ConditionValueField,\n                    modelData: {\n                        myModelKey: 'my-value'\n                    },\n                    viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                    viewData: {\n                        myViewKey: 'my-value'\n                    }\n                }\n            });\n\n            const valueField = op.createValueField('my-field');\n            expect(valueField.model.get('fieldName')).toBe('my-field');\n        });\n\n        it('Without custom valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator'\n            });\n\n            expect(() => op.createValueField('my-field')).toThrowError(\n                'This operator does not have a custom valueField.');\n        });\n    });\n});\n"]}