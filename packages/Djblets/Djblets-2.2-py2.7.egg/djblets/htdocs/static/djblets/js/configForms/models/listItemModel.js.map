{"version":3,"sources":["listItemModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA,QAAQ,MAAR,CAAe,QAAf,GAA0B,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC5C,cAAU;AACN,cAAM,IADA;AAEN,iBAAS,IAFH;AAGN,oBAAY,KAHN;AAIN,mBAAW,IAJL;AAKN,iBAAS,KALH;AAMN,sCANM;AAON,mBAAW;AAPL,KADkC;;AAW5C;;;;;;AAMA,oBAAgB;AACZ,qCADY;AAEZ,mCAFY;AAGZ;AAHY,KAjB4B;;AAuB5C;;;;;;;;;;;;;;AAcA,cArC4C,wBAqCrB;AAAA,YAAZ,OAAY,uEAAJ,EAAI;;AACnB,aAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,EAAlC;;AAEA,YAAI,KAAK,GAAL,CAAS,YAAT,CAAJ,EAA4B;AACxB,iBAAK,OAAL,CAAa,IAAb,CAAkB;AACd,oBAAI,QADU;AAEd,uBAAO,KAAK,GAAL,CAAS,aAAT,CAFO;AAGd,wBAAQ,IAHM;AAId,yBAAS,KAAK,GAAL,CAAS,WAAT;AAJK,aAAlB;AAMH;AACJ,KAhD2C;;;AAkD5C;;;;;;;AAOA,cAzD4C,sBAyDjC,OAzDiC,EAyDxB;AAChB,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,OAAL,CAAa,gBAAb;AACH;AA5D2C,CAAtB,CAA1B","file":"listItemModel.js","sourcesContent":["/**\n * Base class for an item in a list for config forms.\n *\n * ListItems provide text representing the item, optionally linked. They\n * can also provide zero or more actions that can be invoked on the item\n * by the user.\n *\n * Model Attributes:\n *     canRemove (boolean):\n *         Whether or not the model can be removed.\n *\n *     editURL (string):\n *         The URL to edit the model.\n *\n *     itemState (string):\n *         A string representing the item's state, for those items that\n *         need to show an enabled, disabled, error, or custom state.\n *\n *     loading (boolean):\n *         Whether or not the model is loading content from the server.\n *\n *     removeLabel (string):\n *         The label for the ``remove`` action.\n *\n *     showRemove (boolean):\n *         Whether or not the ``remove`` action should be present.\n *\n *         If the model is instantiated with this property ``true``, the\n *         :js:attr:`actions` attribute will be pre-populated with an action\n *         to remove itself.\n *\n *     text (string):\n *         The display name of the model.\n *\n * Attributes:\n *     actions (array):\n *         The actions available for this item. Actions are objects with the\n *         following attribtues:\n *\n *         ``children`` (:js:class:`array`, optional):\n *             An array of actions, each of which is an :js:class:`object` with\n *             these same attributes.\n *\n *         ``danger`` (:js:class:`boolean`, optional):\n *             When ``true``, this attributes indicates that the action will\n *             cause permanent, undoable damage. This is only useful for\n *             button actions.\n *\n *             If this attribute is present, the action will be rendered as a\n *             menu and its children will be rendered as items in that menu.\n *\n *         ``enabled`` (:js:class:`boolean`):\n *             Whether or not the action will be enabled.\n *\n *         ``iconName`` (:js:class:`string`, optional):\n *             The name of the icon to display to the action, if any. This\n *             is the :samp:`{iconname}` part of :samp:`rb-icon-{iconname}`.\n *\n *         ``id`` (:js:class:`string` or :js:class:`number`):\n *             A unique identifier for the action. It is used when registering\n *             action handlers and will also be appended to the class name for\n *             the action.\n *\n *         ``label`` (:js:class:`string`):\n *             The action's label.\n *\n *         ``primary`` (:js:class:`boolean`, optional):\n *             When ``true``, this button will be marked as a primary action\n *             for the item. This is only useful for button actions.\n *\n *             If this attribute is present, the action will be rendered as a\n *             menu and its children will be rendered as items in that menu.\n *\n *         ``propName`` (:js:class:`string`, optional):\n *             For a checkbox action, this attribute specifies the attribute on\n *             the model that will be set to reflect the checkbox's state.\n *\n *         ``type`` (:js:class:`string`, optional):\n *             The type of the action. If provided, it can have the following\n *             values:\n *\n *             ``'checkbox'``:\n *                 The action will be rendered as a checkox.\n *\n *             ``'radio'``:\n *                 The action will be rendered as a radio button.\n *\n *             Otherwise the action will be rendered as a button.\n */\nDjblets.Config.ListItem = Backbone.Model.extend({\n    defaults: {\n        text: null,\n        editURL: null,\n        showRemove: false,\n        canRemove: true,\n        loading: false,\n        removeLabel: _`Remove`,\n        itemState: null,\n    },\n\n    /**\n     * A mapping of item states to text.\n     *\n     * Subclasses can extend this to provide custom strings, or support\n     * custom item states.\n     */\n    itemStateTexts: {\n        disabled: _`Disabled`,\n        enabled: _`Enabled`,\n        error: _`Error`,\n    },\n\n    /**\n     * Initialize the item.\n     *\n     * If showRemove is true, this will populate a default Remove action\n     * for removing the item.\n     *\n     * Args:\n     *     options (object, optional):\n     *         The model options.\n     *\n     * Option Args:\n     *     actions (list of object):\n     *         A list of actions to add to the item.\n     */\n    initialize(options={}) {\n        this.actions = options.actions || [];\n\n        if (this.get('showRemove')) {\n            this.actions.push({\n                id: 'delete',\n                label: this.get('removeLabel'),\n                danger: true,\n                enabled: this.get('canRemove')\n            });\n        }\n    },\n\n    /**\n     * Set the actions available for this item.\n     *\n     * Args:\n     *     actions (Array of object):\n     *         The new action definitions.\n     */\n    setActions(actions) {\n        this.actions = actions;\n        this.trigger('actionsChanged');\n    },\n});\n"]}