{"version":3,"sources":["baseConditionValueFieldView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,QAAQ,KAAR,CAAc,2BAAd,GAA4C,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC7D,WAAS,MADoD;;AAG7D;;;;;;;;;;;AAWA,QAd6D,oBAcpD;AACL,SAAK,GAAL,CAAS,IAAT,CAAc,KAAK,KAAL,CAAW,GAAX,CAAe,WAAf,CAAd;;AAEA,WAAO,IAAP;AACH,GAlB4D;;;AAoB7D;;;;;;;;;AASA,UA7B6D,oBA6BpD,KA7BoD,EA6B7C;AACZ,YAAQ,MAAR,CAAe,KAAf,EACe,kDADf;AAEH,GAhC4D;;;AAkC7D;;;;;;;;;AASA,UA3C6D,sBA2ClD;AACP,YAAQ,MAAR,CAAe,KAAf,EACe,kDADf;AAEH;AA9C4D,CAArB,CAA5C","file":"baseConditionValueFieldView.js","sourcesContent":["/**\n * Base view for capturing a value for a condition.\n *\n * This is meant to be subclassed, and subclasses must implement\n * :js:func:`setValue` and :js:func:`getValue`.\n */\nDjblets.Forms.BaseConditionValueFieldView = Backbone.View.extend({\n    tagName: 'span',\n\n    /**\n     * Render the value field.\n     *\n     * By default, this will render the ``fieldHTML`` attribute of the model\n     * to HTML and set it for the view's element. Subclasses can override this\n     * to perform additional rendering logic.\n     *\n     * Returns:\n     *     Djblets.Forms.BaseConditionValueFieldView:\n     *     The instance, for chaining.\n     */\n    render() {\n        this.$el.html(this.model.get('fieldHTML'));\n\n        return this;\n    },\n\n    /**\n     * Set a new value for the field.\n     *\n     * This must be implemented by subclasses.\n     *\n     * Args:\n     *     value (object):\n     *         The new value to set.\n     */\n    setValue(value) {\n        console.assert(false,\n                       'setValue() must be implemented by this subclass.');\n    },\n\n    /**\n     * Return the current value for the field.\n     *\n     * This must be implemented by subclasses.\n     *\n     * Returns:\n     *     object:\n     *     The field's current value.\n     */\n    getValue() {\n        console.assert(false,\n                       'getValue() must be implemented by this subclass.');\n    }\n});\n"]}