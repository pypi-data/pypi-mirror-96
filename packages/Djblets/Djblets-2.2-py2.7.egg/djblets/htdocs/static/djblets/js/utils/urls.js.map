{"version":3,"sources":["urls.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,QAAQ,QAAR,GAAmB,YAAqB;AAAA,QAAZ,OAAY,uEAAJ,EAAI;;AACpC,QAAI,MAAM,QAAQ,OAAR,IAAmB,EAA7B;;AAEA;AACA,QAAM,YAAY,QAAQ,SAA1B;;AAEA,QAAI,SAAJ,EAAe;AACX,YAAI,oBAAJ;;AAEA,YAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,0BAAc,SAAd;;AAEA,gBAAI,YAAY,OAAZ,CAAoB,GAApB,MAA6B,CAAjC,EAAoC;AAChC,8BAAc,YAAY,MAAZ,CAAmB,CAAnB,CAAd;AACH;AACJ,SAND,MAMO;AACH,0BAAc,EAAE,KAAF,CAAQ,SAAR,CAAd;AACH;;AAED,YAAI,WAAJ,EAAiB;AACb,yBAAW,WAAX;AACH;AACJ;;AAED;AACA,QAAM,SAAS,QAAQ,MAAvB;;AAEA,QAAI,MAAJ,EAAY;AACR,YAAI,OAAO,OAAP,CAAe,GAAf,MAAwB,CAA5B,EAA+B;AAC3B,mBAAO,MAAP;AACH,SAFD,MAEO;AACH,yBAAW,MAAX;AACH;AACJ;;AAED,WAAO,GAAP;AACH,CApCD;;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,QAAQ,gBAAR,GAA2B,UAAS,GAAT,EAA0B;AAAA,QAAZ,OAAY,uEAAJ,EAAI;;AACjD,QAAM,kBAAkB,QAAQ,eAAhC;;AAEA,QAAI,IAAI,IAAI,OAAJ,CAAY,GAAZ,CAAR;AACA,QAAI,oBAAJ;;AAEA,QAAI,MAAM,CAAC,CAAX,EAAc;AACV;AACA,sBAAc,GAAd;AACH,KAHD,MAGO;AACH,sBAAc,IAAI,MAAJ,CAAW,IAAI,CAAf,CAAd;AACH;;AAED,QAAM,QAAQ,EAAd;;AAEA,QAAI,YAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,eAAO,KAAP;AACH;;AAED,QAAM,cAAc,YAAY,KAAZ,CAAkB,GAAlB,CAApB;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,GAAxC,EAA6C;AACzC,YAAM,aAAa,YAAY,CAAZ,CAAnB;AACA,YAAI,YAAJ;AACA,YAAI,cAAJ;;AAEA,YAAI,WAAW,OAAX,CAAmB,GAAnB,CAAJ;;AAEA,YAAI,MAAM,CAAC,CAAX,EAAc;AACV,kBAAM,mBAAmB,UAAnB,CAAN;AACA,oBAAQ,IAAR;AACH,SAHD,MAGO;AACH,kBAAM,mBAAmB,WAAW,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAnB,CAAN;AACA,oBAAQ,mBAAmB,WAAW,MAAX,CAAkB,IAAI,CAAtB,CAAnB,CAAR;AACH;;AAED,YAAI,mBAAmB,MAAM,cAAN,CAAqB,GAArB,CAAvB,EAAkD;AAC9C,gBAAI,EAAE,OAAF,CAAU,MAAM,GAAN,CAAV,CAAJ,EAA2B;AACvB,sBAAM,GAAN,EAAW,IAAX,CAAgB,KAAhB;AACH,aAFD,MAEO;AACH,sBAAM,GAAN,IAAa,CAAC,MAAM,GAAN,CAAD,EAAa,KAAb,CAAb;AACH;AACJ,SAND,MAMO;AACH,kBAAM,GAAN,IAAa,KAAb;AACH;AACJ;;AAED,WAAO,KAAP;AACH,CAhDD","file":"urls.js","sourcesContent":["/**\n * Build and return a URL out of different components.\n *\n * This will construct a URL based on a base URL (which may be an absolute\n * URL, a relative path, or an empty string), optional query string data (as\n * a string, a dictionary, or array), and an optional anchor name.\n *\n * Args:\n *     options (object):\n *         The options used to construct the URL.\n *\n * Option Args:\n *     anchor (unicode, optional):\n *         An anchor to append to the URL. This may include the leading ``#``,\n *         but it's optional.\n *\n *     baseURL (string, optional):\n *         The base URL to build onto, if any. If not provided, an empty\n *         string will be used.\n *\n *     queryData (*, optional):\n *         Data for the query string. This can be a string, an object, or\n *         an array of dictionaries containing ``name`` and ``value`` keys.\n *         See :js:func:`jQuery.param` for information on what's allowed here.\n *\n *         If using an object of keys and values, the sort order is not\n *         guaranteed. It will be up to the JavaScript engine. Provide a\n *         string or array to guarantee order.\n *\n *         If using a string, and the string begins with a ``?``, it will be\n *         stripped away.\n *\n * Returns:\n *     string:\n *     The resulting URL.\n */\nDjblets.buildURL = function(options={}) {\n    let url = options.baseURL || '';\n\n    /* Build the query string, if any. */\n    const queryData = options.queryData;\n\n    if (queryData) {\n        let queryString;\n\n        if (typeof queryData === 'string') {\n            queryString = queryData;\n\n            if (queryString.indexOf('?') === 0) {\n                queryString = queryString.substr(1);\n            }\n        } else {\n            queryString = $.param(queryData);\n        }\n\n        if (queryString) {\n            url += `?${queryString}`;\n        }\n    }\n\n    /* Append an anchor, if any. */\n    const anchor = options.anchor;\n\n    if (anchor) {\n        if (anchor.indexOf('#') === 0) {\n            url += anchor;\n        } else {\n            url += `#${anchor}`;\n        }\n    }\n\n    return url;\n};\n\n\n/**\n * Parse a query string for key/value pairs.\n *\n * This takes a query string in the provided URL and parses it for standard\n * key/value pairs, returning an object representing those keys and values.\n * It can handle keys without values and optionally store multiple values\n * listed for the same key.\n *\n * Args:\n *     url (string):\n *         The URL containing a query string to parse.\n *\n *     options (object, optional):\n *         Options for controlling the parsing.\n *\n * Option Args:\n *     allowMultiValue (boolean):\n *         Whether to store multiple values for the same key, if found in\n *         the query string. The value for such a key will be an array of all\n *         values. If ``false`` (the default), only last value for a key will\n *         be stored.\n *\n * Returns:\n *     object:\n *     The resulting keys and values representing the query string.\n *\n *     If there was a query string item that did not have a value (in other\n *     words, no ``=`` was present), then its value will be ``null``.\n *\n *     If ``options.allowMultiValue`` is ``true``, and a key was used more\n *     than once, then its value will be a list of all values in the query\n *     string for that key.\n */\nDjblets.parseQueryString = function(url, options={}) {\n    const allowMultiValue = options.allowMultiValue;\n\n    let j = url.indexOf('?');\n    let queryString;\n\n    if (j === -1) {\n        /* Assume the whole thing is a query string. */\n        queryString = url;\n    } else {\n        queryString = url.substr(j + 1);\n    }\n\n    const query = {};\n\n    if (queryString.length === 0) {\n        return query;\n    }\n\n    const queryParams = queryString.split('&');\n\n    for (let i = 0; i < queryParams.length; i++) {\n        const queryParam = queryParams[i];\n        let key;\n        let value;\n\n        j = queryParam.indexOf('=');\n\n        if (j === -1) {\n            key = decodeURIComponent(queryParam);\n            value = null;\n        } else {\n            key = decodeURIComponent(queryParam.substr(0, j));\n            value = decodeURIComponent(queryParam.substr(j + 1));\n        }\n\n        if (allowMultiValue && query.hasOwnProperty(key)) {\n            if (_.isArray(query[key])) {\n                query[key].push(value);\n            } else {\n                query[key] = [query[key], value];\n            }\n        } else {\n            query[key] = value;\n        }\n    }\n\n    return query;\n};\n"]}