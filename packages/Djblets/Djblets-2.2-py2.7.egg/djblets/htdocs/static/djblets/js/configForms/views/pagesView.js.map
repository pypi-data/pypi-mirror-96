{"version":3,"sources":["pagesView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,QAAQ,MAAR,CAAe,SAAf,GAA2B,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC5C;;;;;AAKA,cAN4C,wBAM/B;AACT,aAAK,MAAL,GAAc,IAAI,SAAS,MAAb,CAAoB;AAC9B,oBAAQ;AACJ,2BAAW;AADP;AADsB,SAApB,CAAd;AAKA,aAAK,QAAL,CAAc,KAAK,MAAnB,EAA2B,YAA3B,EAAyC,KAAK,cAA9C;;AAEA,aAAK,WAAL,GAAmB,IAAnB;AACA,aAAK,YAAL,GAAoB,IAApB;AACA,aAAK,iBAAL,GAAyB,IAAzB;AACH,KAjB2C;;;AAmB5C;;;;;;;;;;AAUA,UA7B4C,oBA6BnC;AACL,aAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,wCAAP,CAAlB;AACA,aAAK,OAAL,GAAe,KAAK,CAAL,CAAO,iCAAP,CAAf;;AAEA,aAAK,WAAL,GAAmB,KAAK,UAAL,CAAgB,EAAhB,CAAmB,CAAnB,EAAsB,QAAtB,CAA+B,YAA/B,CAAnB;AACA,aAAK,YAAL,GAAoB,KAAK,OAAL,CAAa,EAAb,CAAgB,CAAhB,EAAmB,QAAnB,CAA4B,YAA5B,CAApB;;AAEA,iBAAS,OAAT,CAAiB,KAAjB,CAAuB;AACnB,kBAAM,OAAO,QAAP,CAAgB;AADH,SAAvB;;AAIA,eAAO,IAAP;AACH,KAzC2C;;;AA2C5C;;;;;;;;;;;;;;AAcA,kBAzD4C,0BAyD7B,MAzD6B,EAyDrB;AACnB,aAAK,WAAL,CAAiB,WAAjB,CAA6B,YAA7B;AACA,aAAK,YAAL,CAAkB,WAAlB,CAA8B,YAA9B;;AAEA,aAAK,YAAL,GAAoB,aAAW,MAAX,CAApB;;AAEA,YAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC;;;;AAIA,iBAAK,MAAL,CAAY,QAAZ,CACI,KAAK,UAAL,CAAgB,IAAhB,CAAqB,GAArB,EAA0B,IAA1B,CAA+B,MAA/B,EAAuC,MAAvC,CAA8C,CAA9C,CADJ,EAEI;AACI,yBAAS,IADb;AAEI,yBAAS;AAFb,aAFJ;AAMH,SAXD,MAWO;AACH,iBAAK,WAAL,GACI,KAAK,UAAL,CACK,MADL,oBAC6B,MAD7B,UAEK,QAFL,CAEc,YAFd,CADJ;;AAKA,iBAAK,YAAL,CAAkB,QAAlB,CAA2B,YAA3B;;AAEA,gBAAI,CAAC,KAAK,iBAAV,EAA6B;AACzB,kBAAE,WAAF,EAAe,MAAf;AACH;;AAED,iBAAK,iBAAL,GAAyB,KAAzB;AACH;AACJ;AAxF2C,CAArB,CAA3B","file":"pagesView.js","sourcesContent":["/**\n * Manages a collection of configuration pages.\n *\n * The primary job of this view is to handle sub-page navigation.\n * The actual page will contain several \"pages\" that are shown or hidden\n * depending on what the user has clicked on the sidebar.\n */\nDjblets.Config.PagesView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * This will set up the router for handling page navigation.\n     */\n    initialize() {\n        this.router = new Backbone.Router({\n            routes: {\n                ':pageID': 'page'\n            }\n        });\n        this.listenTo(this.router, 'route:page', this._onPageChanged);\n\n        this._$activeNav = null;\n        this._$activePage = null;\n        this._preserveMessages = true;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set the default page to be shown, and instruct Backbone\n     * to begin handling the routing.\n     *\n     * Returns:\n     *     Djblets.Config.PageView:\n     *     This view.\n     */\n    render() {\n        this._$pageNavs = this.$('.djblets-c-config-forms-page-nav__item');\n        this._$pages = this.$('.djblets-c-config-forms-subpage');\n\n        this._$activeNav = this._$pageNavs.eq(0).addClass('-is-active');\n        this._$activePage = this._$pages.eq(0).addClass('-is-active');\n\n        Backbone.history.start({\n            root: window.location.pathname,\n        });\n\n        return this;\n    },\n\n    /**\n     * Handle when the page changes.\n     *\n     * The sidebar will be updated to reflect the current active page,\n     * and the page will be shown.\n     *\n     * If navigating pages manually, any messages provided by the backend\n     * form will be removed. We don't do this the first time there's a\n     * navigation, as this will be called when first rendering the view.\n     *\n     * Args:\n     *     pageID (string):\n     *         The ID of the page that is becoming active.\n     */\n    _onPageChanged(pageID) {\n        this._$activeNav.removeClass('-is-active');\n        this._$activePage.removeClass('-is-active');\n\n        this._$activePage = $(`#page_${pageID}`);\n\n        if (this._$activePage.length === 0) {\n            /*\n             * If the requested page doesn't exist (for example, it might be\n             * hidden, or just typoed), load the first page instead.\n             */\n            this.router.navigate(\n                this._$pageNavs.find('a').attr('href').substr(1),\n                {\n                    trigger: true,\n                    replace: true\n                });\n        } else {\n            this._$activeNav =\n                this._$pageNavs\n                    .filter(`:has(a[href=\"#${pageID}\"])`)\n                    .addClass('-is-active');\n\n            this._$activePage.addClass('-is-active');\n\n            if (!this._preserveMessages) {\n                $('#messages').remove();\n            }\n\n            this._preserveMessages = false;\n        }\n    },\n});\n"]}