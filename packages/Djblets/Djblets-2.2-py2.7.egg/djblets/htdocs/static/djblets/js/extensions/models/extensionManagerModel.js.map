{"version":3,"sources":["extensionManagerModel.es6.js"],"names":[],"mappings":"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","file":"extensionManagerModel.js","sourcesContent":["(function() {\n\n\n/**\n * Represents an installed extension listed in the Manage Extensions list.\n *\n * This stores the various information about the extension that we'll display\n * to the user, and offers actions for enabling or disabling the extension.\n */\nconst InstalledExtension = Backbone.Model.extend({\n    defaults: {\n        author: null,\n        authorURL: null,\n        configURL: null,\n        dbURL: null,\n        enabled: false,\n        loadable: true,\n        loadError: null,\n        name: null,\n        summary: null,\n        version: null,\n    },\n\n    /**\n     * Return the URL to the API endpoint representing this extension.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use for making changes to this extension.\n     */\n    url() {\n        return Backbone.Model.prototype.url.call(this) + '/';\n    },\n\n    /**\n     * Enable the extension.\n     *\n     * This will submit a request to the server to enable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    enable() {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: true\n            }, {\n                wait: true,\n                success: () => resolve(),\n                error: (model, xhr) => {\n                    this.set({\n                        loadable: false,\n                        loadError: xhr.errorRsp.load_error,\n                        canEnable: !xhr.errorRsp.needs_reload,\n                    });\n\n                    reject(new Error(xhr.errorText));\n                },\n            });\n        });\n    },\n\n    /**\n     * Disable the extension.\n     *\n     * This will submit a request to the server to disable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    disable() {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: false,\n            }, {\n                wait: true,\n                success: () => resolve(),\n                error: xhr => reject(new Error(xhr.errorText)),\n            });\n        });\n    },\n\n    /**\n     * Return a JSON payload for requests sent to the server.\n     *\n     * Returns:\n     *     object:\n     *     A payload that will be serialized for making the API request.\n     */\n    toJSON() {\n        return {\n            enabled: this.get('enabled'),\n        };\n    },\n\n    /**\n     * Parse a JSON payload from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed response.\n     */\n    parse(rsp) {\n        if (rsp.stat !== undefined) {\n            rsp = rsp.extension;\n        }\n\n        const configLink = rsp.links['admin-configure'];\n        const dbLink = rsp.links['admin-database'];\n\n        return {\n            author: rsp.author,\n            authorURL: rsp.author_url,\n            canDisable: rsp.can_disable,\n            canEnable: rsp.can_enable,\n            configURL: configLink ? configLink.href : null,\n            dbURL: dbLink ? dbLink.href : null,\n            enabled: rsp.enabled,\n            loadable: rsp.loadable,\n            loadError: rsp.load_error,\n            id: rsp.class_name,\n            name: rsp.name,\n            summary: rsp.summary,\n            version: rsp.version,\n        };\n    },\n\n    /**\n     * Perform AJAX requests against the server-side API.\n     *\n     * Args:\n     *     method (string):\n     *         The HTTP method to use.\n     *\n     *     model (InstalledExtension):\n     *         The extension object being synced.\n     *\n     *     options (object):\n     *         Options for the sync operation.\n     */\n    sync(method, model, options) {\n        Backbone.sync.call(this, method, model, _.defaults({\n            contentType: 'application/x-www-form-urlencoded',\n            data: model.toJSON(options),\n            processData: true,\n            error: xhr => {\n                let rsp;\n                let text;\n\n                try {\n                    rsp = $.parseJSON(xhr.responseText);\n                    text = rsp.err.msg;\n                } catch (e) {\n                    text = 'HTTP ' + xhr.status + ' ' + xhr.statusText;\n                    rsp = {\n                        loadError: text,\n                        canEnable: false,\n                    };\n                }\n\n                if (_.isFunction(options.error)) {\n                    xhr.errorText = text;\n                    xhr.errorRsp = rsp;\n                    options.error(xhr, options);\n                }\n            },\n        }, options));\n    },\n});\n\n\n/**\n * A collection of installed extensions.\n *\n * This stores the list of installed extensions, and allows fetching from\n * the API.\n */\nconst InstalledExtensionCollection = Backbone.Collection.extend({\n    model: InstalledExtension,\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data from the response.\n     */\n    parse(rsp) {\n        return rsp.extensions;\n    },\n});\n\n\n/**\n * Manages installed extensions.\n *\n * This stores a collection of installed extensions, and provides\n * functionality for loading the current list from the server.\n *\n * Model Attributes:\n *     apiRoot (string):\n *         The root of the extensions API, used for all lookups.\n */\nDjblets.ExtensionManager = Backbone.Model.extend({\n    defaults: {\n        apiRoot: null,\n    },\n\n    /**\n     * Initialize the manager.\n     */\n    initialize() {\n        this.installedExtensions = new InstalledExtensionCollection();\n        this.installedExtensions.url = this.get('apiRoot');\n    },\n\n    /**\n     * Load the extensions list.\n     */\n    load() {\n        this.trigger('loading');\n\n        this.installedExtensions.fetch({\n            success: () => this.trigger('loaded'),\n        });\n    },\n});\n\n\n})();\n"]}