# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class CompartmentOperationProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'estimated_time_remaining': 'int',
        'total_units_of_work': 'int',
        'completed_units_of_work': 'int',
        'tracked': 'bool'
    }

    attribute_map = {
        'estimated_time_remaining': 'estimatedTimeRemaining',
        'total_units_of_work': 'totalUnitsOfWork',
        'completed_units_of_work': 'completedUnitsOfWork',
        'tracked': 'tracked'
    }

    def __init__(self, estimated_time_remaining=None, total_units_of_work=None, completed_units_of_work=None, tracked=None, local_vars_configuration=None):  # noqa: E501
        """CompartmentOperationProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._estimated_time_remaining = None
        self._total_units_of_work = None
        self._completed_units_of_work = None
        self._tracked = None
        self.discriminator = None

        if estimated_time_remaining is not None:
            self.estimated_time_remaining = estimated_time_remaining
        if total_units_of_work is not None:
            self.total_units_of_work = total_units_of_work
        if completed_units_of_work is not None:
            self.completed_units_of_work = completed_units_of_work
        if tracked is not None:
            self.tracked = tracked

    @property
    def estimated_time_remaining(self):
        """Gets the estimated_time_remaining of this CompartmentOperationProgress.  # noqa: E501


        :return: The estimated_time_remaining of this CompartmentOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._estimated_time_remaining

    @estimated_time_remaining.setter
    def estimated_time_remaining(self, estimated_time_remaining):
        """Sets the estimated_time_remaining of this CompartmentOperationProgress.


        :param estimated_time_remaining: The estimated_time_remaining of this CompartmentOperationProgress.  # noqa: E501
        :type: int
        """

        self._estimated_time_remaining = estimated_time_remaining

    @property
    def total_units_of_work(self):
        """Gets the total_units_of_work of this CompartmentOperationProgress.  # noqa: E501


        :return: The total_units_of_work of this CompartmentOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._total_units_of_work

    @total_units_of_work.setter
    def total_units_of_work(self, total_units_of_work):
        """Sets the total_units_of_work of this CompartmentOperationProgress.


        :param total_units_of_work: The total_units_of_work of this CompartmentOperationProgress.  # noqa: E501
        :type: int
        """

        self._total_units_of_work = total_units_of_work

    @property
    def completed_units_of_work(self):
        """Gets the completed_units_of_work of this CompartmentOperationProgress.  # noqa: E501


        :return: The completed_units_of_work of this CompartmentOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._completed_units_of_work

    @completed_units_of_work.setter
    def completed_units_of_work(self, completed_units_of_work):
        """Sets the completed_units_of_work of this CompartmentOperationProgress.


        :param completed_units_of_work: The completed_units_of_work of this CompartmentOperationProgress.  # noqa: E501
        :type: int
        """

        self._completed_units_of_work = completed_units_of_work

    @property
    def tracked(self):
        """Gets the tracked of this CompartmentOperationProgress.  # noqa: E501


        :return: The tracked of this CompartmentOperationProgress.  # noqa: E501
        :rtype: bool
        """
        return self._tracked

    @tracked.setter
    def tracked(self, tracked):
        """Sets the tracked of this CompartmentOperationProgress.


        :param tracked: The tracked of this CompartmentOperationProgress.  # noqa: E501
        :type: bool
        """

        self._tracked = tracked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompartmentOperationProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompartmentOperationProgress):
            return True

        return self.to_dict() != other.to_dict()
