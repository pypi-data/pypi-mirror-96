# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class CloseAcquisitionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'write_handle': 'str',
        'compartment_uri': 'str',
        'discard': 'bool'
    }

    attribute_map = {
        'write_handle': 'writeHandle',
        'compartment_uri': 'compartmentURI',
        'discard': 'discard'
    }

    def __init__(self, write_handle=None, compartment_uri=None, discard=None, local_vars_configuration=None):  # noqa: E501
        """CloseAcquisitionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._write_handle = None
        self._compartment_uri = None
        self._discard = None
        self.discriminator = None

        self.write_handle = write_handle
        self.compartment_uri = compartment_uri
        if discard is not None:
            self.discard = discard

    @property
    def write_handle(self):
        """Gets the write_handle of this CloseAcquisitionRequest.  # noqa: E501


        :return: The write_handle of this CloseAcquisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._write_handle

    @write_handle.setter
    def write_handle(self, write_handle):
        """Sets the write_handle of this CloseAcquisitionRequest.


        :param write_handle: The write_handle of this CloseAcquisitionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and write_handle is None:  # noqa: E501
            raise ValueError("Invalid value for `write_handle`, must not be `None`")  # noqa: E501

        self._write_handle = write_handle

    @property
    def compartment_uri(self):
        """Gets the compartment_uri of this CloseAcquisitionRequest.  # noqa: E501


        :return: The compartment_uri of this CloseAcquisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._compartment_uri

    @compartment_uri.setter
    def compartment_uri(self, compartment_uri):
        """Sets the compartment_uri of this CloseAcquisitionRequest.


        :param compartment_uri: The compartment_uri of this CloseAcquisitionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compartment_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `compartment_uri`, must not be `None`")  # noqa: E501

        self._compartment_uri = compartment_uri

    @property
    def discard(self):
        """Gets the discard of this CloseAcquisitionRequest.  # noqa: E501


        :return: The discard of this CloseAcquisitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._discard

    @discard.setter
    def discard(self, discard):
        """Sets the discard of this CloseAcquisitionRequest.


        :param discard: The discard of this CloseAcquisitionRequest.  # noqa: E501
        :type: bool
        """

        self._discard = discard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloseAcquisitionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloseAcquisitionRequest):
            return True

        return self.to_dict() != other.to_dict()
