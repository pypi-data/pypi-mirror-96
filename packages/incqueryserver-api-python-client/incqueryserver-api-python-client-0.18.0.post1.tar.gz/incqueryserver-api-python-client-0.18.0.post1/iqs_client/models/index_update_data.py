# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class IndexUpdateData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_compartment_uri': 'str',
        'element_store': 'list[ElementStoreEntry]',
        'attribute_store': 'list[AttributeStoreEntry]',
        'reference_store': 'list[ReferenceStoreEntry]',
        'single_compartment': 'bool'
    }

    attribute_map = {
        'common_compartment_uri': 'commonCompartmentURI',
        'element_store': 'elementStore',
        'attribute_store': 'attributeStore',
        'reference_store': 'referenceStore',
        'single_compartment': 'singleCompartment'
    }

    def __init__(self, common_compartment_uri=None, element_store=None, attribute_store=None, reference_store=None, single_compartment=None, local_vars_configuration=None):  # noqa: E501
        """IndexUpdateData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._common_compartment_uri = None
        self._element_store = None
        self._attribute_store = None
        self._reference_store = None
        self._single_compartment = None
        self.discriminator = None

        if common_compartment_uri is not None:
            self.common_compartment_uri = common_compartment_uri
        if element_store is not None:
            self.element_store = element_store
        if attribute_store is not None:
            self.attribute_store = attribute_store
        if reference_store is not None:
            self.reference_store = reference_store
        self.single_compartment = single_compartment

    @property
    def common_compartment_uri(self):
        """Gets the common_compartment_uri of this IndexUpdateData.  # noqa: E501


        :return: The common_compartment_uri of this IndexUpdateData.  # noqa: E501
        :rtype: str
        """
        return self._common_compartment_uri

    @common_compartment_uri.setter
    def common_compartment_uri(self, common_compartment_uri):
        """Sets the common_compartment_uri of this IndexUpdateData.


        :param common_compartment_uri: The common_compartment_uri of this IndexUpdateData.  # noqa: E501
        :type: str
        """

        self._common_compartment_uri = common_compartment_uri

    @property
    def element_store(self):
        """Gets the element_store of this IndexUpdateData.  # noqa: E501


        :return: The element_store of this IndexUpdateData.  # noqa: E501
        :rtype: list[ElementStoreEntry]
        """
        return self._element_store

    @element_store.setter
    def element_store(self, element_store):
        """Sets the element_store of this IndexUpdateData.


        :param element_store: The element_store of this IndexUpdateData.  # noqa: E501
        :type: list[ElementStoreEntry]
        """

        self._element_store = element_store

    @property
    def attribute_store(self):
        """Gets the attribute_store of this IndexUpdateData.  # noqa: E501


        :return: The attribute_store of this IndexUpdateData.  # noqa: E501
        :rtype: list[AttributeStoreEntry]
        """
        return self._attribute_store

    @attribute_store.setter
    def attribute_store(self, attribute_store):
        """Sets the attribute_store of this IndexUpdateData.


        :param attribute_store: The attribute_store of this IndexUpdateData.  # noqa: E501
        :type: list[AttributeStoreEntry]
        """

        self._attribute_store = attribute_store

    @property
    def reference_store(self):
        """Gets the reference_store of this IndexUpdateData.  # noqa: E501


        :return: The reference_store of this IndexUpdateData.  # noqa: E501
        :rtype: list[ReferenceStoreEntry]
        """
        return self._reference_store

    @reference_store.setter
    def reference_store(self, reference_store):
        """Sets the reference_store of this IndexUpdateData.


        :param reference_store: The reference_store of this IndexUpdateData.  # noqa: E501
        :type: list[ReferenceStoreEntry]
        """

        self._reference_store = reference_store

    @property
    def single_compartment(self):
        """Gets the single_compartment of this IndexUpdateData.  # noqa: E501


        :return: The single_compartment of this IndexUpdateData.  # noqa: E501
        :rtype: bool
        """
        return self._single_compartment

    @single_compartment.setter
    def single_compartment(self, single_compartment):
        """Sets the single_compartment of this IndexUpdateData.


        :param single_compartment: The single_compartment of this IndexUpdateData.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and single_compartment is None:  # noqa: E501
            raise ValueError("Invalid value for `single_compartment`, must not be `None`")  # noqa: E501

        self._single_compartment = single_compartment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexUpdateData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexUpdateData):
            return True

        return self.to_dict() != other.to_dict()
