# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class RevisionStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'element_store_size': 'int',
        'element_store_tuples': 'int',
        'direct_instances_store_size': 'int',
        'attribute_store_size': 'int',
        'attribute_store_tuples': 'int',
        'reference_store_size': 'int',
        'reference_store_tuples': 'int',
        'merged_unique_elements': 'int',
        'merged_load_cost': 'int'
    }

    attribute_map = {
        'element_store_size': 'elementStoreSize',
        'element_store_tuples': 'elementStoreTuples',
        'direct_instances_store_size': 'directInstancesStoreSize',
        'attribute_store_size': 'attributeStoreSize',
        'attribute_store_tuples': 'attributeStoreTuples',
        'reference_store_size': 'referenceStoreSize',
        'reference_store_tuples': 'referenceStoreTuples',
        'merged_unique_elements': 'mergedUniqueElements',
        'merged_load_cost': 'mergedLoadCost'
    }

    def __init__(self, element_store_size=None, element_store_tuples=None, direct_instances_store_size=None, attribute_store_size=None, attribute_store_tuples=None, reference_store_size=None, reference_store_tuples=None, merged_unique_elements=None, merged_load_cost=None, local_vars_configuration=None):  # noqa: E501
        """RevisionStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._element_store_size = None
        self._element_store_tuples = None
        self._direct_instances_store_size = None
        self._attribute_store_size = None
        self._attribute_store_tuples = None
        self._reference_store_size = None
        self._reference_store_tuples = None
        self._merged_unique_elements = None
        self._merged_load_cost = None
        self.discriminator = None

        self.element_store_size = element_store_size
        self.element_store_tuples = element_store_tuples
        self.direct_instances_store_size = direct_instances_store_size
        self.attribute_store_size = attribute_store_size
        self.attribute_store_tuples = attribute_store_tuples
        self.reference_store_size = reference_store_size
        self.reference_store_tuples = reference_store_tuples
        self.merged_unique_elements = merged_unique_elements
        self.merged_load_cost = merged_load_cost

    @property
    def element_store_size(self):
        """Gets the element_store_size of this RevisionStatistics.  # noqa: E501


        :return: The element_store_size of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._element_store_size

    @element_store_size.setter
    def element_store_size(self, element_store_size):
        """Sets the element_store_size of this RevisionStatistics.


        :param element_store_size: The element_store_size of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and element_store_size is None:  # noqa: E501
            raise ValueError("Invalid value for `element_store_size`, must not be `None`")  # noqa: E501

        self._element_store_size = element_store_size

    @property
    def element_store_tuples(self):
        """Gets the element_store_tuples of this RevisionStatistics.  # noqa: E501


        :return: The element_store_tuples of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._element_store_tuples

    @element_store_tuples.setter
    def element_store_tuples(self, element_store_tuples):
        """Sets the element_store_tuples of this RevisionStatistics.


        :param element_store_tuples: The element_store_tuples of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and element_store_tuples is None:  # noqa: E501
            raise ValueError("Invalid value for `element_store_tuples`, must not be `None`")  # noqa: E501

        self._element_store_tuples = element_store_tuples

    @property
    def direct_instances_store_size(self):
        """Gets the direct_instances_store_size of this RevisionStatistics.  # noqa: E501


        :return: The direct_instances_store_size of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._direct_instances_store_size

    @direct_instances_store_size.setter
    def direct_instances_store_size(self, direct_instances_store_size):
        """Sets the direct_instances_store_size of this RevisionStatistics.


        :param direct_instances_store_size: The direct_instances_store_size of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and direct_instances_store_size is None:  # noqa: E501
            raise ValueError("Invalid value for `direct_instances_store_size`, must not be `None`")  # noqa: E501

        self._direct_instances_store_size = direct_instances_store_size

    @property
    def attribute_store_size(self):
        """Gets the attribute_store_size of this RevisionStatistics.  # noqa: E501


        :return: The attribute_store_size of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._attribute_store_size

    @attribute_store_size.setter
    def attribute_store_size(self, attribute_store_size):
        """Sets the attribute_store_size of this RevisionStatistics.


        :param attribute_store_size: The attribute_store_size of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and attribute_store_size is None:  # noqa: E501
            raise ValueError("Invalid value for `attribute_store_size`, must not be `None`")  # noqa: E501

        self._attribute_store_size = attribute_store_size

    @property
    def attribute_store_tuples(self):
        """Gets the attribute_store_tuples of this RevisionStatistics.  # noqa: E501


        :return: The attribute_store_tuples of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._attribute_store_tuples

    @attribute_store_tuples.setter
    def attribute_store_tuples(self, attribute_store_tuples):
        """Sets the attribute_store_tuples of this RevisionStatistics.


        :param attribute_store_tuples: The attribute_store_tuples of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and attribute_store_tuples is None:  # noqa: E501
            raise ValueError("Invalid value for `attribute_store_tuples`, must not be `None`")  # noqa: E501

        self._attribute_store_tuples = attribute_store_tuples

    @property
    def reference_store_size(self):
        """Gets the reference_store_size of this RevisionStatistics.  # noqa: E501


        :return: The reference_store_size of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._reference_store_size

    @reference_store_size.setter
    def reference_store_size(self, reference_store_size):
        """Sets the reference_store_size of this RevisionStatistics.


        :param reference_store_size: The reference_store_size of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and reference_store_size is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_store_size`, must not be `None`")  # noqa: E501

        self._reference_store_size = reference_store_size

    @property
    def reference_store_tuples(self):
        """Gets the reference_store_tuples of this RevisionStatistics.  # noqa: E501


        :return: The reference_store_tuples of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._reference_store_tuples

    @reference_store_tuples.setter
    def reference_store_tuples(self, reference_store_tuples):
        """Sets the reference_store_tuples of this RevisionStatistics.


        :param reference_store_tuples: The reference_store_tuples of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and reference_store_tuples is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_store_tuples`, must not be `None`")  # noqa: E501

        self._reference_store_tuples = reference_store_tuples

    @property
    def merged_unique_elements(self):
        """Gets the merged_unique_elements of this RevisionStatistics.  # noqa: E501


        :return: The merged_unique_elements of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._merged_unique_elements

    @merged_unique_elements.setter
    def merged_unique_elements(self, merged_unique_elements):
        """Sets the merged_unique_elements of this RevisionStatistics.


        :param merged_unique_elements: The merged_unique_elements of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and merged_unique_elements is None:  # noqa: E501
            raise ValueError("Invalid value for `merged_unique_elements`, must not be `None`")  # noqa: E501

        self._merged_unique_elements = merged_unique_elements

    @property
    def merged_load_cost(self):
        """Gets the merged_load_cost of this RevisionStatistics.  # noqa: E501


        :return: The merged_load_cost of this RevisionStatistics.  # noqa: E501
        :rtype: int
        """
        return self._merged_load_cost

    @merged_load_cost.setter
    def merged_load_cost(self, merged_load_cost):
        """Sets the merged_load_cost of this RevisionStatistics.


        :param merged_load_cost: The merged_load_cost of this RevisionStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and merged_load_cost is None:  # noqa: E501
            raise ValueError("Invalid value for `merged_load_cost`, must not be `None`")  # noqa: E501

        self._merged_load_cost = merged_load_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RevisionStatistics):
            return True

        return self.to_dict() != other.to_dict()
