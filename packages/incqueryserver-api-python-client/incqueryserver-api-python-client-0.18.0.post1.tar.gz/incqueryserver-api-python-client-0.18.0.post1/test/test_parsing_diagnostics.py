# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import iqs_client
from iqs_client.models.parsing_diagnostics import ParsingDiagnostics  # noqa: E501
from iqs_client.rest import ApiException

class TestParsingDiagnostics(unittest.TestCase):
    """ParsingDiagnostics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ParsingDiagnostics
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = iqs_client.models.parsing_diagnostics.ParsingDiagnostics()  # noqa: E501
        if include_optional :
            return ParsingDiagnostics(
                errors = {"length":6,"lineNumber":5,"offset":133,"column":25,"code":"org.eclipse.xtext.diagnostics.Diagnostic.Linking","message":"Class1 cannot be resolved.","severity":"ERROR"}, 
                warnings = {"length":15,"lineNumber":240,"offset":6892,"column":8,"code":"org.eclipse.viatra.query.patternlanguage.validation.IssueCodes.check_with_impure_java_calls","message":"There is at least one potentially problematic java call in the check()/eval() expression. Custom java calls are considered unsafe in VIATRA Query unless they are annotated with @Pure or registered with the org.eclipse.viatra.query.patternlanguage.purewhitelist extension point. The possible erroneous calls are the following: [java.lang.String.length].","severity":"WARNING"}
            )
        else :
            return ParsingDiagnostics(
                errors = {"length":6,"lineNumber":5,"offset":133,"column":25,"code":"org.eclipse.xtext.diagnostics.Diagnostic.Linking","message":"Class1 cannot be resolved.","severity":"ERROR"},
        )

    def testParsingDiagnostics(self):
        """Test ParsingDiagnostics"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
