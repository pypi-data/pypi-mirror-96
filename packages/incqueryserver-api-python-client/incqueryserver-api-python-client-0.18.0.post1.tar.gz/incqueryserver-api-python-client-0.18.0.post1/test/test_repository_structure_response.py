# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import iqs_client
from iqs_client.models.repository_structure_response import RepositoryStructureResponse  # noqa: E501
from iqs_client.rest import ApiException

class TestRepositoryStructureResponse(unittest.TestCase):
    """RepositoryStructureResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RepositoryStructureResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = iqs_client.models.repository_structure_response.RepositoryStructureResponse()  # noqa: E501
        if include_optional :
            return RepositoryStructureResponse(
                twc = [
                    iqs_client.models.twc_repository_structure.TWCRepositoryStructure(
                        id = '0', 
                        title = '0', 
                        workspaces = [
                            iqs_client.models.workspace.Workspace(
                                workspace_id = '4d6ce495-1273-452c-a548-36fcd922184e', 
                                title = 'Uncategorized', 
                                resources = [
                                    iqs_client.models.resource.Resource(
                                        resource_id = '3c4be8a2-eb9c-4de0-95ac-e51fc4c27e68', 
                                        title = 'ICS-ALLQueries.MASTER', 
                                        branches = [
                                            iqs_client.models.branch.Branch(
                                                branch_id = '958bd4bb-a145-48bf-a1df-da10803b6233', 
                                                title = 'trunk', 
                                                revisions = [{"revisionNumer":1}], )
                                            ], )
                                    ], )
                            ], )
                    ], 
                mms = [
                    iqs_client.models.mms_repository_structure.MMSRepositoryStructure(
                        id = '0', 
                        title = '0', 
                        orgs = [
                            iqs_client.models.mms_organization.MMSOrganization(
                                org_id = '6384a103-766c-46e0-830d-8a3b1f479479', 
                                name = 'IQL', 
                                projects = [
                                    iqs_client.models.mms_project.MMSProject(
                                        project_id = 'PROJECT-bef4f459-5d90-41fb-bc86-4f6d4ebd2dfd', 
                                        name = 'ICS-ALLQueries', 
                                        refs = [
                                            iqs_client.models.mms_ref.MMSRef(
                                                ref_id = 'master', 
                                                name = 'master', 
                                                commits = {"commitId":"560d3959-3912-434a-a914-8d039d3c9a06"}, )
                                            ], )
                                    ], )
                            ], )
                    ], 
                jama = [
                    iqs_client.models.jama_repository_structure.JamaRepositoryStructure(
                        id = '0', 
                        title = '0', 
                        projects = [
                            iqs_client.models.jama_project_descriptor.JamaProjectDescriptor(
                                project_id = '27', 
                                name = 'Automotive Integrated System Sample Set', 
                                author_id = '5', 
                                compartment_uri = 'jama-index:/projects/27', )
                            ], )
                    ], 
                modelon_impact = [
                    iqs_client.models.modelon_impact_repository_structure.ModelonImpactRepositoryStructure(
                        id = '0', 
                        title = '0', 
                        workspaces = [
                            iqs_client.models.modelon_impact_workspace_descriptor.ModelonImpactWorkspaceDescriptor(
                                name = 'MyWorkspace', 
                                workspace_id = 'MyWorkspace', 
                                compartment_uri = 'impact-index:/workspaces/MyWorkspace', )
                            ], )
                    ], 
                jira = [
                    iqs_client.models.jira_repository_structure.JiraRepositoryStructure(
                        id = '0', 
                        title = '0', 
                        projects = [
                            iqs_client.models.jira_project_descriptor.JiraProjectDescriptor(
                                project_id = '10000', 
                                name = 'Supporting Jira Cloud', 
                                compartment_uri = 'jira-index:/projects/10000', )
                            ], )
                    ]
            )
        else :
            return RepositoryStructureResponse(
        )

    def testRepositoryStructureResponse(self):
        """Test RepositoryStructureResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
