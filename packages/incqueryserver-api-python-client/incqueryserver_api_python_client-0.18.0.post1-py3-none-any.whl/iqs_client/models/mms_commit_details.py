# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class MMSCommitDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organization_name': 'str',
        'project_name': 'str',
        'ref_name': 'str',
        'commit_name': 'str',
        'compartment_label': 'str',
        'author': 'str',
        'connector_name': 'str',
        'full_path': 'str',
        'container_path': 'str'
    }

    attribute_map = {
        'organization_name': 'organizationName',
        'project_name': 'projectName',
        'ref_name': 'refName',
        'commit_name': 'commitName',
        'compartment_label': 'compartmentLabel',
        'author': 'author',
        'connector_name': 'connectorName',
        'full_path': 'fullPath',
        'container_path': 'containerPath'
    }

    def __init__(self, organization_name=None, project_name=None, ref_name=None, commit_name=None, compartment_label=None, author=None, connector_name=None, full_path=None, container_path=None, local_vars_configuration=None):  # noqa: E501
        """MMSCommitDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._organization_name = None
        self._project_name = None
        self._ref_name = None
        self._commit_name = None
        self._compartment_label = None
        self._author = None
        self._connector_name = None
        self._full_path = None
        self._container_path = None
        self.discriminator = None

        self.organization_name = organization_name
        self.project_name = project_name
        self.ref_name = ref_name
        self.commit_name = commit_name
        self.compartment_label = compartment_label
        self.author = author
        self.connector_name = connector_name
        self.full_path = full_path
        self.container_path = container_path

    @property
    def organization_name(self):
        """Gets the organization_name of this MMSCommitDetails.  # noqa: E501


        :return: The organization_name of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this MMSCommitDetails.


        :param organization_name: The organization_name of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organization_name is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def project_name(self):
        """Gets the project_name of this MMSCommitDetails.  # noqa: E501


        :return: The project_name of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this MMSCommitDetails.


        :param project_name: The project_name of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_name is None:  # noqa: E501
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def ref_name(self):
        """Gets the ref_name of this MMSCommitDetails.  # noqa: E501


        :return: The ref_name of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """Sets the ref_name of this MMSCommitDetails.


        :param ref_name: The ref_name of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ref_name is None:  # noqa: E501
            raise ValueError("Invalid value for `ref_name`, must not be `None`")  # noqa: E501

        self._ref_name = ref_name

    @property
    def commit_name(self):
        """Gets the commit_name of this MMSCommitDetails.  # noqa: E501


        :return: The commit_name of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._commit_name

    @commit_name.setter
    def commit_name(self, commit_name):
        """Sets the commit_name of this MMSCommitDetails.


        :param commit_name: The commit_name of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and commit_name is None:  # noqa: E501
            raise ValueError("Invalid value for `commit_name`, must not be `None`")  # noqa: E501

        self._commit_name = commit_name

    @property
    def compartment_label(self):
        """Gets the compartment_label of this MMSCommitDetails.  # noqa: E501


        :return: The compartment_label of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._compartment_label

    @compartment_label.setter
    def compartment_label(self, compartment_label):
        """Sets the compartment_label of this MMSCommitDetails.


        :param compartment_label: The compartment_label of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compartment_label is None:  # noqa: E501
            raise ValueError("Invalid value for `compartment_label`, must not be `None`")  # noqa: E501

        self._compartment_label = compartment_label

    @property
    def author(self):
        """Gets the author of this MMSCommitDetails.  # noqa: E501


        :return: The author of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this MMSCommitDetails.


        :param author: The author of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and author is None:  # noqa: E501
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def connector_name(self):
        """Gets the connector_name of this MMSCommitDetails.  # noqa: E501


        :return: The connector_name of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this MMSCommitDetails.


        :param connector_name: The connector_name of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_name is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_name`, must not be `None`")  # noqa: E501

        self._connector_name = connector_name

    @property
    def full_path(self):
        """Gets the full_path of this MMSCommitDetails.  # noqa: E501


        :return: The full_path of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this MMSCommitDetails.


        :param full_path: The full_path of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and full_path is None:  # noqa: E501
            raise ValueError("Invalid value for `full_path`, must not be `None`")  # noqa: E501

        self._full_path = full_path

    @property
    def container_path(self):
        """Gets the container_path of this MMSCommitDetails.  # noqa: E501


        :return: The container_path of this MMSCommitDetails.  # noqa: E501
        :rtype: str
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """Sets the container_path of this MMSCommitDetails.


        :param container_path: The container_path of this MMSCommitDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and container_path is None:  # noqa: E501
            raise ValueError("Invalid value for `container_path`, must not be `None`")  # noqa: E501

        self._container_path = container_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MMSCommitDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MMSCommitDetails):
            return True

        return self.to_dict() != other.to_dict()
