# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class GenericValidationResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compartment': 'ModelCompartment',
        'diagnostics': 'ValidationDiagnostics',
        'rules': 'list[GenericValidationRule]'
    }

    attribute_map = {
        'compartment': 'compartment',
        'diagnostics': 'diagnostics',
        'rules': 'rules'
    }

    def __init__(self, compartment=None, diagnostics=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """GenericValidationResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compartment = None
        self._diagnostics = None
        self._rules = None
        self.discriminator = None

        self.compartment = compartment
        self.diagnostics = diagnostics
        self.rules = rules

    @property
    def compartment(self):
        """Gets the compartment of this GenericValidationResults.  # noqa: E501


        :return: The compartment of this GenericValidationResults.  # noqa: E501
        :rtype: ModelCompartment
        """
        return self._compartment

    @compartment.setter
    def compartment(self, compartment):
        """Sets the compartment of this GenericValidationResults.


        :param compartment: The compartment of this GenericValidationResults.  # noqa: E501
        :type: ModelCompartment
        """
        if self.local_vars_configuration.client_side_validation and compartment is None:  # noqa: E501
            raise ValueError("Invalid value for `compartment`, must not be `None`")  # noqa: E501

        self._compartment = compartment

    @property
    def diagnostics(self):
        """Gets the diagnostics of this GenericValidationResults.  # noqa: E501


        :return: The diagnostics of this GenericValidationResults.  # noqa: E501
        :rtype: ValidationDiagnostics
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this GenericValidationResults.


        :param diagnostics: The diagnostics of this GenericValidationResults.  # noqa: E501
        :type: ValidationDiagnostics
        """
        if self.local_vars_configuration.client_side_validation and diagnostics is None:  # noqa: E501
            raise ValueError("Invalid value for `diagnostics`, must not be `None`")  # noqa: E501

        self._diagnostics = diagnostics

    @property
    def rules(self):
        """Gets the rules of this GenericValidationResults.  # noqa: E501


        :return: The rules of this GenericValidationResults.  # noqa: E501
        :rtype: list[GenericValidationRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GenericValidationResults.


        :param rules: The rules of this GenericValidationResults.  # noqa: E501
        :type: list[GenericValidationRule]
        """
        if self.local_vars_configuration.client_side_validation and rules is None:  # noqa: E501
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenericValidationResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenericValidationResults):
            return True

        return self.to_dict() != other.to_dict()
