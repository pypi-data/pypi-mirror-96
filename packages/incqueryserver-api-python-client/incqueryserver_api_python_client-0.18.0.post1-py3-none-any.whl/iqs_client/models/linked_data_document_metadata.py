# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class LinkedDataDocumentMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'linked_data_format': 'LinkedDataFormat',
        'base_uri': 'str',
        'document_file_name': 'str'
    }

    attribute_map = {
        'linked_data_format': 'linkedDataFormat',
        'base_uri': 'baseURI',
        'document_file_name': 'documentFileName'
    }

    def __init__(self, linked_data_format=None, base_uri=None, document_file_name=None, local_vars_configuration=None):  # noqa: E501
        """LinkedDataDocumentMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._linked_data_format = None
        self._base_uri = None
        self._document_file_name = None
        self.discriminator = None

        self.linked_data_format = linked_data_format
        self.base_uri = base_uri
        self.document_file_name = document_file_name

    @property
    def linked_data_format(self):
        """Gets the linked_data_format of this LinkedDataDocumentMetadata.  # noqa: E501


        :return: The linked_data_format of this LinkedDataDocumentMetadata.  # noqa: E501
        :rtype: LinkedDataFormat
        """
        return self._linked_data_format

    @linked_data_format.setter
    def linked_data_format(self, linked_data_format):
        """Sets the linked_data_format of this LinkedDataDocumentMetadata.


        :param linked_data_format: The linked_data_format of this LinkedDataDocumentMetadata.  # noqa: E501
        :type: LinkedDataFormat
        """
        if self.local_vars_configuration.client_side_validation and linked_data_format is None:  # noqa: E501
            raise ValueError("Invalid value for `linked_data_format`, must not be `None`")  # noqa: E501

        self._linked_data_format = linked_data_format

    @property
    def base_uri(self):
        """Gets the base_uri of this LinkedDataDocumentMetadata.  # noqa: E501

        The base URI for resolving relative IRIs in the RDF document.  # noqa: E501

        :return: The base_uri of this LinkedDataDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this LinkedDataDocumentMetadata.

        The base URI for resolving relative IRIs in the RDF document.  # noqa: E501

        :param base_uri: The base_uri of this LinkedDataDocumentMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `base_uri`, must not be `None`")  # noqa: E501

        self._base_uri = base_uri

    @property
    def document_file_name(self):
        """Gets the document_file_name of this LinkedDataDocumentMetadata.  # noqa: E501

        The file name given as the name of the corresponding uploaded document file.  # noqa: E501

        :return: The document_file_name of this LinkedDataDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._document_file_name

    @document_file_name.setter
    def document_file_name(self, document_file_name):
        """Sets the document_file_name of this LinkedDataDocumentMetadata.

        The file name given as the name of the corresponding uploaded document file.  # noqa: E501

        :param document_file_name: The document_file_name of this LinkedDataDocumentMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and document_file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `document_file_name`, must not be `None`")  # noqa: E501

        self._document_file_name = document_file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkedDataDocumentMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LinkedDataDocumentMetadata):
            return True

        return self.to_dict() != other.to_dict()
