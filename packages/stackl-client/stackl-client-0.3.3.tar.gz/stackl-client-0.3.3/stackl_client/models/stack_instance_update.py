# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class StackInstanceUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'params': 'object',
        'service_params': 'dict(str, object)',
        'service_secrets': 'dict(str, object)',
        'stack_instance_name': 'str',
        'secrets': 'object',
        'tags': 'dict(str, str)',
        'replicas': 'dict(str, int)',
        'disable_invocation': 'bool',
        'services': 'list[StackApplicationTemplateService]'
    }

    attribute_map = {
        'params': 'params',
        'service_params': 'service_params',
        'service_secrets': 'service_secrets',
        'stack_instance_name': 'stack_instance_name',
        'secrets': 'secrets',
        'tags': 'tags',
        'replicas': 'replicas',
        'disable_invocation': 'disable_invocation',
        'services': 'services'
    }

    def __init__(self, params=None, service_params=None, service_secrets=None, stack_instance_name='default_test_instance', secrets=None, tags=None, replicas=None, disable_invocation=False, services=[], local_vars_configuration=None):  # noqa: E501
        """StackInstanceUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._params = None
        self._service_params = None
        self._service_secrets = None
        self._stack_instance_name = None
        self._secrets = None
        self._tags = None
        self._replicas = None
        self._disable_invocation = None
        self._services = None
        self.discriminator = None

        if params is not None:
            self.params = params
        if service_params is not None:
            self.service_params = service_params
        if service_secrets is not None:
            self.service_secrets = service_secrets
        if stack_instance_name is not None:
            self.stack_instance_name = stack_instance_name
        if secrets is not None:
            self.secrets = secrets
        if tags is not None:
            self.tags = tags
        if replicas is not None:
            self.replicas = replicas
        if disable_invocation is not None:
            self.disable_invocation = disable_invocation
        if services is not None:
            self.services = services

    @property
    def params(self):
        """Gets the params of this StackInstanceUpdate.  # noqa: E501


        :return: The params of this StackInstanceUpdate.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this StackInstanceUpdate.


        :param params: The params of this StackInstanceUpdate.  # noqa: E501
        :type params: object
        """

        self._params = params

    @property
    def service_params(self):
        """Gets the service_params of this StackInstanceUpdate.  # noqa: E501


        :return: The service_params of this StackInstanceUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._service_params

    @service_params.setter
    def service_params(self, service_params):
        """Sets the service_params of this StackInstanceUpdate.


        :param service_params: The service_params of this StackInstanceUpdate.  # noqa: E501
        :type service_params: dict(str, object)
        """

        self._service_params = service_params

    @property
    def service_secrets(self):
        """Gets the service_secrets of this StackInstanceUpdate.  # noqa: E501


        :return: The service_secrets of this StackInstanceUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._service_secrets

    @service_secrets.setter
    def service_secrets(self, service_secrets):
        """Sets the service_secrets of this StackInstanceUpdate.


        :param service_secrets: The service_secrets of this StackInstanceUpdate.  # noqa: E501
        :type service_secrets: dict(str, object)
        """

        self._service_secrets = service_secrets

    @property
    def stack_instance_name(self):
        """Gets the stack_instance_name of this StackInstanceUpdate.  # noqa: E501


        :return: The stack_instance_name of this StackInstanceUpdate.  # noqa: E501
        :rtype: str
        """
        return self._stack_instance_name

    @stack_instance_name.setter
    def stack_instance_name(self, stack_instance_name):
        """Sets the stack_instance_name of this StackInstanceUpdate.


        :param stack_instance_name: The stack_instance_name of this StackInstanceUpdate.  # noqa: E501
        :type stack_instance_name: str
        """

        self._stack_instance_name = stack_instance_name

    @property
    def secrets(self):
        """Gets the secrets of this StackInstanceUpdate.  # noqa: E501


        :return: The secrets of this StackInstanceUpdate.  # noqa: E501
        :rtype: object
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this StackInstanceUpdate.


        :param secrets: The secrets of this StackInstanceUpdate.  # noqa: E501
        :type secrets: object
        """

        self._secrets = secrets

    @property
    def tags(self):
        """Gets the tags of this StackInstanceUpdate.  # noqa: E501


        :return: The tags of this StackInstanceUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StackInstanceUpdate.


        :param tags: The tags of this StackInstanceUpdate.  # noqa: E501
        :type tags: dict(str, str)
        """

        self._tags = tags

    @property
    def replicas(self):
        """Gets the replicas of this StackInstanceUpdate.  # noqa: E501


        :return: The replicas of this StackInstanceUpdate.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this StackInstanceUpdate.


        :param replicas: The replicas of this StackInstanceUpdate.  # noqa: E501
        :type replicas: dict(str, int)
        """

        self._replicas = replicas

    @property
    def disable_invocation(self):
        """Gets the disable_invocation of this StackInstanceUpdate.  # noqa: E501


        :return: The disable_invocation of this StackInstanceUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._disable_invocation

    @disable_invocation.setter
    def disable_invocation(self, disable_invocation):
        """Sets the disable_invocation of this StackInstanceUpdate.


        :param disable_invocation: The disable_invocation of this StackInstanceUpdate.  # noqa: E501
        :type disable_invocation: bool
        """

        self._disable_invocation = disable_invocation

    @property
    def services(self):
        """Gets the services of this StackInstanceUpdate.  # noqa: E501


        :return: The services of this StackInstanceUpdate.  # noqa: E501
        :rtype: list[StackApplicationTemplateService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this StackInstanceUpdate.


        :param services: The services of this StackInstanceUpdate.  # noqa: E501
        :type services: list[StackApplicationTemplateService]
        """

        self._services = services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstanceUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackInstanceUpdate):
            return True

        return self.to_dict() != other.to_dict()
