# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class StackInstanceService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'infrastructure_target': 'str',
        'provisioning_parameters': 'object',
        'cloud_provider': 'str',
        'secrets': 'object',
        'hosts': 'list[str]',
        'resources': 'dict(str, str)',
        'service': 'str',
        'agent': 'str',
        'opa_outputs': 'object',
        'outputs': 'object',
        'packages': 'list[str]',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'infrastructure_target': 'infrastructure_target',
        'provisioning_parameters': 'provisioning_parameters',
        'cloud_provider': 'cloud_provider',
        'secrets': 'secrets',
        'hosts': 'hosts',
        'resources': 'resources',
        'service': 'service',
        'agent': 'agent',
        'opa_outputs': 'opa_outputs',
        'outputs': 'outputs',
        'packages': 'packages',
        'tags': 'tags'
    }

    def __init__(self, infrastructure_target=None, provisioning_parameters=None, cloud_provider='generic', secrets=None, hosts=None, resources=None, service=None, agent='', opa_outputs=None, outputs=None, packages=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """StackInstanceService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._infrastructure_target = None
        self._provisioning_parameters = None
        self._cloud_provider = None
        self._secrets = None
        self._hosts = None
        self._resources = None
        self._service = None
        self._agent = None
        self._opa_outputs = None
        self._outputs = None
        self._packages = None
        self._tags = None
        self.discriminator = None

        if infrastructure_target is not None:
            self.infrastructure_target = infrastructure_target
        if provisioning_parameters is not None:
            self.provisioning_parameters = provisioning_parameters
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if secrets is not None:
            self.secrets = secrets
        if hosts is not None:
            self.hosts = hosts
        if resources is not None:
            self.resources = resources
        if service is not None:
            self.service = service
        if agent is not None:
            self.agent = agent
        if opa_outputs is not None:
            self.opa_outputs = opa_outputs
        if outputs is not None:
            self.outputs = outputs
        if packages is not None:
            self.packages = packages
        if tags is not None:
            self.tags = tags

    @property
    def infrastructure_target(self):
        """Gets the infrastructure_target of this StackInstanceService.  # noqa: E501


        :return: The infrastructure_target of this StackInstanceService.  # noqa: E501
        :rtype: str
        """
        return self._infrastructure_target

    @infrastructure_target.setter
    def infrastructure_target(self, infrastructure_target):
        """Sets the infrastructure_target of this StackInstanceService.


        :param infrastructure_target: The infrastructure_target of this StackInstanceService.  # noqa: E501
        :type infrastructure_target: str
        """

        self._infrastructure_target = infrastructure_target

    @property
    def provisioning_parameters(self):
        """Gets the provisioning_parameters of this StackInstanceService.  # noqa: E501


        :return: The provisioning_parameters of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._provisioning_parameters

    @provisioning_parameters.setter
    def provisioning_parameters(self, provisioning_parameters):
        """Sets the provisioning_parameters of this StackInstanceService.


        :param provisioning_parameters: The provisioning_parameters of this StackInstanceService.  # noqa: E501
        :type provisioning_parameters: object
        """

        self._provisioning_parameters = provisioning_parameters

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this StackInstanceService.  # noqa: E501


        :return: The cloud_provider of this StackInstanceService.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this StackInstanceService.


        :param cloud_provider: The cloud_provider of this StackInstanceService.  # noqa: E501
        :type cloud_provider: str
        """

        self._cloud_provider = cloud_provider

    @property
    def secrets(self):
        """Gets the secrets of this StackInstanceService.  # noqa: E501


        :return: The secrets of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this StackInstanceService.


        :param secrets: The secrets of this StackInstanceService.  # noqa: E501
        :type secrets: object
        """

        self._secrets = secrets

    @property
    def hosts(self):
        """Gets the hosts of this StackInstanceService.  # noqa: E501


        :return: The hosts of this StackInstanceService.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this StackInstanceService.


        :param hosts: The hosts of this StackInstanceService.  # noqa: E501
        :type hosts: list[str]
        """

        self._hosts = hosts

    @property
    def resources(self):
        """Gets the resources of this StackInstanceService.  # noqa: E501


        :return: The resources of this StackInstanceService.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this StackInstanceService.


        :param resources: The resources of this StackInstanceService.  # noqa: E501
        :type resources: dict(str, str)
        """

        self._resources = resources

    @property
    def service(self):
        """Gets the service of this StackInstanceService.  # noqa: E501


        :return: The service of this StackInstanceService.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this StackInstanceService.


        :param service: The service of this StackInstanceService.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def agent(self):
        """Gets the agent of this StackInstanceService.  # noqa: E501


        :return: The agent of this StackInstanceService.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this StackInstanceService.


        :param agent: The agent of this StackInstanceService.  # noqa: E501
        :type agent: str
        """

        self._agent = agent

    @property
    def opa_outputs(self):
        """Gets the opa_outputs of this StackInstanceService.  # noqa: E501


        :return: The opa_outputs of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._opa_outputs

    @opa_outputs.setter
    def opa_outputs(self, opa_outputs):
        """Sets the opa_outputs of this StackInstanceService.


        :param opa_outputs: The opa_outputs of this StackInstanceService.  # noqa: E501
        :type opa_outputs: object
        """

        self._opa_outputs = opa_outputs

    @property
    def outputs(self):
        """Gets the outputs of this StackInstanceService.  # noqa: E501


        :return: The outputs of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this StackInstanceService.


        :param outputs: The outputs of this StackInstanceService.  # noqa: E501
        :type outputs: object
        """

        self._outputs = outputs

    @property
    def packages(self):
        """Gets the packages of this StackInstanceService.  # noqa: E501


        :return: The packages of this StackInstanceService.  # noqa: E501
        :rtype: list[str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this StackInstanceService.


        :param packages: The packages of this StackInstanceService.  # noqa: E501
        :type packages: list[str]
        """

        self._packages = packages

    @property
    def tags(self):
        """Gets the tags of this StackInstanceService.  # noqa: E501


        :return: The tags of this StackInstanceService.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StackInstanceService.


        :param tags: The tags of this StackInstanceService.  # noqa: E501
        :type tags: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstanceService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackInstanceService):
            return True

        return self.to_dict() != other.to_dict()
