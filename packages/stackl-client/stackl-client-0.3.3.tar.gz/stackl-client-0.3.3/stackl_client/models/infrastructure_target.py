# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class InfrastructureTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'environment': 'str',
        'location': 'str',
        'zone': 'str'
    }

    attribute_map = {
        'environment': 'environment',
        'location': 'location',
        'zone': 'zone'
    }

    def __init__(self, environment=None, location=None, zone=None, local_vars_configuration=None):  # noqa: E501
        """InfrastructureTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._environment = None
        self._location = None
        self._zone = None
        self.discriminator = None

        self.environment = environment
        self.location = location
        self.zone = zone

    @property
    def environment(self):
        """Gets the environment of this InfrastructureTarget.  # noqa: E501


        :return: The environment of this InfrastructureTarget.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this InfrastructureTarget.


        :param environment: The environment of this InfrastructureTarget.  # noqa: E501
        :type environment: str
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def location(self):
        """Gets the location of this InfrastructureTarget.  # noqa: E501


        :return: The location of this InfrastructureTarget.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InfrastructureTarget.


        :param location: The location of this InfrastructureTarget.  # noqa: E501
        :type location: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def zone(self):
        """Gets the zone of this InfrastructureTarget.  # noqa: E501


        :return: The zone of this InfrastructureTarget.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this InfrastructureTarget.


        :param zone: The zone of this InfrastructureTarget.  # noqa: E501
        :type zone: str
        """
        if self.local_vars_configuration.client_side_validation and zone is None:  # noqa: E501
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfrastructureTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InfrastructureTarget):
            return True

        return self.to_dict() != other.to_dict()
