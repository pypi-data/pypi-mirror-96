# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class StackApplicationTemplateService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'service': 'str'
    }

    attribute_map = {
        'name': 'name',
        'service': 'service'
    }

    def __init__(self, name=None, service=None, local_vars_configuration=None):  # noqa: E501
        """StackApplicationTemplateService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._service = None
        self.discriminator = None

        self.name = name
        self.service = service

    @property
    def name(self):
        """Gets the name of this StackApplicationTemplateService.  # noqa: E501


        :return: The name of this StackApplicationTemplateService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StackApplicationTemplateService.


        :param name: The name of this StackApplicationTemplateService.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def service(self):
        """Gets the service of this StackApplicationTemplateService.  # noqa: E501


        :return: The service of this StackApplicationTemplateService.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this StackApplicationTemplateService.


        :param service: The service of this StackApplicationTemplateService.  # noqa: E501
        :type service: str
        """
        if self.local_vars_configuration.client_side_validation and service is None:  # noqa: E501
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackApplicationTemplateService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackApplicationTemplateService):
            return True

        return self.to_dict() != other.to_dict()
