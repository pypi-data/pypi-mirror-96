# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class Snapshot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'snapshot': 'object',
        'type': 'str',
        'category': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'snapshot': 'snapshot',
        'type': 'type',
        'category': 'category'
    }

    def __init__(self, name=None, description='This is a snapshot of a document as given in the K/V snapshot', snapshot=None, type='snapshot', category='history', local_vars_configuration=None):  # noqa: E501
        """Snapshot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._snapshot = None
        self._type = None
        self._category = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if snapshot is not None:
            self.snapshot = snapshot
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category

    @property
    def name(self):
        """Gets the name of this Snapshot.  # noqa: E501


        :return: The name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.


        :param name: The name of this Snapshot.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Snapshot.  # noqa: E501


        :return: The description of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.


        :param description: The description of this Snapshot.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def snapshot(self):
        """Gets the snapshot of this Snapshot.  # noqa: E501


        :return: The snapshot of this Snapshot.  # noqa: E501
        :rtype: object
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Snapshot.


        :param snapshot: The snapshot of this Snapshot.  # noqa: E501
        :type snapshot: object
        """

        self._snapshot = snapshot

    @property
    def type(self):
        """Gets the type of this Snapshot.  # noqa: E501


        :return: The type of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Snapshot.


        :param type: The type of this Snapshot.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this Snapshot.  # noqa: E501


        :return: The category of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Snapshot.


        :param category: The category of this Snapshot.  # noqa: E501
        :type category: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Snapshot):
            return True

        return self.to_dict() != other.to_dict()
