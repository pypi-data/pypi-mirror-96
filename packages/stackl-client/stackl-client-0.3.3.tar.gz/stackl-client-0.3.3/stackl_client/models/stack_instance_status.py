# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class StackInstanceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'functional_requirement': 'str',
        'infrastructure_target': 'str',
        'service': 'str',
        'status': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'functional_requirement': 'functional_requirement',
        'infrastructure_target': 'infrastructure_target',
        'service': 'service',
        'status': 'status',
        'error_message': 'error_message'
    }

    def __init__(self, functional_requirement='', infrastructure_target='', service='', status='', error_message=None, local_vars_configuration=None):  # noqa: E501
        """StackInstanceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._functional_requirement = None
        self._infrastructure_target = None
        self._service = None
        self._status = None
        self._error_message = None
        self.discriminator = None

        if functional_requirement is not None:
            self.functional_requirement = functional_requirement
        if infrastructure_target is not None:
            self.infrastructure_target = infrastructure_target
        if service is not None:
            self.service = service
        if status is not None:
            self.status = status
        if error_message is not None:
            self.error_message = error_message

    @property
    def functional_requirement(self):
        """Gets the functional_requirement of this StackInstanceStatus.  # noqa: E501


        :return: The functional_requirement of this StackInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._functional_requirement

    @functional_requirement.setter
    def functional_requirement(self, functional_requirement):
        """Sets the functional_requirement of this StackInstanceStatus.


        :param functional_requirement: The functional_requirement of this StackInstanceStatus.  # noqa: E501
        :type functional_requirement: str
        """

        self._functional_requirement = functional_requirement

    @property
    def infrastructure_target(self):
        """Gets the infrastructure_target of this StackInstanceStatus.  # noqa: E501


        :return: The infrastructure_target of this StackInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._infrastructure_target

    @infrastructure_target.setter
    def infrastructure_target(self, infrastructure_target):
        """Sets the infrastructure_target of this StackInstanceStatus.


        :param infrastructure_target: The infrastructure_target of this StackInstanceStatus.  # noqa: E501
        :type infrastructure_target: str
        """

        self._infrastructure_target = infrastructure_target

    @property
    def service(self):
        """Gets the service of this StackInstanceStatus.  # noqa: E501


        :return: The service of this StackInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this StackInstanceStatus.


        :param service: The service of this StackInstanceStatus.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def status(self):
        """Gets the status of this StackInstanceStatus.  # noqa: E501


        :return: The status of this StackInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StackInstanceStatus.


        :param status: The status of this StackInstanceStatus.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this StackInstanceStatus.  # noqa: E501


        :return: The error_message of this StackInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this StackInstanceStatus.


        :param error_message: The error_message of this StackInstanceStatus.  # noqa: E501
        :type error_message: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstanceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackInstanceStatus):
            return True

        return self.to_dict() != other.to_dict()
