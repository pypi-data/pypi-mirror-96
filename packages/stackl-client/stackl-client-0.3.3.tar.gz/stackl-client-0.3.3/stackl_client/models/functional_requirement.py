# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class FunctionalRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'category': 'str',
        'type': 'str',
        'params': 'object',
        'secrets': 'object',
        'description': 'str',
        'invocation': 'dict(str, Invocation)',
        'outputs': 'object',
        'outputs_format': 'str',
        'as_group': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'type': 'type',
        'params': 'params',
        'secrets': 'secrets',
        'description': 'description',
        'invocation': 'invocation',
        'outputs': 'outputs',
        'outputs_format': 'outputs_format',
        'as_group': 'as_group'
    }

    def __init__(self, name=None, category=None, type='functional_requirement', params=None, secrets=None, description='Base Document', invocation=None, outputs=None, outputs_format='json', as_group=False, local_vars_configuration=None):  # noqa: E501
        """FunctionalRequirement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._category = None
        self._type = None
        self._params = None
        self._secrets = None
        self._description = None
        self._invocation = None
        self._outputs = None
        self._outputs_format = None
        self._as_group = None
        self.discriminator = None

        self.name = name
        self.category = category
        if type is not None:
            self.type = type
        if params is not None:
            self.params = params
        if secrets is not None:
            self.secrets = secrets
        if description is not None:
            self.description = description
        self.invocation = invocation
        if outputs is not None:
            self.outputs = outputs
        if outputs_format is not None:
            self.outputs_format = outputs_format
        if as_group is not None:
            self.as_group = as_group

    @property
    def name(self):
        """Gets the name of this FunctionalRequirement.  # noqa: E501


        :return: The name of this FunctionalRequirement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FunctionalRequirement.


        :param name: The name of this FunctionalRequirement.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self):
        """Gets the category of this FunctionalRequirement.  # noqa: E501


        :return: The category of this FunctionalRequirement.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FunctionalRequirement.


        :param category: The category of this FunctionalRequirement.  # noqa: E501
        :type category: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def type(self):
        """Gets the type of this FunctionalRequirement.  # noqa: E501


        :return: The type of this FunctionalRequirement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FunctionalRequirement.


        :param type: The type of this FunctionalRequirement.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def params(self):
        """Gets the params of this FunctionalRequirement.  # noqa: E501


        :return: The params of this FunctionalRequirement.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this FunctionalRequirement.


        :param params: The params of this FunctionalRequirement.  # noqa: E501
        :type params: object
        """

        self._params = params

    @property
    def secrets(self):
        """Gets the secrets of this FunctionalRequirement.  # noqa: E501


        :return: The secrets of this FunctionalRequirement.  # noqa: E501
        :rtype: object
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this FunctionalRequirement.


        :param secrets: The secrets of this FunctionalRequirement.  # noqa: E501
        :type secrets: object
        """

        self._secrets = secrets

    @property
    def description(self):
        """Gets the description of this FunctionalRequirement.  # noqa: E501


        :return: The description of this FunctionalRequirement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FunctionalRequirement.


        :param description: The description of this FunctionalRequirement.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def invocation(self):
        """Gets the invocation of this FunctionalRequirement.  # noqa: E501


        :return: The invocation of this FunctionalRequirement.  # noqa: E501
        :rtype: dict(str, Invocation)
        """
        return self._invocation

    @invocation.setter
    def invocation(self, invocation):
        """Sets the invocation of this FunctionalRequirement.


        :param invocation: The invocation of this FunctionalRequirement.  # noqa: E501
        :type invocation: dict(str, Invocation)
        """
        if self.local_vars_configuration.client_side_validation and invocation is None:  # noqa: E501
            raise ValueError("Invalid value for `invocation`, must not be `None`")  # noqa: E501

        self._invocation = invocation

    @property
    def outputs(self):
        """Gets the outputs of this FunctionalRequirement.  # noqa: E501


        :return: The outputs of this FunctionalRequirement.  # noqa: E501
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this FunctionalRequirement.


        :param outputs: The outputs of this FunctionalRequirement.  # noqa: E501
        :type outputs: object
        """

        self._outputs = outputs

    @property
    def outputs_format(self):
        """Gets the outputs_format of this FunctionalRequirement.  # noqa: E501


        :return: The outputs_format of this FunctionalRequirement.  # noqa: E501
        :rtype: str
        """
        return self._outputs_format

    @outputs_format.setter
    def outputs_format(self, outputs_format):
        """Sets the outputs_format of this FunctionalRequirement.


        :param outputs_format: The outputs_format of this FunctionalRequirement.  # noqa: E501
        :type outputs_format: str
        """

        self._outputs_format = outputs_format

    @property
    def as_group(self):
        """Gets the as_group of this FunctionalRequirement.  # noqa: E501


        :return: The as_group of this FunctionalRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._as_group

    @as_group.setter
    def as_group(self, as_group):
        """Sets the as_group of this FunctionalRequirement.


        :param as_group: The as_group of this FunctionalRequirement.  # noqa: E501
        :type as_group: bool
        """

        self._as_group = as_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionalRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FunctionalRequirement):
            return True

        return self.to_dict() != other.to_dict()
