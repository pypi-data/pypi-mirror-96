# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.3.0.dev0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import stackl_client
from stackl_client.models.functional_requirement import FunctionalRequirement  # noqa: E501
from stackl_client.rest import ApiException

class TestFunctionalRequirement(unittest.TestCase):
    """FunctionalRequirement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test FunctionalRequirement
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = stackl_client.models.functional_requirement.FunctionalRequirement()  # noqa: E501
        if include_optional :
            return FunctionalRequirement(
                name = '0', 
                category = '0', 
                type = 'functional_requirement', 
                params = stackl_client.models.params.Params(), 
                secrets = stackl_client.models.secrets.Secrets(), 
                description = 'Base Document', 
                invocation = {
                    'key' : stackl_client.models.invocation.Invocation(
                        description = '0', 
                        tool = '0', 
                        image = '0', 
                        before_command = '0', 
                        playbook_path = '0', 
                        serial = 56, )
                    }, 
                outputs = stackl_client.models.outputs.Outputs(), 
                outputs_format = 'json', 
                as_group = True
            )
        else :
            return FunctionalRequirement(
                name = '0',
                category = '0',
                invocation = {
                    'key' : stackl_client.models.invocation.Invocation(
                        description = '0', 
                        tool = '0', 
                        image = '0', 
                        before_command = '0', 
                        playbook_path = '0', 
                        serial = 56, )
                    },
        )

    def testFunctionalRequirement(self):
        """Test FunctionalRequirement"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
