
# import statement needed on some systems
import sys
import os.path
sys.path.append(os.path.dirname(__file__))
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_COPASI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_COPASI')
    _COPASI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_COPASI', [dirname(__file__)])
        except ImportError:
            import _COPASI
            return _COPASI
        try:
            _mod = imp.load_module('_COPASI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _COPASI = swig_import_helper()
    del swig_import_helper
else:
    import _COPASI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x




class AutoProperty(type):
    """
    Auto-detect Python class getX/setX methods.

    This class is attached to SBase and automatically applies for all classes
    which inherit from it.  Its purpose is to make libSBML more convenient to
    use from Python.  It works by analyzing classes at class creation time
    (not at instantiation) and adding corresponding properties (directly
    calling C methods where possible) to the class dictionary.

    @note The code should work for python 2.6 upwards, however for python 3 it 
          needs to be attached via constructors.
    """
    def __new__(cls, classname, bases, classdict):
        """
        Iterate over the items in the classdict looking for get/set pairs
        and declaring them as properties.
        """

        import re
        import keyword
        import sys
        if sys.version_info < (3, 0):
          from inspect import getargspec as mygetargspec
        else:
          from inspect import getfullargspec as mygetargspec

        re_mangle = re.compile(r'[A-Za-z][a-z]+|[A-Z]+(?=$|[A-Z0-9])|\d+')
        re_id = re.compile(r'^[A-Za-z_][A-Za-z0-9_]*$')
        re_getdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self\)')
        re_setdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self,[^,)]+\)')

#convert ACapitalCasedStringXYZ123 -> a_capital_cased_string_xyz_123
        mangle_name = lambda x: ('_'.join(re_mangle.findall(x))).lower()

        get_methods = set()
        set_methods = set()
        swig_setter = classdict.get('__swig_setmethods__', {})

        allowed_methods = [
                           'Annotation', 
                           'AnnotationString', 
                           'Notes', 
                           'NotesString', 
                           ]

#only search for get/set methods
#we assume that any unset method also has either get or set
#a small number of set without get cases exist so we can't only
#search for get methods
        for k, v in classdict.items():
            name = k[3:]
            prefix = k[:3]
            mangled = mangle_name(name)
            if name:
                if callable(v):
                    if re_id.match(mangled) and mangled not in keyword.kwlist and name != 'Array':
                        if prefix == 'get':
                            get_methods.add(name)
                        elif prefix == 'set':
                            set_methods.add(name)

        for name in get_methods | set_methods:

            mangled = mangle_name(name)

#ListOfFoobars -> foobars
            if mangled.startswith('list_of_'):
                mangled = mangled[8:]

            getter = setter = deleter = None
            if name in get_methods:
                getter = classdict['get'+name]

#this is a very dirty way of checking if the get method
#requires extra arguments (and hence cannot be a property)
#it should be possible to do this properly in SWIG?
                try:
                  argspec = mygetargspec(getter)
                  numargs = len(argspec.args)
                  if numargs > 1 or (numargs == 1 and argspec.args[0] != 'self')  \
                    or (argspec.varargs!=None and name not in allowed_methods and not name.startswith('ListOf') ):
                    continue
                except:
                  continue

#use the c-level get function if the python function
#only consists of a call to it
                cname = classname + '_get' + name
#test if function is "return _COPASI.CLASS_getNAME(__args__)"
                try:
                  if getter.func_code.co_names == ('_COPASI', cname):
                    getter = getattr(_COPASI, cname)
                except:
                  if getter.__code__.co_names == ('_COPASI', cname):
                    getter = getattr(_COPASI, cname)

            if name in set_methods:
                setter = classdict['set'+name]
                try:
                 argspec = mygetargspec(getter)
                 numargs = len(argspec.args)
                 if numargs > 1 and argspec.args[0] == 'self':
                   cname = classname + '_set' + name
                   try:
                     if setter.func_code.co_names == ('_COPASI', cname):
                         setter = getattr(_COPASI, cname)
                   except:
                     if setter.__code__.co_names == ('_COPASI', cname):
                         setter = getattr(_COPASI, cname)

#property fget does not get intercepted by __getattr__
#but fset does, so we implement property setting via
#the __swig_setmethods__ dict
                   swig_setter[mangled] = setter
                   continue
                except:
                  pass

            if 'unset' + name in classdict:
                deleter = classdict['unset'+name]

                try:
                  argspec = mygetargspec(getter)
                  numargs = len(argspec.args)
                  if numargs == 1 and argspec.args[0] == 'self' and \
                    (argspec.varargs==None or name in allowed_methods):
                    cname = classname + '_unset' + name
                    try:
                      if deleter.func_code.co_names == ('_COPASI', cname):
                          deleter = getattr(_COPASI, cname)                    
                    except:
                      if deleter.__code__.co_names == ('_COPASI', cname):
                          deleter = getattr(_COPASI, cname)                    
                except:
                  pass

            if getter or setter or deleter:
#fset is technically redundant since the method is dispatched
#via _swig_setattr rather than through the property due to that
#function not delegating to object.__setattr__ which properly
#handles properties
                classdict[mangled] = property(fget=getter, fset=setter, fdel=deleter)

            def __repr__(self):
                desc = self.__class__.__name__
                if hasattr(self, '__len__'):
                    desc += '[%s]' % self.__len__()
                if hasattr(self, 'id') and self.id:
                    desc += ' %s' % self.id
                if hasattr(self, 'name') and self.name:
                    desc += ' "%s"' % self.name
                if hasattr(self, 'object_name') and self.object_name:
                    desc += ' "%s"' % self.object_name
                return '<' + desc + '>'

            if classdict.get('__repr__', None) in (_swig_repr, None):
                classdict['__repr__'] = __repr__


        return type.__new__(cls, classname, bases, classdict)



import types
import sys 

TriUnspecified = _COPASI.TriUnspecified
TriFalse = _COPASI.TriFalse
TriTrue = _COPASI.TriTrue
class CCore(_object):
    """Proxy of C++ CCore class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCore, name)
    __repr__ = _swig_repr
    SimulationContext_Default = _COPASI.CCore_SimulationContext_Default
    SimulationContext_UseMoieties = _COPASI.CCore_SimulationContext_UseMoieties
    SimulationContext_UpdateMoieties = _COPASI.CCore_SimulationContext_UpdateMoieties
    SimulationContext_EventHandling = _COPASI.CCore_SimulationContext_EventHandling
    SimulationContext_DelayValues = _COPASI.CCore_SimulationContext_DelayValues
    SimulationContext___SIZE = _COPASI.CCore_SimulationContext___SIZE
    Framework_Concentration = _COPASI.CCore_Framework_Concentration
    Framework_ParticleNumbers = _COPASI.CCore_Framework_ParticleNumbers
    Framework___SIZE = _COPASI.CCore_Framework___SIZE

    def __init__(self):
        """__init__(CCore self) -> CCore"""
        this = _COPASI.new_CCore()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCore
    __del__ = lambda self: None
CCore_swigregister = _COPASI.CCore_swigregister
CCore_swigregister(CCore)
cvar = _COPASI.cvar
CCore.FrameworkNames = _COPASI.cvar.CCore_FrameworkNames


def INVALID_INDEX():
    """INVALID_INDEX() -> size_t"""
    return _COPASI.INVALID_INDEX()
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _COPASI.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _COPASI.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _COPASI.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _COPASI.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _COPASI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CUndoObjectInterface(_object):
    """Proxy of C++ CUndoObjectInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUndoObjectInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUndoObjectInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CUndoObjectInterface
    __del__ = lambda self: None

    def destruct(self):
        """destruct(CUndoObjectInterface self)"""
        return _COPASI.CUndoObjectInterface_destruct(self)


    def createUndoData(self, *args):
        """
        createUndoData(CUndoObjectInterface self, CUndoData undoData, CUndoData::Type const & type, CData oldData, CCore::Framework const & framework)
        createUndoData(CUndoObjectInterface self, CUndoData undoData, CUndoData::Type const & type, CData oldData)
        createUndoData(CUndoObjectInterface self, CUndoData undoData, CUndoData::Type const & type)
        """
        return _COPASI.CUndoObjectInterface_createUndoData(self, *args)


    def insert(self, data):
        """insert(CUndoObjectInterface self, CData data) -> CUndoObjectInterface"""
        return _COPASI.CUndoObjectInterface_insert(self, data)


    def updateIndex(self, index, pUndoObject):
        """updateIndex(CUndoObjectInterface self, size_t const & index, CUndoObjectInterface pUndoObject)"""
        return _COPASI.CUndoObjectInterface_updateIndex(self, index, pUndoObject)


    def getUuid(self):
        """getUuid(CUndoObjectInterface self) -> xg::Guid const &"""
        return _COPASI.CUndoObjectInterface_getUuid(self)


    def setUuid(self, *args):
        """
        setUuid(CUndoObjectInterface self, xg::Guid const & uuid) -> bool
        setUuid(CUndoObjectInterface self, std::string const & uuid) -> bool
        """
        return _COPASI.CUndoObjectInterface_setUuid(self, *args)


    def generateUuid(self):
        """generateUuid(CUndoObjectInterface self) -> bool"""
        return _COPASI.CUndoObjectInterface_generateUuid(self)

CUndoObjectInterface_swigregister = _COPASI.CUndoObjectInterface_swigregister
CUndoObjectInterface_swigregister(CUndoObjectInterface)

class CDataStdVector(_object):
    """Proxy of C++ std::vector<(CData)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CDataStdVector self) -> SwigPyIterator"""
        return _COPASI.CDataStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector___bool__(self)


    def __len__(self):
        """__len__(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j) -> CDataStdVector"""
        return _COPASI.CDataStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j)
        __setslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j, CDataStdVector v)
        """
        return _COPASI.CDataStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j)"""
        return _COPASI.CDataStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CDataStdVector self, std::vector< CData >::difference_type i)
        __delitem__(CDataStdVector self, PySliceObject * slice)
        """
        return _COPASI.CDataStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CDataStdVector self, PySliceObject * slice) -> CDataStdVector
        __getitem__(CDataStdVector self, std::vector< CData >::difference_type i) -> CData
        """
        return _COPASI.CDataStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CDataStdVector self, PySliceObject * slice, CDataStdVector v)
        __setitem__(CDataStdVector self, PySliceObject * slice)
        __setitem__(CDataStdVector self, std::vector< CData >::difference_type i, CData x)
        """
        return _COPASI.CDataStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_pop(self)


    def append(self, x):
        """append(CDataStdVector self, CData x)"""
        return _COPASI.CDataStdVector_append(self, x)


    def empty(self):
        """empty(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector_empty(self)


    def size(self):
        """size(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector_size(self)


    def swap(self, v):
        """swap(CDataStdVector self, CDataStdVector v)"""
        return _COPASI.CDataStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CDataStdVector self) -> std::vector< CData >::reverse_iterator"""
        return _COPASI.CDataStdVector_rbegin(self)


    def rend(self):
        """rend(CDataStdVector self) -> std::vector< CData >::reverse_iterator"""
        return _COPASI.CDataStdVector_rend(self)


    def clear(self):
        """clear(CDataStdVector self)"""
        return _COPASI.CDataStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CDataStdVector self) -> std::vector< CData >::allocator_type"""
        return _COPASI.CDataStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CDataStdVector self)"""
        return _COPASI.CDataStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CDataStdVector self, std::vector< CData >::iterator pos) -> std::vector< CData >::iterator
        erase(CDataStdVector self, std::vector< CData >::iterator first, std::vector< CData >::iterator last) -> std::vector< CData >::iterator
        """
        return _COPASI.CDataStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CData)> self) -> CDataStdVector
        __init__(std::vector<(CData)> self, CDataStdVector arg2) -> CDataStdVector
        __init__(std::vector<(CData)> self, std::vector< CData >::size_type size) -> CDataStdVector
        __init__(std::vector<(CData)> self, std::vector< CData >::size_type size, CData value) -> CDataStdVector
        """
        this = _COPASI.new_CDataStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CDataStdVector self, CData x)"""
        return _COPASI.CDataStdVector_push_back(self, x)


    def front(self):
        """front(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_front(self)


    def back(self):
        """back(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_back(self)


    def assign(self, n, x):
        """assign(CDataStdVector self, std::vector< CData >::size_type n, CData x)"""
        return _COPASI.CDataStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CDataStdVector self, std::vector< CData >::size_type new_size)
        resize(CDataStdVector self, std::vector< CData >::size_type new_size, CData x)
        """
        return _COPASI.CDataStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CDataStdVector self, std::vector< CData >::iterator pos, CData x) -> std::vector< CData >::iterator
        insert(CDataStdVector self, std::vector< CData >::iterator pos, std::vector< CData >::size_type n, CData x)
        """
        return _COPASI.CDataStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CDataStdVector self, std::vector< CData >::size_type n)"""
        return _COPASI.CDataStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CDataStdVector
    __del__ = lambda self: None
CDataStdVector_swigregister = _COPASI.CDataStdVector_swigregister
CDataStdVector_swigregister(CDataStdVector)

class CData(_object):
    """Proxy of C++ CData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CData, name)
    __repr__ = _swig_repr
    EXPRESSION = _COPASI.CData_EXPRESSION
    INITIAL_EXPRESSION = _COPASI.CData_INITIAL_EXPRESSION
    INITIAL_VALUE = _COPASI.CData_INITIAL_VALUE
    INITIAL_INTENSIVE_VALUE = _COPASI.CData_INITIAL_INTENSIVE_VALUE
    SIMULATION_TYPE = _COPASI.CData_SIMULATION_TYPE
    SPATIAL_DIMENSION = _COPASI.CData_SPATIAL_DIMENSION
    ADD_NOISE = _COPASI.CData_ADD_NOISE
    NOISE_EXPRESSION = _COPASI.CData_NOISE_EXPRESSION
    CHEMICAL_EQUATION = _COPASI.CData_CHEMICAL_EQUATION
    KINETIC_LAW = _COPASI.CData_KINETIC_LAW
    KINETIC_LAW_UNIT_TYPE = _COPASI.CData_KINETIC_LAW_UNIT_TYPE
    KINEITC_LAW_VARIABLE_MAPPING = _COPASI.CData_KINEITC_LAW_VARIABLE_MAPPING
    LOCAL_REACTION_PARAMETERS = _COPASI.CData_LOCAL_REACTION_PARAMETERS
    SCALING_COMPARTMENT = _COPASI.CData_SCALING_COMPARTMENT
    OBJECT_UUID = _COPASI.CData_OBJECT_UUID
    OBJECT_NAME = _COPASI.CData_OBJECT_NAME
    OBJECT_PARENT_CN = _COPASI.CData_OBJECT_PARENT_CN
    OBJECT_TYPE = _COPASI.CData_OBJECT_TYPE
    OBJECT_FLAG = _COPASI.CData_OBJECT_FLAG
    OBJECT_HASH = _COPASI.CData_OBJECT_HASH
    OBJECT_INDEX = _COPASI.CData_OBJECT_INDEX
    OBJECT_REFERENCES = _COPASI.CData_OBJECT_REFERENCES
    OBJECT_REFERENCE = _COPASI.CData_OBJECT_REFERENCE
    OBJECT_REFERENCE_CN = _COPASI.CData_OBJECT_REFERENCE_CN
    OBJECT_REFERENCE_INDEX = _COPASI.CData_OBJECT_REFERENCE_INDEX
    OBJECT_POINTER = _COPASI.CData_OBJECT_POINTER
    EVALUATION_TREE_TYPE = _COPASI.CData_EVALUATION_TREE_TYPE
    TASK_TYPE = _COPASI.CData_TASK_TYPE
    TASK_SCHEDULED = _COPASI.CData_TASK_SCHEDULED
    TASK_UPDATE_MODEL = _COPASI.CData_TASK_UPDATE_MODEL
    TASK_REPORT = _COPASI.CData_TASK_REPORT
    TASK_REPORT_TARGET = _COPASI.CData_TASK_REPORT_TARGET
    TASK_REPORT_APPEND = _COPASI.CData_TASK_REPORT_APPEND
    TASK_REPORT_CONFIRM_OVERWRITE = _COPASI.CData_TASK_REPORT_CONFIRM_OVERWRITE
    PROBLEM = _COPASI.CData_PROBLEM
    METHOD = _COPASI.CData_METHOD
    METHOD_TYPE = _COPASI.CData_METHOD_TYPE
    PLOT_TYPE = _COPASI.CData_PLOT_TYPE
    PLOT_ITEM_TYPE = _COPASI.CData_PLOT_ITEM_TYPE
    PARAMETER_TYPE = _COPASI.CData_PARAMETER_TYPE
    PARAMETER_ROLE = _COPASI.CData_PARAMETER_ROLE
    PARAMETER_USED = _COPASI.CData_PARAMETER_USED
    PARAMETER_VALUE = _COPASI.CData_PARAMETER_VALUE
    UNIT = _COPASI.CData_UNIT
    VOLUME_UNIT = _COPASI.CData_VOLUME_UNIT
    AREA_UNIT = _COPASI.CData_AREA_UNIT
    LENGTH_UNIT = _COPASI.CData_LENGTH_UNIT
    TIME_UNIT = _COPASI.CData_TIME_UNIT
    QUANTITY_UNIT = _COPASI.CData_QUANTITY_UNIT
    MODEL_TYPE = _COPASI.CData_MODEL_TYPE
    AVOGADRO_NUMBER = _COPASI.CData_AVOGADRO_NUMBER
    DIMENSIONALITY = _COPASI.CData_DIMENSIONALITY
    ARRAY_ELEMENT_INDEX = _COPASI.CData_ARRAY_ELEMENT_INDEX
    REPORT_SEPARATOR = _COPASI.CData_REPORT_SEPARATOR
    REPORT_IS_TABLE = _COPASI.CData_REPORT_IS_TABLE
    REPORT_SHOW_TITLE = _COPASI.CData_REPORT_SHOW_TITLE
    REPORT_PRECISION = _COPASI.CData_REPORT_PRECISION
    NOTES = _COPASI.CData_NOTES
    MIRIAM_RDF_XML = _COPASI.CData_MIRIAM_RDF_XML
    MIRIAM_PREDICATE = _COPASI.CData_MIRIAM_PREDICATE
    MIRIAM_RESOURCE = _COPASI.CData_MIRIAM_RESOURCE
    MIRIAM_DESCRIPTION = _COPASI.CData_MIRIAM_DESCRIPTION
    MIRIAM_ID = _COPASI.CData_MIRIAM_ID
    DATE = _COPASI.CData_DATE
    GIVEN_NAME = _COPASI.CData_GIVEN_NAME
    FAMILY_NAME = _COPASI.CData_FAMILY_NAME
    EMAIL = _COPASI.CData_EMAIL
    ORGANIZATION = _COPASI.CData_ORGANIZATION
    FRAMEWORK = _COPASI.CData_FRAMEWORK
    VALUE = _COPASI.CData_VALUE
    DELAY_ASSIGNMENT = _COPASI.CData_DELAY_ASSIGNMENT
    FIRE_AT_INITIALTIME = _COPASI.CData_FIRE_AT_INITIALTIME
    PERSISTENT_TRIGGER = _COPASI.CData_PERSISTENT_TRIGGER
    TRIGGER_EXPRESSION = _COPASI.CData_TRIGGER_EXPRESSION
    DELAY_EXPRESSION = _COPASI.CData_DELAY_EXPRESSION
    PRIORITY_EXPRESSION = _COPASI.CData_PRIORITY_EXPRESSION
    ASSIGNMENTS = _COPASI.CData_ASSIGNMENTS
    VECTOR_CONTENT = _COPASI.CData_VECTOR_CONTENT
    UNIT_SYMBOL = _COPASI.CData_UNIT_SYMBOL
    UNIT_EXPRESSION = _COPASI.CData_UNIT_EXPRESSION
    __SIZE = _COPASI.CData___SIZE

    def __init__(self, *args):
        """
        __init__(CData self) -> CData
        __init__(CData self, CData src) -> CData
        """
        this = _COPASI.new_CData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CData
    __del__ = lambda self: None

    def __eq__(self, rhs):
        """__eq__(CData self, CData rhs) -> bool"""
        return _COPASI.CData___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(CData self, CData rhs) -> bool"""
        return _COPASI.CData___ne__(self, rhs)


    def getProperty(self, *args):
        """
        getProperty(CData self, std::string const & name) -> CDataValue
        getProperty(CData self, CData::Property const & property) -> CDataValue
        getProperty(CData self, std::string const & name) -> CDataValue
        getProperty(CData self, CData::Property const & property) -> CDataValue
        """
        return _COPASI.CData_getProperty(self, *args)


    def addProperty(self, *args):
        """
        addProperty(CData self, std::string const & name, CDataValue value) -> bool
        addProperty(CData self, CData::Property const & property, CDataValue value) -> bool
        """
        return _COPASI.CData_addProperty(self, *args)


    def appendData(self, data):
        """appendData(CData self, CData data) -> bool"""
        return _COPASI.CData_appendData(self, data)


    def removeProperty(self, *args):
        """
        removeProperty(CData self, std::string const & name) -> bool
        removeProperty(CData self, CData::Property const & property) -> bool
        """
        return _COPASI.CData_removeProperty(self, *args)


    def isSetProperty(self, *args):
        """
        isSetProperty(CData self, std::string const & name) -> bool
        isSetProperty(CData self, CData::Property const & property) -> bool
        """
        return _COPASI.CData_isSetProperty(self, *args)


    def empty(self):
        """empty(CData self) -> bool"""
        return _COPASI.CData_empty(self)


    def clear(self):
        """clear(CData self)"""
        return _COPASI.CData_clear(self)


    def hash(self):
        """hash(CData self) -> std::string"""
        return _COPASI.CData_hash(self)

CData_swigregister = _COPASI.CData_swigregister
CData_swigregister(CData)
CData.PropertyName = _COPASI.cvar.CData_PropertyName

class CDataValueStdVector(_object):
    """Proxy of C++ std::vector<(CDataValue)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataValueStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataValueStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CDataValueStdVector self) -> SwigPyIterator"""
        return _COPASI.CDataValueStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector___bool__(self)


    def __len__(self):
        """__len__(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j) -> CDataValueStdVector"""
        return _COPASI.CDataValueStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j)
        __setslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j, CDataValueStdVector v)
        """
        return _COPASI.CDataValueStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j)"""
        return _COPASI.CDataValueStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i)
        __delitem__(CDataValueStdVector self, PySliceObject * slice)
        """
        return _COPASI.CDataValueStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CDataValueStdVector self, PySliceObject * slice) -> CDataValueStdVector
        __getitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i) -> CDataValue
        """
        return _COPASI.CDataValueStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CDataValueStdVector self, PySliceObject * slice, CDataValueStdVector v)
        __setitem__(CDataValueStdVector self, PySliceObject * slice)
        __setitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, CDataValue x)
        """
        return _COPASI.CDataValueStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_pop(self)


    def append(self, x):
        """append(CDataValueStdVector self, CDataValue x)"""
        return _COPASI.CDataValueStdVector_append(self, x)


    def empty(self):
        """empty(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector_empty(self)


    def size(self):
        """size(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector_size(self)


    def swap(self, v):
        """swap(CDataValueStdVector self, CDataValueStdVector v)"""
        return _COPASI.CDataValueStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CDataValueStdVector self) -> std::vector< CDataValue >::reverse_iterator"""
        return _COPASI.CDataValueStdVector_rbegin(self)


    def rend(self):
        """rend(CDataValueStdVector self) -> std::vector< CDataValue >::reverse_iterator"""
        return _COPASI.CDataValueStdVector_rend(self)


    def clear(self):
        """clear(CDataValueStdVector self)"""
        return _COPASI.CDataValueStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CDataValueStdVector self) -> std::vector< CDataValue >::allocator_type"""
        return _COPASI.CDataValueStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CDataValueStdVector self)"""
        return _COPASI.CDataValueStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CDataValueStdVector self, std::vector< CDataValue >::iterator pos) -> std::vector< CDataValue >::iterator
        erase(CDataValueStdVector self, std::vector< CDataValue >::iterator first, std::vector< CDataValue >::iterator last) -> std::vector< CDataValue >::iterator
        """
        return _COPASI.CDataValueStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CDataValue)> self) -> CDataValueStdVector
        __init__(std::vector<(CDataValue)> self, CDataValueStdVector arg2) -> CDataValueStdVector
        __init__(std::vector<(CDataValue)> self, std::vector< CDataValue >::size_type size) -> CDataValueStdVector
        __init__(std::vector<(CDataValue)> self, std::vector< CDataValue >::size_type size, CDataValue value) -> CDataValueStdVector
        """
        this = _COPASI.new_CDataValueStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CDataValueStdVector self, CDataValue x)"""
        return _COPASI.CDataValueStdVector_push_back(self, x)


    def front(self):
        """front(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_front(self)


    def back(self):
        """back(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_back(self)


    def assign(self, n, x):
        """assign(CDataValueStdVector self, std::vector< CDataValue >::size_type n, CDataValue x)"""
        return _COPASI.CDataValueStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CDataValueStdVector self, std::vector< CDataValue >::size_type new_size)
        resize(CDataValueStdVector self, std::vector< CDataValue >::size_type new_size, CDataValue x)
        """
        return _COPASI.CDataValueStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CDataValueStdVector self, std::vector< CDataValue >::iterator pos, CDataValue x) -> std::vector< CDataValue >::iterator
        insert(CDataValueStdVector self, std::vector< CDataValue >::iterator pos, std::vector< CDataValue >::size_type n, CDataValue x)
        """
        return _COPASI.CDataValueStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CDataValueStdVector self, std::vector< CDataValue >::size_type n)"""
        return _COPASI.CDataValueStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CDataValueStdVector
    __del__ = lambda self: None
CDataValueStdVector_swigregister = _COPASI.CDataValueStdVector_swigregister
CDataValueStdVector_swigregister(CDataValueStdVector)

class CDataValue(_object):
    """Proxy of C++ CDataValue class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataValue, name)
    __repr__ = _swig_repr
    DOUBLE = _COPASI.CDataValue_DOUBLE
    INT = _COPASI.CDataValue_INT
    UINT = _COPASI.CDataValue_UINT
    BOOL = _COPASI.CDataValue_BOOL
    STRING = _COPASI.CDataValue_STRING
    DATA = _COPASI.CDataValue_DATA
    DATA_VALUES = _COPASI.CDataValue_DATA_VALUES
    DATA_VECTOR = _COPASI.CDataValue_DATA_VECTOR
    VOID_POINTER = _COPASI.CDataValue_VOID_POINTER
    INVALID = _COPASI.CDataValue_INVALID
    __SIZE = _COPASI.CDataValue___SIZE

    def __init__(self, *args):
        """
        __init__(CDataValue self, CDataValue::Type const & type) -> CDataValue
        __init__(CDataValue self) -> CDataValue
        __init__(CDataValue self, CDataValue src) -> CDataValue
        __init__(CDataValue self, double const & value) -> CDataValue
        __init__(CDataValue self, int const & value) -> CDataValue
        __init__(CDataValue self, unsigned int const & value) -> CDataValue
        __init__(CDataValue self, bool const & value) -> CDataValue
        __init__(CDataValue self, std::string const & value) -> CDataValue
        __init__(CDataValue self, char const * value) -> CDataValue
        __init__(CDataValue self, CData value) -> CDataValue
        __init__(CDataValue self, CDataValueStdVector value) -> CDataValue
        __init__(CDataValue self, CDataStdVector value) -> CDataValue
        __init__(CDataValue self, void const * pVoidPointer) -> CDataValue
        """
        this = _COPASI.new_CDataValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataValue
    __del__ = lambda self: None

    def toDouble(self):
        """toDouble(CDataValue self) -> double const &"""
        return _COPASI.CDataValue_toDouble(self)


    def toInt(self):
        """toInt(CDataValue self) -> int const &"""
        return _COPASI.CDataValue_toInt(self)


    def toUint(self):
        """toUint(CDataValue self) -> unsigned int const &"""
        return _COPASI.CDataValue_toUint(self)


    def toSizeT(self):
        """toSizeT(CDataValue self) -> size_t"""
        return _COPASI.CDataValue_toSizeT(self)


    def toBool(self):
        """toBool(CDataValue self) -> bool const &"""
        return _COPASI.CDataValue_toBool(self)


    def toString(self):
        """toString(CDataValue self) -> std::string const &"""
        return _COPASI.CDataValue_toString(self)


    def toDataValues(self):
        """toDataValues(CDataValue self) -> CDataValueStdVector"""
        return _COPASI.CDataValue_toDataValues(self)


    def toDataVector(self):
        """toDataVector(CDataValue self) -> CDataStdVector"""
        return _COPASI.CDataValue_toDataVector(self)


    def toVoidPointer(self):
        """toVoidPointer(CDataValue self) -> void const *"""
        return _COPASI.CDataValue_toVoidPointer(self)


    def raw(self):
        """raw(CDataValue self) -> void const *"""
        return _COPASI.CDataValue_raw(self)


    def getType(self):
        """getType(CDataValue self) -> CDataValue::Type const &"""
        return _COPASI.CDataValue_getType(self)


    def __eq__(self, rhs):
        """__eq__(CDataValue self, CDataValue rhs) -> bool"""
        return _COPASI.CDataValue___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(CDataValue self, CDataValue rhs) -> bool"""
        return _COPASI.CDataValue___ne__(self, rhs)

CDataValue_swigregister = _COPASI.CDataValue_swigregister
CDataValue_swigregister(CDataValue)
CDataValue.TypeName = _COPASI.cvar.CDataValue_TypeName

class CUndoData(_object):
    """Proxy of C++ CUndoData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUndoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUndoData, name)
    __repr__ = _swig_repr
    Type_INSERT = _COPASI.CUndoData_Type_INSERT
    Type_CHANGE = _COPASI.CUndoData_Type_CHANGE
    Type_REMOVE = _COPASI.CUndoData_Type_REMOVE
    Type___SIZE = _COPASI.CUndoData_Type___SIZE

    def getObject(dataModel, data):
        """getObject(CDataModel dataModel, CData data) -> CUndoObjectInterface"""
        return _COPASI.CUndoData_getObject(dataModel, data)

    getObject = staticmethod(getObject)

    def __init__(self, *args):
        """
        __init__(CUndoData self) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CUndoObjectInterface pObject, size_t const & authorId) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CUndoObjectInterface pObject) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CData data, size_t const & authorId) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CData data) -> CUndoData
        __init__(CUndoData self, CUndoData src) -> CUndoData
        """
        this = _COPASI.new_CUndoData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CUndoData
    __del__ = lambda self: None

    def getType(self):
        """getType(CUndoData self) -> CUndoData::Type const &"""
        return _COPASI.CUndoData_getType(self)


    def addProperty(self, *args):
        """
        addProperty(CUndoData self, CData::Property const & property, CDataValue value) -> bool
        addProperty(CUndoData self, CData::Property const & property, CDataValue oldValue, CDataValue newValue) -> bool
        """
        return _COPASI.CUndoData_addProperty(self, *args)


    def removeProperty(self, property):
        """removeProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_removeProperty(self, property)


    def isSetProperty(self, property):
        """isSetProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_isSetProperty(self, property)


    def appendData(self, *args):
        """
        appendData(CUndoData self, CData data) -> bool
        appendData(CUndoData self, CData oldData, CData newData) -> bool
        """
        return _COPASI.CUndoData_appendData(self, *args)


    def addPreProcessData(self, *args):
        """
        addPreProcessData(CUndoData self, CUndoData dependentData) -> bool
        addPreProcessData(CUndoData self, std::vector< CUndoData,std::allocator< CUndoData > > & dependentData) -> bool
        """
        return _COPASI.CUndoData_addPreProcessData(self, *args)


    def addPostProcessData(self, *args):
        """
        addPostProcessData(CUndoData self, CUndoData dependentData) -> bool
        addPostProcessData(CUndoData self, std::vector< CUndoData,std::allocator< CUndoData > > & dependentData) -> bool
        """
        return _COPASI.CUndoData_addPostProcessData(self, *args)


    def getOldData(self):
        """getOldData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getOldData(self)


    def getNewData(self):
        """getNewData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getNewData(self)


    def getPreProcessData(self, *args):
        """
        getPreProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > const
        getPreProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > &
        """
        return _COPASI.CUndoData_getPreProcessData(self, *args)


    def getPostProcessData(self, *args):
        """
        getPostProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > const
        getPostProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > &
        """
        return _COPASI.CUndoData_getPostProcessData(self, *args)


    def getChangedProperties(self):
        """getChangedProperties(CUndoData self) -> StringSet"""
        return _COPASI.CUndoData_getChangedProperties(self)


    def isChangedProperty(self, property):
        """isChangedProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_isChangedProperty(self, property)


    def apply(self, dataModel, changes, execute):
        """apply(CUndoData self, CDataModel dataModel, CUndoData::CChangeSet & changes, bool const & execute) -> bool"""
        return _COPASI.CUndoData_apply(self, dataModel, changes, execute)


    def undo(self, dataModel, changes, execute):
        """undo(CUndoData self, CDataModel dataModel, CUndoData::CChangeSet & changes, bool const & execute) -> bool"""
        return _COPASI.CUndoData_undo(self, dataModel, changes, execute)


    def addMetaDataProperty(self, property, value):
        """addMetaDataProperty(CUndoData self, std::string const & property, CDataValue value) -> bool"""
        return _COPASI.CUndoData_addMetaDataProperty(self, property, value)


    def appendMetaData(self, data):
        """appendMetaData(CUndoData self, CData data) -> bool"""
        return _COPASI.CUndoData_appendMetaData(self, data)


    def removeMetaDataProperty(self, property):
        """removeMetaDataProperty(CUndoData self, std::string const & property) -> bool"""
        return _COPASI.CUndoData_removeMetaDataProperty(self, property)


    def isSetMetaDataProperty(self, property):
        """isSetMetaDataProperty(CUndoData self, std::string const & property) -> bool"""
        return _COPASI.CUndoData_isSetMetaDataProperty(self, property)


    def getMetaDataProperty(self, property):
        """getMetaDataProperty(CUndoData self, std::string const & property) -> CDataValue"""
        return _COPASI.CUndoData_getMetaDataProperty(self, property)


    def getMetaData(self):
        """getMetaData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getMetaData(self)


    def getTime(self):
        """getTime(CUndoData self) -> std::time_t const &"""
        return _COPASI.CUndoData_getTime(self)


    def getLocalTime(self):
        """getLocalTime(CUndoData self) -> std::tm *"""
        return _COPASI.CUndoData_getLocalTime(self)


    def getUTCTime(self):
        """getUTCTime(CUndoData self) -> std::tm *"""
        return _COPASI.CUndoData_getUTCTime(self)


    def getAuthorID(self):
        """getAuthorID(CUndoData self) -> size_t const"""
        return _COPASI.CUndoData_getAuthorID(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CUndoData self) -> std::string"""
        return _COPASI.CUndoData_getObjectDisplayName(self)


    def getObjectCN(self, apply):
        """getObjectCN(CUndoData self, bool const & apply) -> std::string"""
        return _COPASI.CUndoData_getObjectCN(self, apply)


    def getObjectType(self):
        """getObjectType(CUndoData self) -> std::string"""
        return _COPASI.CUndoData_getObjectType(self)


    def __lt__(self, rhs):
        """__lt__(CUndoData self, CUndoData rhs) -> bool"""
        return _COPASI.CUndoData___lt__(self, rhs)


    def empty(self):
        """empty(CUndoData self) -> bool"""
        return _COPASI.CUndoData_empty(self)


    def clear(self):
        """clear(CUndoData self)"""
        return _COPASI.CUndoData_clear(self)

CUndoData_swigregister = _COPASI.CUndoData_swigregister
CUndoData_swigregister(CUndoData)
CUndoData.TypeName = _COPASI.cvar.CUndoData_TypeName

def CUndoData_getObject(dataModel, data):
    """CUndoData_getObject(CDataModel dataModel, CData data) -> CUndoObjectInterface"""
    return _COPASI.CUndoData_getObject(dataModel, data)

class CObjectInterface(_object):
    """Proxy of C++ CObjectInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObjectInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObjectInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def DataObject(pInterface):
        """DataObject(CObjectInterface pInterface) -> CDataObject"""
        return _COPASI.CObjectInterface_DataObject(pInterface)

    DataObject = staticmethod(DataObject)

    def GetObjectFromCN(listOfContainer, objName):
        """GetObjectFromCN(ContainerList listOfContainer, CCommonName objName) -> CObjectInterface"""
        return _COPASI.CObjectInterface_GetObjectFromCN(listOfContainer, objName)

    GetObjectFromCN = staticmethod(GetObjectFromCN)
    __swig_destroy__ = _COPASI.delete_CObjectInterface
    __del__ = lambda self: None

    def calculateValue(self):
        """calculateValue(CObjectInterface self)"""
        return _COPASI.CObjectInterface_calculateValue(self)


    def getCN(self):
        """getCN(CObjectInterface self) -> CCommonName"""
        return _COPASI.CObjectInterface_getCN(self)


    def getObject(self, cn):
        """getObject(CObjectInterface self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CObjectInterface_getObject(self, cn)


    def getValuePointer(self):
        """getValuePointer(CObjectInterface self) -> void *"""
        return _COPASI.CObjectInterface_getValuePointer(self)


    def getDataObject(self):
        """getDataObject(CObjectInterface self) -> CDataObject"""
        return _COPASI.CObjectInterface_getDataObject(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CObjectInterface self) -> std::string"""
        return _COPASI.CObjectInterface_getObjectDisplayName(self)


    def getValidity(self):
        """getValidity(CObjectInterface self) -> CValidity"""
        return _COPASI.CObjectInterface_getValidity(self)


    def validityChanged(self, changedValidity):
        """validityChanged(CObjectInterface self, CValidity changedValidity)"""
        return _COPASI.CObjectInterface_validityChanged(self, changedValidity)


    __metaclass__ = AutoProperty


    def toObject(self):
        """toObject(CObjectInterface self) -> CDataObject"""
        return _COPASI.CObjectInterface_toObject(self)


    def printToString(self):
        """printToString(CObjectInterface self) -> std::string"""
        return _COPASI.CObjectInterface_printToString(self)

CObjectInterface_swigregister = _COPASI.CObjectInterface_swigregister
CObjectInterface_swigregister(CObjectInterface)

def CObjectInterface_DataObject(pInterface):
    """CObjectInterface_DataObject(CObjectInterface pInterface) -> CDataObject"""
    return _COPASI.CObjectInterface_DataObject(pInterface)

def CObjectInterface_GetObjectFromCN(listOfContainer, objName):
    """CObjectInterface_GetObjectFromCN(ContainerList listOfContainer, CCommonName objName) -> CObjectInterface"""
    return _COPASI.CObjectInterface_GetObjectFromCN(listOfContainer, objName)

class CIssue(_object):
    """Proxy of C++ CIssue class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CIssue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CIssue self, CIssue::eSeverity const & severity, CIssue::eKind const & kind) -> CIssue
        __init__(CIssue self, CIssue::eSeverity const & severity) -> CIssue
        __init__(CIssue self) -> CIssue
        __init__(CIssue self, CIssue src) -> CIssue
        """
        this = _COPASI.new_CIssue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CIssue
    __del__ = lambda self: None

    def __iand__(self, rhs):
        """__iand__(CIssue self, CIssue rhs) -> CIssue"""
        return _COPASI.CIssue___iand__(self, rhs)


    def isSuccess(self):
        """isSuccess(CIssue self) -> bool"""
        return _COPASI.CIssue_isSuccess(self)


    def __eq__(self, rhs):
        """__eq__(CIssue self, CIssue rhs) -> bool"""
        return _COPASI.CIssue___eq__(self, rhs)


    def isError(self):
        """isError(CIssue self) -> bool"""
        return _COPASI.CIssue_isError(self)


    def getSeverity(self):
        """getSeverity(CIssue self) -> CIssue::eSeverity const &"""
        return _COPASI.CIssue_getSeverity(self)


    def getKind(self):
        """getKind(CIssue self) -> CIssue::eKind const &"""
        return _COPASI.CIssue_getKind(self)

CIssue_swigregister = _COPASI.CIssue_swigregister
CIssue_swigregister(CIssue)
CIssue.severityNames = _COPASI.cvar.CIssue_severityNames

class CValidity(_object):
    """Proxy of C++ CValidity class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CValidity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CValidity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CValidity self, CObjectInterface pObjectInterface=None) -> CValidity
        __init__(CValidity self) -> CValidity
        __init__(CValidity self, CValidity src, CObjectInterface pObjectInterface=None) -> CValidity
        __init__(CValidity self, CValidity src) -> CValidity
        """
        this = _COPASI.new_CValidity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CValidity
    __del__ = lambda self: None

    def clear(self):
        """clear(CValidity self)"""
        return _COPASI.CValidity_clear(self)


    def empty(self):
        """empty(CValidity self) -> bool"""
        return _COPASI.CValidity_empty(self)


    def add(self, issue):
        """add(CValidity self, CIssue issue)"""
        return _COPASI.CValidity_add(self, issue)


    def remove(self, *args):
        """
        remove(CValidity self, CIssue issue)
        remove(CValidity self, CValidity::Severity const & severity, CValidity::Kind const & kind)
        """
        return _COPASI.CValidity_remove(self, *args)


    def getHighestSeverity(self, *args):
        """
        getHighestSeverity(CValidity self, CValidity::Severity const & filterSeverity, CValidity::Kind const & filterKind) -> CIssue::eSeverity
        getHighestSeverity(CValidity self, CValidity::Severity const & filterSeverity) -> CIssue::eSeverity
        getHighestSeverity(CValidity self) -> CIssue::eSeverity
        """
        return _COPASI.CValidity_getHighestSeverity(self, *args)


    def get(self, severity):
        """get(CValidity self, CIssue::eSeverity const & severity) -> CValidity::Kind const &"""
        return _COPASI.CValidity_get(self, severity)


    def getIssueMessages(self, *args):
        """
        getIssueMessages(CValidity self, CValidity::Severity const & severityFilter, CValidity::Kind const & kindFilter) -> std::string const
        getIssueMessages(CValidity self, CValidity::Severity const & severityFilter) -> std::string const
        getIssueMessages(CValidity self) -> std::string const
        """
        return _COPASI.CValidity_getIssueMessages(self, *args)


    def __ior__(self, rhs):
        """__ior__(CValidity self, CValidity rhs) -> CValidity"""
        return _COPASI.CValidity___ior__(self, rhs)


    def getFirstWorstIssue(self):
        """getFirstWorstIssue(CValidity self) -> CIssue"""
        return _COPASI.CValidity_getFirstWorstIssue(self)

CValidity_swigregister = _COPASI.CValidity_swigregister
CValidity_swigregister(CValidity)

class CCommonName(_object):
    """Proxy of C++ CCommonName class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCommonName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCommonName, name)
    __repr__ = _swig_repr

    def nameFromCN(cn):
        """nameFromCN(CCommonName cn) -> std::string"""
        return _COPASI.CCommonName_nameFromCN(cn)

    nameFromCN = staticmethod(nameFromCN)

    def compartmentNameFromCN(cn):
        """compartmentNameFromCN(CCommonName cn) -> std::string"""
        return _COPASI.CCommonName_compartmentNameFromCN(cn)

    compartmentNameFromCN = staticmethod(compartmentNameFromCN)
    __swig_destroy__ = _COPASI.delete_CCommonName
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(CCommonName self) -> CCommonName
        __init__(CCommonName self, CCommonName src) -> CCommonName
        __init__(CCommonName self, std::string const & name) -> CCommonName
        """
        this = _COPASI.new_CCommonName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPrimary(self):
        """getPrimary(CCommonName self) -> CCommonName"""
        return _COPASI.CCommonName_getPrimary(self)


    def getRemainder(self):
        """getRemainder(CCommonName self) -> CCommonName"""
        return _COPASI.CCommonName_getRemainder(self)


    def getObjectType(self):
        """getObjectType(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getObjectType(self)


    def getObjectName(self):
        """getObjectName(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getObjectName(self)


    def getElementIndex(self, pos=0):
        """
        getElementIndex(CCommonName self, size_t const & pos=0) -> size_t
        getElementIndex(CCommonName self) -> size_t
        """
        return _COPASI.CCommonName_getElementIndex(self, pos)


    def getElementName(self, pos, unescape=True):
        """
        getElementName(CCommonName self, size_t const & pos, bool const & unescape=True) -> std::string
        getElementName(CCommonName self, size_t const & pos) -> std::string
        """
        return _COPASI.CCommonName_getElementName(self, pos, unescape)


    def split(self, parentCN, objectType, objectName):
        """split(CCommonName self, CCommonName parentCN, std::string & objectType, std::string & objectName)"""
        return _COPASI.CCommonName_split(self, parentCN, objectType, objectName)


    def escape(name):
        """escape(std::string const & name) -> std::string"""
        return _COPASI.CCommonName_escape(name)

    escape = staticmethod(escape)

    def unescape(name):
        """unescape(std::string const & name) -> std::string"""
        return _COPASI.CCommonName_unescape(name)

    unescape = staticmethod(unescape)

    def fromData(data):
        """fromData(CData data) -> std::string"""
        return _COPASI.CCommonName_fromData(data)

    fromData = staticmethod(fromData)

    def construct(parent, objectType, objectName):
        """construct(CCommonName parent, std::string const & objectType, std::string const & objectName) -> std::string"""
        return _COPASI.CCommonName_construct(parent, objectType, objectName)

    construct = staticmethod(construct)

    def findNext(self, toFind, pos=0):
        """
        findNext(CCommonName self, std::string const & toFind, std::string::size_type const & pos=0) -> std::string::size_type
        findNext(CCommonName self, std::string const & toFind) -> std::string::size_type
        """
        return _COPASI.CCommonName_findNext(self, toFind, pos)


    def findPrevious(self, *args):
        """
        findPrevious(CCommonName self, std::string const & toFind, std::string::size_type const & pos) -> std::string::size_type
        findPrevious(CCommonName self, std::string const & toFind) -> std::string::size_type
        """
        return _COPASI.CCommonName_findPrevious(self, *args)


    __metaclass__ = AutoProperty


    def getString(self):
        """getString(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getString(self)


    def __str__(self):
      return self.getString();
    def __repr__(self):
      return self.getString();

CCommonName_swigregister = _COPASI.CCommonName_swigregister
CCommonName_swigregister(CCommonName)

def CCommonName_nameFromCN(cn):
    """CCommonName_nameFromCN(CCommonName cn) -> std::string"""
    return _COPASI.CCommonName_nameFromCN(cn)

def CCommonName_compartmentNameFromCN(cn):
    """CCommonName_compartmentNameFromCN(CCommonName cn) -> std::string"""
    return _COPASI.CCommonName_compartmentNameFromCN(cn)

def CCommonName_escape(name):
    """CCommonName_escape(std::string const & name) -> std::string"""
    return _COPASI.CCommonName_escape(name)

def CCommonName_unescape(name):
    """CCommonName_unescape(std::string const & name) -> std::string"""
    return _COPASI.CCommonName_unescape(name)

def CCommonName_fromData(data):
    """CCommonName_fromData(CData data) -> std::string"""
    return _COPASI.CCommonName_fromData(data)

def CCommonName_construct(parent, objectType, objectName):
    """CCommonName_construct(CCommonName parent, std::string const & objectType, std::string const & objectName) -> std::string"""
    return _COPASI.CCommonName_construct(parent, objectType, objectName)

class CRegisteredCommonName(CCommonName):
    """Proxy of C++ CRegisteredCommonName class."""

    __swig_setmethods__ = {}
    for _s in [CCommonName]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegisteredCommonName, name, value)
    __swig_getmethods__ = {}
    for _s in [CCommonName]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegisteredCommonName, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRegisteredCommonName
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(CRegisteredCommonName self) -> CRegisteredCommonName
        __init__(CRegisteredCommonName self, CRegisteredCommonName src) -> CRegisteredCommonName
        __init__(CRegisteredCommonName self, std::string const & name) -> CRegisteredCommonName
        """
        this = _COPASI.new_CRegisteredCommonName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setEnabled(enabled):
        """setEnabled(bool const & enabled)"""
        return _COPASI.CRegisteredCommonName_setEnabled(enabled)

    setEnabled = staticmethod(setEnabled)

    def isEnabled():
        """isEnabled() -> bool const &"""
        return _COPASI.CRegisteredCommonName_isEnabled()

    isEnabled = staticmethod(isEnabled)

    def handle(oldCN, newCN):
        """handle(std::string const & oldCN, std::string const & newCN)"""
        return _COPASI.CRegisteredCommonName_handle(oldCN, newCN)

    handle = staticmethod(handle)

    def sanitizeObjectNames():
        """sanitizeObjectNames()"""
        return _COPASI.CRegisteredCommonName_sanitizeObjectNames()

    sanitizeObjectNames = staticmethod(sanitizeObjectNames)

    def registerHandler(pRenameHandler):
        """registerHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
        return _COPASI.CRegisteredCommonName_registerHandler(pRenameHandler)

    registerHandler = staticmethod(registerHandler)

    def deregisterHandler(pRenameHandler):
        """deregisterHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
        return _COPASI.CRegisteredCommonName_deregisterHandler(pRenameHandler)

    deregisterHandler = staticmethod(deregisterHandler)

    def __str__(self):
      return self.getString();
    def __repr__(self):
      return self.getString();

CRegisteredCommonName_swigregister = _COPASI.CRegisteredCommonName_swigregister
CRegisteredCommonName_swigregister(CRegisteredCommonName)

def CRegisteredCommonName_setEnabled(enabled):
    """CRegisteredCommonName_setEnabled(bool const & enabled)"""
    return _COPASI.CRegisteredCommonName_setEnabled(enabled)

def CRegisteredCommonName_isEnabled():
    """CRegisteredCommonName_isEnabled() -> bool const &"""
    return _COPASI.CRegisteredCommonName_isEnabled()

def CRegisteredCommonName_handle(oldCN, newCN):
    """CRegisteredCommonName_handle(std::string const & oldCN, std::string const & newCN)"""
    return _COPASI.CRegisteredCommonName_handle(oldCN, newCN)

def CRegisteredCommonName_sanitizeObjectNames():
    """CRegisteredCommonName_sanitizeObjectNames()"""
    return _COPASI.CRegisteredCommonName_sanitizeObjectNames()

def CRegisteredCommonName_registerHandler(pRenameHandler):
    """CRegisteredCommonName_registerHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
    return _COPASI.CRegisteredCommonName_registerHandler(pRenameHandler)

def CRegisteredCommonName_deregisterHandler(pRenameHandler):
    """CRegisteredCommonName_deregisterHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
    return _COPASI.CRegisteredCommonName_deregisterHandler(pRenameHandler)

class ReportItemVector(_object):
    """Proxy of C++ std::vector<(CRegisteredCommonName)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportItemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportItemVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ReportItemVector self) -> SwigPyIterator"""
        return _COPASI.ReportItemVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector___bool__(self)


    def __len__(self):
        """__len__(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j) -> ReportItemVector"""
        return _COPASI.ReportItemVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j)
        __setslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j, ReportItemVector v)
        """
        return _COPASI.ReportItemVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j)"""
        return _COPASI.ReportItemVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i)
        __delitem__(ReportItemVector self, PySliceObject * slice)
        """
        return _COPASI.ReportItemVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ReportItemVector self, PySliceObject * slice) -> ReportItemVector
        __getitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i) -> CRegisteredCommonName
        """
        return _COPASI.ReportItemVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ReportItemVector self, PySliceObject * slice, ReportItemVector v)
        __setitem__(ReportItemVector self, PySliceObject * slice)
        __setitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector___setitem__(self, *args)


    def pop(self):
        """pop(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_pop(self)


    def append(self, x):
        """append(ReportItemVector self, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_append(self, x)


    def empty(self):
        """empty(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector_empty(self)


    def size(self):
        """size(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector_size(self)


    def swap(self, v):
        """swap(ReportItemVector self, ReportItemVector v)"""
        return _COPASI.ReportItemVector_swap(self, v)


    def rbegin(self):
        """rbegin(ReportItemVector self) -> std::vector< CRegisteredCommonName >::reverse_iterator"""
        return _COPASI.ReportItemVector_rbegin(self)


    def rend(self):
        """rend(ReportItemVector self) -> std::vector< CRegisteredCommonName >::reverse_iterator"""
        return _COPASI.ReportItemVector_rend(self)


    def clear(self):
        """clear(ReportItemVector self)"""
        return _COPASI.ReportItemVector_clear(self)


    def get_allocator(self):
        """get_allocator(ReportItemVector self) -> std::vector< CRegisteredCommonName >::allocator_type"""
        return _COPASI.ReportItemVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ReportItemVector self)"""
        return _COPASI.ReportItemVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos) -> std::vector< CRegisteredCommonName >::iterator
        erase(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator first, std::vector< CRegisteredCommonName >::iterator last) -> std::vector< CRegisteredCommonName >::iterator
        """
        return _COPASI.ReportItemVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CRegisteredCommonName)> self) -> ReportItemVector
        __init__(std::vector<(CRegisteredCommonName)> self, ReportItemVector arg2) -> ReportItemVector
        __init__(std::vector<(CRegisteredCommonName)> self, std::vector< CRegisteredCommonName >::size_type size) -> ReportItemVector
        __init__(std::vector<(CRegisteredCommonName)> self, std::vector< CRegisteredCommonName >::size_type size, CRegisteredCommonName value) -> ReportItemVector
        """
        this = _COPASI.new_ReportItemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ReportItemVector self, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_push_back(self, x)


    def front(self):
        """front(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_front(self)


    def back(self):
        """back(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_back(self)


    def assign(self, n, x):
        """assign(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type n, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type new_size)
        resize(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type new_size, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos, CRegisteredCommonName x) -> std::vector< CRegisteredCommonName >::iterator
        insert(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos, std::vector< CRegisteredCommonName >::size_type n, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type n)"""
        return _COPASI.ReportItemVector_reserve(self, n)


    def capacity(self):
        """capacity(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ReportItemVector
    __del__ = lambda self: None
ReportItemVector_swigregister = _COPASI.ReportItemVector_swigregister
ReportItemVector_swigregister(ReportItemVector)

class VectorOfReportItemVectors(_object):
    """Proxy of C++ std::vector<(std::vector<(CRegisteredCommonName)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfReportItemVectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfReportItemVectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorOfReportItemVectors self) -> SwigPyIterator"""
        return _COPASI.VectorOfReportItemVectors_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors___bool__(self)


    def __len__(self):
        """__len__(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j) -> VectorOfReportItemVectors"""
        return _COPASI.VectorOfReportItemVectors___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j)
        __setslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j, VectorOfReportItemVectors v)
        """
        return _COPASI.VectorOfReportItemVectors___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j)"""
        return _COPASI.VectorOfReportItemVectors___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i)
        __delitem__(VectorOfReportItemVectors self, PySliceObject * slice)
        """
        return _COPASI.VectorOfReportItemVectors___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorOfReportItemVectors self, PySliceObject * slice) -> VectorOfReportItemVectors
        __getitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i) -> ReportItemVector
        """
        return _COPASI.VectorOfReportItemVectors___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorOfReportItemVectors self, PySliceObject * slice, VectorOfReportItemVectors v)
        __setitem__(VectorOfReportItemVectors self, PySliceObject * slice)
        __setitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors___setitem__(self, *args)


    def pop(self):
        """pop(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_pop(self)


    def append(self, x):
        """append(VectorOfReportItemVectors self, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_append(self, x)


    def empty(self):
        """empty(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors_empty(self)


    def size(self):
        """size(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors_size(self)


    def swap(self, v):
        """swap(VectorOfReportItemVectors self, VectorOfReportItemVectors v)"""
        return _COPASI.VectorOfReportItemVectors_swap(self, v)


    def rbegin(self):
        """rbegin(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::reverse_iterator"""
        return _COPASI.VectorOfReportItemVectors_rbegin(self)


    def rend(self):
        """rend(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::reverse_iterator"""
        return _COPASI.VectorOfReportItemVectors_rend(self)


    def clear(self):
        """clear(VectorOfReportItemVectors self)"""
        return _COPASI.VectorOfReportItemVectors_clear(self)


    def get_allocator(self):
        """get_allocator(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::allocator_type"""
        return _COPASI.VectorOfReportItemVectors_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorOfReportItemVectors self)"""
        return _COPASI.VectorOfReportItemVectors_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        erase(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator first, std::vector< std::vector< CRegisteredCommonName > >::iterator last) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        """
        return _COPASI.VectorOfReportItemVectors_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(CRegisteredCommonName)>)> self) -> VectorOfReportItemVectors
        __init__(std::vector<(std::vector<(CRegisteredCommonName)>)> self, VectorOfReportItemVectors arg2) -> VectorOfReportItemVectors
        __init__(std::vector<(std::vector<(CRegisteredCommonName)>)> self, std::vector< std::vector< CRegisteredCommonName > >::size_type size) -> VectorOfReportItemVectors
        __init__(std::vector<(std::vector<(CRegisteredCommonName)>)> self, std::vector< std::vector< CRegisteredCommonName > >::size_type size, ReportItemVector value) -> VectorOfReportItemVectors
        """
        this = _COPASI.new_VectorOfReportItemVectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorOfReportItemVectors self, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_push_back(self, x)


    def front(self):
        """front(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_front(self)


    def back(self):
        """back(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_back(self)


    def assign(self, n, x):
        """assign(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type n, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type new_size)
        resize(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type new_size, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos, ReportItemVector x) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        insert(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos, std::vector< std::vector< CRegisteredCommonName > >::size_type n, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type n)"""
        return _COPASI.VectorOfReportItemVectors_reserve(self, n)


    def capacity(self):
        """capacity(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors_capacity(self)

    __swig_destroy__ = _COPASI.delete_VectorOfReportItemVectors
    __del__ = lambda self: None
VectorOfReportItemVectors_swigregister = _COPASI.VectorOfReportItemVectors_swigregister
VectorOfReportItemVectors_swigregister(VectorOfReportItemVectors)

class CObjectLists(_object):
    """Proxy of C++ CObjectLists class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObjectLists, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObjectLists, name)
    __repr__ = _swig_repr
    EMPTY_LIST = _COPASI.CObjectLists_EMPTY_LIST
    SINGLE_OBJECT = _COPASI.CObjectLists_SINGLE_OBJECT
    METABS = _COPASI.CObjectLists_METABS
    METAB_INITIAL_CONCENTRATIONS = _COPASI.CObjectLists_METAB_INITIAL_CONCENTRATIONS
    METAB_INITIAL_NUMBERS = _COPASI.CObjectLists_METAB_INITIAL_NUMBERS
    METAB_CONCENTRATIONS = _COPASI.CObjectLists_METAB_CONCENTRATIONS
    METAB_NUMBERS = _COPASI.CObjectLists_METAB_NUMBERS
    NON_CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_NON_CONST_METAB_CONCENTRATIONS
    NON_CONST_METAB_NUMBERS = _COPASI.CObjectLists_NON_CONST_METAB_NUMBERS
    CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_CONST_METAB_CONCENTRATIONS
    CONST_METAB_NUMBERS = _COPASI.CObjectLists_CONST_METAB_NUMBERS
    ODE_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ODE_METAB_CONCENTRATIONS
    ODE_METAB_NUMBERS = _COPASI.CObjectLists_ODE_METAB_NUMBERS
    REACTION_METAB_CONCENTRATIONS = _COPASI.CObjectLists_REACTION_METAB_CONCENTRATIONS
    REACTION_METAB_NUMBERS = _COPASI.CObjectLists_REACTION_METAB_NUMBERS
    ASS_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ASS_METAB_CONCENTRATIONS
    ASS_METAB_NUMBERS = _COPASI.CObjectLists_ASS_METAB_NUMBERS
    METAB_CONC_RATES = _COPASI.CObjectLists_METAB_CONC_RATES
    METAB_PART_RATES = _COPASI.CObjectLists_METAB_PART_RATES
    METAB_TRANSITION_TIME = _COPASI.CObjectLists_METAB_TRANSITION_TIME
    REACTIONS = _COPASI.CObjectLists_REACTIONS
    REACTION_CONC_FLUXES = _COPASI.CObjectLists_REACTION_CONC_FLUXES
    REACTION_PART_FLUXES = _COPASI.CObjectLists_REACTION_PART_FLUXES
    GLOBAL_PARAMETERS = _COPASI.CObjectLists_GLOBAL_PARAMETERS
    GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_INITIAL_VALUES
    GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_VALUES
    NON_CONST_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_NON_CONST_GLOBAL_PARAMETER_VALUES
    CONST_GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_CONST_GLOBAL_PARAMETER_INITIAL_VALUES
    ODE_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ODE_GLOBAL_PARAMETER_VALUES
    ASS_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ASS_GLOBAL_PARAMETER_VALUES
    GLOBAL_PARAMETER_RATES = _COPASI.CObjectLists_GLOBAL_PARAMETER_RATES
    COMPARTMENTS = _COPASI.CObjectLists_COMPARTMENTS
    COMPARTMENT_INITIAL_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_INITIAL_VOLUMES
    COMPARTMENT_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_VOLUMES
    NON_CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_NON_CONST_COMPARTMENT_VOLUMES
    CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_CONST_COMPARTMENT_VOLUMES
    ODE_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ODE_COMPARTMENT_VOLUMES
    ASS_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ASS_COMPARTMENT_VOLUMES
    COMPARTMENT_RATES = _COPASI.CObjectLists_COMPARTMENT_RATES
    ALL_INITIAL_VALUES = _COPASI.CObjectLists_ALL_INITIAL_VALUES
    ALL_LOCAL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_LOCAL_PARAMETER_VALUES
    ALL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_VALUES
    ALL_PARAMETER_AND_INITIAL_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_AND_INITIAL_VALUES
    ALL_VARIABLES = _COPASI.CObjectLists_ALL_VARIABLES
    ALL_ODE_VARIABLES = _COPASI.CObjectLists_ALL_ODE_VARIABLES
    REDUCED_JACOBIAN_EV_RE = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_RE
    REDUCED_JACOBIAN_EV_IM = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_IM

    def existsFixedMetab(model):
        """existsFixedMetab(CModel model) -> bool"""
        return _COPASI.CObjectLists_existsFixedMetab(model)

    existsFixedMetab = staticmethod(existsFixedMetab)

    def __init__(self):
        """__init__(CObjectLists self) -> CObjectLists"""
        this = _COPASI.new_CObjectLists()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CObjectLists
    __del__ = lambda self: None
CObjectLists_swigregister = _COPASI.CObjectLists_swigregister
CObjectLists_swigregister(CObjectLists)

def CObjectLists_existsFixedMetab(model):
    """CObjectLists_existsFixedMetab(CModel model) -> bool"""
    return _COPASI.CObjectLists_existsFixedMetab(model)

class FloatVectorCore(_object):
    """Proxy of C++ CVectorCore<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorCore, name)
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        """
        __init__(CVectorCore<(double)> self, size_t const & size=0, double * buffer=None) -> FloatVectorCore
        __init__(CVectorCore<(double)> self, size_t const & size=0) -> FloatVectorCore
        __init__(CVectorCore<(double)> self) -> FloatVectorCore
        """
        this = _COPASI.new_FloatVectorCore(size, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_FloatVectorCore
    __del__ = lambda self: None

    def initialize(self, *args):
        """
        initialize(FloatVectorCore self, size_t const & size, double * vector)
        initialize(FloatVectorCore self, FloatVectorCore src)
        """
        return _COPASI.FloatVectorCore_initialize(self, *args)


    def __eq__(self, rhs):
        """__eq__(FloatVectorCore self, FloatVectorCore rhs) -> bool"""
        return _COPASI.FloatVectorCore___eq__(self, rhs)


    def size(self):
        """size(FloatVectorCore self) -> size_t"""
        return _COPASI.FloatVectorCore_size(self)


    def __call__(self, *args):
        """
        __call__(FloatVectorCore self, size_t const & row) -> double
        __call__(FloatVectorCore self, size_t const & row) -> double const &
        """
        return _COPASI.FloatVectorCore___call__(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(FloatVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.FloatVectorCore_applyPivot(self, pivot)


    def get(self, index):
        """get(FloatVectorCore self, unsigned int index) -> double"""
        return _COPASI.FloatVectorCore_get(self, index)


    def __len__(self):
        """__len__(FloatVectorCore self) -> size_t"""
        return _COPASI.FloatVectorCore___len__(self)

FloatVectorCore_swigregister = _COPASI.FloatVectorCore_swigregister
FloatVectorCore_swigregister(FloatVectorCore)

class FloatVector(FloatVectorCore):
    """Proxy of C++ CVector<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatVectorCore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVectorCore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(double)> self, size_t size=0) -> FloatVector
        __init__(CVector<(double)> self) -> FloatVector
        __init__(CVector<(double)> self, FloatVectorCore src) -> FloatVector
        __init__(CVector<(double)> self, FloatVector src) -> FloatVector
        """
        this = _COPASI.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _COPASI.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class SizeTVectorCore(_object):
    """Proxy of C++ CVectorCore<(size_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTVectorCore, name)
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        """
        __init__(CVectorCore<(size_t)> self, size_t const & size=0, size_t * buffer=None) -> SizeTVectorCore
        __init__(CVectorCore<(size_t)> self, size_t const & size=0) -> SizeTVectorCore
        __init__(CVectorCore<(size_t)> self) -> SizeTVectorCore
        """
        this = _COPASI.new_SizeTVectorCore(size, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_SizeTVectorCore
    __del__ = lambda self: None

    def initialize(self, *args):
        """
        initialize(SizeTVectorCore self, size_t const & size, size_t * vector)
        initialize(SizeTVectorCore self, SizeTVectorCore src)
        """
        return _COPASI.SizeTVectorCore_initialize(self, *args)


    def __eq__(self, rhs):
        """__eq__(SizeTVectorCore self, SizeTVectorCore rhs) -> bool"""
        return _COPASI.SizeTVectorCore___eq__(self, rhs)


    def size(self):
        """size(SizeTVectorCore self) -> size_t"""
        return _COPASI.SizeTVectorCore_size(self)


    def __call__(self, *args):
        """
        __call__(SizeTVectorCore self, size_t const & row) -> size_t
        __call__(SizeTVectorCore self, size_t const & row) -> size_t const &
        """
        return _COPASI.SizeTVectorCore___call__(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(SizeTVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.SizeTVectorCore_applyPivot(self, pivot)


    def get(self, index):
        """get(SizeTVectorCore self, unsigned int index) -> size_t"""
        return _COPASI.SizeTVectorCore_get(self, index)


    def __len__(self):
        """__len__(SizeTVectorCore self) -> size_t"""
        return _COPASI.SizeTVectorCore___len__(self)

SizeTVectorCore_swigregister = _COPASI.SizeTVectorCore_swigregister
SizeTVectorCore_swigregister(SizeTVectorCore)

class SizeTVector(SizeTVectorCore):
    """Proxy of C++ CVector<(size_t)> class."""

    __swig_setmethods__ = {}
    for _s in [SizeTVectorCore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTVector, name, value)
    __swig_getmethods__ = {}
    for _s in [SizeTVectorCore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(size_t)> self, size_t size=0) -> SizeTVector
        __init__(CVector<(size_t)> self) -> SizeTVector
        __init__(CVector<(size_t)> self, SizeTVectorCore src) -> SizeTVector
        __init__(CVector<(size_t)> self, SizeTVector src) -> SizeTVector
        """
        this = _COPASI.new_SizeTVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_SizeTVector
    __del__ = lambda self: None
SizeTVector_swigregister = _COPASI.SizeTVector_swigregister
SizeTVector_swigregister(SizeTVector)

class ObjectVectorCore(_object):
    """Proxy of C++ CVectorCore<(p.CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectVectorCore, name)
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        """
        __init__(CVectorCore<(p.CDataObject)> self, size_t const & size=0, CDataObject ** buffer=None) -> ObjectVectorCore
        __init__(CVectorCore<(p.CDataObject)> self, size_t const & size=0) -> ObjectVectorCore
        __init__(CVectorCore<(p.CDataObject)> self) -> ObjectVectorCore
        """
        this = _COPASI.new_ObjectVectorCore(size, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectVectorCore
    __del__ = lambda self: None

    def initialize(self, *args):
        """
        initialize(ObjectVectorCore self, size_t const & size, CDataObject ** vector)
        initialize(ObjectVectorCore self, ObjectVectorCore src)
        """
        return _COPASI.ObjectVectorCore_initialize(self, *args)


    def __eq__(self, rhs):
        """__eq__(ObjectVectorCore self, ObjectVectorCore rhs) -> bool"""
        return _COPASI.ObjectVectorCore___eq__(self, rhs)


    def size(self):
        """size(ObjectVectorCore self) -> size_t"""
        return _COPASI.ObjectVectorCore_size(self)


    def __call__(self, *args):
        """
        __call__(ObjectVectorCore self, size_t const & row) -> CDataObject
        __call__(ObjectVectorCore self, size_t const & row) -> CDataObject
        """
        return _COPASI.ObjectVectorCore___call__(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(ObjectVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ObjectVectorCore_applyPivot(self, pivot)


    def get(self, index):
        """get(ObjectVectorCore self, unsigned int index) -> CDataObject"""
        return _COPASI.ObjectVectorCore_get(self, index)


    def __len__(self):
        """__len__(ObjectVectorCore self) -> size_t"""
        return _COPASI.ObjectVectorCore___len__(self)

ObjectVectorCore_swigregister = _COPASI.ObjectVectorCore_swigregister
ObjectVectorCore_swigregister(ObjectVectorCore)

class ObjectVector(ObjectVectorCore):
    """Proxy of C++ CVector<(p.CDataObject)> class."""

    __swig_setmethods__ = {}
    for _s in [ObjectVectorCore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ObjectVectorCore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(p.CDataObject)> self, size_t size=0) -> ObjectVector
        __init__(CVector<(p.CDataObject)> self) -> ObjectVector
        __init__(CVector<(p.CDataObject)> self, ObjectVectorCore src) -> ObjectVector
        __init__(CVector<(p.CDataObject)> self, ObjectVector src) -> ObjectVector
        """
        this = _COPASI.new_ObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectVector
    __del__ = lambda self: None
ObjectVector_swigregister = _COPASI.ObjectVector_swigregister
ObjectVector_swigregister(ObjectVector)

class ConstObjectVector(_object):
    """Proxy of C++ CVector<(p.q(const).CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstObjectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(p.q(const).CDataObject)> self, size_t size=0) -> ConstObjectVector
        __init__(CVector<(p.q(const).CDataObject)> self) -> ConstObjectVector
        __init__(CVector<(p.q(const).CDataObject)> self, CVectorCore< CDataObject const * > const & src) -> ConstObjectVector
        __init__(CVector<(p.q(const).CDataObject)> self, ConstObjectVector src) -> ConstObjectVector
        """
        this = _COPASI.new_ConstObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ConstObjectVector
    __del__ = lambda self: None
ConstObjectVector_swigregister = _COPASI.ConstObjectVector_swigregister
ConstObjectVector_swigregister(ConstObjectVector)

class ConstFunctionVector(_object):
    """Proxy of C++ CVector<(p.q(const).CFunction)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstFunctionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstFunctionVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(p.q(const).CFunction)> self, size_t size=0) -> ConstFunctionVector
        __init__(CVector<(p.q(const).CFunction)> self) -> ConstFunctionVector
        __init__(CVector<(p.q(const).CFunction)> self, ConstFunctionVectorCore src) -> ConstFunctionVector
        __init__(CVector<(p.q(const).CFunction)> self, ConstFunctionVector src) -> ConstFunctionVector
        """
        this = _COPASI.new_ConstFunctionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ConstFunctionVector
    __del__ = lambda self: None
ConstFunctionVector_swigregister = _COPASI.ConstFunctionVector_swigregister
ConstFunctionVector_swigregister(ConstFunctionVector)

class ConstFunctionVectorCore(_object):
    """Proxy of C++ CVectorCore<(p.q(const).CFunction)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstFunctionVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstFunctionVectorCore, name)
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        """
        __init__(CVectorCore<(p.q(const).CFunction)> self, size_t const & size=0, CFunction const ** buffer=None) -> ConstFunctionVectorCore
        __init__(CVectorCore<(p.q(const).CFunction)> self, size_t const & size=0) -> ConstFunctionVectorCore
        __init__(CVectorCore<(p.q(const).CFunction)> self) -> ConstFunctionVectorCore
        """
        this = _COPASI.new_ConstFunctionVectorCore(size, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ConstFunctionVectorCore
    __del__ = lambda self: None

    def initialize(self, *args):
        """
        initialize(ConstFunctionVectorCore self, size_t const & size, CFunction const ** vector)
        initialize(ConstFunctionVectorCore self, ConstFunctionVectorCore src)
        """
        return _COPASI.ConstFunctionVectorCore_initialize(self, *args)


    def __eq__(self, rhs):
        """__eq__(ConstFunctionVectorCore self, ConstFunctionVectorCore rhs) -> bool"""
        return _COPASI.ConstFunctionVectorCore___eq__(self, rhs)


    def size(self):
        """size(ConstFunctionVectorCore self) -> size_t"""
        return _COPASI.ConstFunctionVectorCore_size(self)


    def __call__(self, *args):
        """
        __call__(ConstFunctionVectorCore self, size_t const & row) -> CFunction
        __call__(ConstFunctionVectorCore self, size_t const & row) -> CFunction
        """
        return _COPASI.ConstFunctionVectorCore___call__(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(ConstFunctionVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ConstFunctionVectorCore_applyPivot(self, pivot)


    def get(self, index):
        """get(ConstFunctionVectorCore self, unsigned int index) -> CFunction"""
        return _COPASI.ConstFunctionVectorCore_get(self, index)


    def __len__(self):
        """__len__(ConstFunctionVectorCore self) -> size_t"""
        return _COPASI.ConstFunctionVectorCore___len__(self)

ConstFunctionVectorCore_swigregister = _COPASI.ConstFunctionVectorCore_swigregister
ConstFunctionVectorCore_swigregister(ConstFunctionVectorCore)

class ConstObjectInterfaceVector(_object):
    """Proxy of C++ CVector<(p.q(const).CObjectInterface)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstObjectInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstObjectInterfaceVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(p.q(const).CObjectInterface)> self, size_t size=0) -> ConstObjectInterfaceVector
        __init__(CVector<(p.q(const).CObjectInterface)> self) -> ConstObjectInterfaceVector
        __init__(CVector<(p.q(const).CObjectInterface)> self, ConstObjectInterfaceVectorCore src) -> ConstObjectInterfaceVector
        __init__(CVector<(p.q(const).CObjectInterface)> self, ConstObjectInterfaceVector src) -> ConstObjectInterfaceVector
        """
        this = _COPASI.new_ConstObjectInterfaceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ConstObjectInterfaceVector
    __del__ = lambda self: None
ConstObjectInterfaceVector_swigregister = _COPASI.ConstObjectInterfaceVector_swigregister
ConstObjectInterfaceVector_swigregister(ConstObjectInterfaceVector)

class ConstObjectInterfaceVectorCore(_object):
    """Proxy of C++ CVectorCore<(p.q(const).CObjectInterface)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstObjectInterfaceVectorCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstObjectInterfaceVectorCore, name)
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        """
        __init__(CVectorCore<(p.q(const).CObjectInterface)> self, size_t const & size=0, CObjectInterface const ** buffer=None) -> ConstObjectInterfaceVectorCore
        __init__(CVectorCore<(p.q(const).CObjectInterface)> self, size_t const & size=0) -> ConstObjectInterfaceVectorCore
        __init__(CVectorCore<(p.q(const).CObjectInterface)> self) -> ConstObjectInterfaceVectorCore
        """
        this = _COPASI.new_ConstObjectInterfaceVectorCore(size, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ConstObjectInterfaceVectorCore
    __del__ = lambda self: None

    def initialize(self, *args):
        """
        initialize(ConstObjectInterfaceVectorCore self, size_t const & size, CObjectInterface const ** vector)
        initialize(ConstObjectInterfaceVectorCore self, ConstObjectInterfaceVectorCore src)
        """
        return _COPASI.ConstObjectInterfaceVectorCore_initialize(self, *args)


    def __eq__(self, rhs):
        """__eq__(ConstObjectInterfaceVectorCore self, ConstObjectInterfaceVectorCore rhs) -> bool"""
        return _COPASI.ConstObjectInterfaceVectorCore___eq__(self, rhs)


    def size(self):
        """size(ConstObjectInterfaceVectorCore self) -> size_t"""
        return _COPASI.ConstObjectInterfaceVectorCore_size(self)


    def __call__(self, *args):
        """
        __call__(ConstObjectInterfaceVectorCore self, size_t const & row) -> CObjectInterface
        __call__(ConstObjectInterfaceVectorCore self, size_t const & row) -> CObjectInterface
        """
        return _COPASI.ConstObjectInterfaceVectorCore___call__(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(ConstObjectInterfaceVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ConstObjectInterfaceVectorCore_applyPivot(self, pivot)


    def get(self, index):
        """get(ConstObjectInterfaceVectorCore self, unsigned int index) -> CObjectInterface"""
        return _COPASI.ConstObjectInterfaceVectorCore_get(self, index)


    def __len__(self):
        """__len__(ConstObjectInterfaceVectorCore self) -> size_t"""
        return _COPASI.ConstObjectInterfaceVectorCore___len__(self)

ConstObjectInterfaceVectorCore_swigregister = _COPASI.ConstObjectInterfaceVectorCore_swigregister
ConstObjectInterfaceVectorCore_swigregister(ConstObjectInterfaceVectorCore)

class CRandom(_object):
    """Proxy of C++ CRandom class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRandom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRandom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    r250 = _COPASI.CRandom_r250
    mt19937 = _COPASI.CRandom_mt19937
    mt19937HR = _COPASI.CRandom_mt19937HR
    unkown = _COPASI.CRandom_unkown

    def getSystemSeed():
        """getSystemSeed() -> unsigned int"""
        return _COPASI.CRandom_getSystemSeed()

    getSystemSeed = staticmethod(getSystemSeed)

    def createGenerator(*args):
        """
        createGenerator(CRandom::Type type, unsigned int seed=0) -> CRandom
        createGenerator(CRandom::Type type) -> CRandom
        createGenerator() -> CRandom
        """
        return _COPASI.CRandom_createGenerator(*args)

    createGenerator = staticmethod(createGenerator)
    __swig_destroy__ = _COPASI.delete_CRandom
    __del__ = lambda self: None

    def getType(self):
        """getType(CRandom self) -> CRandom::Type const &"""
        return _COPASI.CRandom_getType(self)


    def getModulus(self):
        """getModulus(CRandom self) -> unsigned int const &"""
        return _COPASI.CRandom_getModulus(self)


    def initialize(self, *args):
        """
        initialize(CRandom self, unsigned int seed)
        initialize(CRandom self)
        """
        return _COPASI.CRandom_initialize(self, *args)


    def getRandomU(self, *args):
        """
        getRandomU(CRandom self) -> unsigned int
        getRandomU(CRandom self, unsigned int const & max) -> unsigned int
        """
        return _COPASI.CRandom_getRandomU(self, *args)


    def getRandomS(self, *args):
        """
        getRandomS(CRandom self) -> int
        getRandomS(CRandom self, int const & max) -> int
        """
        return _COPASI.CRandom_getRandomS(self, *args)


    def getRandomCC(self):
        """getRandomCC(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomCC(self)


    def getRandomCO(self):
        """getRandomCO(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomCO(self)


    def getRandomOO(self):
        """getRandomOO(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomOO(self)


    def getRandomNormal01(self):
        """getRandomNormal01(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomNormal01(self)


    def getRandomNormal(self, mean, sd):
        """getRandomNormal(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormal(self, mean, sd)


    def getRandomNormalPositive(self, mean, sd):
        """getRandomNormalPositive(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormalPositive(self, mean, sd)


    def getRandomNormalLog(self, mean, sd):
        """getRandomNormalLog(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormalLog(self, mean, sd)


    def getRandomPoisson(self, mean):
        """getRandomPoisson(CRandom self, double const & mean) -> double"""
        return _COPASI.CRandom_getRandomPoisson(self, mean)


    def getRandomExp(self):
        """getRandomExp(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomExp(self)


    def getRandomGamma(self, shape, scale):
        """getRandomGamma(CRandom self, double shape, double scale) -> double"""
        return _COPASI.CRandom_getRandomGamma(self, shape, scale)


    def getRandomStdGamma(self, shape):
        """getRandomStdGamma(CRandom self, double shape) -> double"""
        return _COPASI.CRandom_getRandomStdGamma(self, shape)


    __metaclass__ = AutoProperty

CRandom_swigregister = _COPASI.CRandom_swigregister
CRandom_swigregister(CRandom)

def CRandom_getSystemSeed():
    """CRandom_getSystemSeed() -> unsigned int"""
    return _COPASI.CRandom_getSystemSeed()

def CRandom_createGenerator(*args):
    """
    createGenerator(CRandom::Type type, unsigned int seed=0) -> CRandom
    createGenerator(CRandom::Type type) -> CRandom
    CRandom_createGenerator() -> CRandom
    """
    return _COPASI.CRandom_createGenerator(*args)

MCopasiBase = _COPASI.MCopasiBase
MCReadConfig = _COPASI.MCReadConfig
MCWriteConfig = _COPASI.MCWriteConfig
MCRange = _COPASI.MCRange
MCKinFunction = _COPASI.MCKinFunction
MCDataVector = _COPASI.MCDataVector
MCFunctionParameters = _COPASI.MCFunctionParameters
MCMassAction = _COPASI.MCMassAction
MCCopasiMethod = _COPASI.MCCopasiMethod
MCReaction = _COPASI.MCReaction
MCParameter = _COPASI.MCParameter
MCChemEq = _COPASI.MCChemEq
MCTrajectoryMethod = _COPASI.MCTrajectoryMethod
MCXML = _COPASI.MCXML
MCCopasiMessage = _COPASI.MCCopasiMessage
MCConfiguration = _COPASI.MCConfiguration
MCOptimization = _COPASI.MCOptimization
MCSBML = _COPASI.MCSBML
MCTrajectoryProblem = _COPASI.MCTrajectoryProblem
MCDirEntry = _COPASI.MCDirEntry
MCFunction = _COPASI.MCFunction
MCMathML = _COPASI.MCMathML
MCEvaluationNodeObject = _COPASI.MCEvaluationNodeObject
MCCopasiTask = _COPASI.MCCopasiTask
MCSteadyState = _COPASI.MCSteadyState
MCFitting = _COPASI.MCFitting
MCObject = _COPASI.MCObject
MCLyap = _COPASI.MCLyap
MCODEExporter = _COPASI.MCODEExporter
MCRegistration = _COPASI.MCRegistration
MCTSSAMethod = _COPASI.MCTSSAMethod
MCTSSAProblem = _COPASI.MCTSSAProblem
MCEigen = _COPASI.MCEigen
MCAnnotation = _COPASI.MCAnnotation
MCMathModel = _COPASI.MCMathModel
MCModelMerging = _COPASI.MCModelMerging
MCModelExpansion = _COPASI.MCModelExpansion
MCEFMAnalysis = _COPASI.MCEFMAnalysis
MCLayout = _COPASI.MCLayout
MCScan = _COPASI.MCScan
MCSEDML = _COPASI.MCSEDML
MCMCA = _COPASI.MCMCA
MCUnit = _COPASI.MCUnit
MCUnitDefinition = _COPASI.MCUnitDefinition
MCJitCompilation = _COPASI.MCJitCompilation
class CCopasiMessage(_object):
    """Proxy of C++ CCopasiMessage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiMessage, name)
    __repr__ = _swig_repr
    RAW = _COPASI.CCopasiMessage_RAW
    TRACE = _COPASI.CCopasiMessage_TRACE
    COMMANDLINE = _COPASI.CCopasiMessage_COMMANDLINE
    WARNING = _COPASI.CCopasiMessage_WARNING
    ERROR = _COPASI.CCopasiMessage_ERROR
    EXCEPTION = _COPASI.CCopasiMessage_EXCEPTION
    RAW_FILTERED = _COPASI.CCopasiMessage_RAW_FILTERED
    TRACE_FILTERED = _COPASI.CCopasiMessage_TRACE_FILTERED
    COMMANDLINE_FILTERED = _COPASI.CCopasiMessage_COMMANDLINE_FILTERED
    WARNING_FILTERED = _COPASI.CCopasiMessage_WARNING_FILTERED
    ERROR_FILTERED = _COPASI.CCopasiMessage_ERROR_FILTERED
    EXCEPTION_FILTERED = _COPASI.CCopasiMessage_EXCEPTION_FILTERED

    def peekFirstMessage():
        """peekFirstMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_peekFirstMessage()

    peekFirstMessage = staticmethod(peekFirstMessage)

    def peekLastMessage():
        """peekLastMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_peekLastMessage()

    peekLastMessage = staticmethod(peekLastMessage)

    def getFirstMessage():
        """getFirstMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_getFirstMessage()

    getFirstMessage = staticmethod(getFirstMessage)

    def getLastMessage():
        """getLastMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_getLastMessage()

    getLastMessage = staticmethod(getLastMessage)

    def getAllMessageText(chronological=True):
        """
        getAllMessageText(bool const & chronological=True) -> std::string
        getAllMessageText() -> std::string
        """
        return _COPASI.CCopasiMessage_getAllMessageText(chronological)

    getAllMessageText = staticmethod(getAllMessageText)

    def clearDeque():
        """clearDeque()"""
        return _COPASI.CCopasiMessage_clearDeque()

    clearDeque = staticmethod(clearDeque)

    def size():
        """size() -> size_t"""
        return _COPASI.CCopasiMessage_size()

    size = staticmethod(size)

    def getHighestSeverity():
        """getHighestSeverity() -> CCopasiMessage::Type"""
        return _COPASI.CCopasiMessage_getHighestSeverity()

    getHighestSeverity = staticmethod(getHighestSeverity)

    def checkForMessage(number):
        """checkForMessage(size_t const & number) -> bool"""
        return _COPASI.CCopasiMessage_checkForMessage(number)

    checkForMessage = staticmethod(checkForMessage)

    def setIsGUI(isGUI):
        """setIsGUI(bool const & isGUI)"""
        return _COPASI.CCopasiMessage_setIsGUI(isGUI)

    setIsGUI = staticmethod(setIsGUI)
    __swig_destroy__ = _COPASI.delete_CCopasiMessage
    __del__ = lambda self: None

    def getText(self):
        """getText(CCopasiMessage self) -> std::string const &"""
        return _COPASI.CCopasiMessage_getText(self)


    def getType(self):
        """getType(CCopasiMessage self) -> CCopasiMessage::Type const &"""
        return _COPASI.CCopasiMessage_getType(self)


    def getNumber(self):
        """getNumber(CCopasiMessage self) -> size_t const &"""
        return _COPASI.CCopasiMessage_getNumber(self)


    def __init__(self, *args):
        """
        __init__(CCopasiMessage self) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage src) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format, char const * arg) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number, char const * arg) -> CCopasiMessage
        """
        this = _COPASI.new_CCopasiMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CCopasiMessage_swigregister = _COPASI.CCopasiMessage_swigregister
CCopasiMessage_swigregister(CCopasiMessage)

def CCopasiMessage_peekFirstMessage():
    """CCopasiMessage_peekFirstMessage() -> CCopasiMessage"""
    return _COPASI.CCopasiMessage_peekFirstMessage()

def CCopasiMessage_peekLastMessage():
    """CCopasiMessage_peekLastMessage() -> CCopasiMessage"""
    return _COPASI.CCopasiMessage_peekLastMessage()

def CCopasiMessage_getFirstMessage():
    """CCopasiMessage_getFirstMessage() -> CCopasiMessage"""
    return _COPASI.CCopasiMessage_getFirstMessage()

def CCopasiMessage_getLastMessage():
    """CCopasiMessage_getLastMessage() -> CCopasiMessage"""
    return _COPASI.CCopasiMessage_getLastMessage()

def CCopasiMessage_getAllMessageText(chronological=True):
    """
    getAllMessageText(bool const & chronological=True) -> std::string
    CCopasiMessage_getAllMessageText() -> std::string
    """
    return _COPASI.CCopasiMessage_getAllMessageText(chronological)

def CCopasiMessage_clearDeque():
    """CCopasiMessage_clearDeque()"""
    return _COPASI.CCopasiMessage_clearDeque()

def CCopasiMessage_size():
    """CCopasiMessage_size() -> size_t"""
    return _COPASI.CCopasiMessage_size()

def CCopasiMessage_getHighestSeverity():
    """CCopasiMessage_getHighestSeverity() -> CCopasiMessage::Type"""
    return _COPASI.CCopasiMessage_getHighestSeverity()

def CCopasiMessage_checkForMessage(number):
    """CCopasiMessage_checkForMessage(size_t const & number) -> bool"""
    return _COPASI.CCopasiMessage_checkForMessage(number)

def CCopasiMessage_setIsGUI(isGUI):
    """CCopasiMessage_setIsGUI(bool const & isGUI)"""
    return _COPASI.CCopasiMessage_setIsGUI(isGUI)

class CKeyFactory(_object):
    """Proxy of C++ CKeyFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CKeyFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CKeyFactory, name)
    __repr__ = _swig_repr

    def isValidKey(*args):
        """
        isValidKey(std::string const & key, std::string const & prefix) -> bool
        isValidKey(std::string const & key) -> bool
        """
        return _COPASI.CKeyFactory_isValidKey(*args)

    isValidKey = staticmethod(isValidKey)

    def __init__(self):
        """__init__(CKeyFactory self) -> CKeyFactory"""
        this = _COPASI.new_CKeyFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CKeyFactory
    __del__ = lambda self: None

    def get(self, key):
        """get(CKeyFactory self, std::string const & key) -> CDataObject"""
        return _COPASI.CKeyFactory_get(self, key)

CKeyFactory_swigregister = _COPASI.CKeyFactory_swigregister
CKeyFactory_swigregister(CKeyFactory)

def CKeyFactory_isValidKey(*args):
    """
    isValidKey(std::string const & key, std::string const & prefix) -> bool
    CKeyFactory_isValidKey(std::string const & key) -> bool
    """
    return _COPASI.CKeyFactory_isValidKey(*args)

class CCopasiException(Exception):
    """Proxy of C++ CCopasiException class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiException, name)
    __repr__ = _swig_repr

    def __init__(self, message):
        """__init__(CCopasiException self, CCopasiMessage message) -> CCopasiException"""
        this = _COPASI.new_CCopasiException(message)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiException
    __del__ = lambda self: None

    def getMessage(self):
        """getMessage(CCopasiException self) -> CCopasiMessage"""
        return _COPASI.CCopasiException_getMessage(self)

CCopasiException_swigregister = _COPASI.CCopasiException_swigregister
CCopasiException_swigregister(CCopasiException)

class CDataObject(CObjectInterface, CUndoObjectInterface):
    """Proxy of C++ CDataObject class."""

    __swig_setmethods__ = {}
    for _s in [CObjectInterface, CUndoObjectInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CObjectInterface, CUndoObjectInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataObject, name)
    __repr__ = _swig_repr
    Container = _COPASI.CDataObject_Container
    Vector = _COPASI.CDataObject_Vector
    Matrix = _COPASI.CDataObject_Matrix
    NameVector = _COPASI.CDataObject_NameVector
    Reference = _COPASI.CDataObject_Reference
    ValueBool = _COPASI.CDataObject_ValueBool
    ValueInt = _COPASI.CDataObject_ValueInt
    ValueInt64 = _COPASI.CDataObject_ValueInt64
    ValueDbl = _COPASI.CDataObject_ValueDbl
    NonUniqueName = _COPASI.CDataObject_NonUniqueName
    StaticString = _COPASI.CDataObject_StaticString
    ValueString = _COPASI.CDataObject_ValueString
    Separator = _COPASI.CDataObject_Separator
    DisplayName = _COPASI.CDataObject_DisplayName
    ModelEntity = _COPASI.CDataObject_ModelEntity
    Array = _COPASI.CDataObject_Array
    DataModel = _COPASI.CDataObject_DataModel
    Root = _COPASI.CDataObject_Root
    Gui = _COPASI.CDataObject_Gui
    __SIZE = _COPASI.CDataObject___SIZE

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CDataObject"""
        return _COPASI.CDataObject_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def sanitizeObjectName(name):
        """sanitizeObjectName(std::string & name)"""
        return _COPASI.CDataObject_sanitizeObjectName(name)

    sanitizeObjectName = staticmethod(sanitizeObjectName)

    def __init__(self, src, pParent=None):
        """
        __init__(CDataObject self, CDataObject src, CDataContainer pParent=None) -> CDataObject
        __init__(CDataObject self, CDataObject src) -> CDataObject
        """
        this = _COPASI.new_CDataObject(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataObject
    __del__ = lambda self: None

    def calculateValue(self):
        """calculateValue(CDataObject self)"""
        return _COPASI.CDataObject_calculateValue(self)


    def getCN(self):
        """getCN(CDataObject self) -> CCommonName"""
        return _COPASI.CDataObject_getCN(self)


    def getObject(self, cn):
        """getObject(CDataObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataObject_getObject(self, cn)


    def getDataObject(self):
        """getDataObject(CDataObject self) -> CDataObject"""
        return _COPASI.CDataObject_getDataObject(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CDataObject self) -> std::string"""
        return _COPASI.CDataObject_getObjectDisplayName(self)


    def validityChanged(self, changedValidity):
        """validityChanged(CDataObject self, CValidity changedValidity)"""
        return _COPASI.CDataObject_validityChanged(self, changedValidity)


    def validityRemoved(self, changedValidity):
        """validityRemoved(CDataObject self, CValidity changedValidity)"""
        return _COPASI.CDataObject_validityRemoved(self, changedValidity)


    def setObjectName(self, name):
        """setObjectName(CDataObject self, std::string const & name) -> bool"""
        return _COPASI.CDataObject_setObjectName(self, name)


    def getObjectName(self):
        """getObjectName(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getObjectName(self)


    def getObjectType(self):
        """getObjectType(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getObjectType(self)


    def setObjectParent(self, pParent):
        """setObjectParent(CDataObject self, CDataContainer pParent) -> bool"""
        return _COPASI.CDataObject_setObjectParent(self, pParent)


    def getObjectParent(self):
        """getObjectParent(CDataObject self) -> CDataContainer"""
        return _COPASI.CDataObject_getObjectParent(self)


    def addReference(self, pReference):
        """addReference(CDataObject self, CDataContainer pReference)"""
        return _COPASI.CDataObject_addReference(self, pReference)


    def removeReference(self, pReference):
        """removeReference(CDataObject self, CDataContainer pReference)"""
        return _COPASI.CDataObject_removeReference(self, pReference)


    def getObjectDataModel(self):
        """getObjectDataModel(CDataObject self) -> CDataModel"""
        return _COPASI.CDataObject_getObjectDataModel(self)


    def getObjectAncestor(self, type):
        """getObjectAncestor(CDataObject self, std::string const & type) -> CDataContainer"""
        return _COPASI.CDataObject_getObjectAncestor(self, type)


    def prerequisitsContains(self, objects):
        """prerequisitsContains(CDataObject self, DataObjectSet objects) -> bool"""
        return _COPASI.CDataObject_prerequisitsContains(self, objects)


    def getUnits(self):
        """getUnits(CDataObject self) -> std::string const"""
        return _COPASI.CDataObject_getUnits(self)


    def hasFlag(self, flag):
        """hasFlag(CDataObject self, CDataObject::Flag const & flag) -> bool"""
        return _COPASI.CDataObject_hasFlag(self, flag)


    def getValueObject(self):
        """getValueObject(CDataObject self) -> CDataObject"""
        return _COPASI.CDataObject_getValueObject(self)


    def getKey(self):
        """getKey(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getKey(self)


    def getObjectFromCN(self, cn):
        """getObjectFromCN(CDataObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataObject_getObjectFromCN(self, cn)


    def addIssue(self, issue):
        """addIssue(CDataObject self, CIssue issue)"""
        return _COPASI.CDataObject_addIssue(self, issue)


    def removeIssue(self, issue):
        """removeIssue(CDataObject self, CIssue issue)"""
        return _COPASI.CDataObject_removeIssue(self, issue)

CDataObject_swigregister = _COPASI.CDataObject_swigregister
CDataObject_swigregister(CDataObject)

def CDataObject_fromData(data, pParent):
    """CDataObject_fromData(CData data, CUndoObjectInterface pParent) -> CDataObject"""
    return _COPASI.CDataObject_fromData(data, pParent)

def CDataObject_sanitizeObjectName(name):
    """CDataObject_sanitizeObjectName(std::string & name)"""
    return _COPASI.CDataObject_sanitizeObjectName(name)

class DataObjectSet(_object):
    """Proxy of C++ std::set<(p.q(const).CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DataObjectSet self) -> SwigPyIterator"""
        return _COPASI.DataObjectSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet___nonzero__(self)


    def __bool__(self):
        """__bool__(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet___bool__(self)


    def __len__(self):
        """__len__(DataObjectSet self) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet___len__(self)


    def append(self, x):
        """append(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_append(self, x)


    def __contains__(self, x):
        """__contains__(DataObjectSet self, CDataObject x) -> bool"""
        return _COPASI.DataObjectSet___contains__(self, x)


    def __getitem__(self, i):
        """__getitem__(DataObjectSet self, std::set< CDataObject const * >::difference_type i) -> CDataObject"""
        return _COPASI.DataObjectSet___getitem__(self, i)


    def add(self, x):
        """add(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_add(self, x)


    def discard(self, x):
        """discard(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(p.q(const).CDataObject)> self, std::less< CDataObject const * > const & arg2) -> DataObjectSet
        __init__(std::set<(p.q(const).CDataObject)> self) -> DataObjectSet
        __init__(std::set<(p.q(const).CDataObject)> self, DataObjectSet arg2) -> DataObjectSet
        """
        this = _COPASI.new_DataObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet_empty(self)


    def size(self):
        """size(DataObjectSet self) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet_size(self)


    def clear(self):
        """clear(DataObjectSet self)"""
        return _COPASI.DataObjectSet_clear(self)


    def swap(self, v):
        """swap(DataObjectSet self, DataObjectSet v)"""
        return _COPASI.DataObjectSet_swap(self, v)


    def count(self, x):
        """count(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet_count(self, x)


    def rbegin(self):
        """rbegin(DataObjectSet self) -> std::set< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectSet_rbegin(self)


    def rend(self):
        """rend(DataObjectSet self) -> std::set< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectSet_rend(self)


    def erase(self, *args):
        """
        erase(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::size_type
        erase(DataObjectSet self, std::set< CDataObject const * >::iterator pos)
        erase(DataObjectSet self, std::set< CDataObject const * >::iterator first, std::set< CDataObject const * >::iterator last)
        """
        return _COPASI.DataObjectSet_erase(self, *args)


    def find(self, x):
        """find(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_find(self, x)


    def lower_bound(self, x):
        """lower_bound(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_upper_bound(self, x)


    def equal_range(self, x):
        """equal_range(DataObjectSet self, CDataObject x) -> std::pair< std::set< CDataObject const * >::iterator,std::set< CDataObject const * >::iterator >"""
        return _COPASI.DataObjectSet_equal_range(self, x)


    def insert(self, __x):
        """insert(DataObjectSet self, CDataObject __x) -> std::pair< std::set< CDataObject const * >::iterator,bool >"""
        return _COPASI.DataObjectSet_insert(self, __x)

    __swig_destroy__ = _COPASI.delete_DataObjectSet
    __del__ = lambda self: None
DataObjectSet_swigregister = _COPASI.DataObjectSet_swigregister
DataObjectSet_swigregister(DataObjectSet)

class DataObjectMap(_object):
    """Proxy of C++ std::map<(p.q(const).CDataObject,p.q(const).CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap___nonzero__(self)


    def __bool__(self):
        """__bool__(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap___bool__(self)


    def __len__(self):
        """__len__(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(DataObjectMap self, CDataObject key) -> CDataObject"""
        return _COPASI.DataObjectMap___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(DataObjectMap self, CDataObject key)"""
        return _COPASI.DataObjectMap___delitem__(self, key)


    def has_key(self, key):
        """has_key(DataObjectMap self, CDataObject key) -> bool"""
        return _COPASI.DataObjectMap_has_key(self, key)


    def keys(self):
        """keys(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_keys(self)


    def values(self):
        """values(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_values(self)


    def items(self):
        """items(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_items(self)


    def __contains__(self, key):
        """__contains__(DataObjectMap self, CDataObject key) -> bool"""
        return _COPASI.DataObjectMap___contains__(self, key)


    def key_iterator(self):
        """key_iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_key_iterator(self)


    def value_iterator(self):
        """value_iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(DataObjectMap self, CDataObject key)
        __setitem__(DataObjectMap self, CDataObject key, CDataObject x)
        """
        return _COPASI.DataObjectMap___setitem__(self, *args)


    def asdict(self):
        """asdict(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(p.q(const).CDataObject,p.q(const).CDataObject)> self, std::less< CDataObject const * > const & arg2) -> DataObjectMap
        __init__(std::map<(p.q(const).CDataObject,p.q(const).CDataObject)> self) -> DataObjectMap
        __init__(std::map<(p.q(const).CDataObject,p.q(const).CDataObject)> self, DataObjectMap arg2) -> DataObjectMap
        """
        this = _COPASI.new_DataObjectMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap_empty(self)


    def size(self):
        """size(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap_size(self)


    def swap(self, v):
        """swap(DataObjectMap self, DataObjectMap v)"""
        return _COPASI.DataObjectMap_swap(self, v)


    def rbegin(self):
        """rbegin(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectMap_rbegin(self)


    def rend(self):
        """rend(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectMap_rend(self)


    def clear(self):
        """clear(DataObjectMap self)"""
        return _COPASI.DataObjectMap_clear(self)


    def get_allocator(self):
        """get_allocator(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::allocator_type"""
        return _COPASI.DataObjectMap_get_allocator(self)


    def count(self, x):
        """count(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap_count(self, x)


    def erase(self, *args):
        """
        erase(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::size_type
        erase(DataObjectMap self, std::map< CDataObject const *,CDataObject const * >::iterator position)
        erase(DataObjectMap self, std::map< CDataObject const *,CDataObject const * >::iterator first, std::map< CDataObject const *,CDataObject const * >::iterator last)
        """
        return _COPASI.DataObjectMap_erase(self, *args)


    def find(self, x):
        """find(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_find(self, x)


    def lower_bound(self, x):
        """lower_bound(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_upper_bound(self, x)

    __swig_destroy__ = _COPASI.delete_DataObjectMap
    __del__ = lambda self: None
DataObjectMap_swigregister = _COPASI.DataObjectMap_swigregister
DataObjectMap_swigregister(DataObjectMap)

class DataObjectVector(_object):
    """Proxy of C++ std::vector<(p.q(const).CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DataObjectVector self) -> SwigPyIterator"""
        return _COPASI.DataObjectVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector___nonzero__(self)


    def __bool__(self):
        """__bool__(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector___bool__(self)


    def __len__(self):
        """__len__(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j) -> DataObjectVector"""
        return _COPASI.DataObjectVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j)
        __setslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j, DataObjectVector v)
        """
        return _COPASI.DataObjectVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j)"""
        return _COPASI.DataObjectVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i)
        __delitem__(DataObjectVector self, PySliceObject * slice)
        """
        return _COPASI.DataObjectVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DataObjectVector self, PySliceObject * slice) -> DataObjectVector
        __getitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i) -> CDataObject
        """
        return _COPASI.DataObjectVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DataObjectVector self, PySliceObject * slice, DataObjectVector v)
        __setitem__(DataObjectVector self, PySliceObject * slice)
        __setitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, CDataObject x)
        """
        return _COPASI.DataObjectVector___setitem__(self, *args)


    def pop(self):
        """pop(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_pop(self)


    def append(self, x):
        """append(DataObjectVector self, CDataObject x)"""
        return _COPASI.DataObjectVector_append(self, x)


    def empty(self):
        """empty(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector_empty(self)


    def size(self):
        """size(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector_size(self)


    def swap(self, v):
        """swap(DataObjectVector self, DataObjectVector v)"""
        return _COPASI.DataObjectVector_swap(self, v)


    def rbegin(self):
        """rbegin(DataObjectVector self) -> std::vector< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectVector_rbegin(self)


    def rend(self):
        """rend(DataObjectVector self) -> std::vector< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectVector_rend(self)


    def clear(self):
        """clear(DataObjectVector self)"""
        return _COPASI.DataObjectVector_clear(self)


    def get_allocator(self):
        """get_allocator(DataObjectVector self) -> std::vector< CDataObject const * >::allocator_type"""
        return _COPASI.DataObjectVector_get_allocator(self)


    def pop_back(self):
        """pop_back(DataObjectVector self)"""
        return _COPASI.DataObjectVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DataObjectVector self, std::vector< CDataObject const * >::iterator pos) -> std::vector< CDataObject const * >::iterator
        erase(DataObjectVector self, std::vector< CDataObject const * >::iterator first, std::vector< CDataObject const * >::iterator last) -> std::vector< CDataObject const * >::iterator
        """
        return _COPASI.DataObjectVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.q(const).CDataObject)> self) -> DataObjectVector
        __init__(std::vector<(p.q(const).CDataObject)> self, DataObjectVector arg2) -> DataObjectVector
        __init__(std::vector<(p.q(const).CDataObject)> self, std::vector< CDataObject const * >::size_type size) -> DataObjectVector
        __init__(std::vector<(p.q(const).CDataObject)> self, std::vector< CDataObject const * >::size_type size, CDataObject value) -> DataObjectVector
        """
        this = _COPASI.new_DataObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(DataObjectVector self, CDataObject x)"""
        return _COPASI.DataObjectVector_push_back(self, x)


    def front(self):
        """front(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_front(self)


    def back(self):
        """back(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_back(self)


    def assign(self, n, x):
        """assign(DataObjectVector self, std::vector< CDataObject const * >::size_type n, CDataObject x)"""
        return _COPASI.DataObjectVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DataObjectVector self, std::vector< CDataObject const * >::size_type new_size)
        resize(DataObjectVector self, std::vector< CDataObject const * >::size_type new_size, CDataObject x)
        """
        return _COPASI.DataObjectVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DataObjectVector self, std::vector< CDataObject const * >::iterator pos, CDataObject x) -> std::vector< CDataObject const * >::iterator
        insert(DataObjectVector self, std::vector< CDataObject const * >::iterator pos, std::vector< CDataObject const * >::size_type n, CDataObject x)
        """
        return _COPASI.DataObjectVector_insert(self, *args)


    def reserve(self, n):
        """reserve(DataObjectVector self, std::vector< CDataObject const * >::size_type n)"""
        return _COPASI.DataObjectVector_reserve(self, n)


    def capacity(self):
        """capacity(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_DataObjectVector
    __del__ = lambda self: None
DataObjectVector_swigregister = _COPASI.DataObjectVector_swigregister
DataObjectVector_swigregister(DataObjectVector)

class VectorOfDataObjectVector(_object):
    """Proxy of C++ std::vector<(std::vector<(p.q(const).CDataObject)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfDataObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfDataObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorOfDataObjectVector self) -> SwigPyIterator"""
        return _COPASI.VectorOfDataObjectVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector___bool__(self)


    def __len__(self):
        """__len__(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j) -> VectorOfDataObjectVector"""
        return _COPASI.VectorOfDataObjectVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j)
        __setslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j, VectorOfDataObjectVector v)
        """
        return _COPASI.VectorOfDataObjectVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j)"""
        return _COPASI.VectorOfDataObjectVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i)
        __delitem__(VectorOfDataObjectVector self, PySliceObject * slice)
        """
        return _COPASI.VectorOfDataObjectVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorOfDataObjectVector self, PySliceObject * slice) -> VectorOfDataObjectVector
        __getitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i) -> DataObjectVector
        """
        return _COPASI.VectorOfDataObjectVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorOfDataObjectVector self, PySliceObject * slice, VectorOfDataObjectVector v)
        __setitem__(VectorOfDataObjectVector self, PySliceObject * slice)
        __setitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector___setitem__(self, *args)


    def pop(self):
        """pop(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_pop(self)


    def append(self, x):
        """append(VectorOfDataObjectVector self, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_append(self, x)


    def empty(self):
        """empty(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector_empty(self)


    def size(self):
        """size(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector_size(self)


    def swap(self, v):
        """swap(VectorOfDataObjectVector self, VectorOfDataObjectVector v)"""
        return _COPASI.VectorOfDataObjectVector_swap(self, v)


    def rbegin(self):
        """rbegin(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::reverse_iterator"""
        return _COPASI.VectorOfDataObjectVector_rbegin(self)


    def rend(self):
        """rend(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::reverse_iterator"""
        return _COPASI.VectorOfDataObjectVector_rend(self)


    def clear(self):
        """clear(VectorOfDataObjectVector self)"""
        return _COPASI.VectorOfDataObjectVector_clear(self)


    def get_allocator(self):
        """get_allocator(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::allocator_type"""
        return _COPASI.VectorOfDataObjectVector_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorOfDataObjectVector self)"""
        return _COPASI.VectorOfDataObjectVector_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos) -> std::vector< std::vector< CDataObject const * > >::iterator
        erase(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator first, std::vector< std::vector< CDataObject const * > >::iterator last) -> std::vector< std::vector< CDataObject const * > >::iterator
        """
        return _COPASI.VectorOfDataObjectVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(p.q(const).CDataObject)>)> self) -> VectorOfDataObjectVector
        __init__(std::vector<(std::vector<(p.q(const).CDataObject)>)> self, VectorOfDataObjectVector arg2) -> VectorOfDataObjectVector
        __init__(std::vector<(std::vector<(p.q(const).CDataObject)>)> self, std::vector< std::vector< CDataObject const * > >::size_type size) -> VectorOfDataObjectVector
        __init__(std::vector<(std::vector<(p.q(const).CDataObject)>)> self, std::vector< std::vector< CDataObject const * > >::size_type size, DataObjectVector value) -> VectorOfDataObjectVector
        """
        this = _COPASI.new_VectorOfDataObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorOfDataObjectVector self, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_push_back(self, x)


    def front(self):
        """front(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_front(self)


    def back(self):
        """back(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_back(self)


    def assign(self, n, x):
        """assign(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type n, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type new_size)
        resize(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type new_size, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos, DataObjectVector x) -> std::vector< std::vector< CDataObject const * > >::iterator
        insert(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos, std::vector< std::vector< CDataObject const * > >::size_type n, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type n)"""
        return _COPASI.VectorOfDataObjectVector_reserve(self, n)


    def capacity(self):
        """capacity(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_VectorOfDataObjectVector
    __del__ = lambda self: None
VectorOfDataObjectVector_swigregister = _COPASI.VectorOfDataObjectVector_swigregister
VectorOfDataObjectVector_swigregister(VectorOfDataObjectVector)

class FloatReference(CDataObject):
    """Proxy of C++ CDataObjectReference<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatReference, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatReference, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FloatReference
    __del__ = lambda self: None

    def getValueObject(self):
        """getValueObject(FloatReference self) -> CDataObject"""
        return _COPASI.FloatReference_getValueObject(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(FloatReference self) -> std::string"""
        return _COPASI.FloatReference_getObjectDisplayName(self)

FloatReference_swigregister = _COPASI.FloatReference_swigregister
FloatReference_swigregister(FloatReference)

class CDataContainer(CDataObject):
    """Proxy of C++ CDataContainer class."""

    __swig_setmethods__ = {}
    for _s in [CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataContainer, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CDataContainer"""
        return _COPASI.CDataContainer_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def appendDeletedDependentData(self, undoData):
        """appendDeletedDependentData(CDataContainer self, CUndoData undoData) -> bool"""
        return _COPASI.CDataContainer_appendDeletedDependentData(self, undoData)


    def __init__(self, *args):
        """
        __init__(CDataContainer self, std::string const & name, CDataContainer pParent, std::string const & type, CFlags< CDataObject::Flag > const & flag) -> CDataContainer
        __init__(CDataContainer self, CDataContainer src, CDataContainer pParent) -> CDataContainer
        """
        this = _COPASI.new_CDataContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataContainer
    __del__ = lambda self: None

    def getObject(self, cn):
        """getObject(CDataContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataContainer_getObject(self, cn)


    def getValueObject(self):
        """getValueObject(CDataContainer self) -> CDataObject"""
        return _COPASI.CDataContainer_getValueObject(self)


    def add(self, pObject, adopt=True):
        """add(CDataContainer self, CDataObject pObject) -> bool"""
        return _COPASI.CDataContainer_add(self, pObject, adopt)


    def objectRenamed(self, pObject, oldName):
        """objectRenamed(CDataContainer self, CDataObject pObject, std::string const & oldName)"""
        return _COPASI.CDataContainer_objectRenamed(self, pObject, oldName)


    def getUnits(self):
        """getUnits(CDataContainer self) -> std::string const"""
        return _COPASI.CDataContainer_getUnits(self)


    def getChildObjectUnits(self, pObject):
        """getChildObjectUnits(CDataContainer self, CDataObject pObject) -> std::string"""
        return _COPASI.CDataContainer_getChildObjectUnits(self, pObject)


    def getIndex(self, pObject):
        """getIndex(CDataContainer self, CDataObject pObject) -> size_t"""
        return _COPASI.CDataContainer_getIndex(self, pObject)


    def getDescendants(self, descendants, recursive=False):
        """
        getDescendants(CDataContainer self, DataObjectSet descendants, bool const & recursive=False)
        getDescendants(CDataContainer self, DataObjectSet descendants)
        """
        return _COPASI.CDataContainer_getDescendants(self, descendants, recursive)


    __metaclass__ = AutoProperty

CDataContainer_swigregister = _COPASI.CDataContainer_swigregister
CDataContainer_swigregister(CDataContainer)
CDataContainer.EmptyList = _COPASI.cvar.CDataContainer_EmptyList

def CDataContainer_fromData(data, pParent):
    """CDataContainer_fromData(CData data, CUndoObjectInterface pParent) -> CDataContainer"""
    return _COPASI.CDataContainer_fromData(data, pParent)

class ContainerList(_object):
    """Proxy of C++ std::vector<(p.q(const).CDataContainer)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ContainerList self) -> SwigPyIterator"""
        return _COPASI.ContainerList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ContainerList self) -> bool"""
        return _COPASI.ContainerList___nonzero__(self)


    def __bool__(self):
        """__bool__(ContainerList self) -> bool"""
        return _COPASI.ContainerList___bool__(self)


    def __len__(self):
        """__len__(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j) -> ContainerList"""
        return _COPASI.ContainerList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j)
        __setslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j, ContainerList v)
        """
        return _COPASI.ContainerList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j)"""
        return _COPASI.ContainerList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i)
        __delitem__(ContainerList self, PySliceObject * slice)
        """
        return _COPASI.ContainerList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ContainerList self, PySliceObject * slice) -> ContainerList
        __getitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i) -> CDataContainer
        """
        return _COPASI.ContainerList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ContainerList self, PySliceObject * slice, ContainerList v)
        __setitem__(ContainerList self, PySliceObject * slice)
        __setitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, CDataContainer x)
        """
        return _COPASI.ContainerList___setitem__(self, *args)


    def pop(self):
        """pop(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_pop(self)


    def append(self, x):
        """append(ContainerList self, CDataContainer x)"""
        return _COPASI.ContainerList_append(self, x)


    def empty(self):
        """empty(ContainerList self) -> bool"""
        return _COPASI.ContainerList_empty(self)


    def size(self):
        """size(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList_size(self)


    def swap(self, v):
        """swap(ContainerList self, ContainerList v)"""
        return _COPASI.ContainerList_swap(self, v)


    def rbegin(self):
        """rbegin(ContainerList self) -> std::vector< CDataContainer const * >::reverse_iterator"""
        return _COPASI.ContainerList_rbegin(self)


    def rend(self):
        """rend(ContainerList self) -> std::vector< CDataContainer const * >::reverse_iterator"""
        return _COPASI.ContainerList_rend(self)


    def clear(self):
        """clear(ContainerList self)"""
        return _COPASI.ContainerList_clear(self)


    def get_allocator(self):
        """get_allocator(ContainerList self) -> std::vector< CDataContainer const * >::allocator_type"""
        return _COPASI.ContainerList_get_allocator(self)


    def pop_back(self):
        """pop_back(ContainerList self)"""
        return _COPASI.ContainerList_pop_back(self)


    def erase(self, *args):
        """
        erase(ContainerList self, std::vector< CDataContainer const * >::iterator pos) -> std::vector< CDataContainer const * >::iterator
        erase(ContainerList self, std::vector< CDataContainer const * >::iterator first, std::vector< CDataContainer const * >::iterator last) -> std::vector< CDataContainer const * >::iterator
        """
        return _COPASI.ContainerList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.q(const).CDataContainer)> self) -> ContainerList
        __init__(std::vector<(p.q(const).CDataContainer)> self, ContainerList arg2) -> ContainerList
        __init__(std::vector<(p.q(const).CDataContainer)> self, std::vector< CDataContainer const * >::size_type size) -> ContainerList
        __init__(std::vector<(p.q(const).CDataContainer)> self, std::vector< CDataContainer const * >::size_type size, CDataContainer value) -> ContainerList
        """
        this = _COPASI.new_ContainerList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ContainerList self, CDataContainer x)"""
        return _COPASI.ContainerList_push_back(self, x)


    def front(self):
        """front(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_front(self)


    def back(self):
        """back(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_back(self)


    def assign(self, n, x):
        """assign(ContainerList self, std::vector< CDataContainer const * >::size_type n, CDataContainer x)"""
        return _COPASI.ContainerList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ContainerList self, std::vector< CDataContainer const * >::size_type new_size)
        resize(ContainerList self, std::vector< CDataContainer const * >::size_type new_size, CDataContainer x)
        """
        return _COPASI.ContainerList_resize(self, *args)


    def insert(self, *args):
        """
        insert(ContainerList self, std::vector< CDataContainer const * >::iterator pos, CDataContainer x) -> std::vector< CDataContainer const * >::iterator
        insert(ContainerList self, std::vector< CDataContainer const * >::iterator pos, std::vector< CDataContainer const * >::size_type n, CDataContainer x)
        """
        return _COPASI.ContainerList_insert(self, *args)


    def reserve(self, n):
        """reserve(ContainerList self, std::vector< CDataContainer const * >::size_type n)"""
        return _COPASI.ContainerList_reserve(self, n)


    def capacity(self):
        """capacity(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList_capacity(self)

    __swig_destroy__ = _COPASI.delete_ContainerList
    __del__ = lambda self: None
ContainerList_swigregister = _COPASI.ContainerList_swigregister
ContainerList_swigregister(ContainerList)

class CDataArray(CDataContainer):
    """Proxy of C++ CDataArray class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataArray, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataArray, name)
    __repr__ = _swig_repr
    Mode_Objects = _COPASI.CDataArray_Mode_Objects
    Mode_Vector = _COPASI.CDataArray_Mode_Vector
    Mode_VectorOnTheFly = _COPASI.CDataArray_Mode_VectorOnTheFly
    Mode_Strings = _COPASI.CDataArray_Mode_Strings
    Mode_Numbers = _COPASI.CDataArray_Mode_Numbers
    Mode___SIZE = _COPASI.CDataArray_Mode___SIZE

    def __init__(self, name, pParent, array, adopt):
        """__init__(CDataArray self, std::string const & name, CDataContainer pParent, CArrayInterface array, bool const & adopt) -> CDataArray"""
        this = _COPASI.new_CDataArray(name, pParent, array, adopt)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataArray
    __del__ = lambda self: None

    def setArray(self, a):
        """setArray(CDataArray self, CArrayInterface a)"""
        return _COPASI.CDataArray_setArray(self, a)


    def array(self):
        """array(CDataArray self) -> CArrayInterface"""
        return _COPASI.CDataArray_array(self)


    def setMode(self, *args):
        """
        setMode(CDataArray self, size_t d, CDataArray::Mode m)
        setMode(CDataArray self, CDataArray::Mode m)
        """
        return _COPASI.CDataArray_setMode(self, *args)


    def getMode(self, d):
        """getMode(CDataArray self, size_t d) -> CDataArray::Mode"""
        return _COPASI.CDataArray_getMode(self, d)


    def getDefaultMode(self):
        """getDefaultMode(CDataArray self) -> CDataArray::Mode"""
        return _COPASI.CDataArray_getDefaultMode(self)


    def dimensionality(self):
        """dimensionality(CDataArray self) -> size_t"""
        return _COPASI.CDataArray_dimensionality(self)


    def size(self):
        """size(CDataArray self) -> SizeTStdVector"""
        return _COPASI.CDataArray_size(self)


    def setAnnotation(self, d, i, pObject):
        """setAnnotation(CDataArray self, size_t d, size_t i, CDataObject pObject)"""
        return _COPASI.CDataArray_setAnnotation(self, d, i, pObject)


    def setAnnotationString(self, d, i, s):
        """setAnnotationString(CDataArray self, size_t d, size_t i, std::string const s)"""
        return _COPASI.CDataArray_setAnnotationString(self, d, i, s)


    def getAnnotationsCN(self, d):
        """getAnnotationsCN(CDataArray self, size_t d) -> ReportItemVector"""
        return _COPASI.CDataArray_getAnnotationsCN(self, d)


    def getAnnotationsString(self, d, display=True):
        """
        getAnnotationsString(CDataArray self, size_t d, bool display=True) -> StringStdVector
        getAnnotationsString(CDataArray self, size_t d) -> StringStdVector
        """
        return _COPASI.CDataArray_getAnnotationsString(self, d, display)


    def getDimensionDescription(self, d):
        """getDimensionDescription(CDataArray self, size_t d) -> std::string const &"""
        return _COPASI.CDataArray_getDimensionDescription(self, d)


    def setDimensionDescription(self, d, s):
        """setDimensionDescription(CDataArray self, size_t d, std::string const & s)"""
        return _COPASI.CDataArray_setDimensionDescription(self, d, s)


    def getDescription(self):
        """getDescription(CDataArray self) -> std::string const &"""
        return _COPASI.CDataArray_getDescription(self)


    def setDescription(self, s):
        """setDescription(CDataArray self, std::string const & s)"""
        return _COPASI.CDataArray_setDescription(self, s)


    def resize(self):
        """resize(CDataArray self)"""
        return _COPASI.CDataArray_resize(self)


    def addElementReference(self, *args):
        """
        addElementReference(CDataArray self, SizeTStdVector index) -> CDataObject
        addElementReference(CDataArray self, StringStdVector nameIndex) -> CDataObject
        addElementReference(CDataArray self, int u, int v) -> CDataObject
        addElementReference(CDataArray self, int u) -> CDataObject
        """
        return _COPASI.CDataArray_addElementReference(self, *args)


    def getObject(self, cn):
        """getObject(CDataArray self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataArray_getObject(self, cn)


    def isEmpty(self):
        """isEmpty(CDataArray self) -> bool"""
        return _COPASI.CDataArray_isEmpty(self)


    def reDimensionalize(self, d):
        """reDimensionalize(CDataArray self, size_t d)"""
        return _COPASI.CDataArray_reDimensionalize(self, d)


    def resizeOneDimension(self, d):
        """resizeOneDimension(CDataArray self, size_t d)"""
        return _COPASI.CDataArray_resizeOneDimension(self, d)


    def printRecursively(self, ostream, level, index, display):
        """printRecursively(CDataArray self, std::ostream & ostream, size_t level, SizeTStdVector index, VectorOfStringVectors display)"""
        return _COPASI.CDataArray_printRecursively(self, ostream, level, index, display)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CDataArray self) -> std::string"""
        return _COPASI.CDataArray_getObjectDisplayName(self)


    def getArray(self):
        """getArray(CDataArray self) -> CArrayInterface"""
        return _COPASI.CDataArray_getArray(self)


    def displayNamesToCN(self, DisplayNames):
        """displayNamesToCN(CDataArray self, StringStdVector DisplayNames) -> StringStdVector"""
        return _COPASI.CDataArray_displayNamesToCN(self, DisplayNames)


    def cnToIndex(self, cnIndex):
        """cnToIndex(CDataArray self, StringStdVector cnIndex) -> SizeTStdVector"""
        return _COPASI.CDataArray_cnToIndex(self, cnIndex)

CDataArray_swigregister = _COPASI.CDataArray_swigregister
CDataArray_swigregister(CDataArray)

class CArrayInterface(_object):
    """Proxy of C++ CArrayInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArrayInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CArrayInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CArrayInterface
    __del__ = lambda self: None

    def size(self):
        """size(CArrayInterface self) -> SizeTStdVector"""
        return _COPASI.CArrayInterface_size(self)


    def dimensionality(self):
        """dimensionality(CArrayInterface self) -> size_t"""
        return _COPASI.CArrayInterface_dimensionality(self)


    def get(self, *args):
        """
        get(CArrayInterface self, SizeTStdVector MY_FUNNY_INDEX) -> CArrayInterface::data_type
        get(CArrayInterface self, int index1, int index2) -> CArrayInterface::data_type
        """
        return _COPASI.CArrayInterface_get(self, *args)

CArrayInterface_swigregister = _COPASI.CArrayInterface_swigregister
CArrayInterface_swigregister(CArrayInterface)

class CArray(CArrayInterface):
    """Proxy of C++ CArray class."""

    __swig_setmethods__ = {}
    for _s in [CArrayInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArray, name, value)
    __swig_getmethods__ = {}
    for _s in [CArrayInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CArray self) -> CArray
        __init__(CArray self, SizeTStdVector sizes) -> CArray
        """
        this = _COPASI.new_CArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CArray
    __del__ = lambda self: None

    def resize(self, sizes):
        """resize(CArray self, SizeTStdVector sizes)"""
        return _COPASI.CArray_resize(self, sizes)


    def size(self):
        """size(CArray self) -> SizeTStdVector"""
        return _COPASI.CArray_size(self)


    def dimensionality(self):
        """dimensionality(CArray self) -> size_t"""
        return _COPASI.CArray_dimensionality(self)

CArray_swigregister = _COPASI.CArray_swigregister
CArray_swigregister(CArray)

class AnnotatedFloatMatrix(CArrayInterface):
    """Proxy of C++ CMatrixInterface<(CMatrix<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [CArrayInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotatedFloatMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [CArrayInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotatedFloatMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, matrix):
        """__init__(CMatrixInterface<(CMatrix<(double)>)> self, FloatMatrix matrix) -> AnnotatedFloatMatrix"""
        this = _COPASI.new_AnnotatedFloatMatrix(matrix)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_AnnotatedFloatMatrix
    __del__ = lambda self: None

    def size(self):
        """size(AnnotatedFloatMatrix self) -> SizeTStdVector"""
        return _COPASI.AnnotatedFloatMatrix_size(self)


    def dimensionality(self):
        """dimensionality(AnnotatedFloatMatrix self) -> size_t"""
        return _COPASI.AnnotatedFloatMatrix_dimensionality(self)

AnnotatedFloatMatrix_swigregister = _COPASI.AnnotatedFloatMatrix_swigregister
AnnotatedFloatMatrix_swigregister(AnnotatedFloatMatrix)

class CAnnotation(_object):
    """Proxy of C++ CAnnotation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAnnotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAnnotation, name)
    __repr__ = _swig_repr

    def castObject(pObject):
        """castObject(CDataObject pObject) -> CAnnotation"""
        return _COPASI.CAnnotation_castObject(pObject)

    castObject = staticmethod(castObject)

    def allocateMiriamInfo(pParent):
        """allocateMiriamInfo(CDataContainer pParent) -> CMIRIAMInfo"""
        return _COPASI.CAnnotation_allocateMiriamInfo(pParent)

    allocateMiriamInfo = staticmethod(allocateMiriamInfo)

    def freeMiriamInfo(pParent):
        """freeMiriamInfo(CDataContainer pParent)"""
        return _COPASI.CAnnotation_freeMiriamInfo(pParent)

    freeMiriamInfo = staticmethod(freeMiriamInfo)

    def createUndoData(self, *args):
        """
        createUndoData(CAnnotation self, CUndoData undoData, CUndoData::Type const & type, CData oldData, CCore::Framework const & framework)
        createUndoData(CAnnotation self, CUndoData undoData, CUndoData::Type const & type, CData oldData)
        createUndoData(CAnnotation self, CUndoData undoData, CUndoData::Type const & type)
        """
        return _COPASI.CAnnotation_createUndoData(self, *args)


    def __init__(self, *args):
        """
        __init__(CAnnotation self) -> CAnnotation
        __init__(CAnnotation self, CAnnotation src) -> CAnnotation
        """
        this = _COPASI.new_CAnnotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CAnnotation
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getKey(self)


    def initMiriamAnnotation(self, newId):
        """initMiriamAnnotation(CAnnotation self, std::string const & newId)"""
        return _COPASI.CAnnotation_initMiriamAnnotation(self, newId)


    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        """setMiriamAnnotation(CAnnotation self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CAnnotation_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)


    def getMiriamAnnotation(self):
        """getMiriamAnnotation(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getMiriamAnnotation(self)


    def setNotes(self, notes):
        """setNotes(CAnnotation self, std::string const & notes)"""
        return _COPASI.CAnnotation_setNotes(self, notes)


    def getNotes(self):
        """getNotes(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getNotes(self)


    def addUnsupportedAnnotation(self, name, xml):
        """addUnsupportedAnnotation(CAnnotation self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CAnnotation_addUnsupportedAnnotation(self, name, xml)


    def replaceUnsupportedAnnotation(self, name, xml):
        """replaceUnsupportedAnnotation(CAnnotation self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CAnnotation_replaceUnsupportedAnnotation(self, name, xml)


    def removeUnsupportedAnnotation(self, name):
        """removeUnsupportedAnnotation(CAnnotation self, std::string const & name) -> bool"""
        return _COPASI.CAnnotation_removeUnsupportedAnnotation(self, name)


    def hasUnsupportedAnnotation(self, name):
        """hasUnsupportedAnnotation(CAnnotation self, std::string name) -> bool"""
        return _COPASI.CAnnotation_hasUnsupportedAnnotation(self, name)


    def getNumUnsupportedAnnotations(self):
        """getNumUnsupportedAnnotations(CAnnotation self) -> int"""
        return _COPASI.CAnnotation_getNumUnsupportedAnnotations(self)


    def getUnsupportedAnnotation(self, *args):
        """
        getUnsupportedAnnotation(CAnnotation self, std::string name) -> std::string
        getUnsupportedAnnotation(CAnnotation self, int index) -> std::string
        """
        return _COPASI.CAnnotation_getUnsupportedAnnotation(self, *args)


    def getUnsupportedAnnotationName(self, index):
        """getUnsupportedAnnotationName(CAnnotation self, int index) -> std::string"""
        return _COPASI.CAnnotation_getUnsupportedAnnotationName(self, index)

CAnnotation_swigregister = _COPASI.CAnnotation_swigregister
CAnnotation_swigregister(CAnnotation)

def CAnnotation_castObject(pObject):
    """CAnnotation_castObject(CDataObject pObject) -> CAnnotation"""
    return _COPASI.CAnnotation_castObject(pObject)

def CAnnotation_allocateMiriamInfo(pParent):
    """CAnnotation_allocateMiriamInfo(CDataContainer pParent) -> CMIRIAMInfo"""
    return _COPASI.CAnnotation_allocateMiriamInfo(pParent)

def CAnnotation_freeMiriamInfo(pParent):
    """CAnnotation_freeMiriamInfo(CDataContainer pParent)"""
    return _COPASI.CAnnotation_freeMiriamInfo(pParent)

class CEigen(CDataContainer):
    """Proxy of C++ CEigen class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEigen, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEigen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CEigen self, std::string const & name, CDataContainer pParent) -> CEigen
        __init__(CEigen self, std::string const & name) -> CEigen
        __init__(CEigen self) -> CEigen
        __init__(CEigen self, CEigen src, CDataContainer pParent) -> CEigen
        """
        this = _COPASI.new_CEigen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEigen
    __del__ = lambda self: None

    def initialize(self):
        """initialize(CEigen self)"""
        return _COPASI.CEigen_initialize(self)


    def cleanup(self):
        """cleanup(CEigen self)"""
        return _COPASI.CEigen_cleanup(self)


    def calcEigenValues(self, matrix):
        """calcEigenValues(CEigen self, FloatMatrix matrix)"""
        return _COPASI.CEigen_calcEigenValues(self, matrix)


    def stabilityAnalysis(self, resolution):
        """stabilityAnalysis(CEigen self, double const & resolution)"""
        return _COPASI.CEigen_stabilityAnalysis(self, resolution)


    def getMaxrealpart(self):
        """getMaxrealpart(CEigen self) -> double const &"""
        return _COPASI.CEigen_getMaxrealpart(self)


    def getMaximagpart(self):
        """getMaximagpart(CEigen self) -> double const &"""
        return _COPASI.CEigen_getMaximagpart(self)


    def getNzero(self):
        """getNzero(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNzero(self)


    def getStiffness(self):
        """getStiffness(CEigen self) -> double const &"""
        return _COPASI.CEigen_getStiffness(self)


    def getHierarchy(self):
        """getHierarchy(CEigen self) -> double const &"""
        return _COPASI.CEigen_getHierarchy(self)


    def getNreal(self):
        """getNreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNreal(self)


    def getNimag(self):
        """getNimag(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNimag(self)


    def getNcplxconj(self):
        """getNcplxconj(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNcplxconj(self)


    def getNposreal(self):
        """getNposreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNposreal(self)


    def getNnegreal(self):
        """getNnegreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNnegreal(self)


    def getI(self):
        """getI(CEigen self) -> FloatVector"""
        return _COPASI.CEigen_getI(self)


    def getR(self):
        """getR(CEigen self) -> FloatVector"""
        return _COPASI.CEigen_getR(self)

CEigen_swigregister = _COPASI.CEigen_swigregister
CEigen_swigregister(CEigen)

class CFunctionParameter(CDataContainer):
    """Proxy of C++ CFunctionParameter class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameter, name)
    __repr__ = _swig_repr
    Role_SUBSTRATE = _COPASI.CFunctionParameter_Role_SUBSTRATE
    Role_PRODUCT = _COPASI.CFunctionParameter_Role_PRODUCT
    Role_MODIFIER = _COPASI.CFunctionParameter_Role_MODIFIER
    Role_PARAMETER = _COPASI.CFunctionParameter_Role_PARAMETER
    Role_VOLUME = _COPASI.CFunctionParameter_Role_VOLUME
    Role_TIME = _COPASI.CFunctionParameter_Role_TIME
    Role_VARIABLE = _COPASI.CFunctionParameter_Role_VARIABLE
    Role_TEMPORARY = _COPASI.CFunctionParameter_Role_TEMPORARY
    Role___SIZE = _COPASI.CFunctionParameter_Role___SIZE
    DataType_INT32 = _COPASI.CFunctionParameter_DataType_INT32
    DataType_FLOAT64 = _COPASI.CFunctionParameter_DataType_FLOAT64
    DataType_VINT32 = _COPASI.CFunctionParameter_DataType_VINT32
    DataType_VFLOAT64 = _COPASI.CFunctionParameter_DataType_VFLOAT64
    DataType___SIZE = _COPASI.CFunctionParameter_DataType___SIZE

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CFunctionParameter"""
        return _COPASI.CFunctionParameter_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CFunctionParameter self, std::string const & name, CDataContainer pParent) -> CFunctionParameter
        __init__(CFunctionParameter self, std::string const & name) -> CFunctionParameter
        __init__(CFunctionParameter self) -> CFunctionParameter
        __init__(CFunctionParameter self, CFunctionParameter src, CDataContainer pParent) -> CFunctionParameter
        __init__(CFunctionParameter self, std::string const & name, CFunctionParameter::DataType const & type, CFunctionParameter::Role usage, CDataContainer pParent) -> CFunctionParameter
        __init__(CFunctionParameter self, std::string const & name, CFunctionParameter::DataType const & type, CFunctionParameter::Role usage) -> CFunctionParameter
        """
        this = _COPASI.new_CFunctionParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameter
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CFunctionParameter self)"""
        return _COPASI.CFunctionParameter_cleanup(self)


    def getKey(self):
        """getKey(CFunctionParameter self) -> std::string const &"""
        return _COPASI.CFunctionParameter_getKey(self)


    def getType(self):
        """getType(CFunctionParameter self) -> CFunctionParameter::DataType const &"""
        return _COPASI.CFunctionParameter_getType(self)


    def setType(self, type):
        """setType(CFunctionParameter self, CFunctionParameter::DataType const & type)"""
        return _COPASI.CFunctionParameter_setType(self, type)


    def getUsage(self):
        """getUsage(CFunctionParameter self) -> CFunctionParameter::Role"""
        return _COPASI.CFunctionParameter_getUsage(self)


    def setUsage(self, usage):
        """setUsage(CFunctionParameter self, CFunctionParameter::Role usage)"""
        return _COPASI.CFunctionParameter_setUsage(self, usage)


    def setIsUsed(self, isUsed):
        """setIsUsed(CFunctionParameter self, bool const & isUsed)"""
        return _COPASI.CFunctionParameter_setIsUsed(self, isUsed)


    def isUsed(self):
        """isUsed(CFunctionParameter self) -> bool const &"""
        return _COPASI.CFunctionParameter_isUsed(self)

CFunctionParameter_swigregister = _COPASI.CFunctionParameter_swigregister
CFunctionParameter_swigregister(CFunctionParameter)

def CFunctionParameter_fromData(data, pParent):
    """CFunctionParameter_fromData(CData data, CUndoObjectInterface pParent) -> CFunctionParameter"""
    return _COPASI.CFunctionParameter_fromData(data, pParent)

class CFunctionParameters(CDataContainer):
    """Proxy of C++ CFunctionParameters class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFunctionParameters self, std::string const & name, CDataContainer pParent) -> CFunctionParameters
        __init__(CFunctionParameters self, std::string const & name) -> CFunctionParameters
        __init__(CFunctionParameters self) -> CFunctionParameters
        __init__(CFunctionParameters self, CFunctionParameters src, CDataContainer pParent) -> CFunctionParameters
        """
        this = _COPASI.new_CFunctionParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameters
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CFunctionParameters self)"""
        return _COPASI.CFunctionParameters_cleanup(self)


    def addCopy(self, parameter):
        """addCopy(CFunctionParameters self, CFunctionParameter parameter)"""
        return _COPASI.CFunctionParameters_addCopy(self, parameter)


    def add(self, *args):
        """
        add(CFunctionParameters self, CFunctionParameter parameter, bool const & adopt=False) -> bool
        add(CFunctionParameters self, CFunctionParameter parameter) -> bool
        add(CFunctionParameters self, std::string const & name, CFunctionParameter::DataType const & type, CFunctionParameter::Role usage) -> bool
        """
        return _COPASI.CFunctionParameters_add(self, *args)


    def remove(self, name):
        """remove(CFunctionParameters self, std::string const & name)"""
        return _COPASI.CFunctionParameters_remove(self, name)


    def size(self):
        """size(CFunctionParameters self) -> size_t"""
        return _COPASI.CFunctionParameters_size(self)


    def swap(self, arg2, to):
        """swap(CFunctionParameters self, size_t const & arg2, size_t const & to)"""
        return _COPASI.CFunctionParameters_swap(self, arg2, to)


    def isVector(self, role):
        """isVector(CFunctionParameters self, CFunctionParameter::Role role) -> bool"""
        return _COPASI.CFunctionParameters_isVector(self, role)


    def getNumberOfParametersByUsage(self, usage):
        """getNumberOfParametersByUsage(CFunctionParameters self, CFunctionParameter::Role usage) -> size_t"""
        return _COPASI.CFunctionParameters_getNumberOfParametersByUsage(self, usage)


    def getParameterByUsage(self, usage, pos):
        """getParameterByUsage(CFunctionParameters self, CFunctionParameter::Role usage, size_t pos) -> CFunctionParameter"""
        return _COPASI.CFunctionParameters_getParameterByUsage(self, usage, pos)


    def findParameterByName(self, name, dataType):
        """findParameterByName(CFunctionParameters self, std::string const & name, int dataType) -> unsigned int"""
        return _COPASI.CFunctionParameters_findParameterByName(self, name, dataType)


    def getParameter(self, index):
        """getParameter(CFunctionParameters self, unsigned int index) -> CFunctionParameter"""
        return _COPASI.CFunctionParameters_getParameter(self, index)

CFunctionParameters_swigregister = _COPASI.CFunctionParameters_swigregister
CFunctionParameters_swigregister(CFunctionParameters)

class CFunctionParameterMap(_object):
    """Proxy of C++ CFunctionParameterMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionParameterMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionParameterMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFunctionParameterMap self) -> CFunctionParameterMap
        __init__(CFunctionParameterMap self, CFunctionParameterMap src) -> CFunctionParameterMap
        """
        this = _COPASI.new_CFunctionParameterMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionParameterMap
    __del__ = lambda self: None

    def setCallParameter(self, paramName, obj):
        """setCallParameter(CFunctionParameterMap self, std::string const paramName, CDataObject obj) -> CIssue"""
        return _COPASI.CFunctionParameterMap_setCallParameter(self, paramName, obj)


    def addCallParameter(self, paramName, obj):
        """addCallParameter(CFunctionParameterMap self, std::string const paramName, CDataObject obj) -> CIssue"""
        return _COPASI.CFunctionParameterMap_addCallParameter(self, paramName, obj)


    def clearCallParameter(self, paramName):
        """clearCallParameter(CFunctionParameterMap self, std::string const paramName)"""
        return _COPASI.CFunctionParameterMap_clearCallParameter(self, paramName)


    def initializeFromFunctionParameters(self, src):
        """initializeFromFunctionParameters(CFunctionParameterMap self, CFunctionParameters src)"""
        return _COPASI.CFunctionParameterMap_initializeFromFunctionParameters(self, src)


    def getFunctionParameters(self):
        """getFunctionParameters(CFunctionParameterMap self) -> CFunctionParameters"""
        return _COPASI.CFunctionParameterMap_getFunctionParameters(self)


    def getPointers(self):
        """getPointers(CFunctionParameterMap self) -> PointerCallParameters"""
        return _COPASI.CFunctionParameterMap_getPointers(self)

CFunctionParameterMap_swigregister = _COPASI.CFunctionParameterMap_swigregister
CFunctionParameterMap_swigregister(CFunctionParameterMap)

class PointerCallParameters(_object):
    """Proxy of C++ CCallParameters<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointerCallParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointerCallParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCallParameters<(double)> self, size_t const & size=0) -> PointerCallParameters
        __init__(CCallParameters<(double)> self) -> PointerCallParameters
        __init__(CCallParameters<(double)> self, PointerCallParameters src) -> PointerCallParameters
        """
        this = _COPASI.new_PointerCallParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_PointerCallParameters
    __del__ = lambda self: None

    def resize(self, size):
        """resize(PointerCallParameters self, size_t const & size)"""
        return _COPASI.PointerCallParameters_resize(self, size)


    def clear(self):
        """clear(PointerCallParameters self)"""
        return _COPASI.PointerCallParameters_clear(self)


    def size(self):
        """size(PointerCallParameters self) -> size_t"""
        return _COPASI.PointerCallParameters_size(self)

PointerCallParameters_swigregister = _COPASI.PointerCallParameters_swigregister
PointerCallParameters_swigregister(PointerCallParameters)

class ObjectCallParameters(_object):
    """Proxy of C++ CCallParameters<(CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectCallParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectCallParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCallParameters<(CDataObject)> self, size_t const & size=0) -> ObjectCallParameters
        __init__(CCallParameters<(CDataObject)> self) -> ObjectCallParameters
        __init__(CCallParameters<(CDataObject)> self, ObjectCallParameters src) -> ObjectCallParameters
        """
        this = _COPASI.new_ObjectCallParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ObjectCallParameters
    __del__ = lambda self: None

    def resize(self, size):
        """resize(ObjectCallParameters self, size_t const & size)"""
        return _COPASI.ObjectCallParameters_resize(self, size)


    def clear(self):
        """clear(ObjectCallParameters self)"""
        return _COPASI.ObjectCallParameters_clear(self)


    def size(self):
        """size(ObjectCallParameters self) -> size_t"""
        return _COPASI.ObjectCallParameters_size(self)

ObjectCallParameters_swigregister = _COPASI.ObjectCallParameters_swigregister
ObjectCallParameters_swigregister(ObjectCallParameters)

class CEvaluationTree(CDataContainer):
    """Proxy of C++ CEvaluationTree class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTree, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTree, name)
    __repr__ = _swig_repr
    Function = _COPASI.CEvaluationTree_Function
    MassAction = _COPASI.CEvaluationTree_MassAction
    PreDefined = _COPASI.CEvaluationTree_PreDefined
    UserDefined = _COPASI.CEvaluationTree_UserDefined
    Expression = _COPASI.CEvaluationTree_Expression
    MathExpression = _COPASI.CEvaluationTree_MathExpression

    def create(type):
        """create(CEvaluationTree::Type type) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_create(type)

    create = staticmethod(create)

    def copy(src):
        """copy(CEvaluationTree src) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_copy(src)

    copy = staticmethod(copy)

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CEvaluationTree self, std::string const & name, CDataContainer pParent, CEvaluationTree::Type const & type) -> CEvaluationTree
        __init__(CEvaluationTree self, std::string const & name, CDataContainer pParent) -> CEvaluationTree
        __init__(CEvaluationTree self, std::string const & name) -> CEvaluationTree
        __init__(CEvaluationTree self) -> CEvaluationTree
        __init__(CEvaluationTree self, CEvaluationTree src, CDataContainer pParent) -> CEvaluationTree
        """
        this = _COPASI.new_CEvaluationTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEvaluationTree
    __del__ = lambda self: None

    def getType(self):
        """getType(CEvaluationTree self) -> CEvaluationTree::Type const &"""
        return _COPASI.CEvaluationTree_getType(self)


    def setTree(self, pRootNode, isFunction):
        """setTree(CEvaluationTree self, ASTNode const & pRootNode, bool isFunction) -> bool"""
        return _COPASI.CEvaluationTree_setTree(self, pRootNode, isFunction)


    def getNodeObject(self, CN):
        """getNodeObject(CEvaluationTree self, CCommonName CN) -> CObjectInterface"""
        return _COPASI.CEvaluationTree_getNodeObject(self, CN)


    def setInfix(self, infix):
        """setInfix(CEvaluationTree self, std::string const & infix) -> CIssue"""
        return _COPASI.CEvaluationTree_setInfix(self, infix)


    def compile(self):
        """compile(CEvaluationTree self) -> CIssue"""
        return _COPASI.CEvaluationTree_compile(self)


    def isBoolean(self):
        """isBoolean(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_isBoolean(self)


    def getInfix(self):
        """getInfix(CEvaluationTree self) -> std::string const &"""
        return _COPASI.CEvaluationTree_getInfix(self)


    def getVariableIndex(self, name):
        """getVariableIndex(CEvaluationTree self, std::string const & name) -> size_t"""
        return _COPASI.CEvaluationTree_getVariableIndex(self, name)


    def getVariableValue(self, index):
        """getVariableValue(CEvaluationTree self, size_t const & index) -> double const &"""
        return _COPASI.CEvaluationTree_getVariableValue(self, index)


    def updateTree(self):
        """updateTree(CEvaluationTree self) -> CIssue"""
        return _COPASI.CEvaluationTree_updateTree(self)


    def hasCircularDependency(self):
        """hasCircularDependency(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_hasCircularDependency(self)


    def hasDiscontinuity(self):
        """hasDiscontinuity(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_hasDiscontinuity(self)


    def containsCN(self, elements):
        """containsCN(CEvaluationTree self, DataObjectSet elements) -> bool"""
        return _COPASI.CEvaluationTree_containsCN(self, elements)


    def getErrorLocation(self):
        """getErrorLocation(CEvaluationTree self) -> int"""
        return _COPASI.CEvaluationTree_getErrorLocation(self)


    def isFunction(self):
        """isFunction(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_isFunction(self)

CEvaluationTree_swigregister = _COPASI.CEvaluationTree_swigregister
CEvaluationTree_swigregister(CEvaluationTree)

def CEvaluationTree_create(type):
    """CEvaluationTree_create(CEvaluationTree::Type type) -> CEvaluationTree"""
    return _COPASI.CEvaluationTree_create(type)

def CEvaluationTree_copy(src):
    """CEvaluationTree_copy(CEvaluationTree src) -> CEvaluationTree"""
    return _COPASI.CEvaluationTree_copy(src)

def CEvaluationTree_fromData(data, pParent):
    """CEvaluationTree_fromData(CData data, CUndoObjectInterface pParent) -> CEvaluationTree"""
    return _COPASI.CEvaluationTree_fromData(data, pParent)

class CExpression(CEvaluationTree):
    """Proxy of C++ CExpression class."""

    __swig_setmethods__ = {}
    for _s in [CEvaluationTree]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTree]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CExpression self, std::string const & name, CDataContainer pParent) -> CExpression
        __init__(CExpression self, std::string const & name) -> CExpression
        __init__(CExpression self) -> CExpression
        __init__(CExpression self, CExpression src, CDataContainer pParent) -> CExpression
        """
        this = _COPASI.new_CExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CExpression
    __del__ = lambda self: None

    def createInitialExpression(expression, pDataModel):
        """createInitialExpression(CExpression expression, CDataModel pDataModel) -> CExpression"""
        return _COPASI.CExpression_createInitialExpression(expression, pDataModel)

    createInitialExpression = staticmethod(createInitialExpression)

    def setIsBoolean(self, booleanRequired):
        """setIsBoolean(CExpression self, bool const & booleanRequired)"""
        return _COPASI.CExpression_setIsBoolean(self, booleanRequired)


    def setInfix(self, infix):
        """setInfix(CExpression self, std::string const & infix) -> CIssue"""
        return _COPASI.CExpression_setInfix(self, infix)


    def compile(self, *args):
        """
        compile(CExpression self, ContainerList listOfContainer) -> CIssue
        compile(CExpression self) -> CIssue
        """
        return _COPASI.CExpression_compile(self, *args)


    def calcValue(self):
        """calcValue(CExpression self) -> double const &"""
        return _COPASI.CExpression_calcValue(self)


    def refresh(self):
        """refresh(CExpression self)"""
        return _COPASI.CExpression_refresh(self)


    def getNodeObject(self, CN):
        """getNodeObject(CExpression self, CCommonName CN) -> CObjectInterface"""
        return _COPASI.CExpression_getNodeObject(self, CN)


    def getListOfContainer(self):
        """getListOfContainer(CExpression self) -> ContainerList"""
        return _COPASI.CExpression_getListOfContainer(self)


    def updateInfix(self):
        """updateInfix(CExpression self) -> bool"""
        return _COPASI.CExpression_updateInfix(self)


    def getDisplayString(self):
        """getDisplayString(CExpression self) -> std::string const &"""
        return _COPASI.CExpression_getDisplayString(self)


    def getCCodeString(self):
        """getCCodeString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getCCodeString(self)


    def getBerkeleyMadonnaString(self):
        """getBerkeleyMadonnaString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getBerkeleyMadonnaString(self)


    def getXPPString(self):
        """getXPPString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getXPPString(self)


    def writeMathML(self, fullExpand, l):
        """writeMathML(CExpression self, bool fullExpand, unsigned int l) -> std::string"""
        return _COPASI.CExpression_writeMathML(self, fullExpand, l)

CExpression_swigregister = _COPASI.CExpression_swigregister
CExpression_swigregister(CExpression)

def CExpression_createInitialExpression(expression, pDataModel):
    """CExpression_createInitialExpression(CExpression expression, CDataModel pDataModel) -> CExpression"""
    return _COPASI.CExpression_createInitialExpression(expression, pDataModel)

class CFunction(CEvaluationTree, CAnnotation):
    """Proxy of C++ CFunction class."""

    __swig_setmethods__ = {}
    for _s in [CEvaluationTree, CAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTree, CAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunction, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CFunction"""
        return _COPASI.CFunction_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CFunction self, std::string const & name, CDataContainer pParent, CEvaluationTree::Type const & type) -> CFunction
        __init__(CFunction self, std::string const & name, CDataContainer pParent) -> CFunction
        __init__(CFunction self, std::string const & name) -> CFunction
        __init__(CFunction self) -> CFunction
        __init__(CFunction self, CFunction src, CDataContainer pParent) -> CFunction
        """
        this = _COPASI.new_CFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunction
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getKey(self)


    def setSBMLId(self, id):
        """setSBMLId(CFunction self, std::string const & id)"""
        return _COPASI.CFunction_setSBMLId(self, id)


    def getSBMLId(self):
        """getSBMLId(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getSBMLId(self)


    def setInfix(self, infix):
        """setInfix(CFunction self, std::string const & infix) -> CIssue"""
        return _COPASI.CFunction_setInfix(self, infix)


    def isReadOnly(self):
        """isReadOnly(CFunction self) -> bool"""
        return _COPASI.CFunction_isReadOnly(self)


    def calcValue(self, callParameters):
        """calcValue(CFunction self, PointerCallParameters callParameters) -> double const &"""
        return _COPASI.CFunction_calcValue(self, callParameters)


    def getVariableIndex(self, name):
        """getVariableIndex(CFunction self, std::string const & name) -> size_t"""
        return _COPASI.CFunction_getVariableIndex(self, name)


    def getVariableValue(self, index):
        """getVariableValue(CFunction self, size_t const & index) -> double const &"""
        return _COPASI.CFunction_getVariableValue(self, index)


    def setReversible(self, reversible):
        """setReversible(CFunction self, TriLogic const & reversible)"""
        return _COPASI.CFunction_setReversible(self, reversible)


    def isReversible(self):
        """isReversible(CFunction self) -> TriLogic const &"""
        return _COPASI.CFunction_isReversible(self)


    def getVariables(self, *args):
        """
        getVariables(CFunction self) -> CFunctionParameters
        getVariables(CFunction self) -> CFunctionParameters
        """
        return _COPASI.CFunction_getVariables(self, *args)


    def addVariable(self, *args):
        """
        addVariable(CFunction self, std::string const & name, CFunctionParameter::Role usage, CFunctionParameter::DataType const & type) -> bool
        addVariable(CFunction self, std::string const & name, CFunctionParameter::Role usage) -> bool
        addVariable(CFunction self, std::string const & name) -> bool
        """
        return _COPASI.CFunction_addVariable(self, *args)


    def isSuitable(self, noSubstrates, noProducts, reversible):
        """isSuitable(CFunction self, size_t const noSubstrates, size_t const noProducts, TriLogic const reversible) -> bool"""
        return _COPASI.CFunction_isSuitable(self, noSubstrates, noProducts, reversible)


    def completeFunctionList(list, added=0):
        """
        completeFunctionList(std::vector< CFunction const *,std::allocator< CFunction const * > > & list, size_t const & added=0) -> bool
        completeFunctionList(std::vector< CFunction const *,std::allocator< CFunction const * > > & list) -> bool
        """
        return _COPASI.CFunction_completeFunctionList(list, added)

    completeFunctionList = staticmethod(completeFunctionList)

    def createListOfParametersForMathML(self, env):
        """createListOfParametersForMathML(CFunction self, VectorOfStringVectors env)"""
        return _COPASI.CFunction_createListOfParametersForMathML(self, env)


    def createCopy(self):
        """createCopy(CFunction self) -> CFunction"""
        return _COPASI.CFunction_createCopy(self)


    def setNotes(self, notes):
        """setNotes(CFunction self, std::string const & notes)"""
        return _COPASI.CFunction_setNotes(self, notes)


    def getNotes(self):
        """getNotes(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getNotes(self)


    def getMiriamAnnotation(self):
        """getMiriamAnnotation(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getMiriamAnnotation(self)


    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        """setMiriamAnnotation(CFunction self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CFunction_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)


    def hasUnsupportedAnnotation(self, name):
        """hasUnsupportedAnnotation(CFunction self, std::string name) -> bool"""
        return _COPASI.CFunction_hasUnsupportedAnnotation(self, name)


    def getNumUnsupportedAnnotations(self):
        """getNumUnsupportedAnnotations(CFunction self) -> int"""
        return _COPASI.CFunction_getNumUnsupportedAnnotations(self)


    def getUnsupportedAnnotation(self, *args):
        """
        getUnsupportedAnnotation(CFunction self, std::string name) -> std::string
        getUnsupportedAnnotation(CFunction self, int index) -> std::string
        """
        return _COPASI.CFunction_getUnsupportedAnnotation(self, *args)


    def getUnsupportedAnnotationName(self, index):
        """getUnsupportedAnnotationName(CFunction self, int index) -> std::string"""
        return _COPASI.CFunction_getUnsupportedAnnotationName(self, index)


    def addUnsupportedAnnotation(self, name, xml):
        """addUnsupportedAnnotation(CFunction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CFunction_addUnsupportedAnnotation(self, name, xml)


    def replaceUnsupportedAnnotation(self, name, xml):
        """replaceUnsupportedAnnotation(CFunction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CFunction_replaceUnsupportedAnnotation(self, name, xml)


    def removeUnsupportedAnnotation(self, name):
        """removeUnsupportedAnnotation(CFunction self, std::string const & name) -> bool"""
        return _COPASI.CFunction_removeUnsupportedAnnotation(self, name)

CFunction_swigregister = _COPASI.CFunction_swigregister
CFunction_swigregister(CFunction)

def CFunction_fromData(data, pParent):
    """CFunction_fromData(CData data, CUndoObjectInterface pParent) -> CFunction"""
    return _COPASI.CFunction_fromData(data, pParent)

def CFunction_completeFunctionList(list, added=0):
    """
    completeFunctionList(std::vector< CFunction const *,std::allocator< CFunction const * > > & list, size_t const & added=0) -> bool
    CFunction_completeFunctionList(std::vector< CFunction const *,std::allocator< CFunction const * > > & list) -> bool
    """
    return _COPASI.CFunction_completeFunctionList(list, added)

class CFunctionDB(CDataContainer):
    """Proxy of C++ CFunctionDB class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionDB, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionDB, name)
    __repr__ = _swig_repr

    def __init__(self, name, pParent):
        """__init__(CFunctionDB self, std::string const & name, CDataContainer pParent) -> CFunctionDB"""
        this = _COPASI.new_CFunctionDB(name, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionDB
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CFunctionDB self)"""
        return _COPASI.CFunctionDB_cleanup(self)


    def initObjects(self):
        """initObjects(CFunctionDB self)"""
        return _COPASI.CFunctionDB_initObjects(self)


    def load(self, *args):
        """
        load(CFunctionDB self) -> bool
        load(CFunctionDB self, std::string const & fileName) -> bool
        """
        return _COPASI.CFunctionDB_load(self, *args)


    def save(self, fileName):
        """save(CFunctionDB self, std::string const & fileName) -> bool"""
        return _COPASI.CFunctionDB_save(self, fileName)


    def setFilename(self, filename):
        """setFilename(CFunctionDB self, std::string const & filename)"""
        return _COPASI.CFunctionDB_setFilename(self, filename)


    def getFilename(self):
        """getFilename(CFunctionDB self) -> std::string"""
        return _COPASI.CFunctionDB_getFilename(self)


    def addAndAdaptName(self, pFunction):
        """addAndAdaptName(CFunctionDB self, CFunction pFunction) -> CFunction"""
        return _COPASI.CFunctionDB_addAndAdaptName(self, pFunction)


    def removeFunction(self, *args):
        """
        removeFunction(CFunctionDB self, size_t index) -> bool
        removeFunction(CFunctionDB self, std::string const & key) -> bool
        """
        return _COPASI.CFunctionDB_removeFunction(self, *args)


    def findFunction(self, functionName):
        """findFunction(CFunctionDB self, std::string const & functionName) -> CFunction"""
        return _COPASI.CFunctionDB_findFunction(self, functionName)


    def findLoadFunction(self, functionName):
        """findLoadFunction(CFunctionDB self, std::string const & functionName) -> CFunction"""
        return _COPASI.CFunctionDB_findLoadFunction(self, functionName)


    def loadedFunctions(self):
        """loadedFunctions(CFunctionDB self) -> CFunctionVectorN"""
        return _COPASI.CFunctionDB_loadedFunctions(self)


    def suitableFunctions(self, noSubstrates, noProducts, reversibility):
        """suitableFunctions(CFunctionDB self, size_t const noSubstrates, size_t const noProducts, TriLogic const reversibility) -> CFunctionStdVector"""
        return _COPASI.CFunctionDB_suitableFunctions(self, noSubstrates, noProducts, reversibility)


    def getUsedFunctions(self, pModel):
        """getUsedFunctions(CFunctionDB self, CModel pModel) -> std::vector< CFunction const *,std::allocator< CFunction const * > >"""
        return _COPASI.CFunctionDB_getUsedFunctions(self, pModel)


    def createFunction(self, name, t):
        """createFunction(CFunctionDB self, std::string const & name, CEvaluationTree::Type t) -> CEvaluationTree"""
        return _COPASI.CFunctionDB_createFunction(self, name, t)


    def addAndAdopt(self, pFunctionToKeepReferenced):
        """addAndAdopt(CFunctionDB self, CFunction pFunctionToKeepReferenced) -> bool"""
        return _COPASI.CFunctionDB_addAndAdopt(self, pFunctionToKeepReferenced)


    def add(self, *args):
        """
        add(CFunctionDB self, CFunction pFunction, bool arg3) -> bool
        add(CFunctionDB self, CFunction pFunction) -> bool
        """
        return _COPASI.CFunctionDB_add(self, *args)

CFunctionDB_swigregister = _COPASI.CFunctionDB_swigregister
CFunctionDB_swigregister(CFunctionDB)

class CDataString(CDataObject):
    """Proxy of C++ CDataString class."""

    __swig_setmethods__ = {}
    for _s in [CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataString, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataString self, std::string const & name, CDataContainer pParent, std::string const & type, CFlags< CDataObject::Flag > const & flag) -> CDataString
        __init__(CDataString self, std::string const & name, CDataContainer pParent, std::string const & type) -> CDataString
        __init__(CDataString self, std::string const & name, CDataContainer pParent) -> CDataString
        __init__(CDataString self, std::string const & name) -> CDataString
        __init__(CDataString self) -> CDataString
        __init__(CDataString self, CDataString src, CDataContainer pParent) -> CDataString
        """
        this = _COPASI.new_CDataString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataString
    __del__ = lambda self: None

    def getObjectDisplayName(self):
        """getObjectDisplayName(CDataString self) -> std::string"""
        return _COPASI.CDataString_getObjectDisplayName(self)


    def getStaticString(self):
        """getStaticString(CDataString self) -> std::string const &"""
        return _COPASI.CDataString_getStaticString(self)

CDataString_swigregister = _COPASI.CDataString_swigregister
CDataString_swigregister(CDataString)

class CCopasiReportSeparator(CDataString):
    """Proxy of C++ CCopasiReportSeparator class."""

    __swig_setmethods__ = {}
    for _s in [CDataString]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiReportSeparator, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataString]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiReportSeparator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCopasiReportSeparator self, std::string const & name, CDataContainer pParent) -> CCopasiReportSeparator
        __init__(CCopasiReportSeparator self, std::string const & name) -> CCopasiReportSeparator
        __init__(CCopasiReportSeparator self) -> CCopasiReportSeparator
        __init__(CCopasiReportSeparator self, CDataString src, CDataContainer pParent) -> CCopasiReportSeparator
        """
        this = _COPASI.new_CCopasiReportSeparator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiReportSeparator
    __del__ = lambda self: None

    def getObjectDisplayName(self):
        """getObjectDisplayName(CCopasiReportSeparator self) -> std::string"""
        return _COPASI.CCopasiReportSeparator_getObjectDisplayName(self)

CCopasiReportSeparator_swigregister = _COPASI.CCopasiReportSeparator_swigregister
CCopasiReportSeparator_swigregister(CCopasiReportSeparator)

class CTotalNumberReference(FloatReference):
    """Proxy of C++ CTotalNumberReference class."""

    __swig_setmethods__ = {}
    for _s in [FloatReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTotalNumberReference, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTotalNumberReference, name)
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        """__init__(CTotalNumberReference self, CTotalNumberReference src, CDataContainer pParent) -> CTotalNumberReference"""
        this = _COPASI.new_CTotalNumberReference(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTotalNumberReference
    __del__ = lambda self: None
CTotalNumberReference_swigregister = _COPASI.CTotalNumberReference_swigregister
CTotalNumberReference_swigregister(CTotalNumberReference)

class CDependentNumberReference(FloatReference):
    """Proxy of C++ CDependentNumberReference class."""

    __swig_setmethods__ = {}
    for _s in [FloatReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDependentNumberReference, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDependentNumberReference, name)
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        """__init__(CDependentNumberReference self, CDependentNumberReference src, CDataContainer pParent) -> CDependentNumberReference"""
        this = _COPASI.new_CDependentNumberReference(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDependentNumberReference
    __del__ = lambda self: None
CDependentNumberReference_swigregister = _COPASI.CDependentNumberReference_swigregister
CDependentNumberReference_swigregister(CDependentNumberReference)

class CMoiety(CDataContainer):
    """Proxy of C++ CMoiety class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMoiety, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMoiety, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CMoiety"""
        return _COPASI.CMoiety_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CMoiety self, std::string const & name, CDataContainer pParent) -> CMoiety
        __init__(CMoiety self, std::string const & name) -> CMoiety
        __init__(CMoiety self) -> CMoiety
        __init__(CMoiety self, CMoiety src, CDataContainer pParent) -> CMoiety
        """
        this = _COPASI.new_CMoiety(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMoiety
    __del__ = lambda self: None

    def add(self, value, metabolite):
        """add(CMoiety self, double value, CMetab metabolite)"""
        return _COPASI.CMoiety_add(self, value, metabolite)


    def cleanup(self):
        """cleanup(CMoiety self)"""
        return _COPASI.CMoiety_cleanup(self)


    def refreshInitialValue(self):
        """refreshInitialValue(CMoiety self)"""
        return _COPASI.CMoiety_refreshInitialValue(self)


    def getInitialValueReference(self):
        """getInitialValueReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getInitialValueReference(self)


    def refreshValue(self):
        """refreshValue(CMoiety self)"""
        return _COPASI.CMoiety_refreshValue(self)


    def getValueReference(self):
        """getValueReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getValueReference(self)


    def getDescription(self, model):
        """getDescription(CMoiety self, CModel model) -> std::string"""
        return _COPASI.CMoiety_getDescription(self, model)


    def dependentNumber(self):
        """dependentNumber(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_dependentNumber(self)


    def getDependentNumber(self):
        """getDependentNumber(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_getDependentNumber(self)


    def getInitialTotalNumberReference(self):
        """getInitialTotalNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getInitialTotalNumberReference(self)


    def getTotalNumberReference(self):
        """getTotalNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getTotalNumberReference(self)


    def getDependentNumberReference(self):
        """getDependentNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getDependentNumberReference(self)


    def getNumber(self):
        """getNumber(CMoiety self) -> double"""
        return _COPASI.CMoiety_getNumber(self)


    def getKey(self):
        """getKey(CMoiety self) -> std::string const &"""
        return _COPASI.CMoiety_getKey(self)


    def setObjectParent(self, pParent):
        """setObjectParent(CMoiety self, CDataContainer pParent) -> bool"""
        return _COPASI.CMoiety_setObjectParent(self, pParent)


    def refreshDependentNumber(self):
        """refreshDependentNumber(CMoiety self)"""
        return _COPASI.CMoiety_refreshDependentNumber(self)


    def getExpression(self):
        """getExpression(CMoiety self) -> std::string"""
        return _COPASI.CMoiety_getExpression(self)


    def getAmount(self):
        """getAmount(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_getAmount(self)


    def refreshAmount(self):
        """refreshAmount(CMoiety self)"""
        return _COPASI.CMoiety_refreshAmount(self)

CMoiety_swigregister = _COPASI.CMoiety_swigregister
CMoiety_swigregister(CMoiety)

def CMoiety_fromData(data, pParent):
    """CMoiety_fromData(CData data, CUndoObjectInterface pParent) -> CMoiety"""
    return _COPASI.CMoiety_fromData(data, pParent)

class CModelEntity(CDataContainer, CAnnotation):
    """Proxy of C++ CModelEntity class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelEntity, name)
    __repr__ = _swig_repr
    Status_FIXED = _COPASI.CModelEntity_Status_FIXED
    Status_ASSIGNMENT = _COPASI.CModelEntity_Status_ASSIGNMENT
    Status_REACTIONS = _COPASI.CModelEntity_Status_REACTIONS
    Status_ODE = _COPASI.CModelEntity_Status_ODE
    Status_TIME = _COPASI.CModelEntity_Status_TIME
    Status___SIZE = _COPASI.CModelEntity_Status___SIZE

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModelEntity"""
        return _COPASI.CModelEntity_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CModelEntity self, std::string const & name, CDataContainer pParent, std::string const & type, CFlags< CDataObject::Flag > const & flag) -> CModelEntity
        __init__(CModelEntity self, std::string const & name, CDataContainer pParent, std::string const & type) -> CModelEntity
        __init__(CModelEntity self, std::string const & name, CDataContainer pParent) -> CModelEntity
        __init__(CModelEntity self, std::string const & name) -> CModelEntity
        __init__(CModelEntity self) -> CModelEntity
        __init__(CModelEntity self, CModelEntity src, CDataContainer pParent) -> CModelEntity
        """
        this = _COPASI.new_CModelEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelEntity
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getKey(self)


    def getStatus(self):
        """getStatus(CModelEntity self) -> CModelEntity::Status const &"""
        return _COPASI.CModelEntity_getStatus(self)


    def compile(self):
        """compile(CModelEntity self) -> CIssue"""
        return _COPASI.CModelEntity_compile(self)


    def calculate(self):
        """calculate(CModelEntity self)"""
        return _COPASI.CModelEntity_calculate(self)


    def isFixed(self):
        """isFixed(CModelEntity self) -> bool"""
        return _COPASI.CModelEntity_isFixed(self)


    def getValue(self):
        """getValue(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getValue(self)


    def getInitialValue(self):
        """getInitialValue(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getInitialValue(self)


    def getRate(self):
        """getRate(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getRate(self)


    def setStatus(self, status):
        """setStatus(CModelEntity self, CModelEntity::Status const & status)"""
        return _COPASI.CModelEntity_setStatus(self, status)


    def setValue(self, value):
        """setValue(CModelEntity self, double const & value)"""
        return _COPASI.CModelEntity_setValue(self, value)


    def setInitialValue(self, initialValue):
        """setInitialValue(CModelEntity self, double const & initialValue)"""
        return _COPASI.CModelEntity_setInitialValue(self, initialValue)


    def setRate(self, rate):
        """setRate(CModelEntity self, double const & rate)"""
        return _COPASI.CModelEntity_setRate(self, rate)


    def getValueObject(self):
        """getValueObject(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getValueObject(self)


    def setObjectParent(self, pParent):
        """setObjectParent(CModelEntity self, CDataContainer pParent) -> bool"""
        return _COPASI.CModelEntity_setObjectParent(self, pParent)


    def setSBMLId(self, id):
        """setSBMLId(CModelEntity self, std::string const & id)"""
        return _COPASI.CModelEntity_setSBMLId(self, id)


    def getSBMLId(self):
        """getSBMLId(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getSBMLId(self)


    def setExpressionPtr(self, pExpression):
        """setExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        val = _COPASI.CModelEntity_setExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getExpressionPtr(self):
        """getExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getExpressionPtr(self)


    def setInitialExpressionPtr(self, pExpression):
        """setInitialExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        val = _COPASI.CModelEntity_setInitialExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getInitialExpressionPtr(self):
        """getInitialExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getInitialExpressionPtr(self)


    def getDefaultNoiseExpression(self):
        """getDefaultNoiseExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getDefaultNoiseExpression(self)


    def setNoiseExpression(self, expression):
        """setNoiseExpression(CModelEntity self, std::string const & expression) -> bool"""
        return _COPASI.CModelEntity_setNoiseExpression(self, expression)


    def getNoiseExpression(self):
        """getNoiseExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getNoiseExpression(self)


    def setNoiseExpressionPtr(self, pExpression):
        """setNoiseExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        return _COPASI.CModelEntity_setNoiseExpressionPtr(self, pExpression)


    def getNoiseExpressionPtr(self):
        """getNoiseExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getNoiseExpressionPtr(self)


    def setHasNoise(self, hasNoise):
        """setHasNoise(CModelEntity self, bool const & hasNoise)"""
        return _COPASI.CModelEntity_setHasNoise(self, hasNoise)


    def hasNoise(self):
        """hasNoise(CModelEntity self) -> bool const &"""
        return _COPASI.CModelEntity_hasNoise(self)


    def setExpression(self, expression):
        """setExpression(CModelEntity self, std::string const & expression) -> CIssue"""
        return _COPASI.CModelEntity_setExpression(self, expression)


    def getExpression(self):
        """getExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getExpression(self)


    def setInitialExpression(self, expression):
        """setInitialExpression(CModelEntity self, std::string const & expression) -> CIssue"""
        return _COPASI.CModelEntity_setInitialExpression(self, expression)


    def getInitialExpression(self):
        """getInitialExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getInitialExpression(self)


    def setUnitExpression(self, unitExpression):
        """setUnitExpression(CModelEntity self, std::string unitExpression) -> CIssue"""
        return _COPASI.CModelEntity_setUnitExpression(self, unitExpression)


    def getUnitExpression(self):
        """getUnitExpression(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getUnitExpression(self)


    def getChildObjectUnits(self, pObject):
        """getChildObjectUnits(CModelEntity self, CDataObject pObject) -> std::string"""
        return _COPASI.CModelEntity_getChildObjectUnits(self, pObject)


    def setUsed(self, used):
        """setUsed(CModelEntity self, bool const & used)"""
        return _COPASI.CModelEntity_setUsed(self, used)


    def isUsed(self):
        """isUsed(CModelEntity self) -> bool const &"""
        return _COPASI.CModelEntity_isUsed(self)


    def getInitialValueReference(self):
        """getInitialValueReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getInitialValueReference(self)


    def getValueReference(self):
        """getValueReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getValueReference(self)


    def getRateReference(self):
        """getRateReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getRateReference(self)


    def getNoiseReference(self):
        """getNoiseReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getNoiseReference(self)


    def getModel(self):
        """getModel(CModelEntity self) -> CModel"""
        return _COPASI.CModelEntity_getModel(self)


    def setNotes(self, notes):
        """setNotes(CModelEntity self, std::string const & notes)"""
        return _COPASI.CModelEntity_setNotes(self, notes)


    def getNotes(self):
        """getNotes(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getNotes(self)


    def getMiriamAnnotation(self):
        """getMiriamAnnotation(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getMiriamAnnotation(self)


    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        """setMiriamAnnotation(CModelEntity self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CModelEntity_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)


    def hasUnsupportedAnnotation(self, name):
        """hasUnsupportedAnnotation(CModelEntity self, std::string name) -> bool"""
        return _COPASI.CModelEntity_hasUnsupportedAnnotation(self, name)


    def getNumUnsupportedAnnotations(self):
        """getNumUnsupportedAnnotations(CModelEntity self) -> int"""
        return _COPASI.CModelEntity_getNumUnsupportedAnnotations(self)


    def getUnsupportedAnnotation(self, *args):
        """
        getUnsupportedAnnotation(CModelEntity self, std::string name) -> std::string
        getUnsupportedAnnotation(CModelEntity self, int index) -> std::string
        """
        return _COPASI.CModelEntity_getUnsupportedAnnotation(self, *args)


    def getUnsupportedAnnotationName(self, index):
        """getUnsupportedAnnotationName(CModelEntity self, int index) -> std::string"""
        return _COPASI.CModelEntity_getUnsupportedAnnotationName(self, index)


    def addUnsupportedAnnotation(self, name, xml):
        """addUnsupportedAnnotation(CModelEntity self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CModelEntity_addUnsupportedAnnotation(self, name, xml)


    def replaceUnsupportedAnnotation(self, name, xml):
        """replaceUnsupportedAnnotation(CModelEntity self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CModelEntity_replaceUnsupportedAnnotation(self, name, xml)


    def removeUnsupportedAnnotation(self, name):
        """removeUnsupportedAnnotation(CModelEntity self, std::string const & name) -> bool"""
        return _COPASI.CModelEntity_removeUnsupportedAnnotation(self, name)

CModelEntity_swigregister = _COPASI.CModelEntity_swigregister
CModelEntity_swigregister(CModelEntity)

def CModelEntity_fromData(data, pParent):
    """CModelEntity_fromData(CData data, CUndoObjectInterface pParent) -> CModelEntity"""
    return _COPASI.CModelEntity_fromData(data, pParent)

class CModelValue(CModelEntity):
    """Proxy of C++ CModelValue class."""

    __swig_setmethods__ = {}
    for _s in [CModelEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelValue, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelValue, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModelValue"""
        return _COPASI.CModelValue_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CModelValue self, std::string const & name, CDataContainer pParent) -> CModelValue
        __init__(CModelValue self, std::string const & name) -> CModelValue
        __init__(CModelValue self) -> CModelValue
        __init__(CModelValue self, CModelValue src, CDataContainer pParent) -> CModelValue
        """
        this = _COPASI.new_CModelValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelValue
    __del__ = lambda self: None

    def getUnits(self):
        """getUnits(CModelValue self) -> std::string const"""
        return _COPASI.CModelValue_getUnits(self)

CModelValue_swigregister = _COPASI.CModelValue_swigregister
CModelValue_swigregister(CModelValue)

def CModelValue_fromData(data, pParent):
    """CModelValue_fromData(CData data, CUndoObjectInterface pParent) -> CModelValue"""
    return _COPASI.CModelValue_fromData(data, pParent)

class CMetab(CModelEntity):
    """Proxy of C++ CMetab class."""

    __swig_setmethods__ = {}
    for _s in [CModelEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMetab, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMetab, name)
    __repr__ = _swig_repr

    def convertToNumber(concentration, compartment):
        """convertToNumber(double const & concentration, CCompartment compartment) -> double"""
        return _COPASI.CMetab_convertToNumber(concentration, compartment)

    convertToNumber = staticmethod(convertToNumber)

    def convertToConcentration(number, compartment):
        """convertToConcentration(double const & number, CCompartment compartment) -> double"""
        return _COPASI.CMetab_convertToConcentration(number, compartment)

    convertToConcentration = staticmethod(convertToConcentration)

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CMetab"""
        return _COPASI.CMetab_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CMetab self, std::string const & name, CDataContainer pParent) -> CMetab
        __init__(CMetab self, std::string const & name) -> CMetab
        __init__(CMetab self) -> CMetab
        __init__(CMetab self, CMetab src, CDataContainer pParent) -> CMetab
        """
        this = _COPASI.new_CMetab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMetab
    __del__ = lambda self: None

    def getUnits(self):
        """getUnits(CMetab self) -> std::string const"""
        return _COPASI.CMetab_getUnits(self)


    def getChildObjectUnits(self, pObject):
        """getChildObjectUnits(CMetab self, CDataObject pObject) -> std::string"""
        return _COPASI.CMetab_getChildObjectUnits(self, pObject)


    def getValueObject(self):
        """getValueObject(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getValueObject(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CMetab self) -> std::string"""
        return _COPASI.CMetab_getObjectDisplayName(self)


    def cleanup(self):
        """cleanup(CMetab self)"""
        return _COPASI.CMetab_cleanup(self)


    def initCompartment(self, pCompartment=None):
        """
        initCompartment(CMetab self, CCompartment pCompartment=None)
        initCompartment(CMetab self)
        """
        return _COPASI.CMetab_initCompartment(self, pCompartment)


    def setObjectParent(self, pParent):
        """setObjectParent(CMetab self, CDataContainer pParent) -> bool"""
        return _COPASI.CMetab_setObjectParent(self, pParent)


    def setCompartment(self, compName):
        """setCompartment(CMetab self, std::string const & compName) -> bool"""
        return _COPASI.CMetab_setCompartment(self, compName)


    def compile(self):
        """compile(CMetab self) -> CIssue"""
        return _COPASI.CMetab_compile(self)


    def compileIsInitialValueChangeAllowed(self):
        """compileIsInitialValueChangeAllowed(CMetab self)"""
        return _COPASI.CMetab_compileIsInitialValueChangeAllowed(self)


    def isInitialValueChangeAllowed(self, framework):
        """isInitialValueChangeAllowed(CMetab self, CCore::Framework framework) -> bool const &"""
        return _COPASI.CMetab_isInitialValueChangeAllowed(self, framework)


    def calculate(self):
        """calculate(CMetab self)"""
        return _COPASI.CMetab_calculate(self)


    def setConcentration(self, concentration):
        """setConcentration(CMetab self, double const concentration)"""
        return _COPASI.CMetab_setConcentration(self, concentration)


    def getConcentration(self):
        """getConcentration(CMetab self) -> double const &"""
        return _COPASI.CMetab_getConcentration(self)


    def setInitialConcentration(self, initialConcentration):
        """setInitialConcentration(CMetab self, double const & initialConcentration)"""
        return _COPASI.CMetab_setInitialConcentration(self, initialConcentration)


    def getInitialConcentration(self):
        """getInitialConcentration(CMetab self) -> double const &"""
        return _COPASI.CMetab_getInitialConcentration(self)


    def getInitialConcentrationReference(self):
        """getInitialConcentrationReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getInitialConcentrationReference(self)


    def getConcentrationReference(self):
        """getConcentrationReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getConcentrationReference(self)


    def getConcentrationRateReference(self):
        """getConcentrationRateReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getConcentrationRateReference(self)


    def getIntensiveNoiseReference(self):
        """getIntensiveNoiseReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getIntensiveNoiseReference(self)


    def getCompartment(self):
        """getCompartment(CMetab self) -> CCompartment"""
        return _COPASI.CMetab_getCompartment(self)


    def setTransitionTime(self, transitionTime):
        """setTransitionTime(CMetab self, double const & transitionTime)"""
        return _COPASI.CMetab_setTransitionTime(self, transitionTime)


    def getTransitionTime(self):
        """getTransitionTime(CMetab self) -> double const &"""
        return _COPASI.CMetab_getTransitionTime(self)


    def getTransitionTimeReference(self):
        """getTransitionTimeReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getTransitionTimeReference(self)


    def getConcentrationRate(self):
        """getConcentrationRate(CMetab self) -> double"""
        return _COPASI.CMetab_getConcentrationRate(self)


    def setDependsOnMoiety(self, pMoiety):
        """setDependsOnMoiety(CMetab self, CMoiety pMoiety)"""
        return _COPASI.CMetab_setDependsOnMoiety(self, pMoiety)


    def isDependent(self):
        """isDependent(CMetab self) -> bool"""
        return _COPASI.CMetab_isDependent(self)


    def getMoiety(self):
        """getMoiety(CMetab self) -> CMoiety"""
        return _COPASI.CMetab_getMoiety(self)


    def getCountOfDependentReactions(self):
        """getCountOfDependentReactions(CMetab self) -> size_t"""
        return _COPASI.CMetab_getCountOfDependentReactions(self)

CMetab_swigregister = _COPASI.CMetab_swigregister
CMetab_swigregister(CMetab)

def CMetab_convertToNumber(concentration, compartment):
    """CMetab_convertToNumber(double const & concentration, CCompartment compartment) -> double"""
    return _COPASI.CMetab_convertToNumber(concentration, compartment)

def CMetab_convertToConcentration(number, compartment):
    """CMetab_convertToConcentration(double const & number, CCompartment compartment) -> double"""
    return _COPASI.CMetab_convertToConcentration(number, compartment)

def CMetab_fromData(data, pParent):
    """CMetab_fromData(CData data, CUndoObjectInterface pParent) -> CMetab"""
    return _COPASI.CMetab_fromData(data, pParent)

class CMetabOld(CDataContainer):
    """Proxy of C++ CMetabOld class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMetabOld, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMetabOld, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CMetabOld"""
        return _COPASI.CMetabOld_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CMetabOld self, std::string const & name, CDataContainer pParent) -> CMetabOld
        __init__(CMetabOld self, std::string const & name) -> CMetabOld
        __init__(CMetabOld self) -> CMetabOld
        __init__(CMetabOld self, CMetabOld src, CDataContainer pParent) -> CMetabOld
        """
        this = _COPASI.new_CMetabOld(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMetabOld
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CMetabOld self)"""
        return _COPASI.CMetabOld_cleanup(self)


    def getIndex(self):
        """getIndex(CMetabOld self) -> int"""
        return _COPASI.CMetabOld_getIndex(self)

CMetabOld_swigregister = _COPASI.CMetabOld_swigregister
CMetabOld_swigregister(CMetabOld)

def CMetabOld_fromData(data, pParent):
    """CMetabOld_fromData(CData data, CUndoObjectInterface pParent) -> CMetabOld"""
    return _COPASI.CMetabOld_fromData(data, pParent)

class StringPair(_object):
    """Proxy of C++ std::pair<(std::string,std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(std::string,std::string)> self) -> StringPair
        __init__(std::pair<(std::string,std::string)> self, std::string first, std::string second) -> StringPair
        __init__(std::pair<(std::string,std::string)> self, StringPair p) -> StringPair
        """
        this = _COPASI.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _COPASI.StringPair_first_set
    __swig_getmethods__["first"] = _COPASI.StringPair_first_get
    if _newclass:
        first = _swig_property(_COPASI.StringPair_first_get, _COPASI.StringPair_first_set)
    __swig_setmethods__["second"] = _COPASI.StringPair_second_set
    __swig_getmethods__["second"] = _COPASI.StringPair_second_get
    if _newclass:
        second = _swig_property(_COPASI.StringPair_second_get, _COPASI.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _COPASI.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _COPASI.StringPair_swigregister
StringPair_swigregister(StringPair)

class CMetabNameInterface(_object):
    """Proxy of C++ CMetabNameInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMetabNameInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMetabNameInterface, name)
    __repr__ = _swig_repr

    def getDisplayName(*args):
        """
        getDisplayName(CModel model, std::string const & key, bool const & quoted) -> std::string
        getDisplayName(CModel model, CMetab metab, bool const & quoted) -> std::string
        getDisplayName(CModel model, std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
        """
        return _COPASI.CMetabNameInterface_getDisplayName(*args)

    getDisplayName = staticmethod(getDisplayName)

    def createUniqueDisplayName(*args):
        """
        createUniqueDisplayName(std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
        createUniqueDisplayName(CMetab metab, bool const & quoted) -> std::string
        """
        return _COPASI.CMetabNameInterface_createUniqueDisplayName(*args)

    createUniqueDisplayName = staticmethod(createUniqueDisplayName)

    def getMetabolite(model, metabolite, compartment):
        """getMetabolite(CModel model, std::string const & metabolite, std::string const & compartment) -> CMetab"""
        return _COPASI.CMetabNameInterface_getMetabolite(model, metabolite, compartment)

    getMetabolite = staticmethod(getMetabolite)

    def getMetaboliteKey(model, metabolite, compartment):
        """getMetaboliteKey(CModel model, std::string const & metabolite, std::string const & compartment) -> std::string"""
        return _COPASI.CMetabNameInterface_getMetaboliteKey(model, metabolite, compartment)

    getMetaboliteKey = staticmethod(getMetaboliteKey)

    def getSpeciesCN(pModel, species, compartment):
        """getSpeciesCN(CModel pModel, std::string const & species, std::string const & compartment) -> std::string"""
        return _COPASI.CMetabNameInterface_getSpeciesCN(pModel, species, compartment)

    getSpeciesCN = staticmethod(getSpeciesCN)

    def isUnique(model, name):
        """isUnique(CModel model, std::string const & name) -> bool"""
        return _COPASI.CMetabNameInterface_isUnique(model, name)

    isUnique = staticmethod(isUnique)

    def doesExist(model, metabolite, compartment):
        """doesExist(CModel model, std::string const & metabolite, std::string const & compartment) -> bool"""
        return _COPASI.CMetabNameInterface_doesExist(model, metabolite, compartment)

    doesExist = staticmethod(doesExist)

    def splitDisplayName(name):
        """splitDisplayName(std::string const & name) -> StringPair"""
        return _COPASI.CMetabNameInterface_splitDisplayName(name)

    splitDisplayName = staticmethod(splitDisplayName)

    def unQuote(displayName):
        """unQuote(std::string const & displayName) -> std::string"""
        return _COPASI.CMetabNameInterface_unQuote(displayName)

    unQuote = staticmethod(unQuote)

    def __init__(self):
        """__init__(CMetabNameInterface self) -> CMetabNameInterface"""
        this = _COPASI.new_CMetabNameInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMetabNameInterface
    __del__ = lambda self: None
CMetabNameInterface_swigregister = _COPASI.CMetabNameInterface_swigregister
CMetabNameInterface_swigregister(CMetabNameInterface)

def CMetabNameInterface_getDisplayName(*args):
    """
    getDisplayName(CModel model, std::string const & key, bool const & quoted) -> std::string
    getDisplayName(CModel model, CMetab metab, bool const & quoted) -> std::string
    CMetabNameInterface_getDisplayName(CModel model, std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
    """
    return _COPASI.CMetabNameInterface_getDisplayName(*args)

def CMetabNameInterface_createUniqueDisplayName(*args):
    """
    createUniqueDisplayName(std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
    CMetabNameInterface_createUniqueDisplayName(CMetab metab, bool const & quoted) -> std::string
    """
    return _COPASI.CMetabNameInterface_createUniqueDisplayName(*args)

def CMetabNameInterface_getMetabolite(model, metabolite, compartment):
    """CMetabNameInterface_getMetabolite(CModel model, std::string const & metabolite, std::string const & compartment) -> CMetab"""
    return _COPASI.CMetabNameInterface_getMetabolite(model, metabolite, compartment)

def CMetabNameInterface_getMetaboliteKey(model, metabolite, compartment):
    """CMetabNameInterface_getMetaboliteKey(CModel model, std::string const & metabolite, std::string const & compartment) -> std::string"""
    return _COPASI.CMetabNameInterface_getMetaboliteKey(model, metabolite, compartment)

def CMetabNameInterface_getSpeciesCN(pModel, species, compartment):
    """CMetabNameInterface_getSpeciesCN(CModel pModel, std::string const & species, std::string const & compartment) -> std::string"""
    return _COPASI.CMetabNameInterface_getSpeciesCN(pModel, species, compartment)

def CMetabNameInterface_isUnique(model, name):
    """CMetabNameInterface_isUnique(CModel model, std::string const & name) -> bool"""
    return _COPASI.CMetabNameInterface_isUnique(model, name)

def CMetabNameInterface_doesExist(model, metabolite, compartment):
    """CMetabNameInterface_doesExist(CModel model, std::string const & metabolite, std::string const & compartment) -> bool"""
    return _COPASI.CMetabNameInterface_doesExist(model, metabolite, compartment)

def CMetabNameInterface_splitDisplayName(name):
    """CMetabNameInterface_splitDisplayName(std::string const & name) -> StringPair"""
    return _COPASI.CMetabNameInterface_splitDisplayName(name)

def CMetabNameInterface_unQuote(displayName):
    """CMetabNameInterface_unQuote(std::string const & displayName) -> std::string"""
    return _COPASI.CMetabNameInterface_unQuote(displayName)

class CCompartment(CModelEntity):
    """Proxy of C++ CCompartment class."""

    __swig_setmethods__ = {}
    for _s in [CModelEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCompartment, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCompartment, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CCompartment"""
        return _COPASI.CCompartment_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CCompartment self, std::string const & name, CDataContainer pParent) -> CCompartment
        __init__(CCompartment self, std::string const & name) -> CCompartment
        __init__(CCompartment self) -> CCompartment
        __init__(CCompartment self, CCompartment src, CDataContainer pParent) -> CCompartment
        """
        this = _COPASI.new_CCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCompartment
    __del__ = lambda self: None

    def getUnits(self):
        """getUnits(CCompartment self) -> std::string const"""
        return _COPASI.CCompartment_getUnits(self)


    def cleanup(self):
        """cleanup(CCompartment self)"""
        return _COPASI.CCompartment_cleanup(self)


    def getMetabolites(self, *args):
        """
        getMetabolites(CCompartment self) -> MetabVectorNS
        getMetabolites(CCompartment self) -> MetabVectorNS
        """
        return _COPASI.CCompartment_getMetabolites(self, *args)


    def createMetabolite(self, metabolite):
        """createMetabolite(CCompartment self, CMetab metabolite) -> bool"""
        return _COPASI.CCompartment_createMetabolite(self, metabolite)


    def addMetabolite(self, metabolite):
        """addMetabolite(CCompartment self, CMetab metabolite) -> bool"""
        return _COPASI.CCompartment_addMetabolite(self, metabolite)


    def setDimensionality(self, dim):
        """setDimensionality(CCompartment self, unsigned int dim) -> bool"""
        return _COPASI.CCompartment_setDimensionality(self, dim)


    def getDimensionality(self):
        """getDimensionality(CCompartment self) -> unsigned int"""
        return _COPASI.CCompartment_getDimensionality(self)


    def removeMetabolite(self, metab):
        """removeMetabolite(CCompartment self, CMetab metab) -> bool"""
        return _COPASI.CCompartment_removeMetabolite(self, metab)

CCompartment_swigregister = _COPASI.CCompartment_swigregister
CCompartment_swigregister(CCompartment)

def CCompartment_fromData(data, pParent):
    """CCompartment_fromData(CData data, CUndoObjectInterface pParent) -> CCompartment"""
    return _COPASI.CCompartment_fromData(data, pParent)

class FloatMatrix(_object):
    """Proxy of C++ CMatrix<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMatrix<(double)> self, size_t rows=0, size_t cols=0) -> FloatMatrix
        __init__(CMatrix<(double)> self, size_t rows=0) -> FloatMatrix
        __init__(CMatrix<(double)> self) -> FloatMatrix
        __init__(CMatrix<(double)> self, FloatMatrix src) -> FloatMatrix
        """
        this = _COPASI.new_FloatMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_FloatMatrix
    __del__ = lambda self: None

    def size(self):
        """size(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_size(self)


    def numRows(self):
        """numRows(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_numRows(self)


    def numCols(self):
        """numCols(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_numCols(self)


    def resize(self, rows, cols, copy=False):
        """
        resize(FloatMatrix self, size_t rows, size_t cols, bool const & copy=False)
        resize(FloatMatrix self, size_t rows, size_t cols)
        """
        return _COPASI.FloatMatrix_resize(self, rows, cols, copy)


    def __call__(self, *args):
        """
        __call__(FloatMatrix self, size_t const & row, size_t const & col) -> CMatrix< double >::elementType
        __call__(FloatMatrix self, size_t const & row, size_t const & col) -> CMatrix< double >::elementType const &
        """
        return _COPASI.FloatMatrix___call__(self, *args)


    def array(self, *args):
        """
        array(FloatMatrix self) -> double
        array(FloatMatrix self) -> double const *
        """
        return _COPASI.FloatMatrix_array(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(FloatMatrix self, SizeTVector pivot) -> bool"""
        return _COPASI.FloatMatrix_applyPivot(self, pivot)


    def get(self, row, col):
        """get(FloatMatrix self, unsigned int const & row, unsigned int const & col) -> CMatrix< double >::elementType"""
        return _COPASI.FloatMatrix_get(self, row, col)

FloatMatrix_swigregister = _COPASI.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class IntMatrix(_object):
    """Proxy of C++ CMatrix<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMatrix<(int)> self, size_t rows=0, size_t cols=0) -> IntMatrix
        __init__(CMatrix<(int)> self, size_t rows=0) -> IntMatrix
        __init__(CMatrix<(int)> self) -> IntMatrix
        __init__(CMatrix<(int)> self, IntMatrix src) -> IntMatrix
        """
        this = _COPASI.new_IntMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_IntMatrix
    __del__ = lambda self: None

    def size(self):
        """size(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_size(self)


    def numRows(self):
        """numRows(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_numRows(self)


    def numCols(self):
        """numCols(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_numCols(self)


    def resize(self, rows, cols, copy=False):
        """
        resize(IntMatrix self, size_t rows, size_t cols, bool const & copy=False)
        resize(IntMatrix self, size_t rows, size_t cols)
        """
        return _COPASI.IntMatrix_resize(self, rows, cols, copy)


    def __call__(self, *args):
        """
        __call__(IntMatrix self, size_t const & row, size_t const & col) -> CMatrix< int >::elementType
        __call__(IntMatrix self, size_t const & row, size_t const & col) -> CMatrix< int >::elementType const &
        """
        return _COPASI.IntMatrix___call__(self, *args)


    def array(self, *args):
        """
        array(IntMatrix self) -> int
        array(IntMatrix self) -> int const *
        """
        return _COPASI.IntMatrix_array(self, *args)


    def applyPivot(self, pivot):
        """applyPivot(IntMatrix self, SizeTVector pivot) -> bool"""
        return _COPASI.IntMatrix_applyPivot(self, pivot)


    def get(self, row, col):
        """get(IntMatrix self, unsigned int const & row, unsigned int const & col) -> CMatrix< int >::elementType"""
        return _COPASI.IntMatrix_get(self, row, col)

IntMatrix_swigregister = _COPASI.IntMatrix_swigregister
IntMatrix_swigregister(IntMatrix)

class CLinkMatrix(FloatMatrix):
    """Proxy of C++ CLinkMatrix class."""

    __swig_setmethods__ = {}
    for _s in [FloatMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinkMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLinkMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLinkMatrix self) -> CLinkMatrix
        __init__(CLinkMatrix self, CLinkMatrix src) -> CLinkMatrix
        """
        this = _COPASI.new_CLinkMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLinkMatrix
    __del__ = lambda self: None

    def build(self, *args):
        """
        build(CLinkMatrix self, FloatMatrix matrix, size_t maxRank) -> bool
        build(CLinkMatrix self, FloatMatrix matrix) -> bool
        """
        return _COPASI.CLinkMatrix_build(self, *args)


    def clearPivoting(self):
        """clearPivoting(CLinkMatrix self)"""
        return _COPASI.CLinkMatrix_clearPivoting(self)


    def rightMultiply(self, alpha, M, P):
        """rightMultiply(CLinkMatrix self, double const & alpha, FloatMatrix M, FloatMatrix P) -> bool"""
        return _COPASI.CLinkMatrix_rightMultiply(self, alpha, M, P)


    def leftMultiply(self, M, P):
        """leftMultiply(CLinkMatrix self, FloatMatrix M, FloatMatrix P) -> bool"""
        return _COPASI.CLinkMatrix_leftMultiply(self, M, P)


    def getRowPivots(self):
        """getRowPivots(CLinkMatrix self) -> SizeTVector"""
        return _COPASI.CLinkMatrix_getRowPivots(self)


    def getNumIndependent(self):
        """getNumIndependent(CLinkMatrix self) -> size_t const &"""
        return _COPASI.CLinkMatrix_getNumIndependent(self)


    def getNumDependent(self):
        """getNumDependent(CLinkMatrix self) -> size_t"""
        return _COPASI.CLinkMatrix_getNumDependent(self)


    def doRowPivot(self, matrix):
        """doRowPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_doRowPivot(self, matrix)


    def undoRowPivot(self, matrix):
        """undoRowPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_undoRowPivot(self, matrix)


    def doColumnPivot(self, matrix):
        """doColumnPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_doColumnPivot(self, matrix)


    def undoColumnPivot(self, matrix):
        """undoColumnPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_undoColumnPivot(self, matrix)

CLinkMatrix_swigregister = _COPASI.CLinkMatrix_swigregister
CLinkMatrix_swigregister(CLinkMatrix)

class CLinkMatrixView(_object):
    """Proxy of C++ CLinkMatrixView class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinkMatrixView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLinkMatrixView, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(CLinkMatrixView self, CLinkMatrix A) -> CLinkMatrixView"""
        this = _COPASI.new_CLinkMatrixView(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLinkMatrixView
    __del__ = lambda self: None

    def numRows(self):
        """numRows(CLinkMatrixView self) -> size_t"""
        return _COPASI.CLinkMatrixView_numRows(self)


    def numCols(self):
        """numCols(CLinkMatrixView self) -> size_t"""
        return _COPASI.CLinkMatrixView_numCols(self)


    def __call__(self, row, col):
        """__call__(CLinkMatrixView self, size_t const & row, size_t const & col) -> double &"""
        return _COPASI.CLinkMatrixView___call__(self, row, col)

CLinkMatrixView_swigregister = _COPASI.CLinkMatrixView_swigregister
CLinkMatrixView_swigregister(CLinkMatrixView)

class CStateTemplate(_object):
    """Proxy of C++ CStateTemplate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStateTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStateTemplate, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        """__init__(CStateTemplate self, CModel model) -> CStateTemplate"""
        this = _COPASI.new_CStateTemplate(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CStateTemplate
    __del__ = lambda self: None

    def add(self, entity):
        """add(CStateTemplate self, CModelEntity entity)"""
        return _COPASI.CStateTemplate_add(self, entity)


    def remove(self, entity):
        """remove(CStateTemplate self, CModelEntity entity)"""
        return _COPASI.CStateTemplate_remove(self, entity)


    def getIndex(self, entity):
        """getIndex(CStateTemplate self, CModelEntity entity) -> size_t"""
        return _COPASI.CStateTemplate_getIndex(self, entity)


    def getUserOrder(self):
        """getUserOrder(CStateTemplate self) -> SizeTVector"""
        return _COPASI.CStateTemplate_getUserOrder(self)


    def getNumIndependent(self):
        """getNumIndependent(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumIndependent(self)


    def getNumDependent(self):
        """getNumDependent(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumDependent(self)


    def getNumVariable(self):
        """getNumVariable(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumVariable(self)


    def getNumFixed(self):
        """getNumFixed(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumFixed(self)


    def size(self):
        """size(CStateTemplate self) -> size_t const &"""
        return _COPASI.CStateTemplate_size(self)


    def getEntity(self, index):
        """getEntity(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getEntity(self, index)


    def getIndependent(self, index):
        """getIndependent(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getIndependent(self, index)


    def getDependent(self, index):
        """getDependent(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getDependent(self, index)


    def getFixed(self, index):
        """getFixed(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getFixed(self, index)

CStateTemplate_swigregister = _COPASI.CStateTemplate_swigregister
CStateTemplate_swigregister(CStateTemplate)

class CChemEqElement(CDataContainer):
    """Proxy of C++ CChemEqElement class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElement, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElement, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CChemEqElement"""
        return _COPASI.CChemEqElement_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CChemEqElement self, std::string const & name, CDataContainer pParent) -> CChemEqElement
        __init__(CChemEqElement self, std::string const & name) -> CChemEqElement
        __init__(CChemEqElement self) -> CChemEqElement
        __init__(CChemEqElement self, CChemEqElement src, CDataContainer pParent) -> CChemEqElement
        """
        this = _COPASI.new_CChemEqElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CChemEqElement
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CChemEqElement self)"""
        return _COPASI.CChemEqElement_cleanup(self)


    def setMultiplicity(self, multiplicity):
        """setMultiplicity(CChemEqElement self, double const multiplicity)"""
        return _COPASI.CChemEqElement_setMultiplicity(self, multiplicity)


    def addToMultiplicity(self, multiplicity=1.0):
        """
        addToMultiplicity(CChemEqElement self, double const multiplicity=1.0)
        addToMultiplicity(CChemEqElement self)
        """
        return _COPASI.CChemEqElement_addToMultiplicity(self, multiplicity)


    def getMultiplicity(self):
        """getMultiplicity(CChemEqElement self) -> double const &"""
        return _COPASI.CChemEqElement_getMultiplicity(self)


    def setMetabolite(self, key):
        """setMetabolite(CChemEqElement self, std::string const & key)"""
        return _COPASI.CChemEqElement_setMetabolite(self, key)


    def getMetabolite(self):
        """getMetabolite(CChemEqElement self) -> CMetab"""
        return _COPASI.CChemEqElement_getMetabolite(self)


    def getMetaboliteKey(self):
        """getMetaboliteKey(CChemEqElement self) -> std::string const &"""
        return _COPASI.CChemEqElement_getMetaboliteKey(self)

CChemEqElement_swigregister = _COPASI.CChemEqElement_swigregister
CChemEqElement_swigregister(CChemEqElement)

def CChemEqElement_fromData(data, pParent):
    """CChemEqElement_fromData(CData data, CUndoObjectInterface pParent) -> CChemEqElement"""
    return _COPASI.CChemEqElement_fromData(data, pParent)

class CChemEq(CDataContainer):
    """Proxy of C++ CChemEq class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEq, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEq, name)
    __repr__ = _swig_repr
    PRODUCT = _COPASI.CChemEq_PRODUCT
    SUBSTRATE = _COPASI.CChemEq_SUBSTRATE
    MODIFIER = _COPASI.CChemEq_MODIFIER
    NOROLE = _COPASI.CChemEq_NOROLE

    def __init__(self, *args):
        """
        __init__(CChemEq self, std::string const & name, CDataContainer pParent) -> CChemEq
        __init__(CChemEq self, std::string const & name) -> CChemEq
        __init__(CChemEq self) -> CChemEq
        __init__(CChemEq self, CChemEq src, CDataContainer pParent) -> CChemEq
        """
        this = _COPASI.new_CChemEq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CChemEq
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CChemEq self)"""
        return _COPASI.CChemEq_cleanup(self)


    def setReversibility(self, reversible):
        """setReversibility(CChemEq self, bool const & reversible)"""
        return _COPASI.CChemEq_setReversibility(self, reversible)


    def getReversibility(self):
        """getReversibility(CChemEq self) -> bool const &"""
        return _COPASI.CChemEq_getReversibility(self)


    def addMetabolite(self, key, multiplicity, role):
        """addMetabolite(CChemEq self, std::string const & key, double const multiplicity, CChemEq::MetaboliteRole const & role) -> bool"""
        return _COPASI.CChemEq_addMetabolite(self, key, multiplicity, role)


    def getSubstrates(self):
        """getSubstrates(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getSubstrates(self)


    def getProducts(self):
        """getProducts(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getProducts(self)


    def getModifiers(self):
        """getModifiers(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getModifiers(self)


    def getBalances(self):
        """getBalances(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getBalances(self)


    def getCompartmentNumber(self):
        """getCompartmentNumber(CChemEq self) -> size_t"""
        return _COPASI.CChemEq_getCompartmentNumber(self)


    def getLargestCompartment(self):
        """getLargestCompartment(CChemEq self) -> CCompartment"""
        return _COPASI.CChemEq_getLargestCompartment(self)


    def getMolecularity(self, role):
        """getMolecularity(CChemEq self, CChemEq::MetaboliteRole const role) -> size_t"""
        return _COPASI.CChemEq_getMolecularity(self, role)


    def setMultiplicity(self, pMetab, newMult, role):
        """setMultiplicity(CChemEq self, CMetab pMetab, double newMult, CChemEq::MetaboliteRole role) -> bool"""
        return _COPASI.CChemEq_setMultiplicity(self, pMetab, newMult, role)


    def getSubstrate(self, index):
        """getSubstrate(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getSubstrate(self, index)


    def getProduct(self, index):
        """getProduct(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getProduct(self, index)


    def getModifier(self, index):
        """getModifier(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getModifier(self, index)


    def getBalance(self, index):
        """getBalance(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getBalance(self, index)

CChemEq_swigregister = _COPASI.CChemEq_swigregister
CChemEq_swigregister(CChemEq)

class CChemEqInterface(_object):
    """Proxy of C++ CChemEqInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CChemEqInterface self) -> CChemEqInterface"""
        this = _COPASI.new_CChemEqInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CChemEqInterface
    __del__ = lambda self: None

    def init(self, ce):
        """init(CChemEqInterface self, CChemEq ce) -> bool"""
        return _COPASI.CChemEqInterface_init(self, ce)


    def setChemEqString(self, ces):
        """setChemEqString(CChemEqInterface self, std::string const & ces) -> bool"""
        return _COPASI.CChemEqInterface_setChemEqString(self, ces)


    def writeToChemEq(self, pChemEq=None):
        """
        writeToChemEq(CChemEqInterface self, CChemEq pChemEq=None) -> bool
        writeToChemEq(CChemEqInterface self) -> bool
        """
        return _COPASI.CChemEqInterface_writeToChemEq(self, pChemEq)


    def toDataValue(self):
        """toDataValue(CChemEqInterface self) -> std::string"""
        return _COPASI.CChemEqInterface_toDataValue(self)


    def fromDataValue(self, dataValue):
        """fromDataValue(CChemEqInterface self, std::string const & dataValue) -> bool"""
        return _COPASI.CChemEqInterface_fromDataValue(self, dataValue)


    def getListOfMultiplicities(self, role):
        """getListOfMultiplicities(CChemEqInterface self, CFunctionParameter::Role role) -> FloatStdVector"""
        return _COPASI.CChemEqInterface_getListOfMultiplicities(self, role)


    def getListOfSpecies(self, role):
        """getListOfSpecies(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfSpecies(self, role)


    def getListOfCompartments(self, role):
        """getListOfCompartments(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfCompartments(self, role)


    def getListOfDisplayNames(self, role):
        """getListOfDisplayNames(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfDisplayNames(self, role)


    def displayNameToNamePair(self, role, displayName):
        """displayNameToNamePair(CChemEqInterface self, CFunctionParameter::Role role, std::string const displayName) -> StringPair"""
        return _COPASI.CChemEqInterface_displayNameToNamePair(self, role, displayName)


    def addModifier(self, name):
        """addModifier(CChemEqInterface self, std::string const & name)"""
        return _COPASI.CChemEqInterface_addModifier(self, name)


    def clearModifiers(self):
        """clearModifiers(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_clearModifiers(self)


    def clearAll(self):
        """clearAll(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_clearAll(self)


    def getReversibility(self):
        """getReversibility(CChemEqInterface self) -> bool"""
        return _COPASI.CChemEqInterface_getReversibility(self)


    def setReversibility(self, rev):
        """setReversibility(CChemEqInterface self, bool rev)"""
        return _COPASI.CChemEqInterface_setReversibility(self, rev)


    def isMulticompartment(self):
        """isMulticompartment(CChemEqInterface self) -> bool"""
        return _COPASI.CChemEqInterface_isMulticompartment(self)


    def getCompartment(self):
        """getCompartment(CChemEqInterface self) -> CCompartment"""
        return _COPASI.CChemEqInterface_getCompartment(self)


    def getDefaultCompartment(self):
        """getDefaultCompartment(CChemEqInterface self) -> std::string"""
        return _COPASI.CChemEqInterface_getDefaultCompartment(self)


    def getCompartments(self):
        """getCompartments(CChemEqInterface self) -> StringSet"""
        return _COPASI.CChemEqInterface_getCompartments(self)


    def reverse(self):
        """reverse(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_reverse(self)


    def getMolecularity(self, role):
        """getMolecularity(CChemEqInterface self, CFunctionParameter::Role role) -> size_t"""
        return _COPASI.CChemEqInterface_getMolecularity(self, role)


    def listOfNonUniqueMetabNames(self):
        """listOfNonUniqueMetabNames(CChemEqInterface self) -> StringSet"""
        return _COPASI.CChemEqInterface_listOfNonUniqueMetabNames(self)


    def listOfNonExistingMetabNames(self):
        """listOfNonExistingMetabNames(CChemEqInterface self) -> std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >"""
        return _COPASI.CChemEqInterface_listOfNonExistingMetabNames(self)


    def createNonExistingMetabs(self, createdKeys):
        """createNonExistingMetabs(CChemEqInterface self, StringStdVector createdKeys) -> bool"""
        return _COPASI.CChemEqInterface_createNonExistingMetabs(self, createdKeys)


    def getChemEqString(*args):
        """
        getChemEqString(bool expanded) -> std::string
        getChemEqString(CReaction rea, bool expanded) -> std::string
        """
        return _COPASI.CChemEqInterface_getChemEqString(*args)

    getChemEqString = staticmethod(getChemEqString)

    def setChemEqFromString(rea, ces):
        """setChemEqFromString(CReaction rea, std::string const & ces) -> bool"""
        return _COPASI.CChemEqInterface_setChemEqFromString(rea, ces)

    setChemEqFromString = staticmethod(setChemEqFromString)

    def isValidEq(eq):
        """isValidEq(std::string const & eq) -> bool"""
        return _COPASI.CChemEqInterface_isValidEq(eq)

    isValidEq = staticmethod(isValidEq)
CChemEqInterface_swigregister = _COPASI.CChemEqInterface_swigregister
CChemEqInterface_swigregister(CChemEqInterface)

def CChemEqInterface_getChemEqString(*args):
    """
    getChemEqString(bool expanded) -> std::string
    CChemEqInterface_getChemEqString(CReaction rea, bool expanded) -> std::string
    """
    return _COPASI.CChemEqInterface_getChemEqString(*args)

def CChemEqInterface_setChemEqFromString(rea, ces):
    """CChemEqInterface_setChemEqFromString(CReaction rea, std::string const & ces) -> bool"""
    return _COPASI.CChemEqInterface_setChemEqFromString(rea, ces)

def CChemEqInterface_isValidEq(eq):
    """CChemEqInterface_isValidEq(std::string const & eq) -> bool"""
    return _COPASI.CChemEqInterface_isValidEq(eq)

class StringSet(_object):
    """Proxy of C++ std::set<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(StringSet self) -> SwigPyIterator"""
        return _COPASI.StringSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringSet self) -> bool"""
        return _COPASI.StringSet___nonzero__(self)


    def __bool__(self):
        """__bool__(StringSet self) -> bool"""
        return _COPASI.StringSet___bool__(self)


    def __len__(self):
        """__len__(StringSet self) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet___len__(self)


    def append(self, x):
        """append(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_append(self, x)


    def __contains__(self, x):
        """__contains__(StringSet self, std::set< std::string >::value_type x) -> bool"""
        return _COPASI.StringSet___contains__(self, x)


    def __getitem__(self, i):
        """__getitem__(StringSet self, std::set< std::string >::difference_type i) -> std::set< std::string >::value_type"""
        return _COPASI.StringSet___getitem__(self, i)


    def add(self, x):
        """add(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_add(self, x)


    def discard(self, x):
        """discard(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(std::string)> self, std::less< std::string > const & arg2) -> StringSet
        __init__(std::set<(std::string)> self) -> StringSet
        __init__(std::set<(std::string)> self, StringSet arg2) -> StringSet
        """
        this = _COPASI.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(StringSet self) -> bool"""
        return _COPASI.StringSet_empty(self)


    def size(self):
        """size(StringSet self) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet_size(self)


    def clear(self):
        """clear(StringSet self)"""
        return _COPASI.StringSet_clear(self)


    def swap(self, v):
        """swap(StringSet self, StringSet v)"""
        return _COPASI.StringSet_swap(self, v)


    def count(self, x):
        """count(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet_count(self, x)


    def rbegin(self):
        """rbegin(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _COPASI.StringSet_rbegin(self)


    def rend(self):
        """rend(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _COPASI.StringSet_rend(self)


    def erase(self, *args):
        """
        erase(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type
        erase(StringSet self, std::set< std::string >::iterator pos)
        erase(StringSet self, std::set< std::string >::iterator first, std::set< std::string >::iterator last)
        """
        return _COPASI.StringSet_erase(self, *args)


    def find(self, x):
        """find(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_find(self, x)


    def lower_bound(self, x):
        """lower_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_upper_bound(self, x)


    def equal_range(self, x):
        """equal_range(StringSet self, std::set< std::string >::key_type const & x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >"""
        return _COPASI.StringSet_equal_range(self, x)


    def insert(self, __x):
        """insert(StringSet self, std::set< std::string >::value_type const & __x) -> std::pair< std::set< std::string >::iterator,bool >"""
        return _COPASI.StringSet_insert(self, __x)

    __swig_destroy__ = _COPASI.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _COPASI.StringSet_swigregister
StringSet_swigregister(StringSet)

class CReaction(CDataContainer, CAnnotation):
    """Proxy of C++ CReaction class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReaction, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReaction, name)
    __repr__ = _swig_repr
    KineticLawUnit_Default = _COPASI.CReaction_KineticLawUnit_Default
    KineticLawUnit_AmountPerTime = _COPASI.CReaction_KineticLawUnit_AmountPerTime
    KineticLawUnit_ConcentrationPerTime = _COPASI.CReaction_KineticLawUnit_ConcentrationPerTime
    KineticLawUnit___SIZE = _COPASI.CReaction_KineticLawUnit___SIZE

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CReaction"""
        return _COPASI.CReaction_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CReaction self, std::string const & name, CDataContainer pParent) -> CReaction
        __init__(CReaction self, std::string const & name) -> CReaction
        __init__(CReaction self) -> CReaction
        __init__(CReaction self, CReaction src, CDataContainer pParent) -> CReaction
        """
        this = _COPASI.new_CReaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReaction
    __del__ = lambda self: None

    def getChildObjectUnits(self, pObject):
        """getChildObjectUnits(CReaction self, CDataObject pObject) -> std::string"""
        return _COPASI.CReaction_getChildObjectUnits(self, pObject)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CReaction self) -> std::string"""
        return _COPASI.CReaction_getObjectDisplayName(self)


    def setObjectParent(self, pParent):
        """setObjectParent(CReaction self, CDataContainer pParent) -> bool"""
        return _COPASI.CReaction_setObjectParent(self, pParent)


    def getKey(self):
        """getKey(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getKey(self)


    def getChemEq(self, *args):
        """
        getChemEq(CReaction self) -> CChemEq
        getChemEq(CReaction self) -> CChemEq
        """
        return _COPASI.CReaction_getChemEq(self, *args)


    def getFunction(self):
        """getFunction(CReaction self) -> CFunction"""
        return _COPASI.CReaction_getFunction(self)


    def getFlux(self):
        """getFlux(CReaction self) -> double const &"""
        return _COPASI.CReaction_getFlux(self)


    def getParticleFlux(self):
        """getParticleFlux(CReaction self) -> double const &"""
        return _COPASI.CReaction_getParticleFlux(self)


    def isReversible(self):
        """isReversible(CReaction self) -> bool"""
        return _COPASI.CReaction_isReversible(self)


    def addSubstrate(self, metabKey, multiplicity=1.0):
        """
        addSubstrate(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool
        addSubstrate(CReaction self, std::string const & metabKey) -> bool
        """
        return _COPASI.CReaction_addSubstrate(self, metabKey, multiplicity)


    def addProduct(self, metabKey, multiplicity=1.0):
        """
        addProduct(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool
        addProduct(CReaction self, std::string const & metabKey) -> bool
        """
        return _COPASI.CReaction_addProduct(self, metabKey, multiplicity)


    def addModifier(self, metabKey, multiplicity=1.0):
        """
        addModifier(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool
        addModifier(CReaction self, std::string const & metabKey) -> bool
        """
        return _COPASI.CReaction_addModifier(self, metabKey, multiplicity)


    def setFunction(self, *args):
        """
        setFunction(CReaction self, std::string const & functionName) -> bool
        setFunction(CReaction self, CFunction pFunction) -> bool
        """
        return _COPASI.CReaction_setFunction(self, *args)


    def setParameterValue(self, parameterName, value):
        """setParameterValue(CReaction self, std::string const & parameterName, double const & value)"""
        return _COPASI.CReaction_setParameterValue(self, parameterName, value)


    def getParameterValue(self, parameterName):
        """getParameterValue(CReaction self, std::string const & parameterName) -> double const &"""
        return _COPASI.CReaction_getParameterValue(self, parameterName)


    def getParameters(self, *args):
        """
        getParameters(CReaction self) -> CCopasiParameterGroup
        getParameters(CReaction self) -> CCopasiParameterGroup
        """
        return _COPASI.CReaction_getParameters(self, *args)


    def isLocalParameter(self, *args):
        """
        isLocalParameter(CReaction self, size_t const & index) -> bool
        isLocalParameter(CReaction self, std::string const & parameterName) -> bool
        """
        return _COPASI.CReaction_isLocalParameter(self, *args)


    def getObject(self, cn):
        """getObject(CReaction self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CReaction_getObject(self, cn)


    def getFunctionParameters(self):
        """getFunctionParameters(CReaction self) -> CFunctionParameters"""
        return _COPASI.CReaction_getFunctionParameters(self)


    def setReversible(self, reversible):
        """setReversible(CReaction self, bool reversible)"""
        return _COPASI.CReaction_setReversible(self, reversible)


    def compile(self):
        """compile(CReaction self) -> CIssue"""
        return _COPASI.CReaction_compile(self)


    def getParticleFluxReference(self):
        """getParticleFluxReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getParticleFluxReference(self)


    def getFluxReference(self):
        """getFluxReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getFluxReference(self)


    def getParticleNoiseReference(self):
        """getParticleNoiseReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getParticleNoiseReference(self)


    def getNoiseReference(self):
        """getNoiseReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getNoiseReference(self)


    def getPropensityReference(self):
        """getPropensityReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getPropensityReference(self)


    def getCallParameters(self):
        """getCallParameters(CReaction self) -> PointerCallParameters"""
        return _COPASI.CReaction_getCallParameters(self)


    def getDefaultNoiseExpression(self):
        """getDefaultNoiseExpression(CReaction self) -> std::string"""
        return _COPASI.CReaction_getDefaultNoiseExpression(self)


    def setNoiseExpression(self, expression):
        """setNoiseExpression(CReaction self, std::string const & expression) -> bool"""
        return _COPASI.CReaction_setNoiseExpression(self, expression)


    def getNoiseExpression(self):
        """getNoiseExpression(CReaction self) -> std::string"""
        return _COPASI.CReaction_getNoiseExpression(self)


    def setNoiseExpressionPtr(self, pExpression):
        """setNoiseExpressionPtr(CReaction self, CExpression pExpression) -> bool"""
        return _COPASI.CReaction_setNoiseExpressionPtr(self, pExpression)


    def getNoiseExpressionPtr(self):
        """getNoiseExpressionPtr(CReaction self) -> CExpression"""
        return _COPASI.CReaction_getNoiseExpressionPtr(self)


    def setHasNoise(self, hasNoise):
        """setHasNoise(CReaction self, bool const & hasNoise)"""
        return _COPASI.CReaction_setHasNoise(self, hasNoise)


    def hasNoise(self):
        """hasNoise(CReaction self) -> bool const &"""
        return _COPASI.CReaction_hasNoise(self)


    def getReactionScheme(self):
        """getReactionScheme(CReaction self) -> std::string"""
        return _COPASI.CReaction_getReactionScheme(self)


    def setReactionScheme(self, *args):
        """
        setReactionScheme(CReaction self, std::string const & scheme, std::string const & newFunction, bool createMetabolites=True, bool createOther=True) -> bool
        setReactionScheme(CReaction self, std::string const & scheme, std::string const & newFunction, bool createMetabolites=True) -> bool
        setReactionScheme(CReaction self, std::string const & scheme, std::string const & newFunction) -> bool
        setReactionScheme(CReaction self, std::string const & scheme) -> bool
        """
        return _COPASI.CReaction_setReactionScheme(self, *args)


    def getCompartmentNumber(self):
        """getCompartmentNumber(CReaction self) -> size_t"""
        return _COPASI.CReaction_getCompartmentNumber(self)


    def getLargestCompartment(self):
        """getLargestCompartment(CReaction self) -> CCompartment"""
        return _COPASI.CReaction_getLargestCompartment(self)


    def setFunctionFromExpressionTree(self, tree, copasi2sbmlmap, pFunctionDB):
        """setFunctionFromExpressionTree(CReaction self, CExpression tree, std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > & copasi2sbmlmap, CFunctionDB pFunctionDB) -> CFunction"""
        return _COPASI.CReaction_setFunctionFromExpressionTree(self, tree, copasi2sbmlmap, pFunctionDB)


    def setSBMLId(self, id):
        """setSBMLId(CReaction self, std::string const & id)"""
        return _COPASI.CReaction_setSBMLId(self, id)


    def getSBMLId(self):
        """getSBMLId(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getSBMLId(self)


    def printDebug(self):
        """printDebug(CReaction self)"""
        return _COPASI.CReaction_printDebug(self)


    def getMap(self):
        """getMap(CReaction self) -> CFunctionParameterMap"""
        return _COPASI.CReaction_getMap(self)


    def setFast(self, fast):
        """setFast(CReaction self, bool const & fast)"""
        return _COPASI.CReaction_setFast(self, fast)


    def isFast(self):
        """isFast(CReaction self) -> bool const &"""
        return _COPASI.CReaction_isFast(self)


    def setKineticLawUnitType(self, kineticLawUnitType):
        """setKineticLawUnitType(CReaction self, CReaction::KineticLawUnit const & kineticLawUnitType)"""
        return _COPASI.CReaction_setKineticLawUnitType(self, kineticLawUnitType)


    def getKineticLawUnitType(self):
        """getKineticLawUnitType(CReaction self) -> CReaction::KineticLawUnit const &"""
        return _COPASI.CReaction_getKineticLawUnitType(self)


    def getEffectiveKineticLawUnitType(self):
        """getEffectiveKineticLawUnitType(CReaction self) -> CReaction::KineticLawUnit"""
        return _COPASI.CReaction_getEffectiveKineticLawUnitType(self)


    def getKineticLawUnit(self):
        """getKineticLawUnit(CReaction self) -> std::string"""
        return _COPASI.CReaction_getKineticLawUnit(self)


    def setScalingCompartmentCN(self, compartmentCN):
        """setScalingCompartmentCN(CReaction self, std::string const & compartmentCN)"""
        return _COPASI.CReaction_setScalingCompartmentCN(self, compartmentCN)


    def getScalingCompartmentCN(self):
        """getScalingCompartmentCN(CReaction self) -> CCommonName"""
        return _COPASI.CReaction_getScalingCompartmentCN(self)


    def setScalingCompartment(self, pCompartment):
        """setScalingCompartment(CReaction self, CCompartment pCompartment)"""
        return _COPASI.CReaction_setScalingCompartment(self, pCompartment)


    def getScalingCompartment(self):
        """getScalingCompartment(CReaction self) -> CCompartment"""
        return _COPASI.CReaction_getScalingCompartment(self)


    def getParameterCNs(self, *args):
        """
        getParameterCNs(CReaction self, size_t const & index) -> ReportItemVector
        getParameterCNs(CReaction self, std::string const & name) -> ReportItemVector
        getParameterCNs(CReaction self) -> VectorOfReportItemVectors
        """
        return _COPASI.CReaction_getParameterCNs(self, *args)


    def setParameterCNs(self, *args):
        """
        setParameterCNs(CReaction self, size_t const & index, ReportItemVector CNs) -> bool
        setParameterCNs(CReaction self, std::string const & name, ReportItemVector CNs) -> bool
        """
        return _COPASI.CReaction_setParameterCNs(self, *args)


    def getParameterObjects(self, *args):
        """
        getParameterObjects(CReaction self, size_t const & index) -> DataObjectVector
        getParameterObjects(CReaction self, std::string const & name) -> DataObjectVector
        getParameterObjects(CReaction self) -> VectorOfDataObjectVector
        """
        return _COPASI.CReaction_getParameterObjects(self, *args)


    def setParameterObjects(self, *args):
        """
        setParameterObjects(CReaction self, size_t const & index, DataObjectVector objects) -> bool
        setParameterObjects(CReaction self, std::string const & name, DataObjectVector objects) -> bool
        """
        return _COPASI.CReaction_setParameterObjects(self, *args)


    def setParameterObject(self, *args):
        """
        setParameterObject(CReaction self, size_t const & index, CDataObject object) -> bool
        setParameterObject(CReaction self, std::string const & name, CDataObject object) -> bool
        """
        return _COPASI.CReaction_setParameterObject(self, *args)


    def addParameterObject(self, *args):
        """
        addParameterObject(CReaction self, size_t const & index, CDataObject object) -> bool
        addParameterObject(CReaction self, std::string const & name, CDataObject object) -> bool
        """
        return _COPASI.CReaction_addParameterObject(self, *args)


    def setNotes(self, notes):
        """setNotes(CReaction self, std::string const & notes)"""
        return _COPASI.CReaction_setNotes(self, notes)


    def getNotes(self):
        """getNotes(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getNotes(self)


    def getMiriamAnnotation(self):
        """getMiriamAnnotation(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getMiriamAnnotation(self)


    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        """setMiriamAnnotation(CReaction self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CReaction_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)


    def hasUnsupportedAnnotation(self, name):
        """hasUnsupportedAnnotation(CReaction self, std::string name) -> bool"""
        return _COPASI.CReaction_hasUnsupportedAnnotation(self, name)


    def getNumUnsupportedAnnotations(self):
        """getNumUnsupportedAnnotations(CReaction self) -> int"""
        return _COPASI.CReaction_getNumUnsupportedAnnotations(self)


    def getUnsupportedAnnotation(self, *args):
        """
        getUnsupportedAnnotation(CReaction self, std::string name) -> std::string
        getUnsupportedAnnotation(CReaction self, int index) -> std::string
        """
        return _COPASI.CReaction_getUnsupportedAnnotation(self, *args)


    def getUnsupportedAnnotationName(self, index):
        """getUnsupportedAnnotationName(CReaction self, int index) -> std::string"""
        return _COPASI.CReaction_getUnsupportedAnnotationName(self, index)


    def addUnsupportedAnnotation(self, name, xml):
        """addUnsupportedAnnotation(CReaction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CReaction_addUnsupportedAnnotation(self, name, xml)


    def replaceUnsupportedAnnotation(self, name, xml):
        """replaceUnsupportedAnnotation(CReaction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CReaction_replaceUnsupportedAnnotation(self, name, xml)


    def removeUnsupportedAnnotation(self, name):
        """removeUnsupportedAnnotation(CReaction self, std::string const & name) -> bool"""
        return _COPASI.CReaction_removeUnsupportedAnnotation(self, name)

CReaction_swigregister = _COPASI.CReaction_swigregister
CReaction_swigregister(CReaction)

def CReaction_fromData(data, pParent):
    """CReaction_fromData(CData data, CUndoObjectInterface pParent) -> CReaction"""
    return _COPASI.CReaction_fromData(data, pParent)

class CReactionInterface(_object):
    """Proxy of C++ CReactionInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReactionInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CReactionInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CReactionInterface self) -> CReactionInterface"""
        this = _COPASI.new_CReactionInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReactionInterface
    __del__ = lambda self: None

    def setChemEqString(self, eq, newFunction):
        """setChemEqString(CReactionInterface self, std::string const & eq, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_setChemEqString(self, eq, newFunction)


    def clearChemEquation(self):
        """clearChemEquation(CReactionInterface self)"""
        return _COPASI.CReactionInterface_clearChemEquation(self)


    def getChemEqString(self):
        """getChemEqString(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getChemEqString(self)


    def getChemEqInterface(self):
        """getChemEqInterface(CReactionInterface self) -> CChemEqInterface"""
        return _COPASI.CReactionInterface_getChemEqInterface(self)


    def isReversible(self):
        """isReversible(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isReversible(self)


    def isMulticompartment(self):
        """isMulticompartment(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isMulticompartment(self)


    def setReversibility(self, rev, newFunction):
        """setReversibility(CReactionInterface self, bool rev, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_setReversibility(self, rev, newFunction)


    def reverse(self, rev, newFunction):
        """reverse(CReactionInterface self, bool rev, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_reverse(self, rev, newFunction)


    def getListOfMetabs(self, role):
        """getListOfMetabs(CReactionInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CReactionInterface_getListOfMetabs(self, role)


    def setFunctionWithEmptyMapping(self, fn):
        """setFunctionWithEmptyMapping(CReactionInterface self, std::string const & fn)"""
        return _COPASI.CReactionInterface_setFunctionWithEmptyMapping(self, fn)


    def setFunctionAndDoMapping(self, fn):
        """setFunctionAndDoMapping(CReactionInterface self, std::string const & fn)"""
        return _COPASI.CReactionInterface_setFunctionAndDoMapping(self, fn)


    def getFunctionName(self):
        """getFunctionName(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getFunctionName(self)


    def getFunctionDescription(self):
        """getFunctionDescription(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getFunctionDescription(self)


    def getFunction(self):
        """getFunction(CReactionInterface self) -> CFunction"""
        return _COPASI.CReactionInterface_getFunction(self)


    def getListOfPossibleFunctions(self):
        """getListOfPossibleFunctions(CReactionInterface self) -> StringStdVector"""
        return _COPASI.CReactionInterface_getListOfPossibleFunctions(self)


    def size(self):
        """size(CReactionInterface self) -> size_t"""
        return _COPASI.CReactionInterface_size(self)


    def isVector(self, index):
        """isVector(CReactionInterface self, size_t index) -> bool"""
        return _COPASI.CReactionInterface_isVector(self, index)


    def getUsage(self, index):
        """getUsage(CReactionInterface self, size_t index) -> CFunctionParameter::Role"""
        return _COPASI.CReactionInterface_getUsage(self, index)


    def getParameterName(self, index):
        """getParameterName(CReactionInterface self, size_t index) -> std::string"""
        return _COPASI.CReactionInterface_getParameterName(self, index)


    def setMapping(self, index, mn):
        """setMapping(CReactionInterface self, size_t index, std::string mn)"""
        return _COPASI.CReactionInterface_setMapping(self, index, mn)


    def getMappings(self, index):
        """getMappings(CReactionInterface self, size_t index) -> StringStdVector"""
        return _COPASI.CReactionInterface_getMappings(self, index)


    def getMapping(self, index):
        """getMapping(CReactionInterface self, size_t index) -> std::string const &"""
        return _COPASI.CReactionInterface_getMapping(self, index)


    def getUnitVector(self, index):
        """getUnitVector(CReactionInterface self, size_t index) -> StringStdVector"""
        return _COPASI.CReactionInterface_getUnitVector(self, index)


    def getUnit(self, index):
        """getUnit(CReactionInterface self, size_t index) -> std::string"""
        return _COPASI.CReactionInterface_getUnit(self, index)


    def setLocalValue(self, index, value):
        """setLocalValue(CReactionInterface self, size_t index, double value)"""
        return _COPASI.CReactionInterface_setLocalValue(self, index, value)


    def setLocal(self, index):
        """setLocal(CReactionInterface self, size_t index)"""
        return _COPASI.CReactionInterface_setLocal(self, index)


    def getLocalValue(self, index):
        """getLocalValue(CReactionInterface self, size_t index) -> double const &"""
        return _COPASI.CReactionInterface_getLocalValue(self, index)


    def isLocalValue(self, index):
        """isLocalValue(CReactionInterface self, size_t index) -> bool"""
        return _COPASI.CReactionInterface_isLocalValue(self, index)


    def init(self, reaction):
        """init(CReactionInterface self, CReaction reaction)"""
        return _COPASI.CReactionInterface_init(self, reaction)


    def writeBackToReaction(self, rea=None, compile=True):
        """
        writeBackToReaction(CReactionInterface self, CReaction rea=None, bool compile=True) -> bool
        writeBackToReaction(CReactionInterface self, CReaction rea=None) -> bool
        writeBackToReaction(CReactionInterface self) -> bool
        """
        return _COPASI.CReactionInterface_writeBackToReaction(self, rea, compile)


    def createUndoData(self, framework):
        """createUndoData(CReactionInterface self, CCore::Framework const & framework) -> CUndoData"""
        return _COPASI.CReactionInterface_createUndoData(self, framework)


    def createMetabolites(self, *args):
        """
        createMetabolites(CReactionInterface self) -> bool
        createMetabolites(CReactionInterface self, StringStdVector createdKeys) -> bool
        """
        return _COPASI.CReactionInterface_createMetabolites(self, *args)


    def createOtherObjects(self, *args):
        """
        createOtherObjects(CReactionInterface self) -> bool
        createOtherObjects(CReactionInterface self, StringStdVector createdKeys) -> bool
        """
        return _COPASI.CReactionInterface_createOtherObjects(self, *args)


    def isValid(self):
        """isValid(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isValid(self)


    def isLocked(self, *args):
        """
        isLocked(CReactionInterface self, size_t index) -> bool
        isLocked(CReactionInterface self, CFunctionParameter::Role usage) -> bool
        """
        return _COPASI.CReactionInterface_isLocked(self, *args)


    def getDeletedParameters(self):
        """getDeletedParameters(CReactionInterface self) -> DataObjectSet"""
        return _COPASI.CReactionInterface_getDeletedParameters(self)


    def setKineticLawUnitType(self, kineticLawUnitType):
        """setKineticLawUnitType(CReactionInterface self, CReaction::KineticLawUnit const & kineticLawUnitType)"""
        return _COPASI.CReactionInterface_setKineticLawUnitType(self, kineticLawUnitType)


    def getKineticLawUnitType(self):
        """getKineticLawUnitType(CReactionInterface self) -> CReaction::KineticLawUnit const &"""
        return _COPASI.CReactionInterface_getKineticLawUnitType(self)


    def getEffectiveKineticLawUnitType(self):
        """getEffectiveKineticLawUnitType(CReactionInterface self) -> CReaction::KineticLawUnit"""
        return _COPASI.CReactionInterface_getEffectiveKineticLawUnitType(self)


    def getConcentrationRateUnit(self):
        """getConcentrationRateUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getConcentrationRateUnit(self)


    def getAmountRateUnit(self):
        """getAmountRateUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getAmountRateUnit(self)


    def getEffectiveKineticLawUnit(self):
        """getEffectiveKineticLawUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getEffectiveKineticLawUnit(self)


    def setScalingCompartment(self, scalingCompartment):
        """setScalingCompartment(CReactionInterface self, std::string const & scalingCompartment)"""
        return _COPASI.CReactionInterface_setScalingCompartment(self, scalingCompartment)


    def getScalingCompartment(self):
        """getScalingCompartment(CReactionInterface self) -> std::string const &"""
        return _COPASI.CReactionInterface_getScalingCompartment(self)


    def getDefaultScalingCompartment(self):
        """getDefaultScalingCompartment(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getDefaultScalingCompartment(self)


    def setHasNoise(self, hasNoise):
        """setHasNoise(CReactionInterface self, bool const & hasNoise)"""
        return _COPASI.CReactionInterface_setHasNoise(self, hasNoise)


    def hasNoise(self):
        """hasNoise(CReactionInterface self) -> bool const &"""
        return _COPASI.CReactionInterface_hasNoise(self)


    def setNoiseExpression(self, expression):
        """setNoiseExpression(CReactionInterface self, std::string const & expression) -> bool"""
        return _COPASI.CReactionInterface_setNoiseExpression(self, expression)


    def getNoiseExpression(self):
        """getNoiseExpression(CReactionInterface self) -> std::string const &"""
        return _COPASI.CReactionInterface_getNoiseExpression(self)

CReactionInterface_swigregister = _COPASI.CReactionInterface_swigregister
CReactionInterface_swigregister(CReactionInterface)

class ObjectStdVector(_object):
    """Proxy of C++ std::vector<(p.CDataObject)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ObjectStdVector self) -> SwigPyIterator"""
        return _COPASI.ObjectStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector___bool__(self)


    def __len__(self):
        """__len__(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j) -> ObjectStdVector"""
        return _COPASI.ObjectStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j)
        __setslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j, ObjectStdVector v)
        """
        return _COPASI.ObjectStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j)"""
        return _COPASI.ObjectStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i)
        __delitem__(ObjectStdVector self, PySliceObject * slice)
        """
        return _COPASI.ObjectStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ObjectStdVector self, PySliceObject * slice) -> ObjectStdVector
        __getitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i) -> CDataObject
        """
        return _COPASI.ObjectStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ObjectStdVector self, PySliceObject * slice, ObjectStdVector v)
        __setitem__(ObjectStdVector self, PySliceObject * slice)
        __setitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, CDataObject x)
        """
        return _COPASI.ObjectStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_pop(self)


    def append(self, x):
        """append(ObjectStdVector self, CDataObject x)"""
        return _COPASI.ObjectStdVector_append(self, x)


    def empty(self):
        """empty(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector_empty(self)


    def size(self):
        """size(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector_size(self)


    def swap(self, v):
        """swap(ObjectStdVector self, ObjectStdVector v)"""
        return _COPASI.ObjectStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ObjectStdVector self) -> std::vector< CDataObject * >::reverse_iterator"""
        return _COPASI.ObjectStdVector_rbegin(self)


    def rend(self):
        """rend(ObjectStdVector self) -> std::vector< CDataObject * >::reverse_iterator"""
        return _COPASI.ObjectStdVector_rend(self)


    def clear(self):
        """clear(ObjectStdVector self)"""
        return _COPASI.ObjectStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ObjectStdVector self) -> std::vector< CDataObject * >::allocator_type"""
        return _COPASI.ObjectStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ObjectStdVector self)"""
        return _COPASI.ObjectStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ObjectStdVector self, std::vector< CDataObject * >::iterator pos) -> std::vector< CDataObject * >::iterator
        erase(ObjectStdVector self, std::vector< CDataObject * >::iterator first, std::vector< CDataObject * >::iterator last) -> std::vector< CDataObject * >::iterator
        """
        return _COPASI.ObjectStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CDataObject)> self) -> ObjectStdVector
        __init__(std::vector<(p.CDataObject)> self, ObjectStdVector arg2) -> ObjectStdVector
        __init__(std::vector<(p.CDataObject)> self, std::vector< CDataObject * >::size_type size) -> ObjectStdVector
        __init__(std::vector<(p.CDataObject)> self, std::vector< CDataObject * >::size_type size, CDataObject value) -> ObjectStdVector
        """
        this = _COPASI.new_ObjectStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ObjectStdVector self, CDataObject x)"""
        return _COPASI.ObjectStdVector_push_back(self, x)


    def front(self):
        """front(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_front(self)


    def back(self):
        """back(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_back(self)


    def assign(self, n, x):
        """assign(ObjectStdVector self, std::vector< CDataObject * >::size_type n, CDataObject x)"""
        return _COPASI.ObjectStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ObjectStdVector self, std::vector< CDataObject * >::size_type new_size)
        resize(ObjectStdVector self, std::vector< CDataObject * >::size_type new_size, CDataObject x)
        """
        return _COPASI.ObjectStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ObjectStdVector self, std::vector< CDataObject * >::iterator pos, CDataObject x) -> std::vector< CDataObject * >::iterator
        insert(ObjectStdVector self, std::vector< CDataObject * >::iterator pos, std::vector< CDataObject * >::size_type n, CDataObject x)
        """
        return _COPASI.ObjectStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ObjectStdVector self, std::vector< CDataObject * >::size_type n)"""
        return _COPASI.ObjectStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ObjectStdVector
    __del__ = lambda self: None
ObjectStdVector_swigregister = _COPASI.ObjectStdVector_swigregister
ObjectStdVector_swigregister(ObjectStdVector)

class CUnitComponent(_object):
    """Proxy of C++ CUnitComponent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUnitComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUnitComponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CUnitComponent self, CBaseUnit::Kind kind, double multiplier=1, double scale=0, double exponent=1) -> CUnitComponent
        __init__(CUnitComponent self, CBaseUnit::Kind kind, double multiplier=1, double scale=0) -> CUnitComponent
        __init__(CUnitComponent self, CUnitComponent src) -> CUnitComponent
        """
        this = _COPASI.new_CUnitComponent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMultiplier(self):
        """getMultiplier(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getMultiplier(self)


    def getScale(self):
        """getScale(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getScale(self)


    def getExponent(self):
        """getExponent(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getExponent(self)


    def setMultiplier(self, multiplier):
        """setMultiplier(CUnitComponent self, double multiplier)"""
        return _COPASI.CUnitComponent_setMultiplier(self, multiplier)


    def setScale(self, scale):
        """setScale(CUnitComponent self, double scale)"""
        return _COPASI.CUnitComponent_setScale(self, scale)


    def setExponent(self, exponent):
        """setExponent(CUnitComponent self, double exponent)"""
        return _COPASI.CUnitComponent_setExponent(self, exponent)


    def __lt__(self, rightSide):
        """__lt__(CUnitComponent self, CUnitComponent rightSide) -> bool"""
        return _COPASI.CUnitComponent___lt__(self, rightSide)


    def isEqual(self, rightSide):
        """isEqual(CUnitComponent self, CUnitComponent rightSide) -> bool"""
        return _COPASI.CUnitComponent_isEqual(self, rightSide)


    def isValid(self):
        """isValid(CUnitComponent self) -> bool"""
        return _COPASI.CUnitComponent_isValid(self)

    __swig_destroy__ = _COPASI.delete_CUnitComponent
    __del__ = lambda self: None

    __metaclass__ = AutoProperty

CUnitComponent_swigregister = _COPASI.CUnitComponent_swigregister
CUnitComponent_swigregister(CUnitComponent)

class CUnit(_object):
    """Proxy of C++ CUnit class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUnit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Avogadro"] = _COPASI.CUnit_Avogadro_set
    __swig_getmethods__["Avogadro"] = _COPASI.CUnit_Avogadro_get
    if _newclass:
        Avogadro = _swig_property(_COPASI.CUnit_Avogadro_get, _COPASI.CUnit_Avogadro_set)
    time = _COPASI.CUnit_time
    quantity = _COPASI.CUnit_quantity
    volume = _COPASI.CUnit_volume
    area = _COPASI.CUnit_area
    length = _COPASI.CUnit_length
    dimensionlessVolume = _COPASI.CUnit_dimensionlessVolume
    m3 = _COPASI.CUnit_m3
    l = _COPASI.CUnit_l
    ml = _COPASI.CUnit_ml
    microl = _COPASI.CUnit_microl
    nl = _COPASI.CUnit_nl
    pl = _COPASI.CUnit_pl
    fl = _COPASI.CUnit_fl
    dimensionlessArea = _COPASI.CUnit_dimensionlessArea
    m2 = _COPASI.CUnit_m2
    dm2 = _COPASI.CUnit_dm2
    cm2 = _COPASI.CUnit_cm2
    mm2 = _COPASI.CUnit_mm2
    microm2 = _COPASI.CUnit_microm2
    nm2 = _COPASI.CUnit_nm2
    pm2 = _COPASI.CUnit_pm2
    fm2 = _COPASI.CUnit_fm2
    dimensionlessLength = _COPASI.CUnit_dimensionlessLength
    m = _COPASI.CUnit_m
    dm = _COPASI.CUnit_dm
    cm = _COPASI.CUnit_cm
    mm = _COPASI.CUnit_mm
    microm = _COPASI.CUnit_microm
    nm = _COPASI.CUnit_nm
    pm = _COPASI.CUnit_pm
    fm = _COPASI.CUnit_fm
    dimensionlessTime = _COPASI.CUnit_dimensionlessTime
    d = _COPASI.CUnit_d
    h = _COPASI.CUnit_h
    min = _COPASI.CUnit_min
    s = _COPASI.CUnit_s
    ms = _COPASI.CUnit_ms
    micros = _COPASI.CUnit_micros
    ns = _COPASI.CUnit_ns
    ps = _COPASI.CUnit_ps
    fs = _COPASI.CUnit_fs
    OldMinute = _COPASI.CUnit_OldMinute
    dimensionlessQuantity = _COPASI.CUnit_dimensionlessQuantity
    Mol = _COPASI.CUnit_Mol
    mMol = _COPASI.CUnit_mMol
    microMol = _COPASI.CUnit_microMol
    nMol = _COPASI.CUnit_nMol
    pMol = _COPASI.CUnit_pMol
    fMol = _COPASI.CUnit_fMol
    number = _COPASI.CUnit_number
    OldXML = _COPASI.CUnit_OldXML

    def prettyPrint(expression):
        """prettyPrint(std::string const & expression) -> std::string"""
        return _COPASI.CUnit_prettyPrint(expression)

    prettyPrint = staticmethod(prettyPrint)

    def __init__(self, *args):
        """
        __init__(CUnit self) -> CUnit
        __init__(CUnit self, CBaseUnit::Kind const & kind) -> CUnit
        __init__(CUnit self, std::string const & expression) -> CUnit
        __init__(CUnit self, CUnit src) -> CUnit
        """
        this = _COPASI.new_CUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CUnit
    __del__ = lambda self: None

    def setExpression(self, expression):
        """setExpression(CUnit self, std::string const & expression) -> CIssue"""
        return _COPASI.CUnit_setExpression(self, expression)


    def getExpression(self):
        """getExpression(CUnit self) -> std::string"""
        return _COPASI.CUnit_getExpression(self)


    def getUsedSymbols(self):
        """getUsedSymbols(CUnit self) -> StringSet"""
        return _COPASI.CUnit_getUsedSymbols(self)


    def replaceSymbol(self, *args):
        """
        replaceSymbol(CUnit self, std::string const & expression, std::string const & oldSymbol, std::string const & newSymbol) -> std::string
        replaceSymbol(CUnit self, std::string const & oldSymbol, std::string const & newSymbol)
        """
        return _COPASI.CUnit_replaceSymbol(self, *args)


    def isDimensionless(self):
        """isDimensionless(CUnit self) -> bool"""
        return _COPASI.CUnit_isDimensionless(self)


    def isUndefined(self):
        """isUndefined(CUnit self) -> bool"""
        return _COPASI.CUnit_isUndefined(self)


    def isValid(self):
        """isValid(CUnit self) -> bool"""
        return _COPASI.CUnit_isValid(self)


    def addComponent(self, component):
        """addComponent(CUnit self, CUnitComponent component)"""
        return _COPASI.CUnit_addComponent(self, component)


    def getComponents(self):
        """getComponents(CUnit self) -> std::set< CUnitComponent,std::less< CUnitComponent >,std::allocator< CUnitComponent > > const &"""
        return _COPASI.CUnit_getComponents(self)


    def compile(self):
        """compile(CUnit self) -> CIssue"""
        return _COPASI.CUnit_compile(self)


    def exponentiate(self, exp):
        """exponentiate(CUnit self, double exp) -> CUnit"""
        return _COPASI.CUnit_exponentiate(self, exp)


    def mul(self, rightSide):
        """mul(CUnit self, CUnit rightSide) -> CUnit"""
        return _COPASI.CUnit_mul(self, rightSide)


    def isEqual(self, rightSide):
        """isEqual(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit_isEqual(self, rightSide)


    def __lt__(self, rightSide):
        """__lt__(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit___lt__(self, rightSide)


    def isEquivalent(self, rightSide):
        """isEquivalent(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit_isEquivalent(self, rightSide)


    def buildExpression(self):
        """buildExpression(CUnit self)"""
        return _COPASI.CUnit_buildExpression(self)


    def isUnitType(self, type):
        """isUnitType(CUnit self, CUnit::UnitType type) -> bool"""
        return _COPASI.CUnit_isUnitType(self, type)


    def setDimensionLess(self, multiplier, scale, exponent):
        """setDimensionLess(CUnit self, double multiplier, double scale, double exponent)"""
        return _COPASI.CUnit_setDimensionLess(self, multiplier, scale, exponent)


    __metaclass__ = AutoProperty

CUnit_swigregister = _COPASI.CUnit_swigregister
CUnit_swigregister(CUnit)

def CUnit_prettyPrint(expression):
    """CUnit_prettyPrint(std::string const & expression) -> std::string"""
    return _COPASI.CUnit_prettyPrint(expression)

class CValidatedUnit(CUnit):
    """Proxy of C++ CValidatedUnit class."""

    __swig_setmethods__ = {}
    for _s in [CUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CValidatedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [CUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CValidatedUnit, name)
    __repr__ = _swig_repr

    def merge(a, b):
        """merge(CValidatedUnit a, CValidatedUnit b) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_merge(a, b)

    merge = staticmethod(merge)

    def __init__(self, *args):
        """
        __init__(CValidatedUnit self) -> CValidatedUnit
        __init__(CValidatedUnit self, CValidatedUnit src) -> CValidatedUnit
        __init__(CValidatedUnit self, CUnit unit, bool const & conflict) -> CValidatedUnit
        """
        this = _COPASI.new_CValidatedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CValidatedUnit
    __del__ = lambda self: None

    def exponentiate(self, exponent):
        """exponentiate(CValidatedUnit self, double const & exponent) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_exponentiate(self, exponent)


    def mul(self, rightSide):
        """mul(CValidatedUnit self, CValidatedUnit rightSide) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_mul(self, rightSide)


    def setConflict(self, conflict):
        """setConflict(CValidatedUnit self, bool const & conflict)"""
        return _COPASI.CValidatedUnit_setConflict(self, conflict)


    def conflict(self):
        """conflict(CValidatedUnit self) -> bool const &"""
        return _COPASI.CValidatedUnit_conflict(self)


    def __lt__(self, rightSide):
        """__lt__(CValidatedUnit self, CValidatedUnit rightSide) -> bool"""
        return _COPASI.CValidatedUnit___lt__(self, rightSide)

CValidatedUnit_swigregister = _COPASI.CValidatedUnit_swigregister
CValidatedUnit_swigregister(CValidatedUnit)

def CValidatedUnit_merge(a, b):
    """CValidatedUnit_merge(CValidatedUnit a, CValidatedUnit b) -> CValidatedUnit"""
    return _COPASI.CValidatedUnit_merge(a, b)

class CMathObject(CObjectInterface):
    """Proxy of C++ CMathObject class."""

    __swig_setmethods__ = {}
    for _s in [CObjectInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CObjectInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMathObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMathObject self) -> CMathObject
        __init__(CMathObject self, CMathObject src) -> CMathObject
        """
        this = _COPASI.new_CMathObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathObject
    __del__ = lambda self: None

    def copy(self, src, container):
        """copy(CMathObject self, CMathObject src, CMathContainer container)"""
        return _COPASI.CMathObject_copy(self, src, container)


    def relocate(self, pContainer, relocations):
        """relocate(CMathObject self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathObject_relocate(self, pContainer, relocations)


    def moved(self):
        """moved(CMathObject self)"""
        return _COPASI.CMathObject_moved(self)


    def getCN(self):
        """getCN(CMathObject self) -> CCommonName"""
        return _COPASI.CMathObject_getCN(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CMathObject self) -> std::string"""
        return _COPASI.CMathObject_getObjectDisplayName(self)


    def getObject(self, cn):
        """getObject(CMathObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathObject_getObject(self, cn)


    def setDataObject(self, pDataObject):
        """setDataObject(CMathObject self, CDataObject pDataObject)"""
        return _COPASI.CMathObject_setDataObject(self, pDataObject)


    def getDataObject(self):
        """getDataObject(CMathObject self) -> CDataObject"""
        return _COPASI.CMathObject_getDataObject(self)


    def validityChanged(self, changedValidity):
        """validityChanged(CMathObject self, CValidity changedValidity)"""
        return _COPASI.CMathObject_validityChanged(self, changedValidity)


    def calculateValue(self):
        """calculateValue(CMathObject self)"""
        return _COPASI.CMathObject_calculateValue(self)


    def getValue(self):
        """getValue(CMathObject self) -> double const &"""
        return _COPASI.CMathObject_getValue(self)


    def canCalculateValue(self):
        """canCalculateValue(CMathObject self) -> bool"""
        return _COPASI.CMathObject_canCalculateValue(self)


    def initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject):
        """initialize(CMathObject pObject, double * pValue, CMath::ValueType const & valueType, CMath::EntityType const & entityType, CMath::SimulationType const & simulationType, bool const & isIntensiveProperty, bool const & isInitialValue, CDataObject pDataObject)"""
        return _COPASI.CMathObject_initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject)

    initialize = staticmethod(initialize)

    def compile(self, container):
        """compile(CMathObject self, CMathContainer container) -> bool"""
        return _COPASI.CMathObject_compile(self, container)


    def getValueType(self):
        """getValueType(CMathObject self) -> CMath::ValueType const &"""
        return _COPASI.CMathObject_getValueType(self)


    def setValueType(self, valueType):
        """setValueType(CMathObject self, CMath::ValueType const & valueType)"""
        return _COPASI.CMathObject_setValueType(self, valueType)


    def getEntityType(self):
        """getEntityType(CMathObject self) -> CMath::EntityType const &"""
        return _COPASI.CMathObject_getEntityType(self)


    def getSimulationType(self):
        """getSimulationType(CMathObject self) -> CMath::SimulationType const &"""
        return _COPASI.CMathObject_getSimulationType(self)


    def setSimulationType(self, simulationType):
        """setSimulationType(CMathObject self, CMath::SimulationType const & simulationType)"""
        return _COPASI.CMathObject_setSimulationType(self, simulationType)


    def isIntensiveProperty(self):
        """isIntensiveProperty(CMathObject self) -> bool const &"""
        return _COPASI.CMathObject_isIntensiveProperty(self)


    def isInitialValue(self):
        """isInitialValue(CMathObject self) -> bool const &"""
        return _COPASI.CMathObject_isInitialValue(self)


    def getCorrespondingProperty(self):
        """getCorrespondingProperty(CMathObject self) -> CMathObject"""
        return _COPASI.CMathObject_getCorrespondingProperty(self)


    def getCompartmentValue(self):
        """getCompartmentValue(CMathObject self) -> double const *"""
        return _COPASI.CMathObject_getCompartmentValue(self)


    def setExpression(self, *args):
        """
        setExpression(CMathObject self, std::string const & infix, bool const & isBoolean, CMathContainer container) -> bool
        setExpression(CMathObject self, CExpression expression, CMathContainer container) -> bool
        """
        return _COPASI.CMathObject_setExpression(self, *args)


    def setExpressionPtr(self, pMathExpression):
        """setExpressionPtr(CMathObject self, CMathExpression * pMathExpression) -> bool"""
        return _COPASI.CMathObject_setExpressionPtr(self, pMathExpression)


    def getExpressionPtr(self):
        """getExpressionPtr(CMathObject self) -> CMathExpression const *"""
        return _COPASI.CMathObject_getExpressionPtr(self)


    def appendDelays(self, Delays):
        """appendDelays(CMathObject self, CMath::DelayData & Delays)"""
        return _COPASI.CMathObject_appendDelays(self, Delays)

CMathObject_swigregister = _COPASI.CMathObject_swigregister
CMathObject_swigregister(CMathObject)

def CMathObject_initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject):
    """CMathObject_initialize(CMathObject pObject, double * pValue, CMath::ValueType const & valueType, CMath::EntityType const & entityType, CMath::SimulationType const & simulationType, bool const & isIntensiveProperty, bool const & isInitialValue, CDataObject pDataObject)"""
    return _COPASI.CMathObject_initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject)

class CMathEvent(_object):
    """Proxy of C++ CMathEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMathEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMathEvent self) -> CMathEvent
        __init__(CMathEvent self, CMathEvent src) -> CMathEvent
        """
        this = _COPASI.new_CMathEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathEvent
    __del__ = lambda self: None

    def allocate(Event, pDataEvent, container):
        """allocate(CMathEvent Event, CEvent pDataEvent, CMathContainer container)"""
        return _COPASI.CMathEvent_allocate(Event, pDataEvent, container)

    allocate = staticmethod(allocate)

    def initialize(self, pointers):
        """initialize(CMathEvent self, CMath::sPointers & pointers)"""
        return _COPASI.CMathEvent_initialize(self, pointers)


    def copy(self, src, container):
        """copy(CMathEvent self, CMathEvent src, CMathContainer container)"""
        return _COPASI.CMathEvent_copy(self, src, container)


    def moved(self):
        """moved(CMathEvent self)"""
        return _COPASI.CMathEvent_moved(self)


    def relocate(self, pContainer, relocations):
        """relocate(CMathEvent self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathEvent_relocate(self, pContainer, relocations)


    def compile(self, *args):
        """
        compile(CMathEvent self, CEvent pDataEvent, CMathContainer container) -> bool
        compile(CMathEvent self, CMathContainer container) -> bool
        """
        return _COPASI.CMathEvent_compile(self, *args)


    def createUpdateSequences(self):
        """createUpdateSequences(CMathEvent self)"""
        return _COPASI.CMathEvent_createUpdateSequences(self)


    def fire(self, equality):
        """fire(CMathEvent self, bool const & equality)"""
        return _COPASI.CMathEvent_fire(self, equality)


    def addPendingAction(self, pendingAction):
        """addPendingAction(CMathEvent self, CMathEventQueue::iterator const & pendingAction)"""
        return _COPASI.CMathEvent_addPendingAction(self, pendingAction)


    def removePendingAction(self):
        """removePendingAction(CMathEvent self)"""
        return _COPASI.CMathEvent_removePendingAction(self)


    def getTargetValues(self):
        """getTargetValues(CMathEvent self) -> FloatVectorCore"""
        return _COPASI.CMathEvent_getTargetValues(self)


    def setTargetValues(self, targetValues):
        """setTargetValues(CMathEvent self, FloatVectorCore targetValues) -> CMath::StateChange"""
        return _COPASI.CMathEvent_setTargetValues(self, targetValues)


    def executeAssignment(self):
        """executeAssignment(CMathEvent self) -> CMath::StateChange"""
        return _COPASI.CMathEvent_executeAssignment(self)


    def delayAssignment(self):
        """delayAssignment(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_delayAssignment(self)


    def fireAtInitialTime(self):
        """fireAtInitialTime(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_fireAtInitialTime(self)


    def setTriggerExpression(self, infix, container):
        """setTriggerExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setTriggerExpression(self, infix, container)


    def setDelayExpression(self, infix, container):
        """setDelayExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setDelayExpression(self, infix, container)


    def setPriorityExpression(self, infix, container):
        """setPriorityExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setPriorityExpression(self, infix, container)


    def addAssignment(self, pTarget, pExpression):
        """addAssignment(CMathEvent self, CMathObject pTarget, CMathObject pExpression)"""
        return _COPASI.CMathEvent_addAssignment(self, pTarget, pExpression)


    def getTrigger(self):
        """getTrigger(CMathEvent self) -> CMathEvent::CTrigger const &"""
        return _COPASI.CMathEvent_getTrigger(self)


    def getAssignments(self):
        """getAssignments(CMathEvent self) -> CVector< CMathEvent::CAssignment > const &"""
        return _COPASI.CMathEvent_getAssignments(self)


    def getPriority(self):
        """getPriority(CMathEvent self) -> CMathObject"""
        return _COPASI.CMathEvent_getPriority(self)


    def getCalculationTime(self):
        """getCalculationTime(CMathEvent self) -> double"""
        return _COPASI.CMathEvent_getCalculationTime(self)


    def getExecutionTime(self):
        """getExecutionTime(CMathEvent self) -> double"""
        return _COPASI.CMathEvent_getExecutionTime(self)


    def getType(self):
        """getType(CMathEvent self) -> CEvent::Type const &"""
        return _COPASI.CMathEvent_getType(self)


    def setCallback(self, pCallback):
        """setCallback(CMathEvent self, CCallbackInterface * pCallback)"""
        return _COPASI.CMathEvent_setCallback(self, pCallback)


    def executeCallback(self, pCaller=None):
        """
        executeCallback(CMathEvent self, void * pCaller=None)
        executeCallback(CMathEvent self)
        """
        return _COPASI.CMathEvent_executeCallback(self, pCaller)


    def setDisabled(self, disabled):
        """setDisabled(CMathEvent self, bool const & disabled)"""
        return _COPASI.CMathEvent_setDisabled(self, disabled)


    def isDisabled(self):
        """isDisabled(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_isDisabled(self)

CMathEvent_swigregister = _COPASI.CMathEvent_swigregister
CMathEvent_swigregister(CMathEvent)

def CMathEvent_allocate(Event, pDataEvent, container):
    """CMathEvent_allocate(CMathEvent Event, CEvent pDataEvent, CMathContainer container)"""
    return _COPASI.CMathEvent_allocate(Event, pDataEvent, container)

class CMathDependencyGraph(_object):
    """Proxy of C++ CMathDependencyGraph class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathDependencyGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMathDependencyGraph, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMathDependencyGraph self, CMathContainer pContainer=None) -> CMathDependencyGraph
        __init__(CMathDependencyGraph self) -> CMathDependencyGraph
        __init__(CMathDependencyGraph self, CMathDependencyGraph src, CMathContainer pContainer=None) -> CMathDependencyGraph
        __init__(CMathDependencyGraph self, CMathDependencyGraph src) -> CMathDependencyGraph
        """
        this = _COPASI.new_CMathDependencyGraph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathDependencyGraph
    __del__ = lambda self: None

    def clear(self):
        """clear(CMathDependencyGraph self)"""
        return _COPASI.CMathDependencyGraph_clear(self)


    def addObject(self, pObject):
        """addObject(CMathDependencyGraph self, CObjectInterface pObject) -> CMathDependencyGraph::iterator"""
        return _COPASI.CMathDependencyGraph_addObject(self, pObject)


    def removeObject(self, pObject):
        """removeObject(CMathDependencyGraph self, CObjectInterface pObject)"""
        return _COPASI.CMathDependencyGraph_removeObject(self, pObject)


    def removePrerequisite(self, pObject, pPrerequisite):
        """removePrerequisite(CMathDependencyGraph self, CObjectInterface pObject, CObjectInterface pPrerequisite)"""
        return _COPASI.CMathDependencyGraph_removePrerequisite(self, pObject, pPrerequisite)


    def getUpdateSequence(self, *args):
        """
        getUpdateSequence(CMathDependencyGraph self, CCore::CUpdateSequence & updateSequence, CCore::SimulationContextFlag const & context, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet const & requestedObjects, CObjectInterface::ObjectSet const & calculatedObjects) -> bool
        getUpdateSequence(CMathDependencyGraph self, CCore::CUpdateSequence & updateSequence, CCore::SimulationContextFlag const & context, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet const & requestedObjects) -> bool
        """
        return _COPASI.CMathDependencyGraph_getUpdateSequence(self, *args)


    def dependsOn(self, *args):
        """
        dependsOn(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface pChangedObject) -> bool
        dependsOn(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface::ObjectSet const & changedObjects) -> bool
        """
        return _COPASI.CMathDependencyGraph_dependsOn(self, *args)


    def hasCircularDependencies(self, pObject, context, pChangedObject):
        """hasCircularDependencies(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface pChangedObject) -> bool"""
        return _COPASI.CMathDependencyGraph_hasCircularDependencies(self, pObject, context, pChangedObject)


    def appendDirectDependents(self, changedObjects, dependentObjects):
        """appendDirectDependents(CMathDependencyGraph self, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet & dependentObjects) -> bool"""
        return _COPASI.CMathDependencyGraph_appendDirectDependents(self, changedObjects, dependentObjects)


    def appendAllDependents(self, *args):
        """
        appendAllDependents(CMathDependencyGraph self, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet & dependentObjects, CObjectInterface::ObjectSet const & ignoredObjects) -> bool
        appendAllDependents(CMathDependencyGraph self, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet & dependentObjects) -> bool
        """
        return _COPASI.CMathDependencyGraph_appendAllDependents(self, *args)


    def relocate(self, pContainer, relocations):
        """relocate(CMathDependencyGraph self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathDependencyGraph_relocate(self, pContainer, relocations)


    def exportDOTFormat(self, os, name):
        """exportDOTFormat(CMathDependencyGraph self, std::ostream & os, std::string const & name)"""
        return _COPASI.CMathDependencyGraph_exportDOTFormat(self, os, name)

CMathDependencyGraph_swigregister = _COPASI.CMathDependencyGraph_swigregister
CMathDependencyGraph_swigregister(CMathDependencyGraph)

class CMathReaction(_object):
    """Proxy of C++ CMathReaction class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathReaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMathReaction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMathReaction self) -> CMathReaction
        __init__(CMathReaction self, CMathReaction src) -> CMathReaction
        """
        this = _COPASI.new_CMathReaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathReaction
    __del__ = lambda self: None

    def initialize(self, pReaction, container):
        """initialize(CMathReaction self, CReaction pReaction, CMathContainer container)"""
        return _COPASI.CMathReaction_initialize(self, pReaction, container)


    def copy(self, src, container):
        """copy(CMathReaction self, CMathReaction src, CMathContainer container)"""
        return _COPASI.CMathReaction_copy(self, src, container)


    def moved(self):
        """moved(CMathReaction self)"""
        return _COPASI.CMathReaction_moved(self)


    def relocate(self, pContainer, relocations):
        """relocate(CMathReaction self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathReaction_relocate(self, pContainer, relocations)


    def fire(self):
        """fire(CMathReaction self)"""
        return _COPASI.CMathReaction_fire(self)


    def fireMultiple(self, count):
        """fireMultiple(CMathReaction self, double const & count)"""
        return _COPASI.CMathReaction_fireMultiple(self, count)


    def getParticleFluxObject(self):
        """getParticleFluxObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getParticleFluxObject(self)


    def getFluxObject(self):
        """getFluxObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getFluxObject(self)


    def getPropensityObject(self):
        """getPropensityObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getPropensityObject(self)


    def getChangedObjects(self):
        """getChangedObjects(CMathReaction self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathReaction_getChangedObjects(self)


    def getNumberBalance(self):
        """getNumberBalance(CMathReaction self) -> CMathReaction::Balance const &"""
        return _COPASI.CMathReaction_getNumberBalance(self)


    def getObjectBalance(self):
        """getObjectBalance(CMathReaction self) -> CMathReaction::ObjectBalance const &"""
        return _COPASI.CMathReaction_getObjectBalance(self)


    def getModelReaction(self):
        """getModelReaction(CMathReaction self) -> CReaction"""
        return _COPASI.CMathReaction_getModelReaction(self)


    def isFast(self):
        """isFast(CMathReaction self) -> bool"""
        return _COPASI.CMathReaction_isFast(self)

CMathReaction_swigregister = _COPASI.CMathReaction_swigregister
CMathReaction_swigregister(CMathReaction)

class CMathDelay(_object):
    """Proxy of C++ CMathDelay class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathDelay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMathDelay, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CMathDelay self) -> CMathDelay"""
        this = _COPASI.new_CMathDelay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathDelay
    __del__ = lambda self: None

    def create(self, itDelayData, delayValueCount, container, pLagObject):
        """create(CMathDelay self, CMath::DelayData::iterator & itDelayData, size_t const & delayValueCount, CMathContainer container, CMathObject pLagObject)"""
        return _COPASI.CMathDelay_create(self, itDelayData, delayValueCount, container, pLagObject)


    def addValueObject(self, itValueData, index, pValueObject):
        """addValueObject(CMathDelay self, CMath::DelayValueData::iterator & itValueData, size_t const & index, CMathObject pValueObject)"""
        return _COPASI.CMathDelay_addValueObject(self, itValueData, index, pValueObject)


    def modifyMathObject(self, itValueData, index):
        """modifyMathObject(CMathDelay self, CMath::DelayValueData::iterator & itValueData, size_t const & index)"""
        return _COPASI.CMathDelay_modifyMathObject(self, itValueData, index)


    def copy(self, src, container):
        """copy(CMathDelay self, CMathDelay src, CMathContainer container)"""
        return _COPASI.CMathDelay_copy(self, src, container)


    def moved(self):
        """moved(CMathDelay self)"""
        return _COPASI.CMathDelay_moved(self)


    def relocate(self, pContainer, relocations):
        """relocate(CMathDelay self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathDelay_relocate(self, pContainer, relocations)


    def createUpdateSequences(self):
        """createUpdateSequences(CMathDelay self)"""
        return _COPASI.CMathDelay_createUpdateSequences(self)


    def calculateDelayValues(self, useMoieties):
        """calculateDelayValues(CMathDelay self, bool const & useMoieties)"""
        return _COPASI.CMathDelay_calculateDelayValues(self, useMoieties)

CMathDelay_swigregister = _COPASI.CMathDelay_swigregister
CMathDelay_swigregister(CMathDelay)

class CMathHistoryCore(_object):
    """Proxy of C++ CMathHistoryCore class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathHistoryCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMathHistoryCore, name)
    __repr__ = _swig_repr

    def __init__(self, rows=0, cols=0, colsAllocated=0, pArray=None):
        """
        __init__(CMathHistoryCore self, size_t const & rows=0, size_t const & cols=0, size_t const & colsAllocated=0, double * pArray=None) -> CMathHistoryCore
        __init__(CMathHistoryCore self, size_t const & rows=0, size_t const & cols=0, size_t const & colsAllocated=0) -> CMathHistoryCore
        __init__(CMathHistoryCore self, size_t const & rows=0, size_t const & cols=0) -> CMathHistoryCore
        __init__(CMathHistoryCore self, size_t const & rows=0) -> CMathHistoryCore
        __init__(CMathHistoryCore self) -> CMathHistoryCore
        """
        this = _COPASI.new_CMathHistoryCore(rows, cols, colsAllocated, pArray)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathHistoryCore
    __del__ = lambda self: None

    def getRow(self, row):
        """getRow(CMathHistoryCore self, size_t const & row) -> FloatVectorCore"""
        return _COPASI.CMathHistoryCore_getRow(self, row)


    def setRow(self, row, values):
        """setRow(CMathHistoryCore self, size_t const & row, FloatVectorCore values)"""
        return _COPASI.CMathHistoryCore_setRow(self, row, values)


    def initialize(self, *args):
        """
        initialize(CMathHistoryCore self, size_t const & rows, size_t const & cols, size_t const & colsAllocated, double * pArray)
        initialize(CMathHistoryCore self, CMathHistoryCore src)
        """
        return _COPASI.CMathHistoryCore_initialize(self, *args)


    def assign(self, rhs):
        """assign(CMathHistoryCore self, CMathHistoryCore rhs) -> CMathHistoryCore"""
        return _COPASI.CMathHistoryCore_assign(self, rhs)


    def rows(self):
        """rows(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_rows(self)


    def cols(self):
        """cols(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_cols(self)


    def colsAllocated(self):
        """colsAllocated(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_colsAllocated(self)


    def size(self):
        """size(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_size(self)


    def array(self):
        """array(CMathHistoryCore self) -> double *"""
        return _COPASI.CMathHistoryCore_array(self)

CMathHistoryCore_swigregister = _COPASI.CMathHistoryCore_swigregister
CMathHistoryCore_swigregister(CMathHistoryCore)

class CMathHistory(CMathHistoryCore):
    """Proxy of C++ CMathHistory class."""

    __swig_setmethods__ = {}
    for _s in [CMathHistoryCore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [CMathHistoryCore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMathHistory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMathHistory self, size_t const & rows=0, size_t const & cols=0, size_t const & colsAllocated=0) -> CMathHistory
        __init__(CMathHistory self, size_t const & rows=0, size_t const & cols=0) -> CMathHistory
        __init__(CMathHistory self, size_t const & rows=0) -> CMathHistory
        __init__(CMathHistory self) -> CMathHistory
        __init__(CMathHistory self, CMathHistoryCore src) -> CMathHistory
        __init__(CMathHistory self, CMathHistory src) -> CMathHistory
        """
        this = _COPASI.new_CMathHistory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathHistory
    __del__ = lambda self: None

    def assign(self, *args):
        """
        assign(CMathHistory self, CMathHistoryCore rhs) -> CMathHistory
        assign(CMathHistory self, CMathHistory rhs) -> CMathHistory
        """
        return _COPASI.CMathHistory_assign(self, *args)


    def resize(self, rows, cols, colsAllocated):
        """resize(CMathHistory self, size_t const & rows, size_t const & cols, size_t const & colsAllocated)"""
        return _COPASI.CMathHistory_resize(self, rows, cols, colsAllocated)

CMathHistory_swigregister = _COPASI.CMathHistory_swigregister
CMathHistory_swigregister(CMathHistory)

class CMathContainer(CDataContainer):
    """Proxy of C++ CMathContainer class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMathContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMathContainer, name)
    __repr__ = _swig_repr

    def relocateUpdateSequence(self, sequence, relocations):
        """relocateUpdateSequence(CMathContainer self, CCore::CUpdateSequence & sequence, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathContainer_relocateUpdateSequence(self, sequence, relocations)


    def relocateObjectSet(self, objectSet, relocations):
        """relocateObjectSet(CMathContainer self, CObjectInterface::ObjectSet & objectSet, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathContainer_relocateObjectSet(self, objectSet, relocations)


    def __init__(self, *args):
        """
        __init__(CMathContainer self, CModel model) -> CMathContainer
        __init__(CMathContainer self, CMathContainer src) -> CMathContainer
        """
        this = _COPASI.new_CMathContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMathContainer
    __del__ = lambda self: None

    def getValues(self):
        """getValues(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getValues(self)


    def setValues(self, values):
        """setValues(CMathContainer self, FloatVectorCore values)"""
        return _COPASI.CMathContainer_setValues(self, values)


    def getInitialState(self):
        """getInitialState(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getInitialState(self)


    def setInitialState(self, initialState):
        """setInitialState(CMathContainer self, FloatVectorCore initialState)"""
        return _COPASI.CMathContainer_setInitialState(self, initialState)


    def getCompleteInitialState(self):
        """getCompleteInitialState(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getCompleteInitialState(self)


    def setCompleteInitialState(self, initialState):
        """setCompleteInitialState(CMathContainer self, FloatVectorCore initialState)"""
        return _COPASI.CMathContainer_setCompleteInitialState(self, initialState)


    def getState(self, reduced):
        """getState(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getState(self, reduced)


    def setState(self, state):
        """setState(CMathContainer self, FloatVectorCore state)"""
        return _COPASI.CMathContainer_setState(self, state)


    def isStateValid(self):
        """isStateValid(CMathContainer self) -> bool"""
        return _COPASI.CMathContainer_isStateValid(self)


    def isAutonomous(self):
        """isAutonomous(CMathContainer self) -> bool const &"""
        return _COPASI.CMathContainer_isAutonomous(self)


    def areObjectsConstant(self, objects):
        """areObjectsConstant(CMathContainer self, CObjectInterface::ObjectSet const & objects) -> bool"""
        return _COPASI.CMathContainer_areObjectsConstant(self, objects)


    def getQuantity2NumberFactor(self):
        """getQuantity2NumberFactor(CMathContainer self) -> double const &"""
        return _COPASI.CMathContainer_getQuantity2NumberFactor(self)


    def getQuantity2NumberFactorObject(self):
        """getQuantity2NumberFactorObject(CMathContainer self) -> CObjectInterface"""
        return _COPASI.CMathContainer_getQuantity2NumberFactorObject(self)


    def getHistory(self, reduced):
        """getHistory(CMathContainer self, bool const & reduced) -> CMathHistoryCore"""
        return _COPASI.CMathContainer_getHistory(self, reduced)


    def setHistory(self, history):
        """setHistory(CMathContainer self, CMathHistoryCore history)"""
        return _COPASI.CMathContainer_setHistory(self, history)


    def getDelayLags(self):
        """getDelayLags(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getDelayLags(self)


    def initializeAtolVector(self, baseTolerance, reduced):
        """initializeAtolVector(CMathContainer self, double const & baseTolerance, bool const & reduced) -> FloatVector"""
        return _COPASI.CMathContainer_initializeAtolVector(self, baseTolerance, reduced)


    def getRate(self, reduced):
        """getRate(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getRate(self, reduced)


    def getNoise(self, reduced):
        """getNoise(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getNoise(self, reduced)


    def resetNoise(self):
        """resetNoise(CMathContainer self)"""
        return _COPASI.CMathContainer_resetNoise(self)


    def getTotalMasses(self):
        """getTotalMasses(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getTotalMasses(self)


    def getParticleFluxes(self):
        """getParticleFluxes(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getParticleFluxes(self)


    def getFluxes(self):
        """getFluxes(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getFluxes(self)


    def getPropensities(self):
        """getPropensities(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getPropensities(self)


    def getRoots(self):
        """getRoots(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getRoots(self)


    def getRootIsDiscrete(self):
        """getRootIsDiscrete(CMathContainer self) -> CVectorCore< bool > const &"""
        return _COPASI.CMathContainer_getRootIsDiscrete(self)


    def getRootIsTimeDependent(self):
        """getRootIsTimeDependent(CMathContainer self) -> CVectorCore< bool > const &"""
        return _COPASI.CMathContainer_getRootIsTimeDependent(self)


    def getRootProcessors(self):
        """getRootProcessors(CMathContainer self) -> CVector< CMathEvent::CTrigger::CRootProcessor * > &"""
        return _COPASI.CMathContainer_getRootProcessors(self)


    def updateInitialValues(self, framework):
        """updateInitialValues(CMathContainer self, CCore::Framework const & framework)"""
        return _COPASI.CMathContainer_updateInitialValues(self, framework)


    def applyInitialValues(self):
        """applyInitialValues(CMathContainer self)"""
        return _COPASI.CMathContainer_applyInitialValues(self)


    def updateSimulatedValues(self, useMoieties):
        """updateSimulatedValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateSimulatedValues(self, useMoieties)


    def updateRootValues(self, useMoieties):
        """updateRootValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateRootValues(self, useMoieties)


    def updateNoiseValues(self, useMoieties):
        """updateNoiseValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateNoiseValues(self, useMoieties)


    def updateTransientDataValues(self):
        """updateTransientDataValues(CMathContainer self)"""
        return _COPASI.CMathContainer_updateTransientDataValues(self)


    def updateHistoryValues(self, useMoieties):
        """updateHistoryValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateHistoryValues(self, useMoieties)


    def updatePriorityValues(self):
        """updatePriorityValues(CMathContainer self)"""
        return _COPASI.CMathContainer_updatePriorityValues(self)


    def applyUpdateSequence(self, updateSequence):
        """applyUpdateSequence(CMathContainer self, CCore::CUpdateSequence const & updateSequence)"""
        return _COPASI.CMathContainer_applyUpdateSequence(self, updateSequence)


    def calculateRootDerivatives(self, rootDerivatives):
        """calculateRootDerivatives(CMathContainer self, FloatVector rootDerivatives)"""
        return _COPASI.CMathContainer_calculateRootDerivatives(self, rootDerivatives)


    def calculateJacobian(self, jacobian, derivationFactor, reduced):
        """calculateJacobian(CMathContainer self, FloatMatrix jacobian, double const & derivationFactor, bool const & reduced)"""
        return _COPASI.CMathContainer_calculateJacobian(self, jacobian, derivationFactor, reduced)


    def calculateJacobianDependencies(self, jacobianDependencies, reduced):
        """calculateJacobianDependencies(CMathContainer self, IntMatrix jacobianDependencies, bool const & reduced)"""
        return _COPASI.CMathContainer_calculateJacobianDependencies(self, jacobianDependencies, reduced)


    def calculateElasticityDependencies(self, elasticityDependencies, reduced):
        """calculateElasticityDependencies(CMathContainer self, IntMatrix elasticityDependencies, bool const & reduced)"""
        return _COPASI.CMathContainer_calculateElasticityDependencies(self, elasticityDependencies, reduced)


    def processQueue(self, equality):
        """processQueue(CMathContainer self, bool const & equality) -> CMath::StateChange"""
        return _COPASI.CMathContainer_processQueue(self, equality)


    def getProcessQueue(self):
        """getProcessQueue(CMathContainer self) -> CMathEventQueue &"""
        return _COPASI.CMathContainer_getProcessQueue(self)


    def getProcessQueueExecutionTime(self):
        """getProcessQueueExecutionTime(CMathContainer self) -> double"""
        return _COPASI.CMathContainer_getProcessQueueExecutionTime(self)


    def fetchInitialState(self):
        """fetchInitialState(CMathContainer self)"""
        return _COPASI.CMathContainer_fetchInitialState(self)


    def pushInitialState(self):
        """pushInitialState(CMathContainer self)"""
        return _COPASI.CMathContainer_pushInitialState(self)


    def fetchState(self):
        """fetchState(CMathContainer self)"""
        return _COPASI.CMathContainer_fetchState(self)


    def pushState(self):
        """pushState(CMathContainer self)"""
        return _COPASI.CMathContainer_pushState(self)


    def pushAllTransientValues(self):
        """pushAllTransientValues(CMathContainer self)"""
        return _COPASI.CMathContainer_pushAllTransientValues(self)


    def getCN(self):
        """getCN(CMathContainer self) -> CCommonName"""
        return _COPASI.CMathContainer_getCN(self)


    def getObject(self, cn):
        """getObject(CMathContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathContainer_getObject(self, cn)


    def getObjectFromCN(self, cn):
        """getObjectFromCN(CMathContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathContainer_getObjectFromCN(self, cn)


    def getMathObject(self, *args):
        """
        getMathObject(CMathContainer self, CObjectInterface pObject) -> CMathObject
        getMathObject(CMathContainer self, double const * pDataValue) -> CMathObject
        getMathObject(CMathContainer self, CCommonName cn) -> CMathObject
        """
        return _COPASI.CMathContainer_getMathObject(self, *args)


    def getDataObject(self, pDataValue):
        """getDataObject(CMathContainer self, double const * pDataValue) -> CDataObject"""
        return _COPASI.CMathContainer_getDataObject(self, pDataValue)


    def getMathReaction(self, pReaction):
        """getMathReaction(CMathContainer self, CReaction pReaction) -> CMathReaction"""
        return _COPASI.CMathContainer_getMathReaction(self, pReaction)


    def getCompartment(self, pObject):
        """getCompartment(CMathContainer self, CMathObject pObject) -> CMathObject"""
        return _COPASI.CMathContainer_getCompartment(self, pObject)


    def getLargestReactionCompartment(self, pReaction):
        """getLargestReactionCompartment(CMathContainer self, CMathReaction pReaction) -> CMathObject"""
        return _COPASI.CMathContainer_getLargestReactionCompartment(self, pReaction)


    def getModel(self):
        """getModel(CMathContainer self) -> CModel"""
        return _COPASI.CMathContainer_getModel(self)


    def getCountFixedEventTargets(self):
        """getCountFixedEventTargets(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountFixedEventTargets(self)


    def getCountODEs(self):
        """getCountODEs(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountODEs(self)


    def getCountIndependentSpecies(self):
        """getCountIndependentSpecies(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountIndependentSpecies(self)


    def getCountDependentSpecies(self):
        """getCountDependentSpecies(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountDependentSpecies(self)


    def getCountAssignments(self):
        """getCountAssignments(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountAssignments(self)


    def getCountFixed(self):
        """getCountFixed(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountFixed(self)


    def getCountNoise(self):
        """getCountNoise(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountNoise(self)


    def addNoiseInputObject(self, pObject):
        """addNoiseInputObject(CMathContainer self, CMathObject pObject)"""
        return _COPASI.CMathContainer_addNoiseInputObject(self, pObject)


    def getNoiseInputObjects(self):
        """getNoiseInputObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getNoiseInputObjects(self)


    def getReactions(self):
        """getReactions(CMathContainer self) -> CVectorCore< CMathReaction > &"""
        return _COPASI.CMathContainer_getReactions(self)


    def getStoichiometry(self, reduced=False):
        """
        getStoichiometry(CMathContainer self, bool const & reduced=False) -> FloatMatrix
        getStoichiometry(CMathContainer self) -> FloatMatrix
        """
        return _COPASI.CMathContainer_getStoichiometry(self, reduced)


    def getEvents(self):
        """getEvents(CMathContainer self) -> CVectorCore< CMathEvent > const &"""
        return _COPASI.CMathContainer_getEvents(self)


    def getInitialDependencies(self):
        """getInitialDependencies(CMathContainer self) -> CMathDependencyGraph"""
        return _COPASI.CMathContainer_getInitialDependencies(self)


    def getTransientDependencies(self):
        """getTransientDependencies(CMathContainer self) -> CMathDependencyGraph"""
        return _COPASI.CMathContainer_getTransientDependencies(self)


    def getInitialStateObjects(self):
        """getInitialStateObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getInitialStateObjects(self)


    def getValueChangeProhibited(self):
        """getValueChangeProhibited(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getValueChangeProhibited(self)


    def getStateObjects(self, reduced=False):
        """
        getStateObjects(CMathContainer self, bool const & reduced=False) -> CObjectInterface::ObjectSet const
        getStateObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &
        """
        return _COPASI.CMathContainer_getStateObjects(self, reduced)


    def getSimulationUpToDateObjects(self):
        """getSimulationUpToDateObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getSimulationUpToDateObjects(self)


    def getSynchronizeInitialValuesSequence(self, framework):
        """getSynchronizeInitialValuesSequence(CMathContainer self, CCore::Framework const & framework) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getSynchronizeInitialValuesSequence(self, framework)


    def getApplyInitialValuesSequence(self):
        """getApplyInitialValuesSequence(CMathContainer self) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getApplyInitialValuesSequence(self)


    def getSimulationValuesSequence(self, useMoieties):
        """getSimulationValuesSequence(CMathContainer self, bool const & useMoieties) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getSimulationValuesSequence(self, useMoieties)


    def getNoiseSequence(self, useMoieties):
        """getNoiseSequence(CMathContainer self, bool const & useMoieties) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getNoiseSequence(self, useMoieties)


    def getTransientDataValueSequence(self):
        """getTransientDataValueSequence(CMathContainer self) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getTransientDataValueSequence(self)


    def copyBranch(self, *args):
        """
        copyBranch(CMathContainer self, CEvaluationNode const * pSrc, bool const & replaceDiscontinuousNodes) -> CEvaluationNode
        copyBranch(CMathContainer self, CEvaluationNode const * pSrc, CMath::Variables< CEvaluationNode * > const & variables, bool const & replaceDiscontinuousNodes) -> CEvaluationNode *
        """
        return _COPASI.CMathContainer_copyBranch(self, *args)


    def replaceDiscontinuousNode(self, pSrc, children):
        """replaceDiscontinuousNode(CMathContainer self, CEvaluationNode const * pSrc, std::vector< CEvaluationNode *,std::allocator< CEvaluationNode * > > const & children) -> CEvaluationNode *"""
        return _COPASI.CMathContainer_replaceDiscontinuousNode(self, pSrc, children)


    def getInitialValuePointer(self, pValue):
        """getInitialValuePointer(CMathContainer self, double const * pValue) -> double *"""
        return _COPASI.CMathContainer_getInitialValuePointer(self, pValue)


    def getInitialValueObject(self, pObject):
        """getInitialValueObject(CMathContainer self, CMathObject pObject) -> CMathObject"""
        return _COPASI.CMathContainer_getInitialValueObject(self, pObject)


    def getValueObject(self, pInitialObject):
        """getValueObject(CMathContainer self, CMathObject pInitialObject) -> CMathObject"""
        return _COPASI.CMathContainer_getValueObject(self, pInitialObject)


    def addAnalysisObject(self, dataOjects, simulationType, infix):
        """addAnalysisObject(CMathContainer self, CMath::Entity< CDataObject > const & dataOjects, CMath::SimulationType const & simulationType, std::string const & infix) -> CMath::Entity< CMathObject >"""
        return _COPASI.CMathContainer_addAnalysisObject(self, dataOjects, simulationType, infix)


    def removeAnalysisObject(self, mathObjects):
        """removeAnalysisObject(CMathContainer self, CMath::Entity< CMathObject > & mathObjects) -> bool"""
        return _COPASI.CMathContainer_removeAnalysisObject(self, mathObjects)


    def addAnalysisEvent(self, pDataEvent):
        """addAnalysisEvent(CMathContainer self, CEvent pDataEvent) -> CMathEvent"""
        return _COPASI.CMathContainer_addAnalysisEvent(self, pDataEvent)


    def removeAnalysisEvent(self, pMathEvent):
        """removeAnalysisEvent(CMathContainer self, CMathEvent *& pMathEvent) -> bool"""
        return _COPASI.CMathContainer_removeAnalysisEvent(self, pMathEvent)


    def getRandomGenerator(self):
        """getRandomGenerator(CMathContainer self) -> CRandom"""
        return _COPASI.CMathContainer_getRandomGenerator(self)


    def getRandomObject(self):
        """getRandomObject(CMathContainer self) -> CDataObject"""
        return _COPASI.CMathContainer_getRandomObject(self)


    def compile(self):
        """compile(CMathContainer self)"""
        return _COPASI.CMathContainer_compile(self)


    def registerUpdateSequence(self, pUpdateSequence):
        """registerUpdateSequence(CMathContainer self, CMathUpdateSequence * pUpdateSequence)"""
        return _COPASI.CMathContainer_registerUpdateSequence(self, pUpdateSequence)


    def deregisterUpdateSequence(self, pUpdateSequence):
        """deregisterUpdateSequence(CMathContainer self, CMathUpdateSequence * pUpdateSequence)"""
        return _COPASI.CMathContainer_deregisterUpdateSequence(self, pUpdateSequence)

CMathContainer_swigregister = _COPASI.CMathContainer_swigregister
CMathContainer_swigregister(CMathContainer)

class CModel(CModelEntity):
    """Proxy of C++ CModel class."""

    __swig_setmethods__ = {}
    for _s in [CModelEntity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelEntity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModel, name)
    __repr__ = _swig_repr
    ModelType_deterministic = _COPASI.CModel_ModelType_deterministic
    ModelType_stochastic = _COPASI.CModel_ModelType_stochastic
    ModelType___SIZE = _COPASI.CModel_ModelType___SIZE
    initial = _COPASI.CModel_initial
    transient = _COPASI.CModel_transient
    physical = _COPASI.CModel_physical
    volume = _COPASI.CModel_volume
    area = _COPASI.CModel_area
    length = _COPASI.CModel_length
    time = _COPASI.CModel_time
    quantity = _COPASI.CModel_quantity

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModel"""
        return _COPASI.CModel_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, pParent):
        """__init__(CModel self, CDataContainer pParent) -> CModel"""
        this = _COPASI.new_CModel(pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModel
    __del__ = lambda self: None

    def setObjectParent(self, pParent):
        """setObjectParent(CModel self, CDataContainer pParent) -> bool"""
        return _COPASI.CModel_setObjectParent(self, pParent)


    def getUnits(self):
        """getUnits(CModel self) -> std::string const"""
        return _COPASI.CModel_getUnits(self)


    def getChildObjectUnits(self, pObject):
        """getChildObjectUnits(CModel self, CDataObject pObject) -> std::string"""
        return _COPASI.CModel_getChildObjectUnits(self, pObject)


    def convert2NonReversible(self):
        """convert2NonReversible(CModel self) -> bool"""
        return _COPASI.CModel_convert2NonReversible(self)


    def createEventsForTimeseries(self, experiment=None):
        """
        createEventsForTimeseries(CModel self, CExperiment experiment=None) -> bool
        createEventsForTimeseries(CModel self) -> bool
        """
        return _COPASI.CModel_createEventsForTimeseries(self, experiment)


    def initializeMetabolites(self):
        """initializeMetabolites(CModel self)"""
        return _COPASI.CModel_initializeMetabolites(self)


    def functionDefinitionChanged(self, pFunction):
        """functionDefinitionChanged(CModel self, CFunction pFunction)"""
        return _COPASI.CModel_functionDefinitionChanged(self, pFunction)


    def setCompileFlag(self, flag=True):
        """
        setCompileFlag(CModel self, bool flag=True)
        setCompileFlag(CModel self)
        """
        return _COPASI.CModel_setCompileFlag(self, flag)


    def isCompileNecessary(self):
        """isCompileNecessary(CModel self) -> bool const &"""
        return _COPASI.CModel_isCompileNecessary(self)


    def buildDependencyGraphs(self):
        """buildDependencyGraphs(CModel self) -> bool"""
        return _COPASI.CModel_buildDependencyGraphs(self)


    def buildStoi(self):
        """buildStoi(CModel self)"""
        return _COPASI.CModel_buildStoi(self)


    def buildLinkZero(self):
        """buildLinkZero(CModel self)"""
        return _COPASI.CModel_buildLinkZero(self)


    def buildRedStoi(self):
        """buildRedStoi(CModel self)"""
        return _COPASI.CModel_buildRedStoi(self)


    def buildMoieties(self):
        """buildMoieties(CModel self)"""
        return _COPASI.CModel_buildMoieties(self)


    def clearSbmlIds(self):
        """clearSbmlIds(CModel self)"""
        return _COPASI.CModel_clearSbmlIds(self)


    def getMetabolites(self):
        """getMetabolites(CModel self) -> MetabVector"""
        return _COPASI.CModel_getMetabolites(self)


    def getMetabolitesX(self):
        """getMetabolitesX(CModel self) -> MetabVector"""
        return _COPASI.CModel_getMetabolitesX(self)


    def getNumMetabs(self):
        """getNumMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumMetabs(self)


    def getNumVariableMetabs(self):
        """getNumVariableMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumVariableMetabs(self)


    def getNumODEMetabs(self):
        """getNumODEMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumODEMetabs(self)


    def getNumAssignmentMetabs(self):
        """getNumAssignmentMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumAssignmentMetabs(self)


    def getNumIndependentReactionMetabs(self):
        """getNumIndependentReactionMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumIndependentReactionMetabs(self)


    def getNumDependentReactionMetabs(self):
        """getNumDependentReactionMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumDependentReactionMetabs(self)


    def getModelValues(self):
        """getModelValues(CModel self) -> ModelValueVectorN"""
        return _COPASI.CModel_getModelValues(self)


    def getNumModelValues(self):
        """getNumModelValues(CModel self) -> size_t"""
        return _COPASI.CModel_getNumModelValues(self)


    def getModelParameterSets(self):
        """getModelParameterSets(CModel self) -> ModelParameterSetVectorN"""
        return _COPASI.CModel_getModelParameterSets(self)


    def getActiveModelParameterSet(self):
        """getActiveModelParameterSet(CModel self) -> CModelParameterSet"""
        return _COPASI.CModel_getActiveModelParameterSet(self)


    def applyActiveParameterSet(self):
        """applyActiveParameterSet(CModel self)"""
        return _COPASI.CModel_applyActiveParameterSet(self)


    def refreshActiveParameterSet(self):
        """refreshActiveParameterSet(CModel self)"""
        return _COPASI.CModel_refreshActiveParameterSet(self)


    def getReactionsPerSpecies(self, arg2):
        """getReactionsPerSpecies(CModel self, CMetab arg2) -> std::set< std::pair< CReaction const *,double >,std::less< std::pair< CReaction const *,double > >,std::allocator< std::pair< CReaction const *,double > > > const &"""
        return _COPASI.CModel_getReactionsPerSpecies(self, arg2)


    def getReactions(self):
        """getReactions(CModel self) -> ReactionVectorNS"""
        return _COPASI.CModel_getReactions(self)


    def getTotSteps(self):
        """getTotSteps(CModel self) -> size_t"""
        return _COPASI.CModel_getTotSteps(self)


    def getParticleFlux(self):
        """getParticleFlux(CModel self) -> FloatVector"""
        return _COPASI.CModel_getParticleFlux(self)


    def getEvents(self):
        """getEvents(CModel self) -> EventVectorN"""
        return _COPASI.CModel_getEvents(self)


    def getKey(self):
        """getKey(CModel self) -> std::string const &"""
        return _COPASI.CModel_getKey(self)


    def setInitialTime(self, time):
        """setInitialTime(CModel self, double const & time)"""
        return _COPASI.CModel_setInitialTime(self, time)


    def getInitialTime(self):
        """getInitialTime(CModel self) -> double const &"""
        return _COPASI.CModel_getInitialTime(self)


    def setTime(self, time):
        """setTime(CModel self, double const & time)"""
        return _COPASI.CModel_setTime(self, time)


    def getTime(self):
        """getTime(CModel self) -> double const &"""
        return _COPASI.CModel_getTime(self)


    def getCompartments(self):
        """getCompartments(CModel self) -> CompartmentVectorNS"""
        return _COPASI.CModel_getCompartments(self)


    def getRedStoi(self):
        """getRedStoi(CModel self) -> FloatMatrix"""
        return _COPASI.CModel_getRedStoi(self)


    def getRedStoiAnnotation(self):
        """getRedStoiAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getRedStoiAnnotation(self)


    def getStoi(self):
        """getStoi(CModel self) -> FloatMatrix"""
        return _COPASI.CModel_getStoi(self)


    def getStoiAnnotation(self):
        """getStoiAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getStoiAnnotation(self)


    def getMoieties(self):
        """getMoieties(CModel self) -> MoietyVector"""
        return _COPASI.CModel_getMoieties(self)


    def findMetabByName(self, name):
        """findMetabByName(CModel self, std::string const & name) -> CMetab"""
        return _COPASI.CModel_findMetabByName(self, name)


    def findMoiety(self, Target):
        """findMoiety(CModel self, std::string const & Target) -> size_t"""
        return _COPASI.CModel_findMoiety(self, Target)


    def getLAnnotation(self):
        """getLAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getLAnnotation(self)


    def getL0(self):
        """getL0(CModel self) -> CLinkMatrix"""
        return _COPASI.CModel_getL0(self)


    def applyInitialValues(self):
        """applyInitialValues(CModel self)"""
        return _COPASI.CModel_applyInitialValues(self)


    def stateToIntialState(self):
        """stateToIntialState(CModel self)"""
        return _COPASI.CModel_stateToIntialState(self)


    def setVolumeUnit(self, *args):
        """
        setVolumeUnit(CModel self, std::string const & name) -> bool
        setVolumeUnit(CModel self, CUnit::VolumeUnit const & unitEnum) -> bool
        """
        return _COPASI.CModel_setVolumeUnit(self, *args)


    def getVolumeUnit(self):
        """getVolumeUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getVolumeUnit(self)


    def getVolumeUnitName(self):
        """getVolumeUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getVolumeUnitName(self)


    def getVolumeUnitEnum(self):
        """getVolumeUnitEnum(CModel self) -> CUnit::VolumeUnit"""
        return _COPASI.CModel_getVolumeUnitEnum(self)


    def setAreaUnit(self, *args):
        """
        setAreaUnit(CModel self, std::string const & name) -> bool
        setAreaUnit(CModel self, CUnit::AreaUnit const & unitEnum) -> bool
        """
        return _COPASI.CModel_setAreaUnit(self, *args)


    def getAreaUnit(self):
        """getAreaUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getAreaUnit(self)


    def getAreaUnitName(self):
        """getAreaUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getAreaUnitName(self)


    def getAreaUnitEnum(self):
        """getAreaUnitEnum(CModel self) -> CUnit::AreaUnit"""
        return _COPASI.CModel_getAreaUnitEnum(self)


    def setLengthUnit(self, *args):
        """
        setLengthUnit(CModel self, std::string const & name) -> bool
        setLengthUnit(CModel self, CUnit::LengthUnit const & unitEnum) -> bool
        """
        return _COPASI.CModel_setLengthUnit(self, *args)


    def getLengthUnit(self):
        """getLengthUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getLengthUnit(self)


    def getLengthUnitName(self):
        """getLengthUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getLengthUnitName(self)


    def getLengthUnitEnum(self):
        """getLengthUnitEnum(CModel self) -> CUnit::LengthUnit"""
        return _COPASI.CModel_getLengthUnitEnum(self)


    def setTimeUnit(self, *args):
        """
        setTimeUnit(CModel self, std::string const & name) -> bool
        setTimeUnit(CModel self, CUnit::TimeUnit const & unitEnum) -> bool
        """
        return _COPASI.CModel_setTimeUnit(self, *args)


    def getTimeUnit(self):
        """getTimeUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getTimeUnit(self)


    def getTimeUnitName(self):
        """getTimeUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getTimeUnitName(self)


    def getTimeUnitEnum(self):
        """getTimeUnitEnum(CModel self) -> CUnit::TimeUnit"""
        return _COPASI.CModel_getTimeUnitEnum(self)


    def getQuantityUnit(self):
        """getQuantityUnit(CModel self) -> std::string const"""
        return _COPASI.CModel_getQuantityUnit(self)


    def getQuantityUnitName(self):
        """getQuantityUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getQuantityUnitName(self)


    def getQuantityUnitOldXMLName(self):
        """getQuantityUnitOldXMLName(CModel self) -> std::string"""
        return _COPASI.CModel_getQuantityUnitOldXMLName(self)


    def getQuantityUnitEnum(self):
        """getQuantityUnitEnum(CModel self) -> CUnit::QuantityUnit"""
        return _COPASI.CModel_getQuantityUnitEnum(self)


    def setModelType(self, modelType):
        """setModelType(CModel self, CModel::ModelType const & modelType)"""
        return _COPASI.CModel_setModelType(self, modelType)


    def getModelType(self):
        """getModelType(CModel self) -> CModel::ModelType const &"""
        return _COPASI.CModel_getModelType(self)


    def setAvogadro(self, avogadro, frameWork):
        """setAvogadro(CModel self, double const & avogadro, CCore::Framework const & frameWork)"""
        return _COPASI.CModel_setAvogadro(self, avogadro, frameWork)


    def getAvogadro(self):
        """getAvogadro(CModel self) -> double const &"""
        return _COPASI.CModel_getAvogadro(self)


    def getQuantity2NumberFactor(self):
        """getQuantity2NumberFactor(CModel self) -> double const &"""
        return _COPASI.CModel_getQuantity2NumberFactor(self)


    def getNumber2QuantityFactor(self):
        """getNumber2QuantityFactor(CModel self) -> double const &"""
        return _COPASI.CModel_getNumber2QuantityFactor(self)


    def createMetabolite(self, *args):
        """
        createMetabolite(CModel self, std::string const & name, std::string const & compartment, double const & iconc=1.0, CModelEntity::Status const & status) -> CMetab
        createMetabolite(CModel self, std::string const & name, std::string const & compartment, double const & iconc=1.0) -> CMetab
        createMetabolite(CModel self, std::string const & name, std::string const & compartment) -> CMetab
        """
        return _COPASI.CModel_createMetabolite(self, *args)


    def removeMetabolite(self, *args):
        """
        removeMetabolite(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeMetabolite(CModel self, std::string const & key) -> bool
        removeMetabolite(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeMetabolite(CModel self, size_t const index) -> bool
        removeMetabolite(CModel self, CMetab pMetabolite, bool const & recursive=True) -> bool
        removeMetabolite(CModel self, CMetab pMetabolite) -> bool
        """
        return _COPASI.CModel_removeMetabolite(self, *args)


    def appendDirectDependents(self, *args):
        """
        appendDirectDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendDirectDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments) -> bool
        appendDirectDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendDirectDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments) -> bool
        """
        return _COPASI.CModel_appendDirectDependents(self, *args)


    def appendAllDependents(self, *args):
        """
        appendAllDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendAllDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments) -> bool
        appendAllDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendAllDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments) -> bool
        """
        return _COPASI.CModel_appendAllDependents(self, *args)


    def createCompartment(self, name, volume=1.0):
        """
        createCompartment(CModel self, std::string const & name, double const & volume=1.0) -> CCompartment
        createCompartment(CModel self, std::string const & name) -> CCompartment
        """
        return _COPASI.CModel_createCompartment(self, name, volume)


    def removeCompartment(self, *args):
        """
        removeCompartment(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeCompartment(CModel self, size_t const index) -> bool
        removeCompartment(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeCompartment(CModel self, std::string const & key) -> bool
        removeCompartment(CModel self, CCompartment pCompartment, bool const & recursive=True) -> bool
        removeCompartment(CModel self, CCompartment pCompartment) -> bool
        """
        return _COPASI.CModel_removeCompartment(self, *args)


    def createReaction(self, name):
        """createReaction(CModel self, std::string const & name) -> CReaction"""
        return _COPASI.CModel_createReaction(self, name)


    def removeReaction(self, *args):
        """
        removeReaction(CModel self, CReaction pReaction, bool const & recursive=True) -> bool
        removeReaction(CModel self, CReaction pReaction) -> bool
        removeReaction(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeReaction(CModel self, std::string const & key) -> bool
        removeReaction(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeReaction(CModel self, size_t const index) -> bool
        """
        return _COPASI.CModel_removeReaction(self, *args)


    def removeLocalReactionParameter(self, key, recursive=True):
        """
        removeLocalReactionParameter(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeLocalReactionParameter(CModel self, std::string const & key) -> bool
        """
        return _COPASI.CModel_removeLocalReactionParameter(self, key, recursive)


    def createEvent(self, name):
        """createEvent(CModel self, std::string const & name) -> CEvent"""
        return _COPASI.CModel_createEvent(self, name)


    def removeEvent(self, *args):
        """
        removeEvent(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeEvent(CModel self, size_t const index) -> bool
        removeEvent(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeEvent(CModel self, std::string const & key) -> bool
        removeEvent(CModel self, CEvent pEvent, bool const & recursive=True) -> bool
        removeEvent(CModel self, CEvent pEvent) -> bool
        """
        return _COPASI.CModel_removeEvent(self, *args)


    def createModelValue(self, name, value=0.0):
        """
        createModelValue(CModel self, std::string const & name, double const & value=0.0) -> CModelValue
        createModelValue(CModel self, std::string const & name) -> CModelValue
        """
        return _COPASI.CModel_createModelValue(self, name, value)


    def removeModelValue(self, *args):
        """
        removeModelValue(CModel self, CModelValue pModelValue, bool const & recursive=True) -> bool
        removeModelValue(CModel self, CModelValue pModelValue) -> bool
        removeModelValue(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeModelValue(CModel self, std::string const & key) -> bool
        removeModelValue(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeModelValue(CModel self, size_t const index) -> bool
        """
        return _COPASI.CModel_removeModelValue(self, *args)


    def getStateTemplate(self):
        """getStateTemplate(CModel self) -> CStateTemplate"""
        return _COPASI.CModel_getStateTemplate(self)


    def addModelEntity(self, pModelEntity):
        """addModelEntity(CModel self, CModelEntity pModelEntity)"""
        return _COPASI.CModel_addModelEntity(self, pModelEntity)


    def removeModelEntity(self, pModelEntity):
        """removeModelEntity(CModel self, CModelEntity pModelEntity)"""
        return _COPASI.CModel_removeModelEntity(self, pModelEntity)


    def hasReversibleReaction(self):
        """hasReversibleReaction(CModel self) -> bool"""
        return _COPASI.CModel_hasReversibleReaction(self)


    def suitableForStochasticSimulation(self):
        """suitableForStochasticSimulation(CModel self) -> std::string"""
        return _COPASI.CModel_suitableForStochasticSimulation(self)


    def isAutonomous(self):
        """isAutonomous(CModel self) -> bool const &"""
        return _COPASI.CModel_isAutonomous(self)


    def isStateVariable(self, pObject):
        """isStateVariable(CModel self, CDataObject pObject) -> bool"""
        return _COPASI.CModel_isStateVariable(self, pObject)


    def getCorrespondingTransientObject(self, pObject):
        """getCorrespondingTransientObject(CModel self, CDataObject pObject) -> CDataObject"""
        return _COPASI.CModel_getCorrespondingTransientObject(self, pObject)


    def initializeAtolVector(self, baseTolerance, reducedModel):
        """initializeAtolVector(CModel self, double const & baseTolerance, bool const & reducedModel) -> FloatVector"""
        return _COPASI.CModel_initializeAtolVector(self, baseTolerance, reducedModel)


    def getMathContainer(self):
        """getMathContainer(CModel self) -> CMathContainer"""
        return _COPASI.CModel_getMathContainer(self)


    def prepareElasticity(self, pReaction, pVar, simplify):
        """prepareElasticity(CModel self, CReaction pReaction, CModelEntity pVar, bool simplify) -> CEvaluationNode *"""
        return _COPASI.CModel_prepareElasticity(self, pReaction, pVar, simplify)


    def getUnitSymbolUsage(self, symbol):
        """getUnitSymbolUsage(CModel self, std::string symbol) -> DataObjectSet"""
        return _COPASI.CModel_getUnitSymbolUsage(self, symbol)


    def changeUnitExpressionSymbols(self, oldSymbol, newSymbol):
        """changeUnitExpressionSymbols(CModel self, std::string oldSymbol, std::string newSymbol)"""
        return _COPASI.CModel_changeUnitExpressionSymbols(self, oldSymbol, newSymbol)


    def getUsedUnits(self):
        """getUsedUnits(CModel self) -> std::map< std::string,CUnit,std::less< std::string >,std::allocator< std::pair< std::string const,CUnit > > >"""
        return _COPASI.CModel_getUsedUnits(self)


    def setQuantityUnit(self, *args):
        """
        setQuantityUnit(CModel self, std::string const & name, CCore::Framework const & frameWork) -> bool
        setQuantityUnit(CModel self, CUnit::QuantityUnit const & unitEnum, CCore::Framework const & frameWork) -> bool
        setQuantityUnit(CModel self, std::string const & name) -> bool
        setQuantityUnit(CModel self, CUnit::QuantityUnit const & unitEnum) -> bool
        """
        return _COPASI.CModel_setQuantityUnit(self, *args)


    def getNumCompartments(self):
        """getNumCompartments(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumCompartments(self)


    def getNumReactions(self):
        """getNumReactions(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumReactions(self)


    def getReaction(self, *args):
        """
        getReaction(CModel self, unsigned int index) -> CReaction
        getReaction(CModel self, std::string const & name) -> CReaction
        """
        return _COPASI.CModel_getReaction(self, *args)


    def getCompartment(self, *args):
        """
        getCompartment(CModel self, unsigned int index) -> CCompartment
        getCompartment(CModel self, std::string const & name) -> CCompartment
        """
        return _COPASI.CModel_getCompartment(self, *args)


    def getMetabolite(self, *args):
        """
        getMetabolite(CModel self, unsigned int index) -> CMetab
        getMetabolite(CModel self, std::string const & name) -> CMetab
        """
        return _COPASI.CModel_getMetabolite(self, *args)


    def getMoiety(self, index):
        """getMoiety(CModel self, unsigned int index) -> CMoiety"""
        return _COPASI.CModel_getMoiety(self, index)


    def forceCompile(self):
        """forceCompile(CModel self) -> bool"""
        return _COPASI.CModel_forceCompile(self)


    def compileIfNecessary(self):
        """compileIfNecessary(CModel self) -> bool"""
        return _COPASI.CModel_compileIfNecessary(self)


    def updateInitialValues(self, *args):
        """
        updateInitialValues(CModel self, CCore::Framework const & framework) -> bool
        updateInitialValues(CModel self, DataObjectSet changedObjects)
        updateInitialValues(CModel self, CDataObject changedObject)
        updateInitialValues(CModel self, ObjectStdVector v)
        """
        return _COPASI.CModel_updateInitialValues(self, *args)


    def getModelValue(self, *args):
        """
        getModelValue(CModel self, unsigned int index) -> CModelValue
        getModelValue(CModel self, std::string const & name) -> CModelValue
        """
        return _COPASI.CModel_getModelValue(self, *args)


    def getNumIndependentMetabs(self):
        """getNumIndependentMetabs(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumIndependentMetabs(self)


    def getNumDependentMetabs(self):
        """getNumDependentMetabs(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumDependentMetabs(self)


    def setComments(self, notes):
        """setComments(CModel self, std::string const & notes)"""
        return _COPASI.CModel_setComments(self, notes)


    def getComments(self):
        """getComments(CModel self) -> std::string const &"""
        return _COPASI.CModel_getComments(self)


    def getNumEvents(self):
        """getNumEvents(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumEvents(self)


    def getEvent(self, *args):
        """
        getEvent(CModel self, std::string const & name) -> CEvent
        getEvent(CModel self, unsigned int index) -> CEvent
        """
        return _COPASI.CModel_getEvent(self, *args)

CModel_swigregister = _COPASI.CModel_swigregister
CModel_swigregister(CModel)

def CModel_fromData(data, pParent):
    """CModel_fromData(CData data, CUndoObjectInterface pParent) -> CModel"""
    return _COPASI.CModel_fromData(data, pParent)

class CModelExpansion(_object):
    """Proxy of C++ CModelExpansion class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelExpansion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CModelExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, pModel):
        """__init__(CModelExpansion self, CModel pModel) -> CModelExpansion"""
        this = _COPASI.new_CModelExpansion(pModel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setModel(self, pModel):
        """setModel(CModelExpansion self, CModel pModel)"""
        return _COPASI.CModelExpansion_setModel(self, pModel)


    def simpleCall(self, source, listOfMetabolites, mult, diff):
        """simpleCall(CModelExpansion self, CCompartment source, DataObjectVector listOfMetabolites, int mult, bool diff)"""
        return _COPASI.CModelExpansion_simpleCall(self, source, listOfMetabolites, mult, diff)


    def createLinearArray(self, source, n, setOfMetabolites):
        """createLinearArray(CModelExpansion self, CModelExpansion_SetOfModelElements source, size_t n, DataObjectSet setOfMetabolites)"""
        return _COPASI.CModelExpansion_createLinearArray(self, source, n, setOfMetabolites)


    def createRectangularArray(self, source, nx, ny, setOfMetabolites):
        """createRectangularArray(CModelExpansion self, CModelExpansion_SetOfModelElements source, size_t nx, size_t ny, DataObjectSet setOfMetabolites)"""
        return _COPASI.CModelExpansion_createRectangularArray(self, source, nx, ny, setOfMetabolites)


    def copyCompleteModel(self, pSourceModel):
        """copyCompleteModel(CModelExpansion self, CModel pSourceModel) -> DataObjectSet"""
        return _COPASI.CModelExpansion_copyCompleteModel(self, pSourceModel)


    def duplicate(self, source, index, emap):
        """duplicate(CModelExpansion self, CModelExpansion_SetOfModelElements source, std::string const & index, CModelExpansion_ElementsMap emap) -> CUndoData"""
        return _COPASI.CModelExpansion_duplicate(self, source, index, emap)


    def duplicateCompartment(self, source, index, sourceSet, emap, undoData):
        """duplicateCompartment(CModelExpansion self, CCompartment source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateCompartment(self, source, index, sourceSet, emap, undoData)


    def duplicateMetab(self, source, index, sourceSet, emap, undoData):
        """duplicateMetab(CModelExpansion self, CMetab source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateMetab(self, source, index, sourceSet, emap, undoData)


    def duplicateReaction(self, source, index, sourceSet, emap, undoData):
        """duplicateReaction(CModelExpansion self, CReaction source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateReaction(self, source, index, sourceSet, emap, undoData)


    def duplicateGlobalQuantity(self, source, index, sourceSet, emap, undoData):
        """duplicateGlobalQuantity(CModelExpansion self, CModelValue source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateGlobalQuantity(self, source, index, sourceSet, emap, undoData)


    def duplicateEvent(self, source, index, sourceSet, emap, undoData):
        """duplicateEvent(CModelExpansion self, CEvent source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateEvent(self, source, index, sourceSet, emap, undoData)


    def updateExpression(self, exp, index, sourceSet, emap, undoData):
        """updateExpression(CModelExpansion self, CExpression exp, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_updateExpression(self, exp, index, sourceSet, emap, undoData)


    def expressionContainsObject(self, exp, sourceSet):
        """expressionContainsObject(CModelExpansion self, CExpression exp, CModelExpansion_SetOfModelElements sourceSet) -> bool"""
        return _COPASI.CModelExpansion_expressionContainsObject(self, exp, sourceSet)


    def createDiffusionReaction(self, name, pSubstrate, pProduct, pParameter):
        """createDiffusionReaction(CModelExpansion self, std::string const & name, CDataObject pSubstrate, CDataObject pProduct, CDataObject pParameter)"""
        return _COPASI.CModelExpansion_createDiffusionReaction(self, name, pSubstrate, pProduct, pParameter)


    def replaceInModel(self, emap, remove):
        """replaceInModel(CModelExpansion self, CModelExpansion_ElementsMap emap, bool remove)"""
        return _COPASI.CModelExpansion_replaceInModel(self, emap, remove)


    def replaceInCompartment(self, pX, emap):
        """replaceInCompartment(CModelExpansion self, CCompartment pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInCompartment(self, pX, emap)


    def replaceInMetab(self, pX, emap):
        """replaceInMetab(CModelExpansion self, CMetab pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInMetab(self, pX, emap)


    def replaceInReaction(self, pX, emap):
        """replaceInReaction(CModelExpansion self, CReaction pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInReaction(self, pX, emap)


    def replaceInModelEntity(self, pX, emap):
        """replaceInModelEntity(CModelExpansion self, CModelEntity pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInModelEntity(self, pX, emap)


    def replaceInEvent(self, pX, emap):
        """replaceInEvent(CModelExpansion self, CEvent pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInEvent(self, pX, emap)


    def replaceInExpression(self, exp, emap):
        """replaceInExpression(CModelExpansion self, CExpression exp, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInExpression(self, exp, emap)


    def existDependentEntities(self, pObj):
        """existDependentEntities(CModelExpansion self, CDataObject pObj) -> bool"""
        return _COPASI.CModelExpansion_existDependentEntities(self, pObj)

    __swig_destroy__ = _COPASI.delete_CModelExpansion
    __del__ = lambda self: None
CModelExpansion_swigregister = _COPASI.CModelExpansion_swigregister
CModelExpansion_swigregister(CModelExpansion)

class CModelExpansion_SetOfModelElements(_object):
    """Proxy of C++ CModelExpansion::SetOfModelElements class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelExpansion_SetOfModelElements, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CModelExpansion_SetOfModelElements, name)
    __repr__ = _swig_repr

    def addCompartment(self, x):
        """addCompartment(CModelExpansion_SetOfModelElements self, CCompartment x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addCompartment(self, x)


    def addMetab(self, x):
        """addMetab(CModelExpansion_SetOfModelElements self, CMetab x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addMetab(self, x)


    def addReaction(self, x):
        """addReaction(CModelExpansion_SetOfModelElements self, CReaction x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addReaction(self, x)


    def addGlobalQuantity(self, x):
        """addGlobalQuantity(CModelExpansion_SetOfModelElements self, CModelValue x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addGlobalQuantity(self, x)


    def addEvent(self, x):
        """addEvent(CModelExpansion_SetOfModelElements self, CEvent x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addEvent(self, x)


    def setModel(self, x):
        """setModel(CModelExpansion_SetOfModelElements self, CModel x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_setModel(self, x)


    def addObject(self, x):
        """addObject(CModelExpansion_SetOfModelElements self, CDataObject x) -> bool"""
        return _COPASI.CModelExpansion_SetOfModelElements_addObject(self, x)


    def contains(self, *args):
        """
        contains(CModelExpansion_SetOfModelElements self, CDataObject x) -> bool
        contains(CModelExpansion_SetOfModelElements self, std::string const & key) -> bool
        """
        return _COPASI.CModelExpansion_SetOfModelElements_contains(self, *args)


    def fillDependencies(self, pModel):
        """fillDependencies(CModelExpansion_SetOfModelElements self, CModel pModel)"""
        return _COPASI.CModelExpansion_SetOfModelElements_fillDependencies(self, pModel)


    def fillComplete(self, pModel):
        """fillComplete(CModelExpansion_SetOfModelElements self, CModel pModel)"""
        return _COPASI.CModelExpansion_SetOfModelElements_fillComplete(self, pModel)


    def __init__(self):
        """__init__(CModelExpansion::SetOfModelElements self) -> CModelExpansion_SetOfModelElements"""
        this = _COPASI.new_CModelExpansion_SetOfModelElements()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelExpansion_SetOfModelElements
    __del__ = lambda self: None
CModelExpansion_SetOfModelElements_swigregister = _COPASI.CModelExpansion_SetOfModelElements_swigregister
CModelExpansion_SetOfModelElements_swigregister(CModelExpansion_SetOfModelElements)

class CModelExpansion_ElementsMap(_object):
    """Proxy of C++ CModelExpansion::ElementsMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelExpansion_ElementsMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CModelExpansion_ElementsMap, name)
    __repr__ = _swig_repr

    def exists(self, *args):
        """
        exists(CModelExpansion_ElementsMap self, CDataObject source) -> bool
        exists(CModelExpansion_ElementsMap self, std::string const & sourceKey) -> bool
        """
        return _COPASI.CModelExpansion_ElementsMap_exists(self, *args)


    def add(self, source, copy):
        """add(CModelExpansion_ElementsMap self, CDataObject source, CDataObject copy)"""
        return _COPASI.CModelExpansion_ElementsMap_add(self, source, copy)


    def getDuplicateFromObject(self, source):
        """getDuplicateFromObject(CModelExpansion_ElementsMap self, CDataObject source) -> CDataObject"""
        return _COPASI.CModelExpansion_ElementsMap_getDuplicateFromObject(self, source)


    def getDuplicateFromCN(self, cn):
        """getDuplicateFromCN(CModelExpansion_ElementsMap self, CCommonName cn) -> CCommonName"""
        return _COPASI.CModelExpansion_ElementsMap_getDuplicateFromCN(self, cn)


    def getMap(self):
        """getMap(CModelExpansion_ElementsMap self) -> DataObjectMap"""
        return _COPASI.CModelExpansion_ElementsMap_getMap(self)


    def __init__(self):
        """__init__(CModelExpansion::ElementsMap self) -> CModelExpansion_ElementsMap"""
        this = _COPASI.new_CModelExpansion_ElementsMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelExpansion_ElementsMap
    __del__ = lambda self: None
CModelExpansion_ElementsMap_swigregister = _COPASI.CModelExpansion_ElementsMap_swigregister
CModelExpansion_ElementsMap_swigregister(CModelExpansion_ElementsMap)

class CCopasiParameter(CDataContainer):
    """Proxy of C++ CCopasiParameter class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiParameter, name)
    __repr__ = _swig_repr
    Type_DOUBLE = _COPASI.CCopasiParameter_Type_DOUBLE
    Type_UDOUBLE = _COPASI.CCopasiParameter_Type_UDOUBLE
    Type_INT = _COPASI.CCopasiParameter_Type_INT
    Type_UINT = _COPASI.CCopasiParameter_Type_UINT
    Type_BOOL = _COPASI.CCopasiParameter_Type_BOOL
    Type_GROUP = _COPASI.CCopasiParameter_Type_GROUP
    Type_STRING = _COPASI.CCopasiParameter_Type_STRING
    Type_CN = _COPASI.CCopasiParameter_Type_CN
    Type_KEY = _COPASI.CCopasiParameter_Type_KEY
    Type_FILE = _COPASI.CCopasiParameter_Type_FILE
    Type_EXPRESSION = _COPASI.CCopasiParameter_Type_EXPRESSION
    Type_INVALID = _COPASI.CCopasiParameter_Type_INVALID
    Type___SIZE = _COPASI.CCopasiParameter_Type___SIZE
    eUserInterfaceFlag_editable = _COPASI.CCopasiParameter_eUserInterfaceFlag_editable
    eUserInterfaceFlag_basic = _COPASI.CCopasiParameter_eUserInterfaceFlag_basic
    eUserInterfaceFlag_unsupported = _COPASI.CCopasiParameter_eUserInterfaceFlag_unsupported
    eUserInterfaceFlag___SIZE = _COPASI.CCopasiParameter_eUserInterfaceFlag___SIZE

    def allocateValue(type, pValue):
        """allocateValue(CCopasiParameter::Type const & type, void *& pValue)"""
        return _COPASI.CCopasiParameter_allocateValue(type, pValue)

    allocateValue = staticmethod(allocateValue)

    def assignValue(type, pValue, pNewValue):
        """assignValue(CCopasiParameter::Type const & type, void *& pValue, void const * pNewValue)"""
        return _COPASI.CCopasiParameter_assignValue(type, pValue, pNewValue)

    assignValue = staticmethod(assignValue)

    def deleteValue(type, pValue):
        """deleteValue(CCopasiParameter::Type const & type, void *& pValue)"""
        return _COPASI.CCopasiParameter_deleteValue(type, pValue)

    deleteValue = staticmethod(deleteValue)

    def allocateValidValues(type, pValidValues):
        """allocateValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
        return _COPASI.CCopasiParameter_allocateValidValues(type, pValidValues)

    allocateValidValues = staticmethod(allocateValidValues)

    def deleteValidValues(type, pValidValues):
        """deleteValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
        return _COPASI.CCopasiParameter_deleteValidValues(type, pValidValues)

    deleteValidValues = staticmethod(deleteValidValues)

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CCopasiParameter"""
        return _COPASI.CCopasiParameter_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CCopasiParameter self, CCopasiParameter src, CDataContainer pParent) -> CCopasiParameter
        __init__(CCopasiParameter self, std::string const & name, CCopasiParameter::Type const & type) -> CCopasiParameter
        """
        this = _COPASI.new_CCopasiParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiParameter
    __del__ = lambda self: None

    def setObjectParent(self, pParent):
        """setObjectParent(CCopasiParameter self, CDataContainer pParent) -> bool"""
        return _COPASI.CCopasiParameter_setObjectParent(self, pParent)


    def getKey(self):
        """getKey(CCopasiParameter self) -> std::string const &"""
        return _COPASI.CCopasiParameter_getKey(self)


    def setValue(self, value):
        """setValue(CCopasiParameter self, ParameterVector value) -> bool"""
        return _COPASI.CCopasiParameter_setValue(self, value)


    def setDefault(self, defaultValue):
        """setDefault(CCopasiParameter self, ParameterVector defaultValue) -> bool"""
        return _COPASI.CCopasiParameter_setDefault(self, defaultValue)


    def getValueReference(self):
        """getValueReference(CCopasiParameter self) -> CDataObject"""
        return _COPASI.CCopasiParameter_getValueReference(self)


    def getType(self):
        """getType(CCopasiParameter self) -> CCopasiParameter::Type const &"""
        return _COPASI.CCopasiParameter_getType(self)


    def isValidValue(self, *args):
        """
        isValidValue(CCopasiParameter self, double const & value) -> bool
        isValidValue(CCopasiParameter self, int const & value) -> bool
        isValidValue(CCopasiParameter self, unsigned int const & value) -> bool
        isValidValue(CCopasiParameter self, bool const & value) -> bool
        isValidValue(CCopasiParameter self, std::string const & value) -> bool
        isValidValue(CCopasiParameter self, CCommonName value) -> bool
        isValidValue(CCopasiParameter self, ParameterVector value) -> bool
        """
        return _COPASI.CCopasiParameter_isValidValue(self, *args)


    def hasValidValues(self):
        """hasValidValues(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_hasValidValues(self)


    def getCN(self):
        """getCN(CCopasiParameter self) -> CCommonName"""
        return _COPASI.CCopasiParameter_getCN(self)


    def getValidValuesPointer(self):
        """getValidValuesPointer(CCopasiParameter self) -> void *"""
        return _COPASI.CCopasiParameter_getValidValuesPointer(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getObjectDisplayName(self)


    def setUserInterfaceFlag(self, flag):
        """setUserInterfaceFlag(CCopasiParameter self, CCopasiParameter::UserInterfaceFlag const & flag)"""
        return _COPASI.CCopasiParameter_setUserInterfaceFlag(self, flag)


    def getUserInterfaceFlag(self):
        """getUserInterfaceFlag(CCopasiParameter self) -> CCopasiParameter::UserInterfaceFlag const &"""
        return _COPASI.CCopasiParameter_getUserInterfaceFlag(self)


    def isEditable(self):
        """isEditable(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isEditable(self)


    def isBasic(self):
        """isBasic(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isBasic(self)


    def isUnsupported(self):
        """isUnsupported(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isUnsupported(self)


    def isDefault(self):
        """isDefault(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isDefault(self)


    def getDblValue(self):
        """getDblValue(CCopasiParameter self) -> double"""
        return _COPASI.CCopasiParameter_getDblValue(self)


    def getUDblValue(self):
        """getUDblValue(CCopasiParameter self) -> double"""
        return _COPASI.CCopasiParameter_getUDblValue(self)


    def getIntValue(self):
        """getIntValue(CCopasiParameter self) -> int"""
        return _COPASI.CCopasiParameter_getIntValue(self)


    def getUIntValue(self):
        """getUIntValue(CCopasiParameter self) -> unsigned int"""
        return _COPASI.CCopasiParameter_getUIntValue(self)


    def getBoolValue(self):
        """getBoolValue(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_getBoolValue(self)


    def getGroupValue(self):
        """getGroupValue(CCopasiParameter self) -> ParameterVector"""
        return _COPASI.CCopasiParameter_getGroupValue(self)


    def getStringValue(self):
        """getStringValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getStringValue(self)


    def getCNValue(self):
        """getCNValue(CCopasiParameter self) -> CCommonName"""
        return _COPASI.CCopasiParameter_getCNValue(self)


    def getKeyValue(self):
        """getKeyValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getKeyValue(self)


    def getFileValue(self):
        """getFileValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getFileValue(self)


    def setDblValue(self, v):
        """setDblValue(CCopasiParameter self, double const & v) -> bool"""
        return _COPASI.CCopasiParameter_setDblValue(self, v)


    def setUDblValue(self, v):
        """setUDblValue(CCopasiParameter self, double const & v) -> bool"""
        return _COPASI.CCopasiParameter_setUDblValue(self, v)


    def setUIntValue(self, v):
        """setUIntValue(CCopasiParameter self, unsigned int const & v) -> bool"""
        return _COPASI.CCopasiParameter_setUIntValue(self, v)


    def setIntValue(self, v):
        """setIntValue(CCopasiParameter self, int const & v) -> bool"""
        return _COPASI.CCopasiParameter_setIntValue(self, v)


    def setBoolValue(self, v):
        """setBoolValue(CCopasiParameter self, bool const & v) -> bool"""
        return _COPASI.CCopasiParameter_setBoolValue(self, v)


    def setGroupValue(self, v):
        """setGroupValue(CCopasiParameter self, ParameterVector v) -> bool"""
        return _COPASI.CCopasiParameter_setGroupValue(self, v)


    def setStringValue(self, v):
        """setStringValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setStringValue(self, v)


    def setCNValue(self, *args):
        """
        setCNValue(CCopasiParameter self, CCommonName v) -> bool
        setCNValue(CCopasiParameter self, std::string const & v) -> bool
        """
        return _COPASI.CCopasiParameter_setCNValue(self, *args)


    def setKeyValue(self, v):
        """setKeyValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setKeyValue(self, v)


    def setFileValue(self, v):
        """setFileValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setFileValue(self, v)



    def setValue(self,arg):
      if sys.version_info >= (3, 0): 
        return self.setValueV3(arg)
      return self.setValueV2(arg);

    def setValueV3(self,arg):
      result=False
      if(type(arg)==int):
         if((self.getType()==CCopasiParameter.Type_INT) or (arg < 0)):
           result=self.setIntValue(arg)
         else:
           result=self.setUIntValue(arg) 
      elif(type(arg)==float):
         result=self.setDblValue(arg) 
      elif(type(arg)==bool):
         result=self.setBoolValue(arg) 
      elif(type(arg)==bytes):
         result=self.setStringValue(arg) 
      elif(arg.__class__==CRegisteredCommonName):
         result=self.setCNValue(arg) 
      elif(arg.__class__ == ParameterVector):
         result=self.setGroupValue(arg) 
      return result;

    def setValueV2(self,arg):
      result=False
      if(type(arg)==types.IntType):
         if((self.getType()==CCopasiParameter.Type_INT) or (arg < 0)):
           result=self.setIntValue(arg)
         else:
           result=self.setUIntValue(arg) 
      elif(type(arg)==types.FloatType):
         result=self.setDblValue(arg) 
      elif(type(arg)==types.BooleanType):
         result=self.setBoolValue(arg) 
      elif(type(arg)==types.StringType):
         result=self.setStringValue(arg) 
      elif(arg.__class__==CRegisteredCommonName):
         result=self.setCNValue(arg) 
      elif(arg.__class__ == ParameterVector):
         result=self.setGroupValue(arg) 
      return result;

    def getValue(self):
      value=None
      if(self.getType()==CCopasiParameter.Type_DOUBLE):
        value=self.getDblValue()
      if(self.getType()==CCopasiParameter.Type_UDOUBLE):
        value=self.getUDblValue()
      if(self.getType()==CCopasiParameter.Type_INT):
        value=self.getIntValue()
      if(self.getType()==CCopasiParameter.Type_UINT):
        value=self.getUIntValue()
      if(self.getType()==CCopasiParameter.Type_BOOL):
        value=self.getBoolValue()
      if(self.getType()==CCopasiParameter.Type_GROUP):
        value=self.getGroupValue()
      if(self.getType()==CCopasiParameter.Type_STRING):
        value=self.getStringValue()
      if(self.getType()==CCopasiParameter.Type_KEY):
        value=self.getKeyValue()
      if(self.getType()==CCopasiParameter.Type_FILE):
        value=self.getFileValue()
      if(self.getType()==CCopasiParameter.Type_CN):
        value=self.getCNValue()
      return value            

CCopasiParameter_swigregister = _COPASI.CCopasiParameter_swigregister
CCopasiParameter_swigregister(CCopasiParameter)

def CCopasiParameter_allocateValue(type, pValue):
    """CCopasiParameter_allocateValue(CCopasiParameter::Type const & type, void *& pValue)"""
    return _COPASI.CCopasiParameter_allocateValue(type, pValue)

def CCopasiParameter_assignValue(type, pValue, pNewValue):
    """CCopasiParameter_assignValue(CCopasiParameter::Type const & type, void *& pValue, void const * pNewValue)"""
    return _COPASI.CCopasiParameter_assignValue(type, pValue, pNewValue)

def CCopasiParameter_deleteValue(type, pValue):
    """CCopasiParameter_deleteValue(CCopasiParameter::Type const & type, void *& pValue)"""
    return _COPASI.CCopasiParameter_deleteValue(type, pValue)

def CCopasiParameter_allocateValidValues(type, pValidValues):
    """CCopasiParameter_allocateValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
    return _COPASI.CCopasiParameter_allocateValidValues(type, pValidValues)

def CCopasiParameter_deleteValidValues(type, pValidValues):
    """CCopasiParameter_deleteValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
    return _COPASI.CCopasiParameter_deleteValidValues(type, pValidValues)

def CCopasiParameter_fromData(data, pParent):
    """CCopasiParameter_fromData(CData data, CUndoObjectInterface pParent) -> CCopasiParameter"""
    return _COPASI.CCopasiParameter_fromData(data, pParent)

class CProcessReportItem(CCopasiParameter):
    """Proxy of C++ CProcessReportItem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProcessReportItem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CProcessReportItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CProcessReportItem self, std::string const & name, CCopasiParameter::Type const & type, void const * pValue, void const * pEndValue=None) -> CProcessReportItem
        __init__(CProcessReportItem self, std::string const & name, CCopasiParameter::Type const & type, void const * pValue) -> CProcessReportItem
        __init__(CProcessReportItem self, CProcessReportItem src) -> CProcessReportItem
        """
        this = _COPASI.new_CProcessReportItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CProcessReportItem
    __del__ = lambda self: None

    def getEndValuePointer(self):
        """getEndValuePointer(CProcessReportItem self) -> void *"""
        return _COPASI.CProcessReportItem_getEndValuePointer(self)


    def hasEndValue(self):
        """hasEndValue(CProcessReportItem self) -> bool const &"""
        return _COPASI.CProcessReportItem_hasEndValue(self)

CProcessReportItem_swigregister = _COPASI.CProcessReportItem_swigregister
CProcessReportItem_swigregister(CProcessReportItem)

class CProcessReport(_object):
    """Proxy of C++ CProcessReport class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProcessReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProcessReport, name)
    __repr__ = _swig_repr

    def __init__(self, maxTime=0):
        """
        __init__(CProcessReport self, unsigned int const & maxTime=0) -> CProcessReport
        __init__(CProcessReport self) -> CProcessReport
        """
        if self.__class__ == CProcessReport:
            _self = None
        else:
            _self = self
        this = _COPASI.new_CProcessReport(_self, maxTime)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CProcessReport
    __del__ = lambda self: None

    def progress(self):
        """progress(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_progress(self)


    def progressItem(self, handle):
        """progressItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_progressItem(self, handle)


    def proceed(self):
        """proceed(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_proceed(self)


    def reset(self):
        """reset(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_reset(self)


    def resetItem(self, handle):
        """resetItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_resetItem(self, handle)


    def finish(self):
        """finish(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_finish(self)


    def addItem(self, *args):
        """
        addItem(CProcessReport self, std::string const & name, std::string const & value, std::string const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, std::string const & value) -> size_t
        addItem(CProcessReport self, std::string const & name, int const & value, int const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, int const & value) -> size_t
        addItem(CProcessReport self, std::string const & name, unsigned int const & value, unsigned int const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, unsigned int const & value) -> size_t
        addItem(CProcessReport self, std::string const & name, double const & value, double const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, double const & value) -> size_t
        """
        return _COPASI.CProcessReport_addItem(self, *args)


    def finishItem(self, handle):
        """finishItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_finishItem(self, handle)


    def isValidHandle(self, handle):
        """isValidHandle(CProcessReport self, size_t const handle) -> bool"""
        return _COPASI.CProcessReport_isValidHandle(self, handle)


    def setName(self, name):
        """setName(CProcessReport self, std::string const & name) -> bool"""
        return _COPASI.CProcessReport_setName(self, name)

    def __disown__(self):
        self.this.disown()
        _COPASI.disown_CProcessReport(self)
        return weakref_proxy(self)
CProcessReport_swigregister = _COPASI.CProcessReport_swigregister
CProcessReport_swigregister(CProcessReport)

class CCopasiParameterGroup(CCopasiParameter):
    """Proxy of C++ CCopasiParameterGroup class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiParameterGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiParameterGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCopasiParameterGroup self, CCopasiParameterGroup src, CDataContainer pParent=None) -> CCopasiParameterGroup
        __init__(CCopasiParameterGroup self, CCopasiParameterGroup src) -> CCopasiParameterGroup
        __init__(CCopasiParameterGroup self, std::string const & name, CDataContainer pParent, std::string const & objectType) -> CCopasiParameterGroup
        __init__(CCopasiParameterGroup self, std::string const & name, CDataContainer pParent) -> CCopasiParameterGroup
        __init__(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameterGroup
        """
        this = _COPASI.new_CCopasiParameterGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiParameterGroup
    __del__ = lambda self: None

    def getObject(self, cn):
        """getObject(CCopasiParameterGroup self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CCopasiParameterGroup_getObject(self, cn)


    def elevateChildren(self):
        """elevateChildren(CCopasiParameterGroup self) -> bool"""
        return _COPASI.CCopasiParameterGroup_elevateChildren(self)


    def addParameterCopy(self, parameter):
        """addParameterCopy(CCopasiParameterGroup self, CCopasiParameter parameter) -> bool"""
        return _COPASI.CCopasiParameterGroup_addParameterCopy(self, parameter)


    def addGroup(self, name):
        """addGroup(CCopasiParameterGroup self, std::string const & name) -> bool"""
        return _COPASI.CCopasiParameterGroup_addGroup(self, name)


    def assertGroup(self, *args):
        """
        assertGroup(CCopasiParameterGroup self, std::string const & name, CCopasiParameter::UserInterfaceFlag const & flag) -> CCopasiParameterGroup
        assertGroup(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameterGroup
        """
        return _COPASI.CCopasiParameterGroup_assertGroup(self, *args)


    def removeParameter(self, *args):
        """
        removeParameter(CCopasiParameterGroup self, std::string const & name) -> bool
        removeParameter(CCopasiParameterGroup self, size_t const & index) -> bool
        removeParameter(CCopasiParameterGroup self, CCopasiParameter pParameter) -> bool
        """
        return _COPASI.CCopasiParameterGroup_removeParameter(self, *args)


    def getParameter(self, *args):
        """
        getParameter(CCopasiParameterGroup self, std::string name) -> CCopasiParameter
        getParameter(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameter
        """
        return _COPASI.CCopasiParameterGroup_getParameter(self, *args)


    def getGroup(self, *args):
        """
        getGroup(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameterGroup
        getGroup(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameterGroup
        """
        return _COPASI.CCopasiParameterGroup_getGroup(self, *args)


    def getType(self, *args):
        """
        getType(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameter::Type
        getType(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameter::Type
        """
        return _COPASI.CCopasiParameterGroup_getType(self, *args)


    def getKeyForParameter(self, *args):
        """
        getKeyForParameter(CCopasiParameterGroup self, std::string const & name) -> std::string
        getKeyForParameter(CCopasiParameterGroup self, size_t const & index) -> std::string
        """
        return _COPASI.CCopasiParameterGroup_getKeyForParameter(self, *args)


    def getName(self, index):
        """getName(CCopasiParameterGroup self, size_t const & index) -> std::string const &"""
        return _COPASI.CCopasiParameterGroup_getName(self, index)


    def size(self, *args):
        """
        size(CCopasiParameterGroup self, CCopasiParameter::UserInterfaceFlag const & require, CCopasiParameter::UserInterfaceFlag const & exclude) -> size_t
        size(CCopasiParameterGroup self, CCopasiParameter::UserInterfaceFlag const & require) -> size_t
        size(CCopasiParameterGroup self) -> size_t
        """
        return _COPASI.CCopasiParameterGroup_size(self, *args)


    def clear(self):
        """clear(CCopasiParameterGroup self)"""
        return _COPASI.CCopasiParameterGroup_clear(self)


    def getIndex(self, *args):
        """
        getIndex(CCopasiParameterGroup self, CDataObject pObject) -> size_t
        getIndex(CCopasiParameterGroup self, std::string const & name) -> size_t
        """
        return _COPASI.CCopasiParameterGroup_getIndex(self, *args)


    def getUniqueParameterName(self, pParameter):
        """getUniqueParameterName(CCopasiParameterGroup self, CCopasiParameter pParameter) -> std::string"""
        return _COPASI.CCopasiParameterGroup_getUniqueParameterName(self, pParameter)


    def addParameter(self, *args):
        """
        addParameter(CCopasiParameterGroup self, std::string const & name, CCopasiParameter::Type const type, CCopasiParameter::UserInterfaceFlag const & flag) -> bool
        addParameter(CCopasiParameterGroup self, std::string const & name, CCopasiParameter::Type const type) -> bool
        addParameter(CCopasiParameterGroup self, CCopasiParameter pParameter)
        """
        return _COPASI.CCopasiParameterGroup_addParameter(self, *args)


    def getElementTemplates(self):
        """getElementTemplates(CCopasiParameterGroup self) -> CCopasiParameterGroup"""
        return _COPASI.CCopasiParameterGroup_getElementTemplates(self)


    def haveTemplate(self):
        """haveTemplate(CCopasiParameterGroup self) -> bool"""
        return _COPASI.CCopasiParameterGroup_haveTemplate(self)


    def setUserInterfaceFlag(self, flag):
        """setUserInterfaceFlag(CCopasiParameterGroup self, CCopasiParameter::UserInterfaceFlag const & flag)"""
        return _COPASI.CCopasiParameterGroup_setUserInterfaceFlag(self, flag)

CCopasiParameterGroup_swigregister = _COPASI.CCopasiParameterGroup_swigregister
CCopasiParameterGroup_swigregister(CCopasiParameterGroup)

class CModelParameter(CUndoObjectInterface):
    """Proxy of C++ CModelParameter class."""

    __swig_setmethods__ = {}
    for _s in [CUndoObjectInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CUndoObjectInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameter, name)
    __repr__ = _swig_repr
    Type_Model = _COPASI.CModelParameter_Type_Model
    Type_Compartment = _COPASI.CModelParameter_Type_Compartment
    Type_Species = _COPASI.CModelParameter_Type_Species
    Type_ModelValue = _COPASI.CModelParameter_Type_ModelValue
    Type_ReactionParameter = _COPASI.CModelParameter_Type_ReactionParameter
    Type_Reaction = _COPASI.CModelParameter_Type_Reaction
    Type_Group = _COPASI.CModelParameter_Type_Group
    Type_Set = _COPASI.CModelParameter_Type_Set
    Type_unknown = _COPASI.CModelParameter_Type_unknown
    Type___SIZE = _COPASI.CModelParameter_Type___SIZE
    CompareResult_Obsolete = _COPASI.CModelParameter_CompareResult_Obsolete
    CompareResult_Missing = _COPASI.CModelParameter_CompareResult_Missing
    CompareResult_Modified = _COPASI.CModelParameter_CompareResult_Modified
    CompareResult_Conflict = _COPASI.CModelParameter_CompareResult_Conflict
    CompareResult_Identical = _COPASI.CModelParameter_CompareResult_Identical
    CompareResult___SIZE = _COPASI.CModelParameter_CompareResult___SIZE

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModelParameter"""
        return _COPASI.CModelParameter_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def destruct(self):
        """destruct(CModelParameter self)"""
        return _COPASI.CModelParameter_destruct(self)


    def createUndoData(self, *args):
        """
        createUndoData(CModelParameter self, CUndoData undoData, CUndoData::Type const & type, CData oldData, CCore::Framework const & framework)
        createUndoData(CModelParameter self, CUndoData undoData, CUndoData::Type const & type, CData oldData)
        createUndoData(CModelParameter self, CUndoData undoData, CUndoData::Type const & type)
        """
        return _COPASI.CModelParameter_createUndoData(self, *args)


    def __init__(self, *args):
        """
        __init__(CModelParameter self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameter
        __init__(CModelParameter self, CModelParameter src, CModelParameterGroup pParent) -> CModelParameter
        """
        this = _COPASI.new_CModelParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameter
    __del__ = lambda self: None

    def toSet(self, *args):
        """
        toSet(CModelParameter self) -> CModelParameterSet
        toSet(CModelParameter self) -> CModelParameterSet
        """
        return _COPASI.CModelParameter_toSet(self, *args)


    def __lt__(self, rhs):
        """__lt__(CModelParameter self, CModelParameter rhs) -> bool"""
        return _COPASI.CModelParameter___lt__(self, rhs)


    def setParent(self, pParent):
        """setParent(CModelParameter self, CModelParameterGroup pParent)"""
        return _COPASI.CModelParameter_setParent(self, pParent)


    def getParent(self):
        """getParent(CModelParameter self) -> CModelParameterGroup"""
        return _COPASI.CModelParameter_getParent(self)


    def getType(self):
        """getType(CModelParameter self) -> CModelParameter::Type const &"""
        return _COPASI.CModelParameter_getType(self)


    def getUnit(self, framework):
        """getUnit(CModelParameter self, CCore::Framework const & framework) -> CValidatedUnit"""
        return _COPASI.CModelParameter_getUnit(self, framework)


    def setCN(self, cn):
        """setCN(CModelParameter self, CCommonName cn)"""
        return _COPASI.CModelParameter_setCN(self, cn)


    def getCN(self):
        """getCN(CModelParameter self) -> CCommonName"""
        return _COPASI.CModelParameter_getCN(self)


    def setSimulationType(self, simulationType):
        """setSimulationType(CModelParameter self, CModelEntity::Status const & simulationType) -> bool"""
        return _COPASI.CModelParameter_setSimulationType(self, simulationType)


    def getSimulationType(self):
        """getSimulationType(CModelParameter self) -> CModelEntity::Status const &"""
        return _COPASI.CModelParameter_getSimulationType(self)


    def setInitialExpression(self, initialExpression):
        """setInitialExpression(CModelParameter self, std::string const & initialExpression)"""
        return _COPASI.CModelParameter_setInitialExpression(self, initialExpression)


    def getInitialExpression(self):
        """getInitialExpression(CModelParameter self) -> std::string"""
        return _COPASI.CModelParameter_getInitialExpression(self)


    def getInitialExpressionPtr(self):
        """getInitialExpressionPtr(CModelParameter self) -> CExpression"""
        return _COPASI.CModelParameter_getInitialExpressionPtr(self)


    def setCompareResult(self, compareResult):
        """setCompareResult(CModelParameter self, CModelParameter::CompareResult const & compareResult)"""
        return _COPASI.CModelParameter_setCompareResult(self, compareResult)


    def getCompareResult(self):
        """getCompareResult(CModelParameter self) -> CModelParameter::CompareResult const &"""
        return _COPASI.CModelParameter_getCompareResult(self)


    def getIndex(self):
        """getIndex(CModelParameter self) -> size_t"""
        return _COPASI.CModelParameter_getIndex(self)


    def isReadOnly(self):
        """isReadOnly(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_isReadOnly(self)


    def getObject(self):
        """getObject(CModelParameter self) -> CDataObject"""
        return _COPASI.CModelParameter_getObject(self)


    def getSet(self):
        """getSet(CModelParameter self) -> CModelParameterSet"""
        return _COPASI.CModelParameter_getSet(self)


    def getModel(self):
        """getModel(CModelParameter self) -> CModel"""
        return _COPASI.CModelParameter_getModel(self)


    def isInitialExpressionValid(self):
        """isInitialExpressionValid(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_isInitialExpressionValid(self)


    def getName(self):
        """getName(CModelParameter self) -> std::string"""
        return _COPASI.CModelParameter_getName(self)


    def compile(self):
        """compile(CModelParameter self)"""
        return _COPASI.CModelParameter_compile(self)


    def updateModel(self):
        """updateModel(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_updateModel(self)


    def refreshFromModel(self, modifyExistence):
        """refreshFromModel(CModelParameter self, bool const & modifyExistence) -> bool"""
        return _COPASI.CModelParameter_refreshFromModel(self, modifyExistence)


    def getNumChildren(self):
        """getNumChildren(CModelParameter self) -> size_t"""
        return _COPASI.CModelParameter_getNumChildren(self)


    def getChild(self, index):
        """getChild(CModelParameter self, size_t const & index) -> CModelParameter"""
        return _COPASI.CModelParameter_getChild(self, index)


    def asGroup(self):
        """asGroup(CModelParameter self) -> CModelParameterGroup"""
        return _COPASI.CModelParameter_asGroup(self)


    def asSpecies(self):
        """asSpecies(CModelParameter self) -> CModelParameterSpecies"""
        return _COPASI.CModelParameter_asSpecies(self)


    def asCompartment(self):
        """asCompartment(CModelParameter self) -> CModelParameterCompartment"""
        return _COPASI.CModelParameter_asCompartment(self)


    def asSet(self):
        """asSet(CModelParameter self) -> CModelParameterSet"""
        return _COPASI.CModelParameter_asSet(self)


    def asReactionParameter(self):
        """asReactionParameter(CModelParameter self) -> CModelParameterReactionParameter"""
        return _COPASI.CModelParameter_asReactionParameter(self)


    def setValue(self, *args):
        """
        setValue(CModelParameter self, double value, int framework)
        setValue(CModelParameter self, double value)
        """
        return _COPASI.CModelParameter_setValue(self, *args)


    def getValue(self, *args):
        """
        getValue(CModelParameter self, int framework) -> double
        getValue(CModelParameter self) -> double
        """
        return _COPASI.CModelParameter_getValue(self, *args)


    def hasValue(self, *args):
        """
        hasValue(CModelParameter self, int framework) -> bool
        hasValue(CModelParameter self) -> bool
        """
        return _COPASI.CModelParameter_hasValue(self, *args)

CModelParameter_swigregister = _COPASI.CModelParameter_swigregister
CModelParameter_swigregister(CModelParameter)
CModelParameter.CompareResultNames = _COPASI.cvar.CModelParameter_CompareResultNames

def CModelParameter_fromData(data, pParent):
    """CModelParameter_fromData(CData data, CUndoObjectInterface pParent) -> CModelParameter"""
    return _COPASI.CModelParameter_fromData(data, pParent)

class CModelParameterCompartment(CModelParameter):
    """Proxy of C++ CModelParameterCompartment class."""

    __swig_setmethods__ = {}
    for _s in [CModelParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameterCompartment, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameterCompartment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CModelParameterCompartment self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameterCompartment
        __init__(CModelParameterCompartment self, CModelParameterGroup pParent) -> CModelParameterCompartment
        __init__(CModelParameterCompartment self, CModelParameterCompartment src, CModelParameterGroup pParent) -> CModelParameterCompartment
        """
        this = _COPASI.new_CModelParameterCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameterCompartment
    __del__ = lambda self: None

    def setValue(self, value, framework, updateModelIfActive=True):
        """
        setValue(CModelParameterCompartment self, double const & value, CCore::Framework const & framework, bool updateModelIfActive=True)
        setValue(CModelParameterCompartment self, double const & value, CCore::Framework const & framework)
        """
        return _COPASI.CModelParameterCompartment_setValue(self, value, framework, updateModelIfActive)


    def addSpecies(self, pSpecies):
        """addSpecies(CModelParameterCompartment self, CModelParameterSpecies pSpecies)"""
        return _COPASI.CModelParameterCompartment_addSpecies(self, pSpecies)


    def removeSpecies(self, pSpecies):
        """removeSpecies(CModelParameterCompartment self, CModelParameterSpecies pSpecies)"""
        return _COPASI.CModelParameterCompartment_removeSpecies(self, pSpecies)

CModelParameterCompartment_swigregister = _COPASI.CModelParameterCompartment_swigregister
CModelParameterCompartment_swigregister(CModelParameterCompartment)

class CModelParameterSpecies(CModelParameter):
    """Proxy of C++ CModelParameterSpecies class."""

    __swig_setmethods__ = {}
    for _s in [CModelParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameterSpecies, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameterSpecies, name)
    __repr__ = _swig_repr

    def createUndoData(self, *args):
        """
        createUndoData(CModelParameterSpecies self, CUndoData undoData, CUndoData::Type const & type, CData oldData, CCore::Framework const & framework)
        createUndoData(CModelParameterSpecies self, CUndoData undoData, CUndoData::Type const & type, CData oldData)
        createUndoData(CModelParameterSpecies self, CUndoData undoData, CUndoData::Type const & type)
        """
        return _COPASI.CModelParameterSpecies_createUndoData(self, *args)


    def __init__(self, *args):
        """
        __init__(CModelParameterSpecies self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameterSpecies
        __init__(CModelParameterSpecies self, CModelParameterGroup pParent) -> CModelParameterSpecies
        __init__(CModelParameterSpecies self, CModelParameterSpecies src, CModelParameterGroup pParent) -> CModelParameterSpecies
        """
        this = _COPASI.new_CModelParameterSpecies(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameterSpecies
    __del__ = lambda self: None

    def getName(self):
        """getName(CModelParameterSpecies self) -> std::string"""
        return _COPASI.CModelParameterSpecies_getName(self)


    def compile(self):
        """compile(CModelParameterSpecies self)"""
        return _COPASI.CModelParameterSpecies_compile(self)


    def setCN(self, cn):
        """setCN(CModelParameterSpecies self, CCommonName cn)"""
        return _COPASI.CModelParameterSpecies_setCN(self, cn)


    def setValue(self, value, framework, updateModelIfActive=True):
        """
        setValue(CModelParameterSpecies self, double const & value, CCore::Framework const & framework, bool updateModelIfActive=True)
        setValue(CModelParameterSpecies self, double const & value, CCore::Framework const & framework)
        """
        return _COPASI.CModelParameterSpecies_setValue(self, value, framework, updateModelIfActive)


    def getValue(self, framework):
        """getValue(CModelParameterSpecies self, CCore::Framework const & framework) -> double const &"""
        return _COPASI.CModelParameterSpecies_getValue(self, framework)


    def updateModel(self):
        """updateModel(CModelParameterSpecies self) -> bool"""
        return _COPASI.CModelParameterSpecies_updateModel(self)

CModelParameterSpecies_swigregister = _COPASI.CModelParameterSpecies_swigregister
CModelParameterSpecies_swigregister(CModelParameterSpecies)

class CModelParameterReactionParameter(CModelParameter):
    """Proxy of C++ CModelParameterReactionParameter class."""

    __swig_setmethods__ = {}
    for _s in [CModelParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameterReactionParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameterReactionParameter, name)
    __repr__ = _swig_repr

    def getReactionCN(reactionParameterCN):
        """getReactionCN(CCommonName reactionParameterCN) -> CCommonName"""
        return _COPASI.CModelParameterReactionParameter_getReactionCN(reactionParameterCN)

    getReactionCN = staticmethod(getReactionCN)

    def __init__(self, *args):
        """
        __init__(CModelParameterReactionParameter self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameterReactionParameter
        __init__(CModelParameterReactionParameter self, CModelParameterGroup pParent) -> CModelParameterReactionParameter
        __init__(CModelParameterReactionParameter self, CModelParameterReactionParameter src, CModelParameterGroup pParent) -> CModelParameterReactionParameter
        """
        this = _COPASI.new_CModelParameterReactionParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameterReactionParameter
    __del__ = lambda self: None

    def compile(self):
        """compile(CModelParameterReactionParameter self)"""
        return _COPASI.CModelParameterReactionParameter_compile(self)


    def getReaction(self):
        """getReaction(CModelParameterReactionParameter self) -> CReaction"""
        return _COPASI.CModelParameterReactionParameter_getReaction(self)


    def setGlobalQuantityCN(self, globalQuantityCN):
        """setGlobalQuantityCN(CModelParameterReactionParameter self, std::string const & globalQuantityCN)"""
        return _COPASI.CModelParameterReactionParameter_setGlobalQuantityCN(self, globalQuantityCN)


    def getGlobalQuantityCN(self):
        """getGlobalQuantityCN(CModelParameterReactionParameter self) -> CRegisteredCommonName"""
        return _COPASI.CModelParameterReactionParameter_getGlobalQuantityCN(self)

CModelParameterReactionParameter_swigregister = _COPASI.CModelParameterReactionParameter_swigregister
CModelParameterReactionParameter_swigregister(CModelParameterReactionParameter)

def CModelParameterReactionParameter_getReactionCN(reactionParameterCN):
    """CModelParameterReactionParameter_getReactionCN(CCommonName reactionParameterCN) -> CCommonName"""
    return _COPASI.CModelParameterReactionParameter_getReactionCN(reactionParameterCN)

class CModelParameterGroup(CModelParameter):
    """Proxy of C++ CModelParameterGroup class."""

    __swig_setmethods__ = {}
    for _s in [CModelParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameterGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [CModelParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameterGroup, name)
    __repr__ = _swig_repr

    def insert(self, data):
        """insert(CModelParameterGroup self, CData data) -> CUndoObjectInterface"""
        return _COPASI.CModelParameterGroup_insert(self, data)


    def updateIndex(self, index, pUndoObject):
        """updateIndex(CModelParameterGroup self, size_t const & index, CUndoObjectInterface pUndoObject)"""
        return _COPASI.CModelParameterGroup_updateIndex(self, index, pUndoObject)


    def createUndoData(self, *args):
        """
        createUndoData(CModelParameterGroup self, CUndoData undoData, CUndoData::Type const & type, CData oldData, CCore::Framework const & framework)
        createUndoData(CModelParameterGroup self, CUndoData undoData, CUndoData::Type const & type, CData oldData)
        createUndoData(CModelParameterGroup self, CUndoData undoData, CUndoData::Type const & type)
        """
        return _COPASI.CModelParameterGroup_createUndoData(self, *args)


    def __init__(self, *args):
        """
        __init__(CModelParameterGroup self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameterGroup
        __init__(CModelParameterGroup self, CModelParameterGroup pParent) -> CModelParameterGroup
        __init__(CModelParameterGroup self, CModelParameterGroup src, CModelParameterGroup pParent, bool const & createMissing) -> CModelParameterGroup
        """
        this = _COPASI.new_CModelParameterGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameterGroup
    __del__ = lambda self: None

    def add(self, *args):
        """
        add(CModelParameterGroup self, CModelParameter::Type const & type) -> CModelParameter
        add(CModelParameterGroup self, CModelParameter pModelParameter)
        """
        return _COPASI.CModelParameterGroup_add(self, *args)


    def remove(self, *args):
        """
        remove(CModelParameterGroup self, CModelParameter pModelParameter)
        remove(CModelParameterGroup self, size_t const & index)
        """
        return _COPASI.CModelParameterGroup_remove(self, *args)


    def size(self):
        """size(CModelParameterGroup self) -> size_t"""
        return _COPASI.CModelParameterGroup_size(self)


    def compile(self):
        """compile(CModelParameterGroup self)"""
        return _COPASI.CModelParameterGroup_compile(self)


    def clear(self):
        """clear(CModelParameterGroup self)"""
        return _COPASI.CModelParameterGroup_clear(self)


    def updateModel(self):
        """updateModel(CModelParameterGroup self) -> bool"""
        return _COPASI.CModelParameterGroup_updateModel(self)


    def refreshFromModel(self, modifyExistence):
        """refreshFromModel(CModelParameterGroup self, bool const & modifyExistence) -> bool"""
        return _COPASI.CModelParameterGroup_refreshFromModel(self, modifyExistence)


    def getModelParameter(self, *args):
        """
        getModelParameter(CModelParameterGroup self, std::string const & cn) -> CModelParameter
        getModelParameter(CModelParameterGroup self, std::string const & name, CModelParameter::Type const & type) -> CModelParameter
        """
        return _COPASI.CModelParameterGroup_getModelParameter(self, *args)


    def getNumChildren(self):
        """getNumChildren(CModelParameterGroup self) -> size_t"""
        return _COPASI.CModelParameterGroup_getNumChildren(self)


    def getChild(self, index):
        """getChild(CModelParameterGroup self, size_t const & index) -> CModelParameter"""
        return _COPASI.CModelParameterGroup_getChild(self, index)


    def getObjectUnit(self, pModelParameter):
        """getObjectUnit(CModelParameterGroup self, CModelParameter pModelParameter) -> CValidatedUnit"""
        return _COPASI.CModelParameterGroup_getObjectUnit(self, pModelParameter)


    def assignGroupContent(self, src, createMissing):
        """assignGroupContent(CModelParameterGroup self, CModelParameterGroup src, bool const & createMissing)"""
        return _COPASI.CModelParameterGroup_assignGroupContent(self, src, createMissing)

CModelParameterGroup_swigregister = _COPASI.CModelParameterGroup_swigregister
CModelParameterGroup_swigregister(CModelParameterGroup)

class CModelParameterSet(CDataContainer, CModelParameterGroup, CAnnotation):
    """Proxy of C++ CModelParameterSet class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer, CModelParameterGroup, CAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelParameterSet, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer, CModelParameterGroup, CAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModelParameterSet, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModelParameterSet"""
        return _COPASI.CModelParameterSet_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CModelParameterSet self, std::string const & name, CDataContainer pParent) -> CModelParameterSet
        __init__(CModelParameterSet self, std::string const & name) -> CModelParameterSet
        __init__(CModelParameterSet self, CModelParameterSet src, CDataContainer pParent, bool const & createMissing=False) -> CModelParameterSet
        __init__(CModelParameterSet self, CModelParameterSet src, CDataContainer pParent) -> CModelParameterSet
        """
        this = _COPASI.new_CModelParameterSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModelParameterSet
    __del__ = lambda self: None

    def getCN(self):
        """getCN(CModelParameterSet self) -> CCommonName"""
        return _COPASI.CModelParameterSet_getCN(self)


    def toGroup(self, *args):
        """
        toGroup(CModelParameterSet self) -> CModelParameterGroup
        toGroup(CModelParameterSet self) -> CModelParameterGroup
        """
        return _COPASI.CModelParameterSet_toGroup(self, *args)


    def toSet(self, *args):
        """
        toSet(CModelParameterSet self) -> CModelParameterSet
        toSet(CModelParameterSet self) -> CModelParameterSet
        """
        return _COPASI.CModelParameterSet_toSet(self, *args)


    def getKey(self):
        """getKey(CModelParameterSet self) -> std::string const &"""
        return _COPASI.CModelParameterSet_getKey(self)


    def setObjectParent(self, pParent):
        """setObjectParent(CModelParameterSet self, CDataContainer pParent) -> bool"""
        return _COPASI.CModelParameterSet_setObjectParent(self, pParent)


    def getIndex(self):
        """getIndex(CModelParameterSet self) -> size_t"""
        return _COPASI.CModelParameterSet_getIndex(self)


    def getModel(self):
        """getModel(CModelParameterSet self) -> CModel"""
        return _COPASI.CModelParameterSet_getModel(self)


    def createFromModel(self):
        """createFromModel(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_createFromModel(self)


    def compareWithModel(self, framework):
        """compareWithModel(CModelParameterSet self, CCore::Framework const & framework) -> bool"""
        return _COPASI.CModelParameterSet_compareWithModel(self, framework)


    def getName(self):
        """getName(CModelParameterSet self) -> std::string"""
        return _COPASI.CModelParameterSet_getName(self)


    def updateModel(self):
        """updateModel(CModelParameterSet self) -> bool"""
        return _COPASI.CModelParameterSet_updateModel(self)


    def diff(self, other, framework, createMissing=False):
        """
        diff(CModelParameterSet self, CModelParameterSet other, CCore::Framework const & framework, bool const & createMissing=False) -> CModelParameter::CompareResult const
        diff(CModelParameterSet self, CModelParameterSet other, CCore::Framework const & framework) -> CModelParameter::CompareResult const &
        """
        return _COPASI.CModelParameterSet_diff(self, other, framework, createMissing)


    def isActive(self):
        """isActive(CModelParameterSet self) -> bool"""
        return _COPASI.CModelParameterSet_isActive(self)


    def assignSetContent(self, src, createMissing):
        """assignSetContent(CModelParameterSet self, CModelParameterSet src, bool const & createMissing)"""
        return _COPASI.CModelParameterSet_assignSetContent(self, src, createMissing)


    def add(self, *args):
        """
        add(CModelParameterSet self, int type) -> CModelParameter
        add(CModelParameterSet self, CModelParameter pModelParameter)
        """
        return _COPASI.CModelParameterSet_add(self, *args)


    def remove(self, *args):
        """
        remove(CModelParameterSet self, CModelParameter pModelParameter)
        remove(CModelParameterSet self, int index)
        """
        return _COPASI.CModelParameterSet_remove(self, *args)


    def size(self):
        """size(CModelParameterSet self) -> int"""
        return _COPASI.CModelParameterSet_size(self)


    def compile(self):
        """compile(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_compile(self)


    def clear(self):
        """clear(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_clear(self)


    def refreshFromModel(self, modifyExistence):
        """refreshFromModel(CModelParameterSet self, bool modifyExistence) -> bool"""
        return _COPASI.CModelParameterSet_refreshFromModel(self, modifyExistence)


    def getModelParameter(self, *args):
        """
        getModelParameter(CModelParameterSet self, std::string const & cn) -> CModelParameter
        getModelParameter(CModelParameterSet self, std::string const & name, int type) -> CModelParameter
        getModelParameter(CModelParameterSet self, int index) -> CModelParameter
        """
        return _COPASI.CModelParameterSet_getModelParameter(self, *args)

CModelParameterSet_swigregister = _COPASI.CModelParameterSet_swigregister
CModelParameterSet_swigregister(CModelParameterSet)

def CModelParameterSet_fromData(data, pParent):
    """CModelParameterSet_fromData(CData data, CUndoObjectInterface pParent) -> CModelParameterSet"""
    return _COPASI.CModelParameterSet_fromData(data, pParent)

class EventStdVector(_object):
    """Proxy of C++ std::vector<(p.CEvent)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(EventStdVector self) -> SwigPyIterator"""
        return _COPASI.EventStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector___bool__(self)


    def __len__(self):
        """__len__(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j) -> EventStdVector"""
        return _COPASI.EventStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j)
        __setslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j, EventStdVector v)
        """
        return _COPASI.EventStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j)"""
        return _COPASI.EventStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(EventStdVector self, std::vector< CEvent * >::difference_type i)
        __delitem__(EventStdVector self, PySliceObject * slice)
        """
        return _COPASI.EventStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(EventStdVector self, PySliceObject * slice) -> EventStdVector
        __getitem__(EventStdVector self, std::vector< CEvent * >::difference_type i) -> CEvent
        """
        return _COPASI.EventStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(EventStdVector self, PySliceObject * slice, EventStdVector v)
        __setitem__(EventStdVector self, PySliceObject * slice)
        __setitem__(EventStdVector self, std::vector< CEvent * >::difference_type i, CEvent x)
        """
        return _COPASI.EventStdVector___setitem__(self, *args)


    def pop(self):
        """pop(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_pop(self)


    def append(self, x):
        """append(EventStdVector self, CEvent x)"""
        return _COPASI.EventStdVector_append(self, x)


    def empty(self):
        """empty(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector_empty(self)


    def size(self):
        """size(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector_size(self)


    def swap(self, v):
        """swap(EventStdVector self, EventStdVector v)"""
        return _COPASI.EventStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(EventStdVector self) -> std::vector< CEvent * >::reverse_iterator"""
        return _COPASI.EventStdVector_rbegin(self)


    def rend(self):
        """rend(EventStdVector self) -> std::vector< CEvent * >::reverse_iterator"""
        return _COPASI.EventStdVector_rend(self)


    def clear(self):
        """clear(EventStdVector self)"""
        return _COPASI.EventStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(EventStdVector self) -> std::vector< CEvent * >::allocator_type"""
        return _COPASI.EventStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(EventStdVector self)"""
        return _COPASI.EventStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(EventStdVector self, std::vector< CEvent * >::iterator pos) -> std::vector< CEvent * >::iterator
        erase(EventStdVector self, std::vector< CEvent * >::iterator first, std::vector< CEvent * >::iterator last) -> std::vector< CEvent * >::iterator
        """
        return _COPASI.EventStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CEvent)> self) -> EventStdVector
        __init__(std::vector<(p.CEvent)> self, EventStdVector arg2) -> EventStdVector
        __init__(std::vector<(p.CEvent)> self, std::vector< CEvent * >::size_type size) -> EventStdVector
        __init__(std::vector<(p.CEvent)> self, std::vector< CEvent * >::size_type size, CEvent value) -> EventStdVector
        """
        this = _COPASI.new_EventStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(EventStdVector self, CEvent x)"""
        return _COPASI.EventStdVector_push_back(self, x)


    def front(self):
        """front(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_front(self)


    def back(self):
        """back(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_back(self)


    def assign(self, n, x):
        """assign(EventStdVector self, std::vector< CEvent * >::size_type n, CEvent x)"""
        return _COPASI.EventStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(EventStdVector self, std::vector< CEvent * >::size_type new_size)
        resize(EventStdVector self, std::vector< CEvent * >::size_type new_size, CEvent x)
        """
        return _COPASI.EventStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(EventStdVector self, std::vector< CEvent * >::iterator pos, CEvent x) -> std::vector< CEvent * >::iterator
        insert(EventStdVector self, std::vector< CEvent * >::iterator pos, std::vector< CEvent * >::size_type n, CEvent x)
        """
        return _COPASI.EventStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(EventStdVector self, std::vector< CEvent * >::size_type n)"""
        return _COPASI.EventStdVector_reserve(self, n)


    def capacity(self):
        """capacity(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_EventStdVector
    __del__ = lambda self: None
EventStdVector_swigregister = _COPASI.EventStdVector_swigregister
EventStdVector_swigregister(EventStdVector)

class EventVector(CDataContainer):
    """Proxy of C++ CDataVector<(CEvent)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(EventVector self)"""
        return _COPASI.EventVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(EventVector self, CEvent src) -> bool"""
        return _COPASI.EventVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(EventVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.EventVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(EventVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(EventVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventVector_getObject(self, name)


    def size(self):
        """size(EventVector self) -> size_t"""
        return _COPASI.EventVector_size(self)


    def empty(self):
        """empty(EventVector self) -> bool"""
        return _COPASI.EventVector_empty(self)


    def clear(self):
        """clear(EventVector self)"""
        return _COPASI.EventVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(EventVector self, CDataObject pObject) -> size_t"""
        return _COPASI.EventVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(EventVector self, unsigned int index)"""
        return _COPASI.EventVector_remove(self, index)


    def get(self, index):
        """get(EventVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(EventVector self, CEvent DISOWN) -> bool"""
        return _COPASI.EventVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(EventVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(EventVector self) -> size_t"""
        return _COPASI.EventVector___len__(self)

EventVector_swigregister = _COPASI.EventVector_swigregister
EventVector_swigregister(EventVector)

class EventVectorN(EventVector):
    """Proxy of C++ CDataVectorN<(CEvent)> class."""

    __swig_setmethods__ = {}
    for _s in [EventVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [EventVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CEvent)> self, std::string const & name, CDataContainer pParent) -> EventVectorN
        __init__(CDataVectorN<(CEvent)> self, std::string const & name) -> EventVectorN
        __init__(CDataVectorN<(CEvent)> self) -> EventVectorN
        __init__(CDataVectorN<(CEvent)> self, EventVectorN src, CDataContainer pParent) -> EventVectorN
        """
        this = _COPASI.new_EventVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_EventVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(EventVectorN self, CEvent src) -> bool"""
        return _COPASI.EventVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(EventVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.EventVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(EventVectorN self, std::string const & name)"""
        return _COPASI.EventVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(EventVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(EventVectorN self, std::string const & name) -> size_t"""
        return _COPASI.EventVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(EventVectorN self, std::string & name)"""
        return _COPASI.EventVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(EventVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.EventVectorN_getByName(self, name)

EventVectorN_swigregister = _COPASI.EventVectorN_swigregister
EventVectorN_swigregister(EventVectorN)

class EventAssignmentStdVector(_object):
    """Proxy of C++ std::vector<(p.CEventAssignment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(EventAssignmentStdVector self) -> SwigPyIterator"""
        return _COPASI.EventAssignmentStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector___bool__(self)


    def __len__(self):
        """__len__(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j) -> EventAssignmentStdVector"""
        return _COPASI.EventAssignmentStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j)
        __setslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j, EventAssignmentStdVector v)
        """
        return _COPASI.EventAssignmentStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j)"""
        return _COPASI.EventAssignmentStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i)
        __delitem__(EventAssignmentStdVector self, PySliceObject * slice)
        """
        return _COPASI.EventAssignmentStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(EventAssignmentStdVector self, PySliceObject * slice) -> EventAssignmentStdVector
        __getitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i) -> CEventAssignment
        """
        return _COPASI.EventAssignmentStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(EventAssignmentStdVector self, PySliceObject * slice, EventAssignmentStdVector v)
        __setitem__(EventAssignmentStdVector self, PySliceObject * slice)
        __setitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector___setitem__(self, *args)


    def pop(self):
        """pop(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_pop(self)


    def append(self, x):
        """append(EventAssignmentStdVector self, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_append(self, x)


    def empty(self):
        """empty(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector_empty(self)


    def size(self):
        """size(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector_size(self)


    def swap(self, v):
        """swap(EventAssignmentStdVector self, EventAssignmentStdVector v)"""
        return _COPASI.EventAssignmentStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::reverse_iterator"""
        return _COPASI.EventAssignmentStdVector_rbegin(self)


    def rend(self):
        """rend(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::reverse_iterator"""
        return _COPASI.EventAssignmentStdVector_rend(self)


    def clear(self):
        """clear(EventAssignmentStdVector self)"""
        return _COPASI.EventAssignmentStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::allocator_type"""
        return _COPASI.EventAssignmentStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(EventAssignmentStdVector self)"""
        return _COPASI.EventAssignmentStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos) -> std::vector< CEventAssignment * >::iterator
        erase(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator first, std::vector< CEventAssignment * >::iterator last) -> std::vector< CEventAssignment * >::iterator
        """
        return _COPASI.EventAssignmentStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CEventAssignment)> self) -> EventAssignmentStdVector
        __init__(std::vector<(p.CEventAssignment)> self, EventAssignmentStdVector arg2) -> EventAssignmentStdVector
        __init__(std::vector<(p.CEventAssignment)> self, std::vector< CEventAssignment * >::size_type size) -> EventAssignmentStdVector
        __init__(std::vector<(p.CEventAssignment)> self, std::vector< CEventAssignment * >::size_type size, CEventAssignment value) -> EventAssignmentStdVector
        """
        this = _COPASI.new_EventAssignmentStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(EventAssignmentStdVector self, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_push_back(self, x)


    def front(self):
        """front(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_front(self)


    def back(self):
        """back(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_back(self)


    def assign(self, n, x):
        """assign(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type n, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type new_size)
        resize(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type new_size, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos, CEventAssignment x) -> std::vector< CEventAssignment * >::iterator
        insert(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos, std::vector< CEventAssignment * >::size_type n, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type n)"""
        return _COPASI.EventAssignmentStdVector_reserve(self, n)


    def capacity(self):
        """capacity(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_EventAssignmentStdVector
    __del__ = lambda self: None
EventAssignmentStdVector_swigregister = _COPASI.EventAssignmentStdVector_swigregister
EventAssignmentStdVector_swigregister(EventAssignmentStdVector)

class EventAssignmentVector(CDataContainer):
    """Proxy of C++ CDataVector<(CEventAssignment)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventAssignmentVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(EventAssignmentVector self)"""
        return _COPASI.EventAssignmentVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(EventAssignmentVector self, CEventAssignment src) -> bool"""
        return _COPASI.EventAssignmentVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(EventAssignmentVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.EventAssignmentVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(EventAssignmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventAssignmentVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(EventAssignmentVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventAssignmentVector_getObject(self, name)


    def size(self):
        """size(EventAssignmentVector self) -> size_t"""
        return _COPASI.EventAssignmentVector_size(self)


    def empty(self):
        """empty(EventAssignmentVector self) -> bool"""
        return _COPASI.EventAssignmentVector_empty(self)


    def clear(self):
        """clear(EventAssignmentVector self)"""
        return _COPASI.EventAssignmentVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(EventAssignmentVector self, CDataObject pObject) -> size_t"""
        return _COPASI.EventAssignmentVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(EventAssignmentVector self, unsigned int index)"""
        return _COPASI.EventAssignmentVector_remove(self, index)


    def get(self, index):
        """get(EventAssignmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventAssignmentVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(EventAssignmentVector self, CEventAssignment DISOWN) -> bool"""
        return _COPASI.EventAssignmentVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(EventAssignmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventAssignmentVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(EventAssignmentVector self) -> size_t"""
        return _COPASI.EventAssignmentVector___len__(self)

EventAssignmentVector_swigregister = _COPASI.EventAssignmentVector_swigregister
EventAssignmentVector_swigregister(EventAssignmentVector)

class EventAssignmentVectorN(EventAssignmentVector):
    """Proxy of C++ CDataVectorN<(CEventAssignment)> class."""

    __swig_setmethods__ = {}
    for _s in [EventAssignmentVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignmentVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [EventAssignmentVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignmentVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CEventAssignment)> self, std::string const & name, CDataContainer pParent) -> EventAssignmentVectorN
        __init__(CDataVectorN<(CEventAssignment)> self, std::string const & name) -> EventAssignmentVectorN
        __init__(CDataVectorN<(CEventAssignment)> self) -> EventAssignmentVectorN
        __init__(CDataVectorN<(CEventAssignment)> self, EventAssignmentVectorN src, CDataContainer pParent) -> EventAssignmentVectorN
        """
        this = _COPASI.new_EventAssignmentVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_EventAssignmentVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(EventAssignmentVectorN self, CEventAssignment src) -> bool"""
        return _COPASI.EventAssignmentVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(EventAssignmentVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.EventAssignmentVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(EventAssignmentVectorN self, std::string const & name)"""
        return _COPASI.EventAssignmentVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(EventAssignmentVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventAssignmentVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(EventAssignmentVectorN self, std::string const & name) -> size_t"""
        return _COPASI.EventAssignmentVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(EventAssignmentVectorN self, std::string & name)"""
        return _COPASI.EventAssignmentVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(EventAssignmentVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.EventAssignmentVectorN_getByName(self, name)

EventAssignmentVectorN_swigregister = _COPASI.EventAssignmentVectorN_swigregister
EventAssignmentVectorN_swigregister(EventAssignmentVectorN)

class TaskStdVector(_object):
    """Proxy of C++ std::vector<(p.CCopasiTask)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(TaskStdVector self) -> SwigPyIterator"""
        return _COPASI.TaskStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector___bool__(self)


    def __len__(self):
        """__len__(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j) -> TaskStdVector"""
        return _COPASI.TaskStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j)
        __setslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j, TaskStdVector v)
        """
        return _COPASI.TaskStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j)"""
        return _COPASI.TaskStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i)
        __delitem__(TaskStdVector self, PySliceObject * slice)
        """
        return _COPASI.TaskStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(TaskStdVector self, PySliceObject * slice) -> TaskStdVector
        __getitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i) -> CCopasiTask
        """
        return _COPASI.TaskStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(TaskStdVector self, PySliceObject * slice, TaskStdVector v)
        __setitem__(TaskStdVector self, PySliceObject * slice)
        __setitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, CCopasiTask x)
        """
        return _COPASI.TaskStdVector___setitem__(self, *args)


    def pop(self):
        """pop(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_pop(self)


    def append(self, x):
        """append(TaskStdVector self, CCopasiTask x)"""
        return _COPASI.TaskStdVector_append(self, x)


    def empty(self):
        """empty(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector_empty(self)


    def size(self):
        """size(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector_size(self)


    def swap(self, v):
        """swap(TaskStdVector self, TaskStdVector v)"""
        return _COPASI.TaskStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(TaskStdVector self) -> std::vector< CCopasiTask * >::reverse_iterator"""
        return _COPASI.TaskStdVector_rbegin(self)


    def rend(self):
        """rend(TaskStdVector self) -> std::vector< CCopasiTask * >::reverse_iterator"""
        return _COPASI.TaskStdVector_rend(self)


    def clear(self):
        """clear(TaskStdVector self)"""
        return _COPASI.TaskStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(TaskStdVector self) -> std::vector< CCopasiTask * >::allocator_type"""
        return _COPASI.TaskStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(TaskStdVector self)"""
        return _COPASI.TaskStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos) -> std::vector< CCopasiTask * >::iterator
        erase(TaskStdVector self, std::vector< CCopasiTask * >::iterator first, std::vector< CCopasiTask * >::iterator last) -> std::vector< CCopasiTask * >::iterator
        """
        return _COPASI.TaskStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CCopasiTask)> self) -> TaskStdVector
        __init__(std::vector<(p.CCopasiTask)> self, TaskStdVector arg2) -> TaskStdVector
        __init__(std::vector<(p.CCopasiTask)> self, std::vector< CCopasiTask * >::size_type size) -> TaskStdVector
        __init__(std::vector<(p.CCopasiTask)> self, std::vector< CCopasiTask * >::size_type size, CCopasiTask value) -> TaskStdVector
        """
        this = _COPASI.new_TaskStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(TaskStdVector self, CCopasiTask x)"""
        return _COPASI.TaskStdVector_push_back(self, x)


    def front(self):
        """front(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_front(self)


    def back(self):
        """back(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_back(self)


    def assign(self, n, x):
        """assign(TaskStdVector self, std::vector< CCopasiTask * >::size_type n, CCopasiTask x)"""
        return _COPASI.TaskStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(TaskStdVector self, std::vector< CCopasiTask * >::size_type new_size)
        resize(TaskStdVector self, std::vector< CCopasiTask * >::size_type new_size, CCopasiTask x)
        """
        return _COPASI.TaskStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos, CCopasiTask x) -> std::vector< CCopasiTask * >::iterator
        insert(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos, std::vector< CCopasiTask * >::size_type n, CCopasiTask x)
        """
        return _COPASI.TaskStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(TaskStdVector self, std::vector< CCopasiTask * >::size_type n)"""
        return _COPASI.TaskStdVector_reserve(self, n)


    def capacity(self):
        """capacity(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_TaskStdVector
    __del__ = lambda self: None
TaskStdVector_swigregister = _COPASI.TaskStdVector_swigregister
TaskStdVector_swigregister(TaskStdVector)

class TaskVector(CDataContainer):
    """Proxy of C++ CDataVector<(CCopasiTask)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TaskVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(TaskVector self)"""
        return _COPASI.TaskVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(TaskVector self, CCopasiTask src) -> bool"""
        return _COPASI.TaskVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(TaskVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.TaskVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(TaskVector self, CDataObject pObject) -> bool"""
        return _COPASI.TaskVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(TaskVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TaskVector_getObject(self, name)


    def size(self):
        """size(TaskVector self) -> size_t"""
        return _COPASI.TaskVector_size(self)


    def empty(self):
        """empty(TaskVector self) -> bool"""
        return _COPASI.TaskVector_empty(self)


    def clear(self):
        """clear(TaskVector self)"""
        return _COPASI.TaskVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(TaskVector self, CDataObject pObject) -> size_t"""
        return _COPASI.TaskVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(TaskVector self, unsigned int index)"""
        return _COPASI.TaskVector_remove(self, index)


    def get(self, index):
        """get(TaskVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TaskVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(TaskVector self, CCopasiTask DISOWN) -> bool"""
        return _COPASI.TaskVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(TaskVector self, CDataObject pObject) -> bool"""
        return _COPASI.TaskVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(TaskVector self) -> size_t"""
        return _COPASI.TaskVector___len__(self)

TaskVector_swigregister = _COPASI.TaskVector_swigregister
TaskVector_swigregister(TaskVector)

class TaskVectorN(TaskVector):
    """Proxy of C++ CDataVectorN<(CCopasiTask)> class."""

    __swig_setmethods__ = {}
    for _s in [TaskVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [TaskVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CCopasiTask)> self, std::string const & name, CDataContainer pParent) -> TaskVectorN
        __init__(CDataVectorN<(CCopasiTask)> self, std::string const & name) -> TaskVectorN
        __init__(CDataVectorN<(CCopasiTask)> self) -> TaskVectorN
        __init__(CDataVectorN<(CCopasiTask)> self, TaskVectorN src, CDataContainer pParent) -> TaskVectorN
        """
        this = _COPASI.new_TaskVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_TaskVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(TaskVectorN self, CCopasiTask src) -> bool"""
        return _COPASI.TaskVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(TaskVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.TaskVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(TaskVectorN self, std::string const & name)"""
        return _COPASI.TaskVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(TaskVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TaskVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(TaskVectorN self, std::string const & name) -> size_t"""
        return _COPASI.TaskVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(TaskVectorN self, std::string & name)"""
        return _COPASI.TaskVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(TaskVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.TaskVectorN_getByName(self, name)

TaskVectorN_swigregister = _COPASI.TaskVectorN_swigregister
TaskVectorN_swigregister(TaskVectorN)

class FluxModeStdVector(_object):
    """Proxy of C++ std::vector<(p.CFluxMode)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluxModeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FluxModeStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(FluxModeStdVector self) -> SwigPyIterator"""
        return _COPASI.FluxModeStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector___bool__(self)


    def __len__(self):
        """__len__(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j) -> FluxModeStdVector"""
        return _COPASI.FluxModeStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j)
        __setslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j, FluxModeStdVector v)
        """
        return _COPASI.FluxModeStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j)"""
        return _COPASI.FluxModeStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i)
        __delitem__(FluxModeStdVector self, PySliceObject * slice)
        """
        return _COPASI.FluxModeStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FluxModeStdVector self, PySliceObject * slice) -> FluxModeStdVector
        __getitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i) -> CFluxMode
        """
        return _COPASI.FluxModeStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FluxModeStdVector self, PySliceObject * slice, FluxModeStdVector v)
        __setitem__(FluxModeStdVector self, PySliceObject * slice)
        __setitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector___setitem__(self, *args)


    def pop(self):
        """pop(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_pop(self)


    def append(self, x):
        """append(FluxModeStdVector self, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_append(self, x)


    def empty(self):
        """empty(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector_empty(self)


    def size(self):
        """size(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector_size(self)


    def swap(self, v):
        """swap(FluxModeStdVector self, FluxModeStdVector v)"""
        return _COPASI.FluxModeStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(FluxModeStdVector self) -> std::vector< CFluxMode * >::reverse_iterator"""
        return _COPASI.FluxModeStdVector_rbegin(self)


    def rend(self):
        """rend(FluxModeStdVector self) -> std::vector< CFluxMode * >::reverse_iterator"""
        return _COPASI.FluxModeStdVector_rend(self)


    def clear(self):
        """clear(FluxModeStdVector self)"""
        return _COPASI.FluxModeStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(FluxModeStdVector self) -> std::vector< CFluxMode * >::allocator_type"""
        return _COPASI.FluxModeStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(FluxModeStdVector self)"""
        return _COPASI.FluxModeStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos) -> std::vector< CFluxMode * >::iterator
        erase(FluxModeStdVector self, std::vector< CFluxMode * >::iterator first, std::vector< CFluxMode * >::iterator last) -> std::vector< CFluxMode * >::iterator
        """
        return _COPASI.FluxModeStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CFluxMode)> self) -> FluxModeStdVector
        __init__(std::vector<(p.CFluxMode)> self, FluxModeStdVector arg2) -> FluxModeStdVector
        __init__(std::vector<(p.CFluxMode)> self, std::vector< CFluxMode * >::size_type size) -> FluxModeStdVector
        __init__(std::vector<(p.CFluxMode)> self, std::vector< CFluxMode * >::size_type size, CFluxMode value) -> FluxModeStdVector
        """
        this = _COPASI.new_FluxModeStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FluxModeStdVector self, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_push_back(self, x)


    def front(self):
        """front(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_front(self)


    def back(self):
        """back(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_back(self)


    def assign(self, n, x):
        """assign(FluxModeStdVector self, std::vector< CFluxMode * >::size_type n, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FluxModeStdVector self, std::vector< CFluxMode * >::size_type new_size)
        resize(FluxModeStdVector self, std::vector< CFluxMode * >::size_type new_size, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos, CFluxMode x) -> std::vector< CFluxMode * >::iterator
        insert(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos, std::vector< CFluxMode * >::size_type n, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(FluxModeStdVector self, std::vector< CFluxMode * >::size_type n)"""
        return _COPASI.FluxModeStdVector_reserve(self, n)


    def capacity(self):
        """capacity(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_FluxModeStdVector
    __del__ = lambda self: None
FluxModeStdVector_swigregister = _COPASI.FluxModeStdVector_swigregister
FluxModeStdVector_swigregister(FluxModeStdVector)

class ModelValueStdVector(_object):
    """Proxy of C++ std::vector<(p.CModelValue)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ModelValueStdVector self) -> SwigPyIterator"""
        return _COPASI.ModelValueStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector___bool__(self)


    def __len__(self):
        """__len__(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j) -> ModelValueStdVector"""
        return _COPASI.ModelValueStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j)
        __setslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j, ModelValueStdVector v)
        """
        return _COPASI.ModelValueStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j)"""
        return _COPASI.ModelValueStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i)
        __delitem__(ModelValueStdVector self, PySliceObject * slice)
        """
        return _COPASI.ModelValueStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ModelValueStdVector self, PySliceObject * slice) -> ModelValueStdVector
        __getitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i) -> CModelValue
        """
        return _COPASI.ModelValueStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ModelValueStdVector self, PySliceObject * slice, ModelValueStdVector v)
        __setitem__(ModelValueStdVector self, PySliceObject * slice)
        __setitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, CModelValue x)
        """
        return _COPASI.ModelValueStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_pop(self)


    def append(self, x):
        """append(ModelValueStdVector self, CModelValue x)"""
        return _COPASI.ModelValueStdVector_append(self, x)


    def empty(self):
        """empty(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector_empty(self)


    def size(self):
        """size(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector_size(self)


    def swap(self, v):
        """swap(ModelValueStdVector self, ModelValueStdVector v)"""
        return _COPASI.ModelValueStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ModelValueStdVector self) -> std::vector< CModelValue * >::reverse_iterator"""
        return _COPASI.ModelValueStdVector_rbegin(self)


    def rend(self):
        """rend(ModelValueStdVector self) -> std::vector< CModelValue * >::reverse_iterator"""
        return _COPASI.ModelValueStdVector_rend(self)


    def clear(self):
        """clear(ModelValueStdVector self)"""
        return _COPASI.ModelValueStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ModelValueStdVector self) -> std::vector< CModelValue * >::allocator_type"""
        return _COPASI.ModelValueStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ModelValueStdVector self)"""
        return _COPASI.ModelValueStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos) -> std::vector< CModelValue * >::iterator
        erase(ModelValueStdVector self, std::vector< CModelValue * >::iterator first, std::vector< CModelValue * >::iterator last) -> std::vector< CModelValue * >::iterator
        """
        return _COPASI.ModelValueStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CModelValue)> self) -> ModelValueStdVector
        __init__(std::vector<(p.CModelValue)> self, ModelValueStdVector arg2) -> ModelValueStdVector
        __init__(std::vector<(p.CModelValue)> self, std::vector< CModelValue * >::size_type size) -> ModelValueStdVector
        __init__(std::vector<(p.CModelValue)> self, std::vector< CModelValue * >::size_type size, CModelValue value) -> ModelValueStdVector
        """
        this = _COPASI.new_ModelValueStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ModelValueStdVector self, CModelValue x)"""
        return _COPASI.ModelValueStdVector_push_back(self, x)


    def front(self):
        """front(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_front(self)


    def back(self):
        """back(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_back(self)


    def assign(self, n, x):
        """assign(ModelValueStdVector self, std::vector< CModelValue * >::size_type n, CModelValue x)"""
        return _COPASI.ModelValueStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ModelValueStdVector self, std::vector< CModelValue * >::size_type new_size)
        resize(ModelValueStdVector self, std::vector< CModelValue * >::size_type new_size, CModelValue x)
        """
        return _COPASI.ModelValueStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos, CModelValue x) -> std::vector< CModelValue * >::iterator
        insert(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos, std::vector< CModelValue * >::size_type n, CModelValue x)
        """
        return _COPASI.ModelValueStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ModelValueStdVector self, std::vector< CModelValue * >::size_type n)"""
        return _COPASI.ModelValueStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ModelValueStdVector
    __del__ = lambda self: None
ModelValueStdVector_swigregister = _COPASI.ModelValueStdVector_swigregister
ModelValueStdVector_swigregister(ModelValueStdVector)

class ModelValueVector(CDataContainer):
    """Proxy of C++ CDataVector<(CModelValue)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModelValueVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ModelValueVector self)"""
        return _COPASI.ModelValueVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ModelValueVector self, CModelValue src) -> bool"""
        return _COPASI.ModelValueVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ModelValueVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModelValueVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ModelValueVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelValueVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ModelValueVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelValueVector_getObject(self, name)


    def size(self):
        """size(ModelValueVector self) -> size_t"""
        return _COPASI.ModelValueVector_size(self)


    def empty(self):
        """empty(ModelValueVector self) -> bool"""
        return _COPASI.ModelValueVector_empty(self)


    def clear(self):
        """clear(ModelValueVector self)"""
        return _COPASI.ModelValueVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ModelValueVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModelValueVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ModelValueVector self, unsigned int index)"""
        return _COPASI.ModelValueVector_remove(self, index)


    def get(self, index):
        """get(ModelValueVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelValueVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ModelValueVector self, CModelValue DISOWN) -> bool"""
        return _COPASI.ModelValueVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ModelValueVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelValueVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ModelValueVector self) -> size_t"""
        return _COPASI.ModelValueVector___len__(self)

ModelValueVector_swigregister = _COPASI.ModelValueVector_swigregister
ModelValueVector_swigregister(ModelValueVector)

class ModelValueVectorN(ModelValueVector):
    """Proxy of C++ CDataVectorN<(CModelValue)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelValueVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelValueVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelValueVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelValueVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CModelValue)> self, std::string const & name, CDataContainer pParent) -> ModelValueVectorN
        __init__(CDataVectorN<(CModelValue)> self, std::string const & name) -> ModelValueVectorN
        __init__(CDataVectorN<(CModelValue)> self) -> ModelValueVectorN
        __init__(CDataVectorN<(CModelValue)> self, ModelValueVectorN src, CDataContainer pParent) -> ModelValueVectorN
        """
        this = _COPASI.new_ModelValueVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ModelValueVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(ModelValueVectorN self, CModelValue src) -> bool"""
        return _COPASI.ModelValueVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(ModelValueVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.ModelValueVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(ModelValueVectorN self, std::string const & name)"""
        return _COPASI.ModelValueVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(ModelValueVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelValueVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(ModelValueVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ModelValueVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(ModelValueVectorN self, std::string & name)"""
        return _COPASI.ModelValueVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(ModelValueVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ModelValueVectorN_getByName(self, name)

ModelValueVectorN_swigregister = _COPASI.ModelValueVectorN_swigregister
ModelValueVectorN_swigregister(ModelValueVectorN)

class ReportDefinitionStdVector(_object):
    """Proxy of C++ std::vector<(p.CReportDefinition)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ReportDefinitionStdVector self) -> SwigPyIterator"""
        return _COPASI.ReportDefinitionStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector___bool__(self)


    def __len__(self):
        """__len__(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j) -> ReportDefinitionStdVector"""
        return _COPASI.ReportDefinitionStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j)
        __setslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j, ReportDefinitionStdVector v)
        """
        return _COPASI.ReportDefinitionStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j)"""
        return _COPASI.ReportDefinitionStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i)
        __delitem__(ReportDefinitionStdVector self, PySliceObject * slice)
        """
        return _COPASI.ReportDefinitionStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ReportDefinitionStdVector self, PySliceObject * slice) -> ReportDefinitionStdVector
        __getitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i) -> CReportDefinition
        """
        return _COPASI.ReportDefinitionStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ReportDefinitionStdVector self, PySliceObject * slice, ReportDefinitionStdVector v)
        __setitem__(ReportDefinitionStdVector self, PySliceObject * slice)
        __setitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_pop(self)


    def append(self, x):
        """append(ReportDefinitionStdVector self, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_append(self, x)


    def empty(self):
        """empty(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector_empty(self)


    def size(self):
        """size(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector_size(self)


    def swap(self, v):
        """swap(ReportDefinitionStdVector self, ReportDefinitionStdVector v)"""
        return _COPASI.ReportDefinitionStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::reverse_iterator"""
        return _COPASI.ReportDefinitionStdVector_rbegin(self)


    def rend(self):
        """rend(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::reverse_iterator"""
        return _COPASI.ReportDefinitionStdVector_rend(self)


    def clear(self):
        """clear(ReportDefinitionStdVector self)"""
        return _COPASI.ReportDefinitionStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::allocator_type"""
        return _COPASI.ReportDefinitionStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ReportDefinitionStdVector self)"""
        return _COPASI.ReportDefinitionStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos) -> std::vector< CReportDefinition * >::iterator
        erase(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator first, std::vector< CReportDefinition * >::iterator last) -> std::vector< CReportDefinition * >::iterator
        """
        return _COPASI.ReportDefinitionStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CReportDefinition)> self) -> ReportDefinitionStdVector
        __init__(std::vector<(p.CReportDefinition)> self, ReportDefinitionStdVector arg2) -> ReportDefinitionStdVector
        __init__(std::vector<(p.CReportDefinition)> self, std::vector< CReportDefinition * >::size_type size) -> ReportDefinitionStdVector
        __init__(std::vector<(p.CReportDefinition)> self, std::vector< CReportDefinition * >::size_type size, CReportDefinition value) -> ReportDefinitionStdVector
        """
        this = _COPASI.new_ReportDefinitionStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ReportDefinitionStdVector self, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_push_back(self, x)


    def front(self):
        """front(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_front(self)


    def back(self):
        """back(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_back(self)


    def assign(self, n, x):
        """assign(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type n, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type new_size)
        resize(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type new_size, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos, CReportDefinition x) -> std::vector< CReportDefinition * >::iterator
        insert(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos, std::vector< CReportDefinition * >::size_type n, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type n)"""
        return _COPASI.ReportDefinitionStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ReportDefinitionStdVector
    __del__ = lambda self: None
ReportDefinitionStdVector_swigregister = _COPASI.ReportDefinitionStdVector_swigregister
ReportDefinitionStdVector_swigregister(ReportDefinitionStdVector)

class ReportDefinitionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CReportDefinition)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ReportDefinitionVector self)"""
        return _COPASI.ReportDefinitionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ReportDefinitionVector self, CReportDefinition src) -> bool"""
        return _COPASI.ReportDefinitionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ReportDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReportDefinitionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ReportDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReportDefinitionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ReportDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReportDefinitionVector_getObject(self, name)


    def size(self):
        """size(ReportDefinitionVector self) -> size_t"""
        return _COPASI.ReportDefinitionVector_size(self)


    def empty(self):
        """empty(ReportDefinitionVector self) -> bool"""
        return _COPASI.ReportDefinitionVector_empty(self)


    def clear(self):
        """clear(ReportDefinitionVector self)"""
        return _COPASI.ReportDefinitionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ReportDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReportDefinitionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ReportDefinitionVector self, unsigned int index)"""
        return _COPASI.ReportDefinitionVector_remove(self, index)


    def get(self, index):
        """get(ReportDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReportDefinitionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ReportDefinitionVector self, CReportDefinition DISOWN) -> bool"""
        return _COPASI.ReportDefinitionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ReportDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReportDefinitionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ReportDefinitionVector self) -> size_t"""
        return _COPASI.ReportDefinitionVector___len__(self)

ReportDefinitionVector_swigregister = _COPASI.ReportDefinitionVector_swigregister
ReportDefinitionVector_swigregister(ReportDefinitionVector)

class ReportDefinitionVectorN(ReportDefinitionVector):
    """Proxy of C++ CDataVectorN<(CReportDefinition)> class."""

    __swig_setmethods__ = {}
    for _s in [ReportDefinitionVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDefinitionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportDefinitionVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDefinitionVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CReportDefinition)> self, std::string const & name, CDataContainer pParent) -> ReportDefinitionVectorN
        __init__(CDataVectorN<(CReportDefinition)> self, std::string const & name) -> ReportDefinitionVectorN
        __init__(CDataVectorN<(CReportDefinition)> self) -> ReportDefinitionVectorN
        __init__(CDataVectorN<(CReportDefinition)> self, ReportDefinitionVectorN src, CDataContainer pParent) -> ReportDefinitionVectorN
        """
        this = _COPASI.new_ReportDefinitionVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(ReportDefinitionVectorN self, CReportDefinition src) -> bool"""
        return _COPASI.ReportDefinitionVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(ReportDefinitionVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.ReportDefinitionVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(ReportDefinitionVectorN self, std::string const & name)"""
        return _COPASI.ReportDefinitionVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(ReportDefinitionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReportDefinitionVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(ReportDefinitionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ReportDefinitionVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(ReportDefinitionVectorN self, std::string & name)"""
        return _COPASI.ReportDefinitionVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(ReportDefinitionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ReportDefinitionVectorN_getByName(self, name)

ReportDefinitionVectorN_swigregister = _COPASI.ReportDefinitionVectorN_swigregister
ReportDefinitionVectorN_swigregister(ReportDefinitionVectorN)

class OutputDefinitionStdVector(_object):
    """Proxy of C++ std::vector<(p.CPlotSpecification)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputDefinitionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputDefinitionStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(OutputDefinitionStdVector self) -> SwigPyIterator"""
        return _COPASI.OutputDefinitionStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector___bool__(self)


    def __len__(self):
        """__len__(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j) -> OutputDefinitionStdVector"""
        return _COPASI.OutputDefinitionStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j)
        __setslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j, OutputDefinitionStdVector v)
        """
        return _COPASI.OutputDefinitionStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j)"""
        return _COPASI.OutputDefinitionStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i)
        __delitem__(OutputDefinitionStdVector self, PySliceObject * slice)
        """
        return _COPASI.OutputDefinitionStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(OutputDefinitionStdVector self, PySliceObject * slice) -> OutputDefinitionStdVector
        __getitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i) -> CPlotSpecification
        """
        return _COPASI.OutputDefinitionStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(OutputDefinitionStdVector self, PySliceObject * slice, OutputDefinitionStdVector v)
        __setitem__(OutputDefinitionStdVector self, PySliceObject * slice)
        __setitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector___setitem__(self, *args)


    def pop(self):
        """pop(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_pop(self)


    def append(self, x):
        """append(OutputDefinitionStdVector self, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_append(self, x)


    def empty(self):
        """empty(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector_empty(self)


    def size(self):
        """size(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector_size(self)


    def swap(self, v):
        """swap(OutputDefinitionStdVector self, OutputDefinitionStdVector v)"""
        return _COPASI.OutputDefinitionStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::reverse_iterator"""
        return _COPASI.OutputDefinitionStdVector_rbegin(self)


    def rend(self):
        """rend(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::reverse_iterator"""
        return _COPASI.OutputDefinitionStdVector_rend(self)


    def clear(self):
        """clear(OutputDefinitionStdVector self)"""
        return _COPASI.OutputDefinitionStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::allocator_type"""
        return _COPASI.OutputDefinitionStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(OutputDefinitionStdVector self)"""
        return _COPASI.OutputDefinitionStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos) -> std::vector< CPlotSpecification * >::iterator
        erase(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator first, std::vector< CPlotSpecification * >::iterator last) -> std::vector< CPlotSpecification * >::iterator
        """
        return _COPASI.OutputDefinitionStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CPlotSpecification)> self) -> OutputDefinitionStdVector
        __init__(std::vector<(p.CPlotSpecification)> self, OutputDefinitionStdVector arg2) -> OutputDefinitionStdVector
        __init__(std::vector<(p.CPlotSpecification)> self, std::vector< CPlotSpecification * >::size_type size) -> OutputDefinitionStdVector
        __init__(std::vector<(p.CPlotSpecification)> self, std::vector< CPlotSpecification * >::size_type size, CPlotSpecification value) -> OutputDefinitionStdVector
        """
        this = _COPASI.new_OutputDefinitionStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(OutputDefinitionStdVector self, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_push_back(self, x)


    def front(self):
        """front(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_front(self)


    def back(self):
        """back(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_back(self)


    def assign(self, n, x):
        """assign(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type n, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type new_size)
        resize(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type new_size, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos, CPlotSpecification x) -> std::vector< CPlotSpecification * >::iterator
        insert(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos, std::vector< CPlotSpecification * >::size_type n, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type n)"""
        return _COPASI.OutputDefinitionStdVector_reserve(self, n)


    def capacity(self):
        """capacity(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_OutputDefinitionStdVector
    __del__ = lambda self: None
OutputDefinitionStdVector_swigregister = _COPASI.OutputDefinitionStdVector_swigregister
OutputDefinitionStdVector_swigregister(OutputDefinitionStdVector)

class PlotDataChannelSpecStdVector(_object):
    """Proxy of C++ std::vector<(CPlotDataChannelSpec)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlotDataChannelSpecStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlotDataChannelSpecStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(PlotDataChannelSpecStdVector self) -> SwigPyIterator"""
        return _COPASI.PlotDataChannelSpecStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector___bool__(self)


    def __len__(self):
        """__len__(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j) -> PlotDataChannelSpecStdVector"""
        return _COPASI.PlotDataChannelSpecStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j)
        __setslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j, PlotDataChannelSpecStdVector v)
        """
        return _COPASI.PlotDataChannelSpecStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j)"""
        return _COPASI.PlotDataChannelSpecStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i)
        __delitem__(PlotDataChannelSpecStdVector self, PySliceObject * slice)
        """
        return _COPASI.PlotDataChannelSpecStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(PlotDataChannelSpecStdVector self, PySliceObject * slice) -> PlotDataChannelSpecStdVector
        __getitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i) -> CPlotDataChannelSpec
        """
        return _COPASI.PlotDataChannelSpecStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(PlotDataChannelSpecStdVector self, PySliceObject * slice, PlotDataChannelSpecStdVector v)
        __setitem__(PlotDataChannelSpecStdVector self, PySliceObject * slice)
        __setitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector___setitem__(self, *args)


    def pop(self):
        """pop(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_pop(self)


    def append(self, x):
        """append(PlotDataChannelSpecStdVector self, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_append(self, x)


    def empty(self):
        """empty(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector_empty(self)


    def size(self):
        """size(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector_size(self)


    def swap(self, v):
        """swap(PlotDataChannelSpecStdVector self, PlotDataChannelSpecStdVector v)"""
        return _COPASI.PlotDataChannelSpecStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::reverse_iterator"""
        return _COPASI.PlotDataChannelSpecStdVector_rbegin(self)


    def rend(self):
        """rend(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::reverse_iterator"""
        return _COPASI.PlotDataChannelSpecStdVector_rend(self)


    def clear(self):
        """clear(PlotDataChannelSpecStdVector self)"""
        return _COPASI.PlotDataChannelSpecStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::allocator_type"""
        return _COPASI.PlotDataChannelSpecStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(PlotDataChannelSpecStdVector self)"""
        return _COPASI.PlotDataChannelSpecStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos) -> std::vector< CPlotDataChannelSpec >::iterator
        erase(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator first, std::vector< CPlotDataChannelSpec >::iterator last) -> std::vector< CPlotDataChannelSpec >::iterator
        """
        return _COPASI.PlotDataChannelSpecStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CPlotDataChannelSpec)> self) -> PlotDataChannelSpecStdVector
        __init__(std::vector<(CPlotDataChannelSpec)> self, PlotDataChannelSpecStdVector arg2) -> PlotDataChannelSpecStdVector
        __init__(std::vector<(CPlotDataChannelSpec)> self, std::vector< CPlotDataChannelSpec >::size_type size) -> PlotDataChannelSpecStdVector
        __init__(std::vector<(CPlotDataChannelSpec)> self, std::vector< CPlotDataChannelSpec >::size_type size, CPlotDataChannelSpec value) -> PlotDataChannelSpecStdVector
        """
        this = _COPASI.new_PlotDataChannelSpecStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(PlotDataChannelSpecStdVector self, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_push_back(self, x)


    def front(self):
        """front(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_front(self)


    def back(self):
        """back(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_back(self)


    def assign(self, n, x):
        """assign(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type n, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type new_size)
        resize(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type new_size, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos, CPlotDataChannelSpec x) -> std::vector< CPlotDataChannelSpec >::iterator
        insert(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos, std::vector< CPlotDataChannelSpec >::size_type n, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type n)"""
        return _COPASI.PlotDataChannelSpecStdVector_reserve(self, n)


    def capacity(self):
        """capacity(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_PlotDataChannelSpecStdVector
    __del__ = lambda self: None
PlotDataChannelSpecStdVector_swigregister = _COPASI.PlotDataChannelSpecStdVector_swigregister
PlotDataChannelSpecStdVector_swigregister(PlotDataChannelSpecStdVector)

class OutputDefinitionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CPlotSpecification)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputDefinitionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_OutputDefinitionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(OutputDefinitionVector self)"""
        return _COPASI.OutputDefinitionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(OutputDefinitionVector self, CPlotSpecification src) -> bool"""
        return _COPASI.OutputDefinitionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(OutputDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.OutputDefinitionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(OutputDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.OutputDefinitionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(OutputDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.OutputDefinitionVector_getObject(self, name)


    def size(self):
        """size(OutputDefinitionVector self) -> size_t"""
        return _COPASI.OutputDefinitionVector_size(self)


    def empty(self):
        """empty(OutputDefinitionVector self) -> bool"""
        return _COPASI.OutputDefinitionVector_empty(self)


    def clear(self):
        """clear(OutputDefinitionVector self)"""
        return _COPASI.OutputDefinitionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(OutputDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.OutputDefinitionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(OutputDefinitionVector self, unsigned int index)"""
        return _COPASI.OutputDefinitionVector_remove(self, index)


    def get(self, index):
        """get(OutputDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.OutputDefinitionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(OutputDefinitionVector self, CPlotSpecification DISOWN) -> bool"""
        return _COPASI.OutputDefinitionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(OutputDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.OutputDefinitionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(OutputDefinitionVector self) -> size_t"""
        return _COPASI.OutputDefinitionVector___len__(self)

OutputDefinitionVector_swigregister = _COPASI.OutputDefinitionVector_swigregister
OutputDefinitionVector_swigregister(OutputDefinitionVector)

class OutputDefinitionVectorN(OutputDefinitionVector):
    """Proxy of C++ CDataVectorN<(CPlotSpecification)> class."""

    __swig_setmethods__ = {}
    for _s in [OutputDefinitionVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputDefinitionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputDefinitionVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputDefinitionVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CPlotSpecification)> self, std::string const & name, CDataContainer pParent) -> OutputDefinitionVectorN
        __init__(CDataVectorN<(CPlotSpecification)> self, std::string const & name) -> OutputDefinitionVectorN
        __init__(CDataVectorN<(CPlotSpecification)> self) -> OutputDefinitionVectorN
        __init__(CDataVectorN<(CPlotSpecification)> self, OutputDefinitionVectorN src, CDataContainer pParent) -> OutputDefinitionVectorN
        """
        this = _COPASI.new_OutputDefinitionVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_OutputDefinitionVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(OutputDefinitionVectorN self, CPlotSpecification src) -> bool"""
        return _COPASI.OutputDefinitionVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(OutputDefinitionVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.OutputDefinitionVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(OutputDefinitionVectorN self, std::string const & name)"""
        return _COPASI.OutputDefinitionVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(OutputDefinitionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.OutputDefinitionVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(OutputDefinitionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.OutputDefinitionVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(OutputDefinitionVectorN self, std::string & name)"""
        return _COPASI.OutputDefinitionVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(OutputDefinitionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.OutputDefinitionVectorN_getByName(self, name)

OutputDefinitionVectorN_swigregister = _COPASI.OutputDefinitionVectorN_swigregister
OutputDefinitionVectorN_swigregister(OutputDefinitionVectorN)

class PlotItemVector(CDataContainer):
    """Proxy of C++ CDataVector<(CPlotItem)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlotItemVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlotItemVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_PlotItemVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(PlotItemVector self)"""
        return _COPASI.PlotItemVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(PlotItemVector self, CPlotItem src) -> bool"""
        return _COPASI.PlotItemVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(PlotItemVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.PlotItemVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(PlotItemVector self, CDataObject pObject) -> bool"""
        return _COPASI.PlotItemVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(PlotItemVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.PlotItemVector_getObject(self, name)


    def size(self):
        """size(PlotItemVector self) -> size_t"""
        return _COPASI.PlotItemVector_size(self)


    def empty(self):
        """empty(PlotItemVector self) -> bool"""
        return _COPASI.PlotItemVector_empty(self)


    def clear(self):
        """clear(PlotItemVector self)"""
        return _COPASI.PlotItemVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(PlotItemVector self, CDataObject pObject) -> size_t"""
        return _COPASI.PlotItemVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(PlotItemVector self, unsigned int index)"""
        return _COPASI.PlotItemVector_remove(self, index)


    def get(self, index):
        """get(PlotItemVector self, unsigned int index) -> CDataObject"""
        return _COPASI.PlotItemVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(PlotItemVector self, CPlotItem DISOWN) -> bool"""
        return _COPASI.PlotItemVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(PlotItemVector self, CDataObject pObject) -> bool"""
        return _COPASI.PlotItemVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(PlotItemVector self) -> size_t"""
        return _COPASI.PlotItemVector___len__(self)

PlotItemVector_swigregister = _COPASI.PlotItemVector_swigregister
PlotItemVector_swigregister(PlotItemVector)

class PlotItemVectorN(PlotItemVector):
    """Proxy of C++ CDataVectorN<(CPlotItem)> class."""

    __swig_setmethods__ = {}
    for _s in [PlotItemVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlotItemVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [PlotItemVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlotItemVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CPlotItem)> self, std::string const & name, CDataContainer pParent) -> PlotItemVectorN
        __init__(CDataVectorN<(CPlotItem)> self, std::string const & name) -> PlotItemVectorN
        __init__(CDataVectorN<(CPlotItem)> self) -> PlotItemVectorN
        __init__(CDataVectorN<(CPlotItem)> self, PlotItemVectorN src, CDataContainer pParent) -> PlotItemVectorN
        """
        this = _COPASI.new_PlotItemVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_PlotItemVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(PlotItemVectorN self, CPlotItem src) -> bool"""
        return _COPASI.PlotItemVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(PlotItemVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.PlotItemVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(PlotItemVectorN self, std::string const & name)"""
        return _COPASI.PlotItemVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(PlotItemVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.PlotItemVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(PlotItemVectorN self, std::string const & name) -> size_t"""
        return _COPASI.PlotItemVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(PlotItemVectorN self, std::string & name)"""
        return _COPASI.PlotItemVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(PlotItemVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.PlotItemVectorN_getByName(self, name)

PlotItemVectorN_swigregister = _COPASI.PlotItemVectorN_swigregister
PlotItemVectorN_swigregister(PlotItemVectorN)

class MoietyStdVector(_object):
    """Proxy of C++ std::vector<(p.CMoiety)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoietyStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoietyStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(MoietyStdVector self) -> SwigPyIterator"""
        return _COPASI.MoietyStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector___bool__(self)


    def __len__(self):
        """__len__(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j) -> MoietyStdVector"""
        return _COPASI.MoietyStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j)
        __setslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j, MoietyStdVector v)
        """
        return _COPASI.MoietyStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j)"""
        return _COPASI.MoietyStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i)
        __delitem__(MoietyStdVector self, PySliceObject * slice)
        """
        return _COPASI.MoietyStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(MoietyStdVector self, PySliceObject * slice) -> MoietyStdVector
        __getitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i) -> CMoiety
        """
        return _COPASI.MoietyStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(MoietyStdVector self, PySliceObject * slice, MoietyStdVector v)
        __setitem__(MoietyStdVector self, PySliceObject * slice)
        __setitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, CMoiety x)
        """
        return _COPASI.MoietyStdVector___setitem__(self, *args)


    def pop(self):
        """pop(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_pop(self)


    def append(self, x):
        """append(MoietyStdVector self, CMoiety x)"""
        return _COPASI.MoietyStdVector_append(self, x)


    def empty(self):
        """empty(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector_empty(self)


    def size(self):
        """size(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector_size(self)


    def swap(self, v):
        """swap(MoietyStdVector self, MoietyStdVector v)"""
        return _COPASI.MoietyStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(MoietyStdVector self) -> std::vector< CMoiety * >::reverse_iterator"""
        return _COPASI.MoietyStdVector_rbegin(self)


    def rend(self):
        """rend(MoietyStdVector self) -> std::vector< CMoiety * >::reverse_iterator"""
        return _COPASI.MoietyStdVector_rend(self)


    def clear(self):
        """clear(MoietyStdVector self)"""
        return _COPASI.MoietyStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(MoietyStdVector self) -> std::vector< CMoiety * >::allocator_type"""
        return _COPASI.MoietyStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(MoietyStdVector self)"""
        return _COPASI.MoietyStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(MoietyStdVector self, std::vector< CMoiety * >::iterator pos) -> std::vector< CMoiety * >::iterator
        erase(MoietyStdVector self, std::vector< CMoiety * >::iterator first, std::vector< CMoiety * >::iterator last) -> std::vector< CMoiety * >::iterator
        """
        return _COPASI.MoietyStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CMoiety)> self) -> MoietyStdVector
        __init__(std::vector<(p.CMoiety)> self, MoietyStdVector arg2) -> MoietyStdVector
        __init__(std::vector<(p.CMoiety)> self, std::vector< CMoiety * >::size_type size) -> MoietyStdVector
        __init__(std::vector<(p.CMoiety)> self, std::vector< CMoiety * >::size_type size, CMoiety value) -> MoietyStdVector
        """
        this = _COPASI.new_MoietyStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(MoietyStdVector self, CMoiety x)"""
        return _COPASI.MoietyStdVector_push_back(self, x)


    def front(self):
        """front(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_front(self)


    def back(self):
        """back(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_back(self)


    def assign(self, n, x):
        """assign(MoietyStdVector self, std::vector< CMoiety * >::size_type n, CMoiety x)"""
        return _COPASI.MoietyStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(MoietyStdVector self, std::vector< CMoiety * >::size_type new_size)
        resize(MoietyStdVector self, std::vector< CMoiety * >::size_type new_size, CMoiety x)
        """
        return _COPASI.MoietyStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(MoietyStdVector self, std::vector< CMoiety * >::iterator pos, CMoiety x) -> std::vector< CMoiety * >::iterator
        insert(MoietyStdVector self, std::vector< CMoiety * >::iterator pos, std::vector< CMoiety * >::size_type n, CMoiety x)
        """
        return _COPASI.MoietyStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(MoietyStdVector self, std::vector< CMoiety * >::size_type n)"""
        return _COPASI.MoietyStdVector_reserve(self, n)


    def capacity(self):
        """capacity(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_MoietyStdVector
    __del__ = lambda self: None
MoietyStdVector_swigregister = _COPASI.MoietyStdVector_swigregister
MoietyStdVector_swigregister(MoietyStdVector)

class MoietyVector(CDataContainer):
    """Proxy of C++ CDataVector<(CMoiety)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoietyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoietyVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MoietyVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(MoietyVector self)"""
        return _COPASI.MoietyVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(MoietyVector self, CMoiety src) -> bool"""
        return _COPASI.MoietyVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(MoietyVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MoietyVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(MoietyVector self, CDataObject pObject) -> bool"""
        return _COPASI.MoietyVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(MoietyVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MoietyVector_getObject(self, name)


    def size(self):
        """size(MoietyVector self) -> size_t"""
        return _COPASI.MoietyVector_size(self)


    def empty(self):
        """empty(MoietyVector self) -> bool"""
        return _COPASI.MoietyVector_empty(self)


    def clear(self):
        """clear(MoietyVector self)"""
        return _COPASI.MoietyVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(MoietyVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MoietyVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(MoietyVector self, unsigned int index)"""
        return _COPASI.MoietyVector_remove(self, index)


    def get(self, index):
        """get(MoietyVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MoietyVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(MoietyVector self, CMoiety DISOWN) -> bool"""
        return _COPASI.MoietyVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(MoietyVector self, CDataObject pObject) -> bool"""
        return _COPASI.MoietyVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(MoietyVector self) -> size_t"""
        return _COPASI.MoietyVector___len__(self)

MoietyVector_swigregister = _COPASI.MoietyVector_swigregister
MoietyVector_swigregister(MoietyVector)

class MetabStdVector(_object):
    """Proxy of C++ std::vector<(p.CMetab)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetabStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(MetabStdVector self) -> SwigPyIterator"""
        return _COPASI.MetabStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector___bool__(self)


    def __len__(self):
        """__len__(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j) -> MetabStdVector"""
        return _COPASI.MetabStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j)
        __setslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j, MetabStdVector v)
        """
        return _COPASI.MetabStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j)"""
        return _COPASI.MetabStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i)
        __delitem__(MetabStdVector self, PySliceObject * slice)
        """
        return _COPASI.MetabStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(MetabStdVector self, PySliceObject * slice) -> MetabStdVector
        __getitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i) -> CMetab
        """
        return _COPASI.MetabStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(MetabStdVector self, PySliceObject * slice, MetabStdVector v)
        __setitem__(MetabStdVector self, PySliceObject * slice)
        __setitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i, CMetab x)
        """
        return _COPASI.MetabStdVector___setitem__(self, *args)


    def pop(self):
        """pop(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_pop(self)


    def append(self, x):
        """append(MetabStdVector self, CMetab x)"""
        return _COPASI.MetabStdVector_append(self, x)


    def empty(self):
        """empty(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector_empty(self)


    def size(self):
        """size(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector_size(self)


    def swap(self, v):
        """swap(MetabStdVector self, MetabStdVector v)"""
        return _COPASI.MetabStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(MetabStdVector self) -> std::vector< CMetab * >::reverse_iterator"""
        return _COPASI.MetabStdVector_rbegin(self)


    def rend(self):
        """rend(MetabStdVector self) -> std::vector< CMetab * >::reverse_iterator"""
        return _COPASI.MetabStdVector_rend(self)


    def clear(self):
        """clear(MetabStdVector self)"""
        return _COPASI.MetabStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(MetabStdVector self) -> std::vector< CMetab * >::allocator_type"""
        return _COPASI.MetabStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(MetabStdVector self)"""
        return _COPASI.MetabStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(MetabStdVector self, std::vector< CMetab * >::iterator pos) -> std::vector< CMetab * >::iterator
        erase(MetabStdVector self, std::vector< CMetab * >::iterator first, std::vector< CMetab * >::iterator last) -> std::vector< CMetab * >::iterator
        """
        return _COPASI.MetabStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CMetab)> self) -> MetabStdVector
        __init__(std::vector<(p.CMetab)> self, MetabStdVector arg2) -> MetabStdVector
        __init__(std::vector<(p.CMetab)> self, std::vector< CMetab * >::size_type size) -> MetabStdVector
        __init__(std::vector<(p.CMetab)> self, std::vector< CMetab * >::size_type size, CMetab value) -> MetabStdVector
        """
        this = _COPASI.new_MetabStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(MetabStdVector self, CMetab x)"""
        return _COPASI.MetabStdVector_push_back(self, x)


    def front(self):
        """front(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_front(self)


    def back(self):
        """back(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_back(self)


    def assign(self, n, x):
        """assign(MetabStdVector self, std::vector< CMetab * >::size_type n, CMetab x)"""
        return _COPASI.MetabStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(MetabStdVector self, std::vector< CMetab * >::size_type new_size)
        resize(MetabStdVector self, std::vector< CMetab * >::size_type new_size, CMetab x)
        """
        return _COPASI.MetabStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(MetabStdVector self, std::vector< CMetab * >::iterator pos, CMetab x) -> std::vector< CMetab * >::iterator
        insert(MetabStdVector self, std::vector< CMetab * >::iterator pos, std::vector< CMetab * >::size_type n, CMetab x)
        """
        return _COPASI.MetabStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(MetabStdVector self, std::vector< CMetab * >::size_type n)"""
        return _COPASI.MetabStdVector_reserve(self, n)


    def capacity(self):
        """capacity(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_MetabStdVector
    __del__ = lambda self: None
MetabStdVector_swigregister = _COPASI.MetabStdVector_swigregister
MetabStdVector_swigregister(MetabStdVector)

class MetabVector(CDataContainer):
    """Proxy of C++ CDataVector<(CMetab)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(MetabVector self)"""
        return _COPASI.MetabVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(MetabVector self, CMetab src) -> bool"""
        return _COPASI.MetabVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(MetabVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(MetabVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(MetabVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabVector_getObject(self, name)


    def size(self):
        """size(MetabVector self) -> size_t"""
        return _COPASI.MetabVector_size(self)


    def empty(self):
        """empty(MetabVector self) -> bool"""
        return _COPASI.MetabVector_empty(self)


    def clear(self):
        """clear(MetabVector self)"""
        return _COPASI.MetabVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(MetabVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(MetabVector self, unsigned int index)"""
        return _COPASI.MetabVector_remove(self, index)


    def get(self, index):
        """get(MetabVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(MetabVector self, CMetab DISOWN) -> bool"""
        return _COPASI.MetabVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(MetabVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(MetabVector self) -> size_t"""
        return _COPASI.MetabVector___len__(self)

MetabVector_swigregister = _COPASI.MetabVector_swigregister
MetabVector_swigregister(MetabVector)

class MetabVectorN(MetabVector):
    """Proxy of C++ CDataVectorN<(CMetab)> class."""

    __swig_setmethods__ = {}
    for _s in [MetabVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [MetabVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CMetab)> self, std::string const & name, CDataContainer pParent) -> MetabVectorN
        __init__(CDataVectorN<(CMetab)> self, std::string const & name) -> MetabVectorN
        __init__(CDataVectorN<(CMetab)> self) -> MetabVectorN
        __init__(CDataVectorN<(CMetab)> self, MetabVectorN src, CDataContainer pParent) -> MetabVectorN
        """
        this = _COPASI.new_MetabVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_MetabVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(MetabVectorN self, CMetab src) -> bool"""
        return _COPASI.MetabVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(MetabVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.MetabVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(MetabVectorN self, std::string const & name)"""
        return _COPASI.MetabVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(MetabVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(MetabVectorN self, std::string const & name) -> size_t"""
        return _COPASI.MetabVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(MetabVectorN self, std::string & name)"""
        return _COPASI.MetabVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(MetabVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.MetabVectorN_getByName(self, name)

MetabVectorN_swigregister = _COPASI.MetabVectorN_swigregister
MetabVectorN_swigregister(MetabVectorN)

class MetabVectorNS(MetabVectorN):
    """Proxy of C++ CDataVectorNS<(CMetab)> class."""

    __swig_setmethods__ = {}
    for _s in [MetabVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [MetabVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabVectorNS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorNS<(CMetab)> self, std::string const & name, CDataContainer pParent) -> MetabVectorNS
        __init__(CDataVectorNS<(CMetab)> self, std::string const & name) -> MetabVectorNS
        __init__(CDataVectorNS<(CMetab)> self) -> MetabVectorNS
        __init__(CDataVectorNS<(CMetab)> self, MetabVectorNS src, CDataContainer pParent) -> MetabVectorNS
        """
        this = _COPASI.new_MetabVectorNS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_MetabVectorNS
    __del__ = lambda self: None
MetabVectorNS_swigregister = _COPASI.MetabVectorNS_swigregister
MetabVectorNS_swigregister(MetabVectorNS)

class CompartmentStdVector(_object):
    """Proxy of C++ std::vector<(p.CCompartment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CompartmentStdVector self) -> SwigPyIterator"""
        return _COPASI.CompartmentStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector___bool__(self)


    def __len__(self):
        """__len__(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j) -> CompartmentStdVector"""
        return _COPASI.CompartmentStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j)
        __setslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j, CompartmentStdVector v)
        """
        return _COPASI.CompartmentStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j)"""
        return _COPASI.CompartmentStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i)
        __delitem__(CompartmentStdVector self, PySliceObject * slice)
        """
        return _COPASI.CompartmentStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CompartmentStdVector self, PySliceObject * slice) -> CompartmentStdVector
        __getitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i) -> CCompartment
        """
        return _COPASI.CompartmentStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CompartmentStdVector self, PySliceObject * slice, CompartmentStdVector v)
        __setitem__(CompartmentStdVector self, PySliceObject * slice)
        __setitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, CCompartment x)
        """
        return _COPASI.CompartmentStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_pop(self)


    def append(self, x):
        """append(CompartmentStdVector self, CCompartment x)"""
        return _COPASI.CompartmentStdVector_append(self, x)


    def empty(self):
        """empty(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector_empty(self)


    def size(self):
        """size(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector_size(self)


    def swap(self, v):
        """swap(CompartmentStdVector self, CompartmentStdVector v)"""
        return _COPASI.CompartmentStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CompartmentStdVector self) -> std::vector< CCompartment * >::reverse_iterator"""
        return _COPASI.CompartmentStdVector_rbegin(self)


    def rend(self):
        """rend(CompartmentStdVector self) -> std::vector< CCompartment * >::reverse_iterator"""
        return _COPASI.CompartmentStdVector_rend(self)


    def clear(self):
        """clear(CompartmentStdVector self)"""
        return _COPASI.CompartmentStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CompartmentStdVector self) -> std::vector< CCompartment * >::allocator_type"""
        return _COPASI.CompartmentStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CompartmentStdVector self)"""
        return _COPASI.CompartmentStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos) -> std::vector< CCompartment * >::iterator
        erase(CompartmentStdVector self, std::vector< CCompartment * >::iterator first, std::vector< CCompartment * >::iterator last) -> std::vector< CCompartment * >::iterator
        """
        return _COPASI.CompartmentStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CCompartment)> self) -> CompartmentStdVector
        __init__(std::vector<(p.CCompartment)> self, CompartmentStdVector arg2) -> CompartmentStdVector
        __init__(std::vector<(p.CCompartment)> self, std::vector< CCompartment * >::size_type size) -> CompartmentStdVector
        __init__(std::vector<(p.CCompartment)> self, std::vector< CCompartment * >::size_type size, CCompartment value) -> CompartmentStdVector
        """
        this = _COPASI.new_CompartmentStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CompartmentStdVector self, CCompartment x)"""
        return _COPASI.CompartmentStdVector_push_back(self, x)


    def front(self):
        """front(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_front(self)


    def back(self):
        """back(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_back(self)


    def assign(self, n, x):
        """assign(CompartmentStdVector self, std::vector< CCompartment * >::size_type n, CCompartment x)"""
        return _COPASI.CompartmentStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CompartmentStdVector self, std::vector< CCompartment * >::size_type new_size)
        resize(CompartmentStdVector self, std::vector< CCompartment * >::size_type new_size, CCompartment x)
        """
        return _COPASI.CompartmentStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos, CCompartment x) -> std::vector< CCompartment * >::iterator
        insert(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos, std::vector< CCompartment * >::size_type n, CCompartment x)
        """
        return _COPASI.CompartmentStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CompartmentStdVector self, std::vector< CCompartment * >::size_type n)"""
        return _COPASI.CompartmentStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CompartmentStdVector
    __del__ = lambda self: None
CompartmentStdVector_swigregister = _COPASI.CompartmentStdVector_swigregister
CompartmentStdVector_swigregister(CompartmentStdVector)

class CompartmentVector(CDataContainer):
    """Proxy of C++ CDataVector<(CCompartment)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CompartmentVector self)"""
        return _COPASI.CompartmentVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CompartmentVector self, CCompartment src) -> bool"""
        return _COPASI.CompartmentVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CompartmentVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CompartmentVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CompartmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CompartmentVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentVector_getObject(self, name)


    def size(self):
        """size(CompartmentVector self) -> size_t"""
        return _COPASI.CompartmentVector_size(self)


    def empty(self):
        """empty(CompartmentVector self) -> bool"""
        return _COPASI.CompartmentVector_empty(self)


    def clear(self):
        """clear(CompartmentVector self)"""
        return _COPASI.CompartmentVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CompartmentVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CompartmentVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CompartmentVector self, unsigned int index)"""
        return _COPASI.CompartmentVector_remove(self, index)


    def get(self, index):
        """get(CompartmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CompartmentVector self, CCompartment DISOWN) -> bool"""
        return _COPASI.CompartmentVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CompartmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CompartmentVector self) -> size_t"""
        return _COPASI.CompartmentVector___len__(self)

CompartmentVector_swigregister = _COPASI.CompartmentVector_swigregister
CompartmentVector_swigregister(CompartmentVector)

class CompartmentVectorN(CompartmentVector):
    """Proxy of C++ CDataVectorN<(CCompartment)> class."""

    __swig_setmethods__ = {}
    for _s in [CompartmentVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CompartmentVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CCompartment)> self, std::string const & name, CDataContainer pParent) -> CompartmentVectorN
        __init__(CDataVectorN<(CCompartment)> self, std::string const & name) -> CompartmentVectorN
        __init__(CDataVectorN<(CCompartment)> self) -> CompartmentVectorN
        __init__(CDataVectorN<(CCompartment)> self, CompartmentVectorN src, CDataContainer pParent) -> CompartmentVectorN
        """
        this = _COPASI.new_CompartmentVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CompartmentVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(CompartmentVectorN self, CCompartment src) -> bool"""
        return _COPASI.CompartmentVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(CompartmentVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(CompartmentVectorN self, std::string const & name)"""
        return _COPASI.CompartmentVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(CompartmentVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(CompartmentVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CompartmentVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(CompartmentVectorN self, std::string & name)"""
        return _COPASI.CompartmentVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(CompartmentVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CompartmentVectorN_getByName(self, name)

CompartmentVectorN_swigregister = _COPASI.CompartmentVectorN_swigregister
CompartmentVectorN_swigregister(CompartmentVectorN)

class CompartmentVectorNS(CompartmentVectorN):
    """Proxy of C++ CDataVectorNS<(CCompartment)> class."""

    __swig_setmethods__ = {}
    for _s in [CompartmentVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [CompartmentVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentVectorNS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorNS<(CCompartment)> self, std::string const & name, CDataContainer pParent) -> CompartmentVectorNS
        __init__(CDataVectorNS<(CCompartment)> self, std::string const & name) -> CompartmentVectorNS
        __init__(CDataVectorNS<(CCompartment)> self) -> CompartmentVectorNS
        __init__(CDataVectorNS<(CCompartment)> self, CompartmentVectorNS src, CDataContainer pParent) -> CompartmentVectorNS
        """
        this = _COPASI.new_CompartmentVectorNS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CompartmentVectorNS
    __del__ = lambda self: None
CompartmentVectorNS_swigregister = _COPASI.CompartmentVectorNS_swigregister
CompartmentVectorNS_swigregister(CompartmentVectorNS)

class ModelParameterSetVector(CDataContainer):
    """Proxy of C++ CDataVector<(CModelParameterSet)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelParameterSetVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelParameterSetVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModelParameterSetVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ModelParameterSetVector self)"""
        return _COPASI.ModelParameterSetVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ModelParameterSetVector self, CModelParameterSet src) -> bool"""
        return _COPASI.ModelParameterSetVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ModelParameterSetVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModelParameterSetVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ModelParameterSetVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelParameterSetVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ModelParameterSetVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelParameterSetVector_getObject(self, name)


    def size(self):
        """size(ModelParameterSetVector self) -> size_t"""
        return _COPASI.ModelParameterSetVector_size(self)


    def empty(self):
        """empty(ModelParameterSetVector self) -> bool"""
        return _COPASI.ModelParameterSetVector_empty(self)


    def clear(self):
        """clear(ModelParameterSetVector self)"""
        return _COPASI.ModelParameterSetVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ModelParameterSetVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModelParameterSetVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ModelParameterSetVector self, unsigned int index)"""
        return _COPASI.ModelParameterSetVector_remove(self, index)


    def get(self, index):
        """get(ModelParameterSetVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelParameterSetVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ModelParameterSetVector self, CModelParameterSet DISOWN) -> bool"""
        return _COPASI.ModelParameterSetVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ModelParameterSetVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelParameterSetVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ModelParameterSetVector self) -> size_t"""
        return _COPASI.ModelParameterSetVector___len__(self)

ModelParameterSetVector_swigregister = _COPASI.ModelParameterSetVector_swigregister
ModelParameterSetVector_swigregister(ModelParameterSetVector)

class ModelParameterSetVectorN(ModelParameterSetVector):
    """Proxy of C++ CDataVectorN<(CModelParameterSet)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelParameterSetVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelParameterSetVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelParameterSetVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelParameterSetVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CModelParameterSet)> self, std::string const & name, CDataContainer pParent) -> ModelParameterSetVectorN
        __init__(CDataVectorN<(CModelParameterSet)> self, std::string const & name) -> ModelParameterSetVectorN
        __init__(CDataVectorN<(CModelParameterSet)> self) -> ModelParameterSetVectorN
        __init__(CDataVectorN<(CModelParameterSet)> self, ModelParameterSetVectorN src, CDataContainer pParent) -> ModelParameterSetVectorN
        """
        this = _COPASI.new_ModelParameterSetVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ModelParameterSetVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(ModelParameterSetVectorN self, CModelParameterSet src) -> bool"""
        return _COPASI.ModelParameterSetVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(ModelParameterSetVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.ModelParameterSetVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(ModelParameterSetVectorN self, std::string const & name)"""
        return _COPASI.ModelParameterSetVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(ModelParameterSetVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelParameterSetVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(ModelParameterSetVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ModelParameterSetVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(ModelParameterSetVectorN self, std::string & name)"""
        return _COPASI.ModelParameterSetVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(ModelParameterSetVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ModelParameterSetVectorN_getByName(self, name)

ModelParameterSetVectorN_swigregister = _COPASI.ModelParameterSetVectorN_swigregister
ModelParameterSetVectorN_swigregister(ModelParameterSetVectorN)

class ReactionStdVector(_object):
    """Proxy of C++ std::vector<(p.CReaction)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ReactionStdVector self) -> SwigPyIterator"""
        return _COPASI.ReactionStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector___bool__(self)


    def __len__(self):
        """__len__(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j) -> ReactionStdVector"""
        return _COPASI.ReactionStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j)
        __setslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j, ReactionStdVector v)
        """
        return _COPASI.ReactionStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j)"""
        return _COPASI.ReactionStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i)
        __delitem__(ReactionStdVector self, PySliceObject * slice)
        """
        return _COPASI.ReactionStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ReactionStdVector self, PySliceObject * slice) -> ReactionStdVector
        __getitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i) -> CReaction
        """
        return _COPASI.ReactionStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ReactionStdVector self, PySliceObject * slice, ReactionStdVector v)
        __setitem__(ReactionStdVector self, PySliceObject * slice)
        __setitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, CReaction x)
        """
        return _COPASI.ReactionStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_pop(self)


    def append(self, x):
        """append(ReactionStdVector self, CReaction x)"""
        return _COPASI.ReactionStdVector_append(self, x)


    def empty(self):
        """empty(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector_empty(self)


    def size(self):
        """size(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector_size(self)


    def swap(self, v):
        """swap(ReactionStdVector self, ReactionStdVector v)"""
        return _COPASI.ReactionStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ReactionStdVector self) -> std::vector< CReaction * >::reverse_iterator"""
        return _COPASI.ReactionStdVector_rbegin(self)


    def rend(self):
        """rend(ReactionStdVector self) -> std::vector< CReaction * >::reverse_iterator"""
        return _COPASI.ReactionStdVector_rend(self)


    def clear(self):
        """clear(ReactionStdVector self)"""
        return _COPASI.ReactionStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ReactionStdVector self) -> std::vector< CReaction * >::allocator_type"""
        return _COPASI.ReactionStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ReactionStdVector self)"""
        return _COPASI.ReactionStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ReactionStdVector self, std::vector< CReaction * >::iterator pos) -> std::vector< CReaction * >::iterator
        erase(ReactionStdVector self, std::vector< CReaction * >::iterator first, std::vector< CReaction * >::iterator last) -> std::vector< CReaction * >::iterator
        """
        return _COPASI.ReactionStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CReaction)> self) -> ReactionStdVector
        __init__(std::vector<(p.CReaction)> self, ReactionStdVector arg2) -> ReactionStdVector
        __init__(std::vector<(p.CReaction)> self, std::vector< CReaction * >::size_type size) -> ReactionStdVector
        __init__(std::vector<(p.CReaction)> self, std::vector< CReaction * >::size_type size, CReaction value) -> ReactionStdVector
        """
        this = _COPASI.new_ReactionStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ReactionStdVector self, CReaction x)"""
        return _COPASI.ReactionStdVector_push_back(self, x)


    def front(self):
        """front(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_front(self)


    def back(self):
        """back(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_back(self)


    def assign(self, n, x):
        """assign(ReactionStdVector self, std::vector< CReaction * >::size_type n, CReaction x)"""
        return _COPASI.ReactionStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ReactionStdVector self, std::vector< CReaction * >::size_type new_size)
        resize(ReactionStdVector self, std::vector< CReaction * >::size_type new_size, CReaction x)
        """
        return _COPASI.ReactionStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ReactionStdVector self, std::vector< CReaction * >::iterator pos, CReaction x) -> std::vector< CReaction * >::iterator
        insert(ReactionStdVector self, std::vector< CReaction * >::iterator pos, std::vector< CReaction * >::size_type n, CReaction x)
        """
        return _COPASI.ReactionStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ReactionStdVector self, std::vector< CReaction * >::size_type n)"""
        return _COPASI.ReactionStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ReactionStdVector
    __del__ = lambda self: None
ReactionStdVector_swigregister = _COPASI.ReactionStdVector_swigregister
ReactionStdVector_swigregister(ReactionStdVector)

class ReactionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CReaction)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ReactionVector self)"""
        return _COPASI.ReactionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ReactionVector self, CReaction src) -> bool"""
        return _COPASI.ReactionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ReactionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReactionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ReactionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ReactionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionVector_getObject(self, name)


    def size(self):
        """size(ReactionVector self) -> size_t"""
        return _COPASI.ReactionVector_size(self)


    def empty(self):
        """empty(ReactionVector self) -> bool"""
        return _COPASI.ReactionVector_empty(self)


    def clear(self):
        """clear(ReactionVector self)"""
        return _COPASI.ReactionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ReactionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReactionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ReactionVector self, unsigned int index)"""
        return _COPASI.ReactionVector_remove(self, index)


    def get(self, index):
        """get(ReactionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ReactionVector self, CReaction DISOWN) -> bool"""
        return _COPASI.ReactionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ReactionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ReactionVector self) -> size_t"""
        return _COPASI.ReactionVector___len__(self)

ReactionVector_swigregister = _COPASI.ReactionVector_swigregister
ReactionVector_swigregister(ReactionVector)

class ReactionVectorN(ReactionVector):
    """Proxy of C++ CDataVectorN<(CReaction)> class."""

    __swig_setmethods__ = {}
    for _s in [ReactionVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [ReactionVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CReaction)> self, std::string const & name, CDataContainer pParent) -> ReactionVectorN
        __init__(CDataVectorN<(CReaction)> self, std::string const & name) -> ReactionVectorN
        __init__(CDataVectorN<(CReaction)> self) -> ReactionVectorN
        __init__(CDataVectorN<(CReaction)> self, ReactionVectorN src, CDataContainer pParent) -> ReactionVectorN
        """
        this = _COPASI.new_ReactionVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ReactionVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(ReactionVectorN self, CReaction src) -> bool"""
        return _COPASI.ReactionVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(ReactionVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(ReactionVectorN self, std::string const & name)"""
        return _COPASI.ReactionVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(ReactionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(ReactionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ReactionVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(ReactionVectorN self, std::string & name)"""
        return _COPASI.ReactionVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(ReactionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ReactionVectorN_getByName(self, name)

ReactionVectorN_swigregister = _COPASI.ReactionVectorN_swigregister
ReactionVectorN_swigregister(ReactionVectorN)

class ReactionVectorNS(ReactionVectorN):
    """Proxy of C++ CDataVectorNS<(CReaction)> class."""

    __swig_setmethods__ = {}
    for _s in [ReactionVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [ReactionVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionVectorNS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorNS<(CReaction)> self, std::string const & name, CDataContainer pParent) -> ReactionVectorNS
        __init__(CDataVectorNS<(CReaction)> self, std::string const & name) -> ReactionVectorNS
        __init__(CDataVectorNS<(CReaction)> self) -> ReactionVectorNS
        __init__(CDataVectorNS<(CReaction)> self, ReactionVectorNS src, CDataContainer pParent) -> ReactionVectorNS
        """
        this = _COPASI.new_ReactionVectorNS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_ReactionVectorNS
    __del__ = lambda self: None
ReactionVectorNS_swigregister = _COPASI.ReactionVectorNS_swigregister
ReactionVectorNS_swigregister(ReactionVectorNS)

class CFunctionStdVector(_object):
    """Proxy of C++ std::vector<(p.CFunction)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CFunctionStdVector self) -> SwigPyIterator"""
        return _COPASI.CFunctionStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector___bool__(self)


    def __len__(self):
        """__len__(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j) -> CFunctionStdVector"""
        return _COPASI.CFunctionStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j)
        __setslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j, CFunctionStdVector v)
        """
        return _COPASI.CFunctionStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j)"""
        return _COPASI.CFunctionStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i)
        __delitem__(CFunctionStdVector self, PySliceObject * slice)
        """
        return _COPASI.CFunctionStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CFunctionStdVector self, PySliceObject * slice) -> CFunctionStdVector
        __getitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i) -> CFunction
        """
        return _COPASI.CFunctionStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CFunctionStdVector self, PySliceObject * slice, CFunctionStdVector v)
        __setitem__(CFunctionStdVector self, PySliceObject * slice)
        __setitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, CFunction x)
        """
        return _COPASI.CFunctionStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_pop(self)


    def append(self, x):
        """append(CFunctionStdVector self, CFunction x)"""
        return _COPASI.CFunctionStdVector_append(self, x)


    def empty(self):
        """empty(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector_empty(self)


    def size(self):
        """size(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector_size(self)


    def swap(self, v):
        """swap(CFunctionStdVector self, CFunctionStdVector v)"""
        return _COPASI.CFunctionStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CFunctionStdVector self) -> std::vector< CFunction * >::reverse_iterator"""
        return _COPASI.CFunctionStdVector_rbegin(self)


    def rend(self):
        """rend(CFunctionStdVector self) -> std::vector< CFunction * >::reverse_iterator"""
        return _COPASI.CFunctionStdVector_rend(self)


    def clear(self):
        """clear(CFunctionStdVector self)"""
        return _COPASI.CFunctionStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CFunctionStdVector self) -> std::vector< CFunction * >::allocator_type"""
        return _COPASI.CFunctionStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CFunctionStdVector self)"""
        return _COPASI.CFunctionStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CFunctionStdVector self, std::vector< CFunction * >::iterator pos) -> std::vector< CFunction * >::iterator
        erase(CFunctionStdVector self, std::vector< CFunction * >::iterator first, std::vector< CFunction * >::iterator last) -> std::vector< CFunction * >::iterator
        """
        return _COPASI.CFunctionStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CFunction)> self) -> CFunctionStdVector
        __init__(std::vector<(p.CFunction)> self, CFunctionStdVector arg2) -> CFunctionStdVector
        __init__(std::vector<(p.CFunction)> self, std::vector< CFunction * >::size_type size) -> CFunctionStdVector
        __init__(std::vector<(p.CFunction)> self, std::vector< CFunction * >::size_type size, CFunction value) -> CFunctionStdVector
        """
        this = _COPASI.new_CFunctionStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CFunctionStdVector self, CFunction x)"""
        return _COPASI.CFunctionStdVector_push_back(self, x)


    def front(self):
        """front(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_front(self)


    def back(self):
        """back(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_back(self)


    def assign(self, n, x):
        """assign(CFunctionStdVector self, std::vector< CFunction * >::size_type n, CFunction x)"""
        return _COPASI.CFunctionStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CFunctionStdVector self, std::vector< CFunction * >::size_type new_size)
        resize(CFunctionStdVector self, std::vector< CFunction * >::size_type new_size, CFunction x)
        """
        return _COPASI.CFunctionStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CFunctionStdVector self, std::vector< CFunction * >::iterator pos, CFunction x) -> std::vector< CFunction * >::iterator
        insert(CFunctionStdVector self, std::vector< CFunction * >::iterator pos, std::vector< CFunction * >::size_type n, CFunction x)
        """
        return _COPASI.CFunctionStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CFunctionStdVector self, std::vector< CFunction * >::size_type n)"""
        return _COPASI.CFunctionStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CFunctionStdVector
    __del__ = lambda self: None
CFunctionStdVector_swigregister = _COPASI.CFunctionStdVector_swigregister
CFunctionStdVector_swigregister(CFunctionStdVector)

class CFunctionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CFunction)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CFunctionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CFunctionVector self)"""
        return _COPASI.CFunctionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CFunctionVector self, CFunction src) -> bool"""
        return _COPASI.CFunctionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CFunctionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CFunctionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CFunctionVector self, CDataObject pObject) -> bool"""
        return _COPASI.CFunctionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CFunctionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CFunctionVector_getObject(self, name)


    def size(self):
        """size(CFunctionVector self) -> size_t"""
        return _COPASI.CFunctionVector_size(self)


    def empty(self):
        """empty(CFunctionVector self) -> bool"""
        return _COPASI.CFunctionVector_empty(self)


    def clear(self):
        """clear(CFunctionVector self)"""
        return _COPASI.CFunctionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CFunctionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CFunctionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CFunctionVector self, unsigned int index)"""
        return _COPASI.CFunctionVector_remove(self, index)


    def get(self, index):
        """get(CFunctionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CFunctionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CFunctionVector self, CFunction DISOWN) -> bool"""
        return _COPASI.CFunctionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CFunctionVector self, CDataObject pObject) -> bool"""
        return _COPASI.CFunctionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CFunctionVector self) -> size_t"""
        return _COPASI.CFunctionVector___len__(self)

CFunctionVector_swigregister = _COPASI.CFunctionVector_swigregister
CFunctionVector_swigregister(CFunctionVector)

class CFunctionVectorN(CFunctionVector):
    """Proxy of C++ CDataVectorN<(CFunction)> class."""

    __swig_setmethods__ = {}
    for _s in [CFunctionVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CFunctionVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CFunction)> self, std::string const & name, CDataContainer pParent) -> CFunctionVectorN
        __init__(CDataVectorN<(CFunction)> self, std::string const & name) -> CFunctionVectorN
        __init__(CDataVectorN<(CFunction)> self) -> CFunctionVectorN
        __init__(CDataVectorN<(CFunction)> self, CFunctionVectorN src, CDataContainer pParent) -> CFunctionVectorN
        """
        this = _COPASI.new_CFunctionVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(CFunctionVectorN self, CFunction src) -> bool"""
        return _COPASI.CFunctionVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(CFunctionVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.CFunctionVectorN_add(self, pObject, adopt)


    def remove(self, name):
        """remove(CFunctionVectorN self, std::string const & name)"""
        return _COPASI.CFunctionVectorN_remove(self, name)


    def getObject(self, name):
        """getObject(CFunctionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CFunctionVectorN_getObject(self, name)


    def getIndex(self, name):
        """getIndex(CFunctionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CFunctionVectorN_getIndex(self, name)


    def createUniqueName(self, name):
        """createUniqueName(CFunctionVectorN self, std::string & name)"""
        return _COPASI.CFunctionVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(CFunctionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CFunctionVectorN_getByName(self, name)


    def removeByName(self, name):
        """removeByName(CFunctionVectorN self, std::string const & name) -> bool"""
        return _COPASI.CFunctionVectorN_removeByName(self, name)


    def getIndexByName(self, name):
        """getIndexByName(CFunctionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CFunctionVectorN_getIndexByName(self, name)

CFunctionVectorN_swigregister = _COPASI.CFunctionVectorN_swigregister
CFunctionVectorN_swigregister(CFunctionVectorN)

class CFunctionVectorNS(CFunctionVectorN):
    """Proxy of C++ CDataVectorNS<(CFunction)> class."""

    __swig_setmethods__ = {}
    for _s in [CFunctionVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionVectorNS, name, value)
    __swig_getmethods__ = {}
    for _s in [CFunctionVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionVectorNS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorNS<(CFunction)> self, std::string const & name, CDataContainer pParent) -> CFunctionVectorNS
        __init__(CDataVectorNS<(CFunction)> self, std::string const & name) -> CFunctionVectorNS
        __init__(CDataVectorNS<(CFunction)> self) -> CFunctionVectorNS
        __init__(CDataVectorNS<(CFunction)> self, CFunctionVectorNS src, CDataContainer pParent) -> CFunctionVectorNS
        """
        this = _COPASI.new_CFunctionVectorNS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFunctionVectorNS
    __del__ = lambda self: None
CFunctionVectorNS_swigregister = _COPASI.CFunctionVectorNS_swigregister
CFunctionVectorNS_swigregister(CFunctionVectorNS)

class CEvaluationTreeStdVector(_object):
    """Proxy of C++ std::vector<(p.CEvaluationTree)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CEvaluationTreeStdVector self) -> SwigPyIterator"""
        return _COPASI.CEvaluationTreeStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector___bool__(self)


    def __len__(self):
        """__len__(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j) -> CEvaluationTreeStdVector"""
        return _COPASI.CEvaluationTreeStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j)
        __setslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j, CEvaluationTreeStdVector v)
        """
        return _COPASI.CEvaluationTreeStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j)"""
        return _COPASI.CEvaluationTreeStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i)
        __delitem__(CEvaluationTreeStdVector self, PySliceObject * slice)
        """
        return _COPASI.CEvaluationTreeStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CEvaluationTreeStdVector self, PySliceObject * slice) -> CEvaluationTreeStdVector
        __getitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i) -> CEvaluationTree
        """
        return _COPASI.CEvaluationTreeStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CEvaluationTreeStdVector self, PySliceObject * slice, CEvaluationTreeStdVector v)
        __setitem__(CEvaluationTreeStdVector self, PySliceObject * slice)
        __setitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_pop(self)


    def append(self, x):
        """append(CEvaluationTreeStdVector self, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_append(self, x)


    def empty(self):
        """empty(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector_empty(self)


    def size(self):
        """size(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector_size(self)


    def swap(self, v):
        """swap(CEvaluationTreeStdVector self, CEvaluationTreeStdVector v)"""
        return _COPASI.CEvaluationTreeStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::reverse_iterator"""
        return _COPASI.CEvaluationTreeStdVector_rbegin(self)


    def rend(self):
        """rend(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::reverse_iterator"""
        return _COPASI.CEvaluationTreeStdVector_rend(self)


    def clear(self):
        """clear(CEvaluationTreeStdVector self)"""
        return _COPASI.CEvaluationTreeStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::allocator_type"""
        return _COPASI.CEvaluationTreeStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CEvaluationTreeStdVector self)"""
        return _COPASI.CEvaluationTreeStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos) -> std::vector< CEvaluationTree * >::iterator
        erase(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator first, std::vector< CEvaluationTree * >::iterator last) -> std::vector< CEvaluationTree * >::iterator
        """
        return _COPASI.CEvaluationTreeStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CEvaluationTree)> self) -> CEvaluationTreeStdVector
        __init__(std::vector<(p.CEvaluationTree)> self, CEvaluationTreeStdVector arg2) -> CEvaluationTreeStdVector
        __init__(std::vector<(p.CEvaluationTree)> self, std::vector< CEvaluationTree * >::size_type size) -> CEvaluationTreeStdVector
        __init__(std::vector<(p.CEvaluationTree)> self, std::vector< CEvaluationTree * >::size_type size, CEvaluationTree value) -> CEvaluationTreeStdVector
        """
        this = _COPASI.new_CEvaluationTreeStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CEvaluationTreeStdVector self, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_push_back(self, x)


    def front(self):
        """front(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_front(self)


    def back(self):
        """back(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_back(self)


    def assign(self, n, x):
        """assign(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type n, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type new_size)
        resize(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type new_size, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos, CEvaluationTree x) -> std::vector< CEvaluationTree * >::iterator
        insert(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos, std::vector< CEvaluationTree * >::size_type n, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type n)"""
        return _COPASI.CEvaluationTreeStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CEvaluationTreeStdVector
    __del__ = lambda self: None
CEvaluationTreeStdVector_swigregister = _COPASI.CEvaluationTreeStdVector_swigregister
CEvaluationTreeStdVector_swigregister(CEvaluationTreeStdVector)

class CEvaluationTreeVector(CDataContainer):
    """Proxy of C++ CDataVector<(CEvaluationTree)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CEvaluationTreeVector self)"""
        return _COPASI.CEvaluationTreeVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CEvaluationTreeVector self, CEvaluationTree src) -> bool"""
        return _COPASI.CEvaluationTreeVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CEvaluationTreeVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CEvaluationTreeVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CEvaluationTreeVector self, CDataObject pObject) -> bool"""
        return _COPASI.CEvaluationTreeVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CEvaluationTreeVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CEvaluationTreeVector_getObject(self, name)


    def size(self):
        """size(CEvaluationTreeVector self) -> size_t"""
        return _COPASI.CEvaluationTreeVector_size(self)


    def empty(self):
        """empty(CEvaluationTreeVector self) -> bool"""
        return _COPASI.CEvaluationTreeVector_empty(self)


    def clear(self):
        """clear(CEvaluationTreeVector self)"""
        return _COPASI.CEvaluationTreeVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CEvaluationTreeVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CEvaluationTreeVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CEvaluationTreeVector self, unsigned int index)"""
        return _COPASI.CEvaluationTreeVector_remove(self, index)


    def get(self, index):
        """get(CEvaluationTreeVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CEvaluationTreeVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CEvaluationTreeVector self, CEvaluationTree DISOWN) -> bool"""
        return _COPASI.CEvaluationTreeVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CEvaluationTreeVector self, CDataObject pObject) -> bool"""
        return _COPASI.CEvaluationTreeVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CEvaluationTreeVector self) -> size_t"""
        return _COPASI.CEvaluationTreeVector___len__(self)

CEvaluationTreeVector_swigregister = _COPASI.CEvaluationTreeVector_swigregister
CEvaluationTreeVector_swigregister(CEvaluationTreeVector)

class CEvaluationTreeVectorN(CEvaluationTreeVector):
    """Proxy of C++ CDataVectorN<(CEvaluationTree)> class."""

    __swig_setmethods__ = {}
    for _s in [CEvaluationTreeVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvaluationTreeVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [CEvaluationTreeVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvaluationTreeVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CEvaluationTree)> self, std::string const & name, CDataContainer pParent) -> CEvaluationTreeVectorN
        __init__(CDataVectorN<(CEvaluationTree)> self, std::string const & name) -> CEvaluationTreeVectorN
        __init__(CDataVectorN<(CEvaluationTree)> self) -> CEvaluationTreeVectorN
        __init__(CDataVectorN<(CEvaluationTree)> self, CEvaluationTreeVectorN src, CDataContainer pParent) -> CEvaluationTreeVectorN
        """
        this = _COPASI.new_CEvaluationTreeVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(CEvaluationTreeVectorN self, CEvaluationTree src) -> bool"""
        return _COPASI.CEvaluationTreeVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(CEvaluationTreeVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.CEvaluationTreeVectorN_add(self, pObject, adopt)


    def removeByName(self, name):
        """removeByName(CEvaluationTreeVectorN self, std::string const & name)"""
        return _COPASI.CEvaluationTreeVectorN_removeByName(self, name)


    def getObject(self, name):
        """getObject(CEvaluationTreeVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CEvaluationTreeVectorN_getObject(self, name)


    def getIndexByName(self, name):
        """getIndexByName(CEvaluationTreeVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CEvaluationTreeVectorN_getIndexByName(self, name)


    def createUniqueName(self, name):
        """createUniqueName(CEvaluationTreeVectorN self, std::string & name)"""
        return _COPASI.CEvaluationTreeVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(CEvaluationTreeVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CEvaluationTreeVectorN_getByName(self, name)

CEvaluationTreeVectorN_swigregister = _COPASI.CEvaluationTreeVectorN_swigregister
CEvaluationTreeVectorN_swigregister(CEvaluationTreeVectorN)

class CChemEqElementStdVector(_object):
    """Proxy of C++ std::vector<(p.CChemEqElement)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElementStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElementStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CChemEqElementStdVector self) -> SwigPyIterator"""
        return _COPASI.CChemEqElementStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector___bool__(self)


    def __len__(self):
        """__len__(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j) -> CChemEqElementStdVector"""
        return _COPASI.CChemEqElementStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j)
        __setslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j, CChemEqElementStdVector v)
        """
        return _COPASI.CChemEqElementStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j)"""
        return _COPASI.CChemEqElementStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i)
        __delitem__(CChemEqElementStdVector self, PySliceObject * slice)
        """
        return _COPASI.CChemEqElementStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CChemEqElementStdVector self, PySliceObject * slice) -> CChemEqElementStdVector
        __getitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i) -> CChemEqElement
        """
        return _COPASI.CChemEqElementStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CChemEqElementStdVector self, PySliceObject * slice, CChemEqElementStdVector v)
        __setitem__(CChemEqElementStdVector self, PySliceObject * slice)
        __setitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_pop(self)


    def append(self, x):
        """append(CChemEqElementStdVector self, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_append(self, x)


    def empty(self):
        """empty(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector_empty(self)


    def size(self):
        """size(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector_size(self)


    def swap(self, v):
        """swap(CChemEqElementStdVector self, CChemEqElementStdVector v)"""
        return _COPASI.CChemEqElementStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::reverse_iterator"""
        return _COPASI.CChemEqElementStdVector_rbegin(self)


    def rend(self):
        """rend(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::reverse_iterator"""
        return _COPASI.CChemEqElementStdVector_rend(self)


    def clear(self):
        """clear(CChemEqElementStdVector self)"""
        return _COPASI.CChemEqElementStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::allocator_type"""
        return _COPASI.CChemEqElementStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CChemEqElementStdVector self)"""
        return _COPASI.CChemEqElementStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos) -> std::vector< CChemEqElement * >::iterator
        erase(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator first, std::vector< CChemEqElement * >::iterator last) -> std::vector< CChemEqElement * >::iterator
        """
        return _COPASI.CChemEqElementStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CChemEqElement)> self) -> CChemEqElementStdVector
        __init__(std::vector<(p.CChemEqElement)> self, CChemEqElementStdVector arg2) -> CChemEqElementStdVector
        __init__(std::vector<(p.CChemEqElement)> self, std::vector< CChemEqElement * >::size_type size) -> CChemEqElementStdVector
        __init__(std::vector<(p.CChemEqElement)> self, std::vector< CChemEqElement * >::size_type size, CChemEqElement value) -> CChemEqElementStdVector
        """
        this = _COPASI.new_CChemEqElementStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CChemEqElementStdVector self, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_push_back(self, x)


    def front(self):
        """front(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_front(self)


    def back(self):
        """back(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_back(self)


    def assign(self, n, x):
        """assign(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type n, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type new_size)
        resize(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type new_size, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos, CChemEqElement x) -> std::vector< CChemEqElement * >::iterator
        insert(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos, std::vector< CChemEqElement * >::size_type n, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type n)"""
        return _COPASI.CChemEqElementStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CChemEqElementStdVector
    __del__ = lambda self: None
CChemEqElementStdVector_swigregister = _COPASI.CChemEqElementStdVector_swigregister
CChemEqElementStdVector_swigregister(CChemEqElementStdVector)

class CChemEqElementVector(CDataContainer):
    """Proxy of C++ CDataVector<(CChemEqElement)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChemEqElementVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChemEqElementVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CChemEqElementVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CChemEqElementVector self)"""
        return _COPASI.CChemEqElementVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CChemEqElementVector self, CChemEqElement src) -> bool"""
        return _COPASI.CChemEqElementVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CChemEqElementVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CChemEqElementVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CChemEqElementVector self, CDataObject pObject) -> bool"""
        return _COPASI.CChemEqElementVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CChemEqElementVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CChemEqElementVector_getObject(self, name)


    def size(self):
        """size(CChemEqElementVector self) -> size_t"""
        return _COPASI.CChemEqElementVector_size(self)


    def empty(self):
        """empty(CChemEqElementVector self) -> bool"""
        return _COPASI.CChemEqElementVector_empty(self)


    def clear(self):
        """clear(CChemEqElementVector self)"""
        return _COPASI.CChemEqElementVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CChemEqElementVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CChemEqElementVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CChemEqElementVector self, unsigned int index)"""
        return _COPASI.CChemEqElementVector_remove(self, index)


    def get(self, index):
        """get(CChemEqElementVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CChemEqElementVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CChemEqElementVector self, CChemEqElement DISOWN) -> bool"""
        return _COPASI.CChemEqElementVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CChemEqElementVector self, CDataObject pObject) -> bool"""
        return _COPASI.CChemEqElementVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CChemEqElementVector self) -> size_t"""
        return _COPASI.CChemEqElementVector___len__(self)

CChemEqElementVector_swigregister = _COPASI.CChemEqElementVector_swigregister
CChemEqElementVector_swigregister(CChemEqElementVector)

class DataModelVector(CDataContainer):
    """Proxy of C++ CDataVector<(CDataModel)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataModelVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataModelVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_DataModelVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(DataModelVector self)"""
        return _COPASI.DataModelVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(DataModelVector self, CDataModel src) -> bool"""
        return _COPASI.DataModelVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(DataModelVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.DataModelVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(DataModelVector self, CDataObject pObject) -> bool"""
        return _COPASI.DataModelVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(DataModelVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.DataModelVector_getObject(self, name)


    def size(self):
        """size(DataModelVector self) -> size_t"""
        return _COPASI.DataModelVector_size(self)


    def empty(self):
        """empty(DataModelVector self) -> bool"""
        return _COPASI.DataModelVector_empty(self)


    def clear(self):
        """clear(DataModelVector self)"""
        return _COPASI.DataModelVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(DataModelVector self, CDataObject pObject) -> size_t"""
        return _COPASI.DataModelVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(DataModelVector self, unsigned int index)"""
        return _COPASI.DataModelVector_remove(self, index)


    def get(self, index):
        """get(DataModelVector self, unsigned int index) -> CDataObject"""
        return _COPASI.DataModelVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(DataModelVector self, CDataModel DISOWN) -> bool"""
        return _COPASI.DataModelVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(DataModelVector self, CDataObject pObject) -> bool"""
        return _COPASI.DataModelVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(DataModelVector self) -> size_t"""
        return _COPASI.DataModelVector___len__(self)

DataModelVector_swigregister = _COPASI.DataModelVector_swigregister
DataModelVector_swigregister(DataModelVector)

class ParameterVector(_object):
    """Proxy of C++ std::vector<(p.CCopasiParameter)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ParameterVector self) -> SwigPyIterator"""
        return _COPASI.ParameterVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector___bool__(self)


    def __len__(self):
        """__len__(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j) -> ParameterVector"""
        return _COPASI.ParameterVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j)
        __setslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j, ParameterVector v)
        """
        return _COPASI.ParameterVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j)"""
        return _COPASI.ParameterVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i)
        __delitem__(ParameterVector self, PySliceObject * slice)
        """
        return _COPASI.ParameterVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ParameterVector self, PySliceObject * slice) -> ParameterVector
        __getitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i) -> CCopasiParameter
        """
        return _COPASI.ParameterVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ParameterVector self, PySliceObject * slice, ParameterVector v)
        __setitem__(ParameterVector self, PySliceObject * slice)
        __setitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, CCopasiParameter x)
        """
        return _COPASI.ParameterVector___setitem__(self, *args)


    def pop(self):
        """pop(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_pop(self)


    def append(self, x):
        """append(ParameterVector self, CCopasiParameter x)"""
        return _COPASI.ParameterVector_append(self, x)


    def empty(self):
        """empty(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector_empty(self)


    def size(self):
        """size(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector_size(self)


    def swap(self, v):
        """swap(ParameterVector self, ParameterVector v)"""
        return _COPASI.ParameterVector_swap(self, v)


    def rbegin(self):
        """rbegin(ParameterVector self) -> std::vector< CCopasiParameter * >::reverse_iterator"""
        return _COPASI.ParameterVector_rbegin(self)


    def rend(self):
        """rend(ParameterVector self) -> std::vector< CCopasiParameter * >::reverse_iterator"""
        return _COPASI.ParameterVector_rend(self)


    def clear(self):
        """clear(ParameterVector self)"""
        return _COPASI.ParameterVector_clear(self)


    def get_allocator(self):
        """get_allocator(ParameterVector self) -> std::vector< CCopasiParameter * >::allocator_type"""
        return _COPASI.ParameterVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ParameterVector self)"""
        return _COPASI.ParameterVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos) -> std::vector< CCopasiParameter * >::iterator
        erase(ParameterVector self, std::vector< CCopasiParameter * >::iterator first, std::vector< CCopasiParameter * >::iterator last) -> std::vector< CCopasiParameter * >::iterator
        """
        return _COPASI.ParameterVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CCopasiParameter)> self) -> ParameterVector
        __init__(std::vector<(p.CCopasiParameter)> self, ParameterVector arg2) -> ParameterVector
        __init__(std::vector<(p.CCopasiParameter)> self, std::vector< CCopasiParameter * >::size_type size) -> ParameterVector
        __init__(std::vector<(p.CCopasiParameter)> self, std::vector< CCopasiParameter * >::size_type size, CCopasiParameter value) -> ParameterVector
        """
        this = _COPASI.new_ParameterVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ParameterVector self, CCopasiParameter x)"""
        return _COPASI.ParameterVector_push_back(self, x)


    def front(self):
        """front(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_front(self)


    def back(self):
        """back(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_back(self)


    def assign(self, n, x):
        """assign(ParameterVector self, std::vector< CCopasiParameter * >::size_type n, CCopasiParameter x)"""
        return _COPASI.ParameterVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ParameterVector self, std::vector< CCopasiParameter * >::size_type new_size)
        resize(ParameterVector self, std::vector< CCopasiParameter * >::size_type new_size, CCopasiParameter x)
        """
        return _COPASI.ParameterVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos, CCopasiParameter x) -> std::vector< CCopasiParameter * >::iterator
        insert(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos, std::vector< CCopasiParameter * >::size_type n, CCopasiParameter x)
        """
        return _COPASI.ParameterVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ParameterVector self, std::vector< CCopasiParameter * >::size_type n)"""
        return _COPASI.ParameterVector_reserve(self, n)


    def capacity(self):
        """capacity(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ParameterVector
    __del__ = lambda self: None
ParameterVector_swigregister = _COPASI.ParameterVector_swigregister
ParameterVector_swigregister(ParameterVector)

class IntStdVector(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(IntStdVector self) -> SwigPyIterator"""
        return _COPASI.IntStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector___bool__(self)


    def __len__(self):
        """__len__(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntStdVector"""
        return _COPASI.IntStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntStdVector v)
        """
        return _COPASI.IntStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _COPASI.IntStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IntStdVector self, std::vector< int >::difference_type i)
        __delitem__(IntStdVector self, PySliceObject * slice)
        """
        return _COPASI.IntStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IntStdVector self, PySliceObject * slice) -> IntStdVector
        __getitem__(IntStdVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _COPASI.IntStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IntStdVector self, PySliceObject * slice, IntStdVector v)
        __setitem__(IntStdVector self, PySliceObject * slice)
        __setitem__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector___setitem__(self, *args)


    def pop(self):
        """pop(IntStdVector self) -> std::vector< int >::value_type"""
        return _COPASI.IntStdVector_pop(self)


    def append(self, x):
        """append(IntStdVector self, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_append(self, x)


    def empty(self):
        """empty(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector_empty(self)


    def size(self):
        """size(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector_size(self)


    def swap(self, v):
        """swap(IntStdVector self, IntStdVector v)"""
        return _COPASI.IntStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(IntStdVector self) -> std::vector< int >::reverse_iterator"""
        return _COPASI.IntStdVector_rbegin(self)


    def rend(self):
        """rend(IntStdVector self) -> std::vector< int >::reverse_iterator"""
        return _COPASI.IntStdVector_rend(self)


    def clear(self):
        """clear(IntStdVector self)"""
        return _COPASI.IntStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(IntStdVector self) -> std::vector< int >::allocator_type"""
        return _COPASI.IntStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(IntStdVector self)"""
        return _COPASI.IntStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(IntStdVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntStdVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _COPASI.IntStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> IntStdVector
        __init__(std::vector<(int)> self, IntStdVector arg2) -> IntStdVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntStdVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntStdVector
        """
        this = _COPASI.new_IntStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(IntStdVector self, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_push_back(self, x)


    def front(self):
        """front(IntStdVector self) -> std::vector< int >::value_type const &"""
        return _COPASI.IntStdVector_front(self)


    def back(self):
        """back(IntStdVector self) -> std::vector< int >::value_type const &"""
        return _COPASI.IntStdVector_back(self)


    def assign(self, n, x):
        """assign(IntStdVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IntStdVector self, std::vector< int >::size_type new_size)
        resize(IntStdVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(IntStdVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntStdVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(IntStdVector self, std::vector< int >::size_type n)"""
        return _COPASI.IntStdVector_reserve(self, n)


    def capacity(self):
        """capacity(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_IntStdVector
    __del__ = lambda self: None
IntStdVector_swigregister = _COPASI.IntStdVector_swigregister
IntStdVector_swigregister(IntStdVector)

class SizeTStdVector(_object):
    """Proxy of C++ std::vector<(size_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeTStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeTStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(SizeTStdVector self) -> SwigPyIterator"""
        return _COPASI.SizeTStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector___bool__(self)


    def __len__(self):
        """__len__(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> SizeTStdVector"""
        return _COPASI.SizeTStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, SizeTStdVector v)
        """
        return _COPASI.SizeTStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _COPASI.SizeTStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(SizeTStdVector self, std::vector< size_t >::difference_type i)
        __delitem__(SizeTStdVector self, PySliceObject * slice)
        """
        return _COPASI.SizeTStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(SizeTStdVector self, PySliceObject * slice) -> SizeTStdVector
        __getitem__(SizeTStdVector self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _COPASI.SizeTStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(SizeTStdVector self, PySliceObject * slice, SizeTStdVector v)
        __setitem__(SizeTStdVector self, PySliceObject * slice)
        __setitem__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector___setitem__(self, *args)


    def pop(self):
        """pop(SizeTStdVector self) -> std::vector< size_t >::value_type"""
        return _COPASI.SizeTStdVector_pop(self)


    def append(self, x):
        """append(SizeTStdVector self, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_append(self, x)


    def empty(self):
        """empty(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector_empty(self)


    def size(self):
        """size(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector_size(self)


    def swap(self, v):
        """swap(SizeTStdVector self, SizeTStdVector v)"""
        return _COPASI.SizeTStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(SizeTStdVector self) -> std::vector< size_t >::reverse_iterator"""
        return _COPASI.SizeTStdVector_rbegin(self)


    def rend(self):
        """rend(SizeTStdVector self) -> std::vector< size_t >::reverse_iterator"""
        return _COPASI.SizeTStdVector_rend(self)


    def clear(self):
        """clear(SizeTStdVector self)"""
        return _COPASI.SizeTStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(SizeTStdVector self) -> std::vector< size_t >::allocator_type"""
        return _COPASI.SizeTStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(SizeTStdVector self)"""
        return _COPASI.SizeTStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(SizeTStdVector self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(SizeTStdVector self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _COPASI.SizeTStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(size_t)> self) -> SizeTStdVector
        __init__(std::vector<(size_t)> self, SizeTStdVector arg2) -> SizeTStdVector
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size) -> SizeTStdVector
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> SizeTStdVector
        """
        this = _COPASI.new_SizeTStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(SizeTStdVector self, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_push_back(self, x)


    def front(self):
        """front(SizeTStdVector self) -> std::vector< size_t >::value_type const &"""
        return _COPASI.SizeTStdVector_front(self)


    def back(self):
        """back(SizeTStdVector self) -> std::vector< size_t >::value_type const &"""
        return _COPASI.SizeTStdVector_back(self)


    def assign(self, n, x):
        """assign(SizeTStdVector self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(SizeTStdVector self, std::vector< size_t >::size_type new_size)
        resize(SizeTStdVector self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(SizeTStdVector self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(SizeTStdVector self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(SizeTStdVector self, std::vector< size_t >::size_type n)"""
        return _COPASI.SizeTStdVector_reserve(self, n)


    def capacity(self):
        """capacity(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_SizeTStdVector
    __del__ = lambda self: None
SizeTStdVector_swigregister = _COPASI.SizeTStdVector_swigregister
SizeTStdVector_swigregister(SizeTStdVector)

class StringStdVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(StringStdVector self) -> SwigPyIterator"""
        return _COPASI.StringStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector___bool__(self)


    def __len__(self):
        """__len__(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringStdVector"""
        return _COPASI.StringStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringStdVector v)
        """
        return _COPASI.StringStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _COPASI.StringStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringStdVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringStdVector self, PySliceObject * slice)
        """
        return _COPASI.StringStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringStdVector self, PySliceObject * slice) -> StringStdVector
        __getitem__(StringStdVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _COPASI.StringStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringStdVector self, PySliceObject * slice, StringStdVector v)
        __setitem__(StringStdVector self, PySliceObject * slice)
        __setitem__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector___setitem__(self, *args)


    def pop(self):
        """pop(StringStdVector self) -> std::vector< std::string >::value_type"""
        return _COPASI.StringStdVector_pop(self)


    def append(self, x):
        """append(StringStdVector self, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_append(self, x)


    def empty(self):
        """empty(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector_empty(self)


    def size(self):
        """size(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector_size(self)


    def swap(self, v):
        """swap(StringStdVector self, StringStdVector v)"""
        return _COPASI.StringStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(StringStdVector self) -> std::vector< std::string >::reverse_iterator"""
        return _COPASI.StringStdVector_rbegin(self)


    def rend(self):
        """rend(StringStdVector self) -> std::vector< std::string >::reverse_iterator"""
        return _COPASI.StringStdVector_rend(self)


    def clear(self):
        """clear(StringStdVector self)"""
        return _COPASI.StringStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(StringStdVector self) -> std::vector< std::string >::allocator_type"""
        return _COPASI.StringStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(StringStdVector self)"""
        return _COPASI.StringStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(StringStdVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringStdVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _COPASI.StringStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StringStdVector
        __init__(std::vector<(std::string)> self, StringStdVector arg2) -> StringStdVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringStdVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringStdVector
        """
        this = _COPASI.new_StringStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(StringStdVector self, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_push_back(self, x)


    def front(self):
        """front(StringStdVector self) -> std::vector< std::string >::value_type const &"""
        return _COPASI.StringStdVector_front(self)


    def back(self):
        """back(StringStdVector self) -> std::vector< std::string >::value_type const &"""
        return _COPASI.StringStdVector_back(self)


    def assign(self, n, x):
        """assign(StringStdVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringStdVector self, std::vector< std::string >::size_type new_size)
        resize(StringStdVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringStdVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringStdVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(StringStdVector self, std::vector< std::string >::size_type n)"""
        return _COPASI.StringStdVector_reserve(self, n)


    def capacity(self):
        """capacity(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_StringStdVector
    __del__ = lambda self: None
StringStdVector_swigregister = _COPASI.StringStdVector_swigregister
StringStdVector_swigregister(StringStdVector)

class VectorOfStringVectors(_object):
    """Proxy of C++ std::vector<(std::vector<(std::string)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfStringVectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfStringVectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorOfStringVectors self) -> SwigPyIterator"""
        return _COPASI.VectorOfStringVectors_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors___bool__(self)


    def __len__(self):
        """__len__(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j) -> VectorOfStringVectors"""
        return _COPASI.VectorOfStringVectors___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)
        __setslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j, VectorOfStringVectors v)
        """
        return _COPASI.VectorOfStringVectors___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)"""
        return _COPASI.VectorOfStringVectors___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i)
        __delitem__(VectorOfStringVectors self, PySliceObject * slice)
        """
        return _COPASI.VectorOfStringVectors___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorOfStringVectors self, PySliceObject * slice) -> VectorOfStringVectors
        __getitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i) -> StringStdVector
        """
        return _COPASI.VectorOfStringVectors___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorOfStringVectors self, PySliceObject * slice, VectorOfStringVectors v)
        __setitem__(VectorOfStringVectors self, PySliceObject * slice)
        __setitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors___setitem__(self, *args)


    def pop(self):
        """pop(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_pop(self)


    def append(self, x):
        """append(VectorOfStringVectors self, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_append(self, x)


    def empty(self):
        """empty(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors_empty(self)


    def size(self):
        """size(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors_size(self)


    def swap(self, v):
        """swap(VectorOfStringVectors self, VectorOfStringVectors v)"""
        return _COPASI.VectorOfStringVectors_swap(self, v)


    def rbegin(self):
        """rbegin(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _COPASI.VectorOfStringVectors_rbegin(self)


    def rend(self):
        """rend(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _COPASI.VectorOfStringVectors_rend(self)


    def clear(self):
        """clear(VectorOfStringVectors self)"""
        return _COPASI.VectorOfStringVectors_clear(self)


    def get_allocator(self):
        """get_allocator(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::allocator_type"""
        return _COPASI.VectorOfStringVectors_get_allocator(self)


    def pop_back(self):
        """pop_back(VectorOfStringVectors self)"""
        return _COPASI.VectorOfStringVectors_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos) -> std::vector< std::vector< std::string > >::iterator
        erase(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator first, std::vector< std::vector< std::string > >::iterator last) -> std::vector< std::vector< std::string > >::iterator
        """
        return _COPASI.VectorOfStringVectors_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(std::string)>)> self) -> VectorOfStringVectors
        __init__(std::vector<(std::vector<(std::string)>)> self, VectorOfStringVectors arg2) -> VectorOfStringVectors
        __init__(std::vector<(std::vector<(std::string)>)> self, std::vector< std::vector< std::string > >::size_type size) -> VectorOfStringVectors
        __init__(std::vector<(std::vector<(std::string)>)> self, std::vector< std::vector< std::string > >::size_type size, StringStdVector value) -> VectorOfStringVectors
        """
        this = _COPASI.new_VectorOfStringVectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VectorOfStringVectors self, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_push_back(self, x)


    def front(self):
        """front(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_front(self)


    def back(self):
        """back(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_back(self)


    def assign(self, n, x):
        """assign(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type n, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type new_size)
        resize(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type new_size, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos, StringStdVector x) -> std::vector< std::vector< std::string > >::iterator
        insert(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos, std::vector< std::vector< std::string > >::size_type n, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type n)"""
        return _COPASI.VectorOfStringVectors_reserve(self, n)


    def capacity(self):
        """capacity(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors_capacity(self)

    __swig_destroy__ = _COPASI.delete_VectorOfStringVectors
    __del__ = lambda self: None
VectorOfStringVectors_swigregister = _COPASI.VectorOfStringVectors_swigregister
VectorOfStringVectors_swigregister(VectorOfStringVectors)

class FloatStdVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(FloatStdVector self) -> SwigPyIterator"""
        return _COPASI.FloatStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector___bool__(self)


    def __len__(self):
        """__len__(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> FloatStdVector"""
        return _COPASI.FloatStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, FloatStdVector v)
        """
        return _COPASI.FloatStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _COPASI.FloatStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FloatStdVector self, std::vector< double >::difference_type i)
        __delitem__(FloatStdVector self, PySliceObject * slice)
        """
        return _COPASI.FloatStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FloatStdVector self, PySliceObject * slice) -> FloatStdVector
        __getitem__(FloatStdVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _COPASI.FloatStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FloatStdVector self, PySliceObject * slice, FloatStdVector v)
        __setitem__(FloatStdVector self, PySliceObject * slice)
        __setitem__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector___setitem__(self, *args)


    def pop(self):
        """pop(FloatStdVector self) -> std::vector< double >::value_type"""
        return _COPASI.FloatStdVector_pop(self)


    def append(self, x):
        """append(FloatStdVector self, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_append(self, x)


    def empty(self):
        """empty(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector_empty(self)


    def size(self):
        """size(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector_size(self)


    def swap(self, v):
        """swap(FloatStdVector self, FloatStdVector v)"""
        return _COPASI.FloatStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(FloatStdVector self) -> std::vector< double >::reverse_iterator"""
        return _COPASI.FloatStdVector_rbegin(self)


    def rend(self):
        """rend(FloatStdVector self) -> std::vector< double >::reverse_iterator"""
        return _COPASI.FloatStdVector_rend(self)


    def clear(self):
        """clear(FloatStdVector self)"""
        return _COPASI.FloatStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(FloatStdVector self) -> std::vector< double >::allocator_type"""
        return _COPASI.FloatStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(FloatStdVector self)"""
        return _COPASI.FloatStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(FloatStdVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(FloatStdVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _COPASI.FloatStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> FloatStdVector
        __init__(std::vector<(double)> self, FloatStdVector arg2) -> FloatStdVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> FloatStdVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> FloatStdVector
        """
        this = _COPASI.new_FloatStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FloatStdVector self, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_push_back(self, x)


    def front(self):
        """front(FloatStdVector self) -> std::vector< double >::value_type const &"""
        return _COPASI.FloatStdVector_front(self)


    def back(self):
        """back(FloatStdVector self) -> std::vector< double >::value_type const &"""
        return _COPASI.FloatStdVector_back(self)


    def assign(self, n, x):
        """assign(FloatStdVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FloatStdVector self, std::vector< double >::size_type new_size)
        resize(FloatStdVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(FloatStdVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(FloatStdVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(FloatStdVector self, std::vector< double >::size_type n)"""
        return _COPASI.FloatStdVector_reserve(self, n)


    def capacity(self):
        """capacity(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_FloatStdVector
    __del__ = lambda self: None
FloatStdVector_swigregister = _COPASI.FloatStdVector_swigregister
FloatStdVector_swigregister(FloatStdVector)

class OptItemStdVector(_object):
    """Proxy of C++ std::vector<(p.COptItem)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptItemStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptItemStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(OptItemStdVector self) -> SwigPyIterator"""
        return _COPASI.OptItemStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector___bool__(self)


    def __len__(self):
        """__len__(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j) -> OptItemStdVector"""
        return _COPASI.OptItemStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j)
        __setslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j, OptItemStdVector v)
        """
        return _COPASI.OptItemStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j)"""
        return _COPASI.OptItemStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i)
        __delitem__(OptItemStdVector self, PySliceObject * slice)
        """
        return _COPASI.OptItemStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(OptItemStdVector self, PySliceObject * slice) -> OptItemStdVector
        __getitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i) -> COptItem
        """
        return _COPASI.OptItemStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(OptItemStdVector self, PySliceObject * slice, OptItemStdVector v)
        __setitem__(OptItemStdVector self, PySliceObject * slice)
        __setitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, COptItem x)
        """
        return _COPASI.OptItemStdVector___setitem__(self, *args)


    def pop(self):
        """pop(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_pop(self)


    def append(self, x):
        """append(OptItemStdVector self, COptItem x)"""
        return _COPASI.OptItemStdVector_append(self, x)


    def empty(self):
        """empty(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector_empty(self)


    def size(self):
        """size(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector_size(self)


    def swap(self, v):
        """swap(OptItemStdVector self, OptItemStdVector v)"""
        return _COPASI.OptItemStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(OptItemStdVector self) -> std::vector< COptItem * >::reverse_iterator"""
        return _COPASI.OptItemStdVector_rbegin(self)


    def rend(self):
        """rend(OptItemStdVector self) -> std::vector< COptItem * >::reverse_iterator"""
        return _COPASI.OptItemStdVector_rend(self)


    def clear(self):
        """clear(OptItemStdVector self)"""
        return _COPASI.OptItemStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(OptItemStdVector self) -> std::vector< COptItem * >::allocator_type"""
        return _COPASI.OptItemStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(OptItemStdVector self)"""
        return _COPASI.OptItemStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(OptItemStdVector self, std::vector< COptItem * >::iterator pos) -> std::vector< COptItem * >::iterator
        erase(OptItemStdVector self, std::vector< COptItem * >::iterator first, std::vector< COptItem * >::iterator last) -> std::vector< COptItem * >::iterator
        """
        return _COPASI.OptItemStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.COptItem)> self) -> OptItemStdVector
        __init__(std::vector<(p.COptItem)> self, OptItemStdVector arg2) -> OptItemStdVector
        __init__(std::vector<(p.COptItem)> self, std::vector< COptItem * >::size_type size) -> OptItemStdVector
        __init__(std::vector<(p.COptItem)> self, std::vector< COptItem * >::size_type size, COptItem value) -> OptItemStdVector
        """
        this = _COPASI.new_OptItemStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(OptItemStdVector self, COptItem x)"""
        return _COPASI.OptItemStdVector_push_back(self, x)


    def front(self):
        """front(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_front(self)


    def back(self):
        """back(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_back(self)


    def assign(self, n, x):
        """assign(OptItemStdVector self, std::vector< COptItem * >::size_type n, COptItem x)"""
        return _COPASI.OptItemStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(OptItemStdVector self, std::vector< COptItem * >::size_type new_size)
        resize(OptItemStdVector self, std::vector< COptItem * >::size_type new_size, COptItem x)
        """
        return _COPASI.OptItemStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(OptItemStdVector self, std::vector< COptItem * >::iterator pos, COptItem x) -> std::vector< COptItem * >::iterator
        insert(OptItemStdVector self, std::vector< COptItem * >::iterator pos, std::vector< COptItem * >::size_type n, COptItem x)
        """
        return _COPASI.OptItemStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(OptItemStdVector self, std::vector< COptItem * >::size_type n)"""
        return _COPASI.OptItemStdVector_reserve(self, n)


    def capacity(self):
        """capacity(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_OptItemStdVector
    __del__ = lambda self: None
OptItemStdVector_swigregister = _COPASI.OptItemStdVector_swigregister
OptItemStdVector_swigregister(OptItemStdVector)

class ContainerStdVector(_object):
    """Proxy of C++ std::vector<(p.CDataContainer)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ContainerStdVector self) -> SwigPyIterator"""
        return _COPASI.ContainerStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector___bool__(self)


    def __len__(self):
        """__len__(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j) -> ContainerStdVector"""
        return _COPASI.ContainerStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j)
        __setslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j, ContainerStdVector v)
        """
        return _COPASI.ContainerStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j)"""
        return _COPASI.ContainerStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i)
        __delitem__(ContainerStdVector self, PySliceObject * slice)
        """
        return _COPASI.ContainerStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ContainerStdVector self, PySliceObject * slice) -> ContainerStdVector
        __getitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i) -> CDataContainer
        """
        return _COPASI.ContainerStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ContainerStdVector self, PySliceObject * slice, ContainerStdVector v)
        __setitem__(ContainerStdVector self, PySliceObject * slice)
        __setitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, CDataContainer x)
        """
        return _COPASI.ContainerStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_pop(self)


    def append(self, x):
        """append(ContainerStdVector self, CDataContainer x)"""
        return _COPASI.ContainerStdVector_append(self, x)


    def empty(self):
        """empty(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector_empty(self)


    def size(self):
        """size(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector_size(self)


    def swap(self, v):
        """swap(ContainerStdVector self, ContainerStdVector v)"""
        return _COPASI.ContainerStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ContainerStdVector self) -> std::vector< CDataContainer * >::reverse_iterator"""
        return _COPASI.ContainerStdVector_rbegin(self)


    def rend(self):
        """rend(ContainerStdVector self) -> std::vector< CDataContainer * >::reverse_iterator"""
        return _COPASI.ContainerStdVector_rend(self)


    def clear(self):
        """clear(ContainerStdVector self)"""
        return _COPASI.ContainerStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ContainerStdVector self) -> std::vector< CDataContainer * >::allocator_type"""
        return _COPASI.ContainerStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ContainerStdVector self)"""
        return _COPASI.ContainerStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos) -> std::vector< CDataContainer * >::iterator
        erase(ContainerStdVector self, std::vector< CDataContainer * >::iterator first, std::vector< CDataContainer * >::iterator last) -> std::vector< CDataContainer * >::iterator
        """
        return _COPASI.ContainerStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CDataContainer)> self) -> ContainerStdVector
        __init__(std::vector<(p.CDataContainer)> self, ContainerStdVector arg2) -> ContainerStdVector
        __init__(std::vector<(p.CDataContainer)> self, std::vector< CDataContainer * >::size_type size) -> ContainerStdVector
        __init__(std::vector<(p.CDataContainer)> self, std::vector< CDataContainer * >::size_type size, CDataContainer value) -> ContainerStdVector
        """
        this = _COPASI.new_ContainerStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ContainerStdVector self, CDataContainer x)"""
        return _COPASI.ContainerStdVector_push_back(self, x)


    def front(self):
        """front(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_front(self)


    def back(self):
        """back(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_back(self)


    def assign(self, n, x):
        """assign(ContainerStdVector self, std::vector< CDataContainer * >::size_type n, CDataContainer x)"""
        return _COPASI.ContainerStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ContainerStdVector self, std::vector< CDataContainer * >::size_type new_size)
        resize(ContainerStdVector self, std::vector< CDataContainer * >::size_type new_size, CDataContainer x)
        """
        return _COPASI.ContainerStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos, CDataContainer x) -> std::vector< CDataContainer * >::iterator
        insert(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos, std::vector< CDataContainer * >::size_type n, CDataContainer x)
        """
        return _COPASI.ContainerStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ContainerStdVector self, std::vector< CDataContainer * >::size_type n)"""
        return _COPASI.ContainerStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ContainerStdVector
    __del__ = lambda self: None
ContainerStdVector_swigregister = _COPASI.ContainerStdVector_swigregister
ContainerStdVector_swigregister(ContainerStdVector)

class PointStdVector(_object):
    """Proxy of C++ std::vector<(CLPoint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(PointStdVector self) -> SwigPyIterator"""
        return _COPASI.PointStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector___bool__(self)


    def __len__(self):
        """__len__(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j) -> PointStdVector"""
        return _COPASI.PointStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j)
        __setslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j, PointStdVector v)
        """
        return _COPASI.PointStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j)"""
        return _COPASI.PointStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(PointStdVector self, std::vector< CLPoint >::difference_type i)
        __delitem__(PointStdVector self, PySliceObject * slice)
        """
        return _COPASI.PointStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(PointStdVector self, PySliceObject * slice) -> PointStdVector
        __getitem__(PointStdVector self, std::vector< CLPoint >::difference_type i) -> CLPoint
        """
        return _COPASI.PointStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(PointStdVector self, PySliceObject * slice, PointStdVector v)
        __setitem__(PointStdVector self, PySliceObject * slice)
        __setitem__(PointStdVector self, std::vector< CLPoint >::difference_type i, CLPoint x)
        """
        return _COPASI.PointStdVector___setitem__(self, *args)


    def pop(self):
        """pop(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_pop(self)


    def append(self, x):
        """append(PointStdVector self, CLPoint x)"""
        return _COPASI.PointStdVector_append(self, x)


    def empty(self):
        """empty(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector_empty(self)


    def size(self):
        """size(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector_size(self)


    def swap(self, v):
        """swap(PointStdVector self, PointStdVector v)"""
        return _COPASI.PointStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(PointStdVector self) -> std::vector< CLPoint >::reverse_iterator"""
        return _COPASI.PointStdVector_rbegin(self)


    def rend(self):
        """rend(PointStdVector self) -> std::vector< CLPoint >::reverse_iterator"""
        return _COPASI.PointStdVector_rend(self)


    def clear(self):
        """clear(PointStdVector self)"""
        return _COPASI.PointStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(PointStdVector self) -> std::vector< CLPoint >::allocator_type"""
        return _COPASI.PointStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(PointStdVector self)"""
        return _COPASI.PointStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(PointStdVector self, std::vector< CLPoint >::iterator pos) -> std::vector< CLPoint >::iterator
        erase(PointStdVector self, std::vector< CLPoint >::iterator first, std::vector< CLPoint >::iterator last) -> std::vector< CLPoint >::iterator
        """
        return _COPASI.PointStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CLPoint)> self) -> PointStdVector
        __init__(std::vector<(CLPoint)> self, PointStdVector arg2) -> PointStdVector
        __init__(std::vector<(CLPoint)> self, std::vector< CLPoint >::size_type size) -> PointStdVector
        __init__(std::vector<(CLPoint)> self, std::vector< CLPoint >::size_type size, CLPoint value) -> PointStdVector
        """
        this = _COPASI.new_PointStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(PointStdVector self, CLPoint x)"""
        return _COPASI.PointStdVector_push_back(self, x)


    def front(self):
        """front(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_front(self)


    def back(self):
        """back(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_back(self)


    def assign(self, n, x):
        """assign(PointStdVector self, std::vector< CLPoint >::size_type n, CLPoint x)"""
        return _COPASI.PointStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(PointStdVector self, std::vector< CLPoint >::size_type new_size)
        resize(PointStdVector self, std::vector< CLPoint >::size_type new_size, CLPoint x)
        """
        return _COPASI.PointStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(PointStdVector self, std::vector< CLPoint >::iterator pos, CLPoint x) -> std::vector< CLPoint >::iterator
        insert(PointStdVector self, std::vector< CLPoint >::iterator pos, std::vector< CLPoint >::size_type n, CLPoint x)
        """
        return _COPASI.PointStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(PointStdVector self, std::vector< CLPoint >::size_type n)"""
        return _COPASI.PointStdVector_reserve(self, n)


    def capacity(self):
        """capacity(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_PointStdVector
    __del__ = lambda self: None
PointStdVector_swigregister = _COPASI.PointStdVector_swigregister
PointStdVector_swigregister(PointStdVector)

class LineSegmentStdVector(_object):
    """Proxy of C++ std::vector<(CLLineSegment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegmentStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegmentStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(LineSegmentStdVector self) -> SwigPyIterator"""
        return _COPASI.LineSegmentStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector___bool__(self)


    def __len__(self):
        """__len__(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j) -> LineSegmentStdVector"""
        return _COPASI.LineSegmentStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j)
        __setslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j, LineSegmentStdVector v)
        """
        return _COPASI.LineSegmentStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j)"""
        return _COPASI.LineSegmentStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i)
        __delitem__(LineSegmentStdVector self, PySliceObject * slice)
        """
        return _COPASI.LineSegmentStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(LineSegmentStdVector self, PySliceObject * slice) -> LineSegmentStdVector
        __getitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i) -> CLLineSegment
        """
        return _COPASI.LineSegmentStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(LineSegmentStdVector self, PySliceObject * slice, LineSegmentStdVector v)
        __setitem__(LineSegmentStdVector self, PySliceObject * slice)
        __setitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector___setitem__(self, *args)


    def pop(self):
        """pop(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_pop(self)


    def append(self, x):
        """append(LineSegmentStdVector self, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_append(self, x)


    def empty(self):
        """empty(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector_empty(self)


    def size(self):
        """size(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector_size(self)


    def swap(self, v):
        """swap(LineSegmentStdVector self, LineSegmentStdVector v)"""
        return _COPASI.LineSegmentStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(LineSegmentStdVector self) -> std::vector< CLLineSegment >::reverse_iterator"""
        return _COPASI.LineSegmentStdVector_rbegin(self)


    def rend(self):
        """rend(LineSegmentStdVector self) -> std::vector< CLLineSegment >::reverse_iterator"""
        return _COPASI.LineSegmentStdVector_rend(self)


    def clear(self):
        """clear(LineSegmentStdVector self)"""
        return _COPASI.LineSegmentStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(LineSegmentStdVector self) -> std::vector< CLLineSegment >::allocator_type"""
        return _COPASI.LineSegmentStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(LineSegmentStdVector self)"""
        return _COPASI.LineSegmentStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos) -> std::vector< CLLineSegment >::iterator
        erase(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator first, std::vector< CLLineSegment >::iterator last) -> std::vector< CLLineSegment >::iterator
        """
        return _COPASI.LineSegmentStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CLLineSegment)> self) -> LineSegmentStdVector
        __init__(std::vector<(CLLineSegment)> self, LineSegmentStdVector arg2) -> LineSegmentStdVector
        __init__(std::vector<(CLLineSegment)> self, std::vector< CLLineSegment >::size_type size) -> LineSegmentStdVector
        __init__(std::vector<(CLLineSegment)> self, std::vector< CLLineSegment >::size_type size, CLLineSegment value) -> LineSegmentStdVector
        """
        this = _COPASI.new_LineSegmentStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(LineSegmentStdVector self, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_push_back(self, x)


    def front(self):
        """front(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_front(self)


    def back(self):
        """back(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_back(self)


    def assign(self, n, x):
        """assign(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type n, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type new_size)
        resize(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type new_size, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos, CLLineSegment x) -> std::vector< CLLineSegment >::iterator
        insert(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos, std::vector< CLLineSegment >::size_type n, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type n)"""
        return _COPASI.LineSegmentStdVector_reserve(self, n)


    def capacity(self):
        """capacity(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_LineSegmentStdVector
    __del__ = lambda self: None
LineSegmentStdVector_swigregister = _COPASI.LineSegmentStdVector_swigregister
LineSegmentStdVector_swigregister(LineSegmentStdVector)

class FittingPointVector(CDataContainer):
    """Proxy of C++ CDataVector<(CFittingPoint)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittingPointVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FittingPointVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FittingPointVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(FittingPointVector self)"""
        return _COPASI.FittingPointVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(FittingPointVector self, CFittingPoint src) -> bool"""
        return _COPASI.FittingPointVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(FittingPointVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.FittingPointVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(FittingPointVector self, CDataObject pObject) -> bool"""
        return _COPASI.FittingPointVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(FittingPointVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.FittingPointVector_getObject(self, name)


    def size(self):
        """size(FittingPointVector self) -> size_t"""
        return _COPASI.FittingPointVector_size(self)


    def empty(self):
        """empty(FittingPointVector self) -> bool"""
        return _COPASI.FittingPointVector_empty(self)


    def clear(self):
        """clear(FittingPointVector self)"""
        return _COPASI.FittingPointVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(FittingPointVector self, CDataObject pObject) -> size_t"""
        return _COPASI.FittingPointVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(FittingPointVector self, unsigned int index)"""
        return _COPASI.FittingPointVector_remove(self, index)


    def get(self, index):
        """get(FittingPointVector self, unsigned int index) -> CDataObject"""
        return _COPASI.FittingPointVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(FittingPointVector self, CFittingPoint DISOWN) -> bool"""
        return _COPASI.FittingPointVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(FittingPointVector self, CDataObject pObject) -> bool"""
        return _COPASI.FittingPointVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(FittingPointVector self) -> size_t"""
        return _COPASI.FittingPointVector___len__(self)

FittingPointVector_swigregister = _COPASI.FittingPointVector_swigregister
FittingPointVector_swigregister(FittingPointVector)

class BiologicalDescriptionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CBiologicalDescription)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiologicalDescriptionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiologicalDescriptionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_BiologicalDescriptionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(BiologicalDescriptionVector self)"""
        return _COPASI.BiologicalDescriptionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(BiologicalDescriptionVector self, CBiologicalDescription src) -> bool"""
        return _COPASI.BiologicalDescriptionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(BiologicalDescriptionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.BiologicalDescriptionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(BiologicalDescriptionVector self, CDataObject pObject) -> bool"""
        return _COPASI.BiologicalDescriptionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(BiologicalDescriptionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.BiologicalDescriptionVector_getObject(self, name)


    def size(self):
        """size(BiologicalDescriptionVector self) -> size_t"""
        return _COPASI.BiologicalDescriptionVector_size(self)


    def empty(self):
        """empty(BiologicalDescriptionVector self) -> bool"""
        return _COPASI.BiologicalDescriptionVector_empty(self)


    def clear(self):
        """clear(BiologicalDescriptionVector self)"""
        return _COPASI.BiologicalDescriptionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(BiologicalDescriptionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.BiologicalDescriptionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(BiologicalDescriptionVector self, unsigned int index)"""
        return _COPASI.BiologicalDescriptionVector_remove(self, index)


    def get(self, index):
        """get(BiologicalDescriptionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.BiologicalDescriptionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(BiologicalDescriptionVector self, CBiologicalDescription DISOWN) -> bool"""
        return _COPASI.BiologicalDescriptionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(BiologicalDescriptionVector self, CDataObject pObject) -> bool"""
        return _COPASI.BiologicalDescriptionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(BiologicalDescriptionVector self) -> size_t"""
        return _COPASI.BiologicalDescriptionVector___len__(self)

BiologicalDescriptionVector_swigregister = _COPASI.BiologicalDescriptionVector_swigregister
BiologicalDescriptionVector_swigregister(BiologicalDescriptionVector)

class CreatorVector(CDataContainer):
    """Proxy of C++ CDataVector<(CCreator)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreatorVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreatorVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CreatorVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CreatorVector self)"""
        return _COPASI.CreatorVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CreatorVector self, CCreator src) -> bool"""
        return _COPASI.CreatorVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CreatorVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CreatorVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CreatorVector self, CDataObject pObject) -> bool"""
        return _COPASI.CreatorVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CreatorVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CreatorVector_getObject(self, name)


    def size(self):
        """size(CreatorVector self) -> size_t"""
        return _COPASI.CreatorVector_size(self)


    def empty(self):
        """empty(CreatorVector self) -> bool"""
        return _COPASI.CreatorVector_empty(self)


    def clear(self):
        """clear(CreatorVector self)"""
        return _COPASI.CreatorVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CreatorVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CreatorVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CreatorVector self, unsigned int index)"""
        return _COPASI.CreatorVector_remove(self, index)


    def get(self, index):
        """get(CreatorVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CreatorVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CreatorVector self, CCreator DISOWN) -> bool"""
        return _COPASI.CreatorVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CreatorVector self, CDataObject pObject) -> bool"""
        return _COPASI.CreatorVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CreatorVector self) -> size_t"""
        return _COPASI.CreatorVector___len__(self)

CreatorVector_swigregister = _COPASI.CreatorVector_swigregister
CreatorVector_swigregister(CreatorVector)

class ReferenceVector(CDataContainer):
    """Proxy of C++ CDataVector<(CReference)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReferenceVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ReferenceVector self)"""
        return _COPASI.ReferenceVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ReferenceVector self, CReference src) -> bool"""
        return _COPASI.ReferenceVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ReferenceVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReferenceVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ReferenceVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ReferenceVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReferenceVector_getObject(self, name)


    def size(self):
        """size(ReferenceVector self) -> size_t"""
        return _COPASI.ReferenceVector_size(self)


    def empty(self):
        """empty(ReferenceVector self) -> bool"""
        return _COPASI.ReferenceVector_empty(self)


    def clear(self):
        """clear(ReferenceVector self)"""
        return _COPASI.ReferenceVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ReferenceVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReferenceVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ReferenceVector self, unsigned int index)"""
        return _COPASI.ReferenceVector_remove(self, index)


    def get(self, index):
        """get(ReferenceVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ReferenceVector self, CReference DISOWN) -> bool"""
        return _COPASI.ReferenceVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ReferenceVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ReferenceVector self) -> size_t"""
        return _COPASI.ReferenceVector___len__(self)

ReferenceVector_swigregister = _COPASI.ReferenceVector_swigregister
ReferenceVector_swigregister(ReferenceVector)

class ModificationVector(CDataContainer):
    """Proxy of C++ CDataVector<(CModification)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModificationVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModificationVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModificationVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ModificationVector self)"""
        return _COPASI.ModificationVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ModificationVector self, CModification src) -> bool"""
        return _COPASI.ModificationVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ModificationVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModificationVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ModificationVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModificationVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ModificationVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModificationVector_getObject(self, name)


    def size(self):
        """size(ModificationVector self) -> size_t"""
        return _COPASI.ModificationVector_size(self)


    def empty(self):
        """empty(ModificationVector self) -> bool"""
        return _COPASI.ModificationVector_empty(self)


    def clear(self):
        """clear(ModificationVector self)"""
        return _COPASI.ModificationVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ModificationVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModificationVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ModificationVector self, unsigned int index)"""
        return _COPASI.ModificationVector_remove(self, index)


    def get(self, index):
        """get(ModificationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModificationVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ModificationVector self, CModification DISOWN) -> bool"""
        return _COPASI.ModificationVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ModificationVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModificationVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ModificationVector self) -> size_t"""
        return _COPASI.ModificationVector___len__(self)

ModificationVector_swigregister = _COPASI.ModificationVector_swigregister
ModificationVector_swigregister(ModificationVector)

class ObjectListTypeStdVector(_object):
    """Proxy of C++ std::vector<(CObjectLists::ListType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectListTypeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectListTypeStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ObjectListTypeStdVector self) -> SwigPyIterator"""
        return _COPASI.ObjectListTypeStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector___bool__(self)


    def __len__(self):
        """__len__(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j) -> ObjectListTypeStdVector"""
        return _COPASI.ObjectListTypeStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j)
        __setslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j, ObjectListTypeStdVector v)
        """
        return _COPASI.ObjectListTypeStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j)"""
        return _COPASI.ObjectListTypeStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i)
        __delitem__(ObjectListTypeStdVector self, PySliceObject * slice)
        """
        return _COPASI.ObjectListTypeStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(ObjectListTypeStdVector self, PySliceObject * slice) -> ObjectListTypeStdVector
        __getitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i) -> std::vector< enum CObjectLists::ListType >::value_type const &
        """
        return _COPASI.ObjectListTypeStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(ObjectListTypeStdVector self, PySliceObject * slice, ObjectListTypeStdVector v)
        __setitem__(ObjectListTypeStdVector self, PySliceObject * slice)
        __setitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector___setitem__(self, *args)


    def pop(self):
        """pop(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type"""
        return _COPASI.ObjectListTypeStdVector_pop(self)


    def append(self, x):
        """append(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_append(self, x)


    def empty(self):
        """empty(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector_empty(self)


    def size(self):
        """size(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector_size(self)


    def swap(self, v):
        """swap(ObjectListTypeStdVector self, ObjectListTypeStdVector v)"""
        return _COPASI.ObjectListTypeStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::reverse_iterator"""
        return _COPASI.ObjectListTypeStdVector_rbegin(self)


    def rend(self):
        """rend(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::reverse_iterator"""
        return _COPASI.ObjectListTypeStdVector_rend(self)


    def clear(self):
        """clear(ObjectListTypeStdVector self)"""
        return _COPASI.ObjectListTypeStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::allocator_type"""
        return _COPASI.ObjectListTypeStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(ObjectListTypeStdVector self)"""
        return _COPASI.ObjectListTypeStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos) -> std::vector< enum CObjectLists::ListType >::iterator
        erase(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator first, std::vector< enum CObjectLists::ListType >::iterator last) -> std::vector< enum CObjectLists::ListType >::iterator
        """
        return _COPASI.ObjectListTypeStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CObjectLists::ListType)> self) -> ObjectListTypeStdVector
        __init__(std::vector<(CObjectLists::ListType)> self, ObjectListTypeStdVector arg2) -> ObjectListTypeStdVector
        __init__(std::vector<(CObjectLists::ListType)> self, std::vector< enum CObjectLists::ListType >::size_type size) -> ObjectListTypeStdVector
        __init__(std::vector<(CObjectLists::ListType)> self, std::vector< enum CObjectLists::ListType >::size_type size, std::vector< enum CObjectLists::ListType >::value_type const & value) -> ObjectListTypeStdVector
        """
        this = _COPASI.new_ObjectListTypeStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_push_back(self, x)


    def front(self):
        """front(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type const &"""
        return _COPASI.ObjectListTypeStdVector_front(self)


    def back(self):
        """back(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type const &"""
        return _COPASI.ObjectListTypeStdVector_back(self)


    def assign(self, n, x):
        """assign(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type n, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type new_size)
        resize(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type new_size, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos, std::vector< enum CObjectLists::ListType >::value_type const & x) -> std::vector< enum CObjectLists::ListType >::iterator
        insert(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos, std::vector< enum CObjectLists::ListType >::size_type n, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type n)"""
        return _COPASI.ObjectListTypeStdVector_reserve(self, n)


    def capacity(self):
        """capacity(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_ObjectListTypeStdVector
    __del__ = lambda self: None
ObjectListTypeStdVector_swigregister = _COPASI.ObjectListTypeStdVector_swigregister
ObjectListTypeStdVector_swigregister(ObjectListTypeStdVector)

class CVersion(_object):
    """Proxy of C++ CVersion class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CVersion, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CVersion self) -> CVersion"""
        this = _COPASI.new_CVersion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CVersion
    __del__ = lambda self: None

    def getVersionMajor(self):
        """getVersionMajor(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionMajor(self)


    def getVersionMinor(self):
        """getVersionMinor(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionMinor(self)


    def getVersionDevel(self):
        """getVersionDevel(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionDevel(self)


    def isSourceModified(self):
        """isSourceModified(CVersion self) -> bool const &"""
        return _COPASI.CVersion_isSourceModified(self)


    def getVersion(self):
        """getVersion(CVersion self) -> std::string const &"""
        return _COPASI.CVersion_getVersion(self)


    def setVersion(self, *args):
        """
        setVersion(CVersion self, int const & major, int const & minor, int const & devel, bool const & sourcesModified, std::string const & comment, std::string const & creator)
        setVersion(CVersion self, int const & major, int const & minor, int const & devel, bool const & sourcesModified, std::string const & comment)
        setVersion(CVersion self, int const & major, int const & minor, int const & devel, bool const & sourcesModified)
        setVersion(CVersion self, std::string const & version) -> CVersion
        """
        return _COPASI.CVersion_setVersion(self, *args)


    def isCompatible(self, version):
        """isCompatible(CVersion self, CVersion version) -> bool"""
        return _COPASI.CVersion_isCompatible(self, version)


    def __gt__(self, other):
        """__gt__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___gt__(self, other)


    def __lt__(self, other):
        """__lt__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___lt__(self, other)


    def __ge__(self, other):
        """__ge__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___ge__(self, other)


    def __le__(self, other):
        """__le__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___le__(self, other)


    def __eq__(self, other):
        """__eq__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___eq__(self, other)


    def __ne__(self, other):
        """__ne__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___ne__(self, other)


    def mayBeUpdated(self):
        """mayBeUpdated(CVersion self) -> bool"""
        return _COPASI.CVersion_mayBeUpdated(self)


    __metaclass__ = AutoProperty

CVersion_swigregister = _COPASI.CVersion_swigregister
CVersion_swigregister(CVersion)
CVersion.VERSION = _COPASI.cvar.CVersion_VERSION

class CCopasiMethod(CCopasiParameterGroup):
    """Proxy of C++ CCopasiMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiMethod, name)
    __repr__ = _swig_repr

    def createMethod(pParent, methodType, taskType):
        """createMethod(CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CCopasiMethod"""
        return _COPASI.CCopasiMethod_createMethod(pParent, methodType, taskType)

    createMethod = staticmethod(createMethod)

    def __init__(self, src, pParent):
        """__init__(CCopasiMethod self, CCopasiMethod src, CDataContainer pParent) -> CCopasiMethod"""
        this = _COPASI.new_CCopasiMethod(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiMethod
    __del__ = lambda self: None

    def setMathContainer(self, pContainer):
        """setMathContainer(CCopasiMethod self, CMathContainer pContainer)"""
        return _COPASI.CCopasiMethod_setMathContainer(self, pContainer)


    def getMathContainer(self):
        """getMathContainer(CCopasiMethod self) -> CMathContainer"""
        return _COPASI.CCopasiMethod_getMathContainer(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CCopasiMethod self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CCopasiMethod_setCallBack(self, pCallBack)


    def getCallBack(self):
        """getCallBack(CCopasiMethod self) -> CProcessReport"""
        return _COPASI.CCopasiMethod_getCallBack(self)


    def clearCallBack(self):
        """clearCallBack(CCopasiMethod self)"""
        return _COPASI.CCopasiMethod_clearCallBack(self)


    def getType(self):
        """getType(CCopasiMethod self) -> CTaskEnum::Task const &"""
        return _COPASI.CCopasiMethod_getType(self)


    def getSubType(self):
        """getSubType(CCopasiMethod self) -> CTaskEnum::Method const &"""
        return _COPASI.CCopasiMethod_getSubType(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CCopasiMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CCopasiMethod_isValidProblem(self, pProblem)


    def getSubTypeName(subType):
        """getSubTypeName(int const & subType) -> std::string"""
        return _COPASI.CCopasiMethod_getSubTypeName(subType)

    getSubTypeName = staticmethod(getSubTypeName)

    def TypeNameToEnum(typeName):
        """TypeNameToEnum(std::string const & typeName) -> int"""
        return _COPASI.CCopasiMethod_TypeNameToEnum(typeName)

    TypeNameToEnum = staticmethod(TypeNameToEnum)
CCopasiMethod_swigregister = _COPASI.CCopasiMethod_swigregister
CCopasiMethod_swigregister(CCopasiMethod)

def CCopasiMethod_createMethod(pParent, methodType, taskType):
    """CCopasiMethod_createMethod(CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CCopasiMethod"""
    return _COPASI.CCopasiMethod_createMethod(pParent, methodType, taskType)

def CCopasiMethod_getSubTypeName(subType):
    """CCopasiMethod_getSubTypeName(int const & subType) -> std::string"""
    return _COPASI.CCopasiMethod_getSubTypeName(subType)

def CCopasiMethod_TypeNameToEnum(typeName):
    """CCopasiMethod_TypeNameToEnum(std::string const & typeName) -> int"""
    return _COPASI.CCopasiMethod_TypeNameToEnum(typeName)

class CTaskEnum(_object):
    """Proxy of C++ CTaskEnum class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTaskEnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTaskEnum, name)
    __repr__ = _swig_repr
    Task_steadyState = _COPASI.CTaskEnum_Task_steadyState
    Task_timeCourse = _COPASI.CTaskEnum_Task_timeCourse
    Task_scan = _COPASI.CTaskEnum_Task_scan
    Task_fluxMode = _COPASI.CTaskEnum_Task_fluxMode
    Task_optimization = _COPASI.CTaskEnum_Task_optimization
    Task_parameterFitting = _COPASI.CTaskEnum_Task_parameterFitting
    Task_mca = _COPASI.CTaskEnum_Task_mca
    Task_lyap = _COPASI.CTaskEnum_Task_lyap
    Task_tssAnalysis = _COPASI.CTaskEnum_Task_tssAnalysis
    Task_sens = _COPASI.CTaskEnum_Task_sens
    Task_moieties = _COPASI.CTaskEnum_Task_moieties
    Task_crosssection = _COPASI.CTaskEnum_Task_crosssection
    Task_lna = _COPASI.CTaskEnum_Task_lna
    Task_analytics = _COPASI.CTaskEnum_Task_analytics
    Task_timeSens = _COPASI.CTaskEnum_Task_timeSens
    Task_UnsetTask = _COPASI.CTaskEnum_Task_UnsetTask
    Task___SIZE = _COPASI.CTaskEnum_Task___SIZE
    Method_UnsetMethod = _COPASI.CTaskEnum_Method_UnsetMethod
    Method_RandomSearch = _COPASI.CTaskEnum_Method_RandomSearch
    Method_RandomSearchMaster = _COPASI.CTaskEnum_Method_RandomSearchMaster
    Method_SimulatedAnnealing = _COPASI.CTaskEnum_Method_SimulatedAnnealing
    Method_CoranaWalk = _COPASI.CTaskEnum_Method_CoranaWalk
    Method_DifferentialEvolution = _COPASI.CTaskEnum_Method_DifferentialEvolution
    Method_ScatterSearch = _COPASI.CTaskEnum_Method_ScatterSearch
    Method_GeneticAlgorithm = _COPASI.CTaskEnum_Method_GeneticAlgorithm
    Method_EvolutionaryProgram = _COPASI.CTaskEnum_Method_EvolutionaryProgram
    Method_SteepestDescent = _COPASI.CTaskEnum_Method_SteepestDescent
    Method_HybridGASA = _COPASI.CTaskEnum_Method_HybridGASA
    Method_GeneticAlgorithmSR = _COPASI.CTaskEnum_Method_GeneticAlgorithmSR
    Method_HookeJeeves = _COPASI.CTaskEnum_Method_HookeJeeves
    Method_LevenbergMarquardt = _COPASI.CTaskEnum_Method_LevenbergMarquardt
    Method_NL2SOL = _COPASI.CTaskEnum_Method_NL2SOL
    Method_NelderMead = _COPASI.CTaskEnum_Method_NelderMead
    Method_SRES = _COPASI.CTaskEnum_Method_SRES
    Method_Statistics = _COPASI.CTaskEnum_Method_Statistics
    Method_ParticleSwarm = _COPASI.CTaskEnum_Method_ParticleSwarm
    Method_Praxis = _COPASI.CTaskEnum_Method_Praxis
    Method_TruncatedNewton = _COPASI.CTaskEnum_Method_TruncatedNewton
    Method_Newton = _COPASI.CTaskEnum_Method_Newton
    Method_deterministic = _COPASI.CTaskEnum_Method_deterministic
    Method_RADAU5 = _COPASI.CTaskEnum_Method_RADAU5
    Method_LSODA2 = _COPASI.CTaskEnum_Method_LSODA2
    Method_directMethod = _COPASI.CTaskEnum_Method_directMethod
    Method_stochastic = _COPASI.CTaskEnum_Method_stochastic
    Method_tauLeap = _COPASI.CTaskEnum_Method_tauLeap
    Method_adaptiveSA = _COPASI.CTaskEnum_Method_adaptiveSA
    Method_hybrid = _COPASI.CTaskEnum_Method_hybrid
    Method_hybridLSODA = _COPASI.CTaskEnum_Method_hybridLSODA
    Method_hybridODE45 = _COPASI.CTaskEnum_Method_hybridODE45
    Method_DsaLsodar = _COPASI.CTaskEnum_Method_DsaLsodar
    Method_stochasticRunkeKuttaRI5 = _COPASI.CTaskEnum_Method_stochasticRunkeKuttaRI5
    Method_tssILDM = _COPASI.CTaskEnum_Method_tssILDM
    Method_tssILDMModified = _COPASI.CTaskEnum_Method_tssILDMModified
    Method_tssCSP = _COPASI.CTaskEnum_Method_tssCSP
    Method_mcaMethodReder = _COPASI.CTaskEnum_Method_mcaMethodReder
    Method_scanMethod = _COPASI.CTaskEnum_Method_scanMethod
    Method_lyapWolf = _COPASI.CTaskEnum_Method_lyapWolf
    Method_sensMethod = _COPASI.CTaskEnum_Method_sensMethod
    Method_EFMAlgorithm = _COPASI.CTaskEnum_Method_EFMAlgorithm
    Method_EFMBitPatternTreeAlgorithm = _COPASI.CTaskEnum_Method_EFMBitPatternTreeAlgorithm
    Method_EFMBitPatternAlgorithm = _COPASI.CTaskEnum_Method_EFMBitPatternAlgorithm
    Method_Householder = _COPASI.CTaskEnum_Method_Householder
    Method_crossSectionMethod = _COPASI.CTaskEnum_Method_crossSectionMethod
    Method_linearNoiseApproximation = _COPASI.CTaskEnum_Method_linearNoiseApproximation
    Method_analyticsMethod = _COPASI.CTaskEnum_Method_analyticsMethod
    Method_timeSensLsoda = _COPASI.CTaskEnum_Method_timeSensLsoda
    Method___SIZE = _COPASI.CTaskEnum_Method___SIZE

    def __init__(self):
        """__init__(CTaskEnum self) -> CTaskEnum"""
        this = _COPASI.new_CTaskEnum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTaskEnum
    __del__ = lambda self: None
CTaskEnum_swigregister = _COPASI.CTaskEnum_swigregister
CTaskEnum_swigregister(CTaskEnum)
CTaskEnum.TaskName = _COPASI.cvar.CTaskEnum_TaskName

class CCopasiProblem(CCopasiParameterGroup):
    """Proxy of C++ CCopasiProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiProblem, name)
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        """__init__(CCopasiProblem self, CCopasiProblem src, CDataContainer pParent) -> CCopasiProblem"""
        this = _COPASI.new_CCopasiProblem(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiProblem
    __del__ = lambda self: None

    def getType(self):
        """getType(CCopasiProblem self) -> CTaskEnum::Task const &"""
        return _COPASI.CCopasiProblem_getType(self)


    def setMathContainer(self, pContainer):
        """setMathContainer(CCopasiProblem self, CMathContainer pContainer)"""
        return _COPASI.CCopasiProblem_setMathContainer(self, pContainer)


    def getMathContainer(self):
        """getMathContainer(CCopasiProblem self) -> CMathContainer"""
        return _COPASI.CCopasiProblem_getMathContainer(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CCopasiProblem self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CCopasiProblem_setCallBack(self, pCallBack)


    def getCallBack(self):
        """getCallBack(CCopasiProblem self) -> CProcessReport"""
        return _COPASI.CCopasiProblem_getCallBack(self)


    def clearCallBack(self):
        """clearCallBack(CCopasiProblem self)"""
        return _COPASI.CCopasiProblem_clearCallBack(self)


    def setModel(self, model):
        """setModel(CCopasiProblem self, CModel model) -> bool"""
        return _COPASI.CCopasiProblem_setModel(self, model)

CCopasiProblem_swigregister = _COPASI.CCopasiProblem_swigregister
CCopasiProblem_swigregister(CCopasiProblem)

class COutputInterface(_object):
    """Proxy of C++ COutputInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COutputInterface, name)
    __repr__ = _swig_repr
    BEFORE = _COPASI.COutputInterface_BEFORE
    DURING = _COPASI.COutputInterface_DURING
    AFTER = _COPASI.COutputInterface_AFTER
    MONITORING = _COPASI.COutputInterface_MONITORING

    def __init__(self, *args):
        """
        __init__(COutputInterface self) -> COutputInterface
        __init__(COutputInterface self, COutputInterface src) -> COutputInterface
        """
        this = _COPASI.new_COutputInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COutputInterface
    __del__ = lambda self: None

    def compile(self, arg2):
        """compile(COutputInterface self, ContainerList arg2) -> bool"""
        return _COPASI.COutputInterface_compile(self, arg2)


    def output(self, arg2):
        """output(COutputInterface self, COutputInterface::Activity const & arg2)"""
        return _COPASI.COutputInterface_output(self, arg2)


    def separate(self, arg2):
        """separate(COutputInterface self, COutputInterface::Activity const & arg2)"""
        return _COPASI.COutputInterface_separate(self, arg2)


    def finish(self):
        """finish(COutputInterface self)"""
        return _COPASI.COutputInterface_finish(self)


    def close(self):
        """close(COutputInterface self)"""
        return _COPASI.COutputInterface_close(self)


    __metaclass__ = AutoProperty

COutputInterface_swigregister = _COPASI.COutputInterface_swigregister
COutputInterface_swigregister(COutputInterface)

class COutputHandler(COutputInterface):
    """Proxy of C++ COutputHandler class."""

    __swig_setmethods__ = {}
    for _s in [COutputInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COutputHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COutputHandler self) -> COutputHandler
        __init__(COutputHandler self, COutputHandler src) -> COutputHandler
        """
        this = _COPASI.new_COutputHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COutputHandler
    __del__ = lambda self: None

    def compile(self, listOfContainer):
        """compile(COutputHandler self, ContainerList listOfContainer) -> bool"""
        return _COPASI.COutputHandler_compile(self, listOfContainer)


    def output(self, activity):
        """output(COutputHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.COutputHandler_output(self, activity)


    def separate(self, activity):
        """separate(COutputHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.COutputHandler_separate(self, activity)


    def finish(self):
        """finish(COutputHandler self)"""
        return _COPASI.COutputHandler_finish(self)


    def addInterface(self, pInterface):
        """addInterface(COutputHandler self, COutputInterface pInterface)"""
        return _COPASI.COutputHandler_addInterface(self, pInterface)


    def removeInterface(self, pInterface):
        """removeInterface(COutputHandler self, COutputInterface pInterface)"""
        return _COPASI.COutputHandler_removeInterface(self, pInterface)


    def setMaster(self, pMaster):
        """setMaster(COutputHandler self, COutputHandler pMaster)"""
        return _COPASI.COutputHandler_setMaster(self, pMaster)


    def isMaster(self):
        """isMaster(COutputHandler self) -> bool"""
        return _COPASI.COutputHandler_isMaster(self)

COutputHandler_swigregister = _COPASI.COutputHandler_swigregister
COutputHandler_swigregister(COutputHandler)

class CReport(COutputInterface):
    """Proxy of C++ CReport class."""

    __swig_setmethods__ = {}
    for _s in [COutputInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReport, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReport, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CReport self) -> CReport
        __init__(CReport self, CReport src) -> CReport
        """
        this = _COPASI.new_CReport(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cleanup(self):
        """cleanup(CReport self)"""
        return _COPASI.CReport_cleanup(self)

    __swig_destroy__ = _COPASI.delete_CReport
    __del__ = lambda self: None

    def compile(self, listOfContainer):
        """compile(CReport self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CReport_compile(self, listOfContainer)


    def output(self, activity):
        """output(CReport self, COutputInterface::Activity const & activity)"""
        return _COPASI.CReport_output(self, activity)


    def separate(self, arg2):
        """separate(CReport self, COutputInterface::Activity const & arg2)"""
        return _COPASI.CReport_separate(self, arg2)


    def finish(self):
        """finish(CReport self)"""
        return _COPASI.CReport_finish(self)


    def close(self):
        """close(CReport self)"""
        return _COPASI.CReport_close(self)


    def getReportDefinition(self):
        """getReportDefinition(CReport self) -> CReportDefinition"""
        return _COPASI.CReport_getReportDefinition(self)


    def setReportDefinition(self, reportDef):
        """setReportDefinition(CReport self, CReportDefinition reportDef)"""
        return _COPASI.CReport_setReportDefinition(self, reportDef)


    def getTarget(self):
        """getTarget(CReport self) -> std::string const &"""
        return _COPASI.CReport_getTarget(self)


    def setTarget(self, target):
        """setTarget(CReport self, std::string const & target)"""
        return _COPASI.CReport_setTarget(self, target)


    def getAppend(self):
        """getAppend(CReport self) -> bool const &"""
        return _COPASI.CReport_getAppend(self)


    def setAppend(self, append):
        """setAppend(CReport self, bool const & append)"""
        return _COPASI.CReport_setAppend(self, append)


    def confirmOverwrite(self):
        """confirmOverwrite(CReport self) -> bool const &"""
        return _COPASI.CReport_confirmOverwrite(self)


    def setConfirmOverwrite(self, confirmOverwrite):
        """setConfirmOverwrite(CReport self, bool const & confirmOverwrite)"""
        return _COPASI.CReport_setConfirmOverwrite(self, confirmOverwrite)

CReport_swigregister = _COPASI.CReport_swigregister
CReport_swigregister(CReport)

class TaskSubTypeVector(_object):
    """Proxy of C++ std::vector<(CTaskEnum::Task)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSubTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSubTypeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(TaskSubTypeVector self) -> SwigPyIterator"""
        return _COPASI.TaskSubTypeVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector___nonzero__(self)


    def __bool__(self):
        """__bool__(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector___bool__(self)


    def __len__(self):
        """__len__(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j) -> TaskSubTypeVector"""
        return _COPASI.TaskSubTypeVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j)
        __setslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j, TaskSubTypeVector v)
        """
        return _COPASI.TaskSubTypeVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j)"""
        return _COPASI.TaskSubTypeVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i)
        __delitem__(TaskSubTypeVector self, PySliceObject * slice)
        """
        return _COPASI.TaskSubTypeVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(TaskSubTypeVector self, PySliceObject * slice) -> TaskSubTypeVector
        __getitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i) -> std::vector< enum CTaskEnum::Task >::value_type const &
        """
        return _COPASI.TaskSubTypeVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(TaskSubTypeVector self, PySliceObject * slice, TaskSubTypeVector v)
        __setitem__(TaskSubTypeVector self, PySliceObject * slice)
        __setitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector___setitem__(self, *args)


    def pop(self):
        """pop(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type"""
        return _COPASI.TaskSubTypeVector_pop(self)


    def append(self, x):
        """append(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_append(self, x)


    def empty(self):
        """empty(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector_empty(self)


    def size(self):
        """size(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector_size(self)


    def swap(self, v):
        """swap(TaskSubTypeVector self, TaskSubTypeVector v)"""
        return _COPASI.TaskSubTypeVector_swap(self, v)


    def rbegin(self):
        """rbegin(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::reverse_iterator"""
        return _COPASI.TaskSubTypeVector_rbegin(self)


    def rend(self):
        """rend(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::reverse_iterator"""
        return _COPASI.TaskSubTypeVector_rend(self)


    def clear(self):
        """clear(TaskSubTypeVector self)"""
        return _COPASI.TaskSubTypeVector_clear(self)


    def get_allocator(self):
        """get_allocator(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::allocator_type"""
        return _COPASI.TaskSubTypeVector_get_allocator(self)


    def pop_back(self):
        """pop_back(TaskSubTypeVector self)"""
        return _COPASI.TaskSubTypeVector_pop_back(self)


    def erase(self, *args):
        """
        erase(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos) -> std::vector< enum CTaskEnum::Task >::iterator
        erase(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator first, std::vector< enum CTaskEnum::Task >::iterator last) -> std::vector< enum CTaskEnum::Task >::iterator
        """
        return _COPASI.TaskSubTypeVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CTaskEnum::Task)> self) -> TaskSubTypeVector
        __init__(std::vector<(CTaskEnum::Task)> self, TaskSubTypeVector arg2) -> TaskSubTypeVector
        __init__(std::vector<(CTaskEnum::Task)> self, std::vector< enum CTaskEnum::Task >::size_type size) -> TaskSubTypeVector
        __init__(std::vector<(CTaskEnum::Task)> self, std::vector< enum CTaskEnum::Task >::size_type size, std::vector< enum CTaskEnum::Task >::value_type const & value) -> TaskSubTypeVector
        """
        this = _COPASI.new_TaskSubTypeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_push_back(self, x)


    def front(self):
        """front(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type const &"""
        return _COPASI.TaskSubTypeVector_front(self)


    def back(self):
        """back(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type const &"""
        return _COPASI.TaskSubTypeVector_back(self)


    def assign(self, n, x):
        """assign(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type n, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type new_size)
        resize(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type new_size, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos, std::vector< enum CTaskEnum::Task >::value_type const & x) -> std::vector< enum CTaskEnum::Task >::iterator
        insert(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos, std::vector< enum CTaskEnum::Task >::size_type n, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector_insert(self, *args)


    def reserve(self, n):
        """reserve(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type n)"""
        return _COPASI.TaskSubTypeVector_reserve(self, n)


    def capacity(self):
        """capacity(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_TaskSubTypeVector
    __del__ = lambda self: None
TaskSubTypeVector_swigregister = _COPASI.TaskSubTypeVector_swigregister
TaskSubTypeVector_swigregister(TaskSubTypeVector)

class MethodSubTypeVector(_object):
    """Proxy of C++ std::vector<(CTaskEnum::Method)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodSubTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodSubTypeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(MethodSubTypeVector self) -> SwigPyIterator"""
        return _COPASI.MethodSubTypeVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector___nonzero__(self)


    def __bool__(self):
        """__bool__(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector___bool__(self)


    def __len__(self):
        """__len__(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j) -> MethodSubTypeVector"""
        return _COPASI.MethodSubTypeVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j)
        __setslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j, MethodSubTypeVector v)
        """
        return _COPASI.MethodSubTypeVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j)"""
        return _COPASI.MethodSubTypeVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i)
        __delitem__(MethodSubTypeVector self, PySliceObject * slice)
        """
        return _COPASI.MethodSubTypeVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(MethodSubTypeVector self, PySliceObject * slice) -> MethodSubTypeVector
        __getitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i) -> std::vector< enum CTaskEnum::Method >::value_type const &
        """
        return _COPASI.MethodSubTypeVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(MethodSubTypeVector self, PySliceObject * slice, MethodSubTypeVector v)
        __setitem__(MethodSubTypeVector self, PySliceObject * slice)
        __setitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector___setitem__(self, *args)


    def pop(self):
        """pop(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type"""
        return _COPASI.MethodSubTypeVector_pop(self)


    def append(self, x):
        """append(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_append(self, x)


    def empty(self):
        """empty(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector_empty(self)


    def size(self):
        """size(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector_size(self)


    def swap(self, v):
        """swap(MethodSubTypeVector self, MethodSubTypeVector v)"""
        return _COPASI.MethodSubTypeVector_swap(self, v)


    def rbegin(self):
        """rbegin(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::reverse_iterator"""
        return _COPASI.MethodSubTypeVector_rbegin(self)


    def rend(self):
        """rend(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::reverse_iterator"""
        return _COPASI.MethodSubTypeVector_rend(self)


    def clear(self):
        """clear(MethodSubTypeVector self)"""
        return _COPASI.MethodSubTypeVector_clear(self)


    def get_allocator(self):
        """get_allocator(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::allocator_type"""
        return _COPASI.MethodSubTypeVector_get_allocator(self)


    def pop_back(self):
        """pop_back(MethodSubTypeVector self)"""
        return _COPASI.MethodSubTypeVector_pop_back(self)


    def erase(self, *args):
        """
        erase(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos) -> std::vector< enum CTaskEnum::Method >::iterator
        erase(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator first, std::vector< enum CTaskEnum::Method >::iterator last) -> std::vector< enum CTaskEnum::Method >::iterator
        """
        return _COPASI.MethodSubTypeVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CTaskEnum::Method)> self) -> MethodSubTypeVector
        __init__(std::vector<(CTaskEnum::Method)> self, MethodSubTypeVector arg2) -> MethodSubTypeVector
        __init__(std::vector<(CTaskEnum::Method)> self, std::vector< enum CTaskEnum::Method >::size_type size) -> MethodSubTypeVector
        __init__(std::vector<(CTaskEnum::Method)> self, std::vector< enum CTaskEnum::Method >::size_type size, std::vector< enum CTaskEnum::Method >::value_type const & value) -> MethodSubTypeVector
        """
        this = _COPASI.new_MethodSubTypeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_push_back(self, x)


    def front(self):
        """front(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type const &"""
        return _COPASI.MethodSubTypeVector_front(self)


    def back(self):
        """back(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type const &"""
        return _COPASI.MethodSubTypeVector_back(self)


    def assign(self, n, x):
        """assign(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type n, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type new_size)
        resize(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type new_size, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos, std::vector< enum CTaskEnum::Method >::value_type const & x) -> std::vector< enum CTaskEnum::Method >::iterator
        insert(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos, std::vector< enum CTaskEnum::Method >::size_type n, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector_insert(self, *args)


    def reserve(self, n):
        """reserve(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type n)"""
        return _COPASI.MethodSubTypeVector_reserve(self, n)


    def capacity(self):
        """capacity(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_MethodSubTypeVector
    __del__ = lambda self: None
MethodSubTypeVector_swigregister = _COPASI.MethodSubTypeVector_swigregister
MethodSubTypeVector_swigregister(MethodSubTypeVector)

class CCopasiTask(CDataContainer):
    """Proxy of C++ CCopasiTask class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCopasiTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCopasiTask, name)
    __repr__ = _swig_repr
    INITIALIZE = _COPASI.CCopasiTask_INITIALIZE
    STREAM = _COPASI.CCopasiTask_STREAM
    FINISH = _COPASI.CCopasiTask_FINISH
    REPORT = _COPASI.CCopasiTask_REPORT
    PLOT = _COPASI.CCopasiTask_PLOT
    TIME_SERIES = _COPASI.CCopasiTask_TIME_SERIES
    NO_OUTPUT = _COPASI.CCopasiTask_NO_OUTPUT
    OUTPUT_BEFORE = _COPASI.CCopasiTask_OUTPUT_BEFORE
    OUTPUT_DURING = _COPASI.CCopasiTask_OUTPUT_DURING
    OUTPUT_AFTER = _COPASI.CCopasiTask_OUTPUT_AFTER
    OUTPUT = _COPASI.CCopasiTask_OUTPUT
    OUTPUT_SE = _COPASI.CCopasiTask_OUTPUT_SE
    OUTPUT_UI = _COPASI.CCopasiTask_OUTPUT_UI
    ONLY_TIME_SERIES = _COPASI.CCopasiTask_ONLY_TIME_SERIES

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CCopasiTask"""
        return _COPASI.CCopasiTask_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CCopasiTask self, CDataContainer pParent, CTaskEnum::Task const & taskType, std::string const & type) -> CCopasiTask
        __init__(CCopasiTask self, CDataContainer pParent, CTaskEnum::Task const & taskType) -> CCopasiTask
        __init__(CCopasiTask self, CCopasiTask src, CDataContainer pParent) -> CCopasiTask
        """
        this = _COPASI.new_CCopasiTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCopasiTask
    __del__ = lambda self: None

    def getType(self):
        """getType(CCopasiTask self) -> CTaskEnum::Task"""
        return _COPASI.CCopasiTask_getType(self)


    def setType(self, type):
        """setType(CCopasiTask self, CTaskEnum::Task const & type)"""
        return _COPASI.CCopasiTask_setType(self, type)


    def getKey(self):
        """getKey(CCopasiTask self) -> std::string const &"""
        return _COPASI.CCopasiTask_getKey(self)


    def setScheduled(self, scheduled):
        """setScheduled(CCopasiTask self, bool const & scheduled)"""
        return _COPASI.CCopasiTask_setScheduled(self, scheduled)


    def isScheduled(self):
        """isScheduled(CCopasiTask self) -> bool const &"""
        return _COPASI.CCopasiTask_isScheduled(self)


    def setUpdateModel(self, updateModel):
        """setUpdateModel(CCopasiTask self, bool const & updateModel)"""
        return _COPASI.CCopasiTask_setUpdateModel(self, updateModel)


    def isUpdateModel(self):
        """isUpdateModel(CCopasiTask self) -> bool const &"""
        return _COPASI.CCopasiTask_isUpdateModel(self)


    def setIgnoreProblemData(self, ignoreProblemData):
        """setIgnoreProblemData(CCopasiTask self, bool const & ignoreProblemData)"""
        return _COPASI.CCopasiTask_setIgnoreProblemData(self, ignoreProblemData)


    def setMathContainer(self, pContainer):
        """setMathContainer(CCopasiTask self, CMathContainer pContainer)"""
        return _COPASI.CCopasiTask_setMathContainer(self, pContainer)


    def getMathContainer(self):
        """getMathContainer(CCopasiTask self) -> CMathContainer"""
        return _COPASI.CCopasiTask_getMathContainer(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CCopasiTask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CCopasiTask_setCallBack(self, pCallBack)


    def getCallBack(self):
        """getCallBack(CCopasiTask self) -> CProcessReport"""
        return _COPASI.CCopasiTask_getCallBack(self)


    def clearCallBack(self):
        """clearCallBack(CCopasiTask self)"""
        return _COPASI.CCopasiTask_clearCallBack(self)


    def updateMatrices(self):
        """updateMatrices(CCopasiTask self) -> bool"""
        return _COPASI.CCopasiTask_updateMatrices(self)


    def restore(self):
        """restore(CCopasiTask self) -> bool"""
        return _COPASI.CCopasiTask_restore(self)


    def getProblem(self, *args):
        """
        getProblem(CCopasiTask self) -> CCopasiProblem
        getProblem(CCopasiTask self) -> CCopasiProblem
        """
        return _COPASI.CCopasiTask_getProblem(self, *args)


    def setMethodType(self, type):
        """setMethodType(CCopasiTask self, CTaskEnum::Method const & type) -> bool"""
        return _COPASI.CCopasiTask_setMethodType(self, type)


    def createMethod(self, type):
        """createMethod(CCopasiTask self, CTaskEnum::Method const & type) -> CCopasiMethod"""
        return _COPASI.CCopasiTask_createMethod(self, type)


    def getMethod(self, *args):
        """
        getMethod(CCopasiTask self) -> CCopasiMethod
        getMethod(CCopasiTask self) -> CCopasiMethod
        """
        return _COPASI.CCopasiTask_getMethod(self, *args)


    def getReport(self):
        """getReport(CCopasiTask self) -> CReport"""
        return _COPASI.CCopasiTask_getReport(self)


    def cleanup(self):
        """cleanup(CCopasiTask self)"""
        return _COPASI.CCopasiTask_cleanup(self)


    def getSliders(self):
        """getSliders(CCopasiTask self) -> CCopasiParameterGroup"""
        return _COPASI.CCopasiTask_getSliders(self)


    def output(self, activity):
        """output(CCopasiTask self, COutputInterface::Activity const & activity)"""
        return _COPASI.CCopasiTask_output(self, activity)


    def separate(self, activity):
        """separate(CCopasiTask self, COutputInterface::Activity const & activity)"""
        return _COPASI.CCopasiTask_separate(self, activity)


    def getOutputMode(self):
        """getOutputMode(CCopasiTask self) -> CCopasiTask::OutputFlag const &"""
        return _COPASI.CCopasiTask_getOutputMode(self)


    def getOutputHandler(self):
        """getOutputHandler(CCopasiTask self) -> COutputHandler"""
        return _COPASI.CCopasiTask_getOutputHandler(self)


    def getValidMethods(self):
        """getValidMethods(CCopasiTask self) -> IntStdVector"""
        return _COPASI.CCopasiTask_getValidMethods(self)


    def getProcessError(self):
        """getProcessError(CCopasiTask self) -> std::string"""
        return _COPASI.CCopasiTask_getProcessError(self)


    def getProcessWarning(self):
        """getProcessWarning(CCopasiTask self) -> std::string"""
        return _COPASI.CCopasiTask_getProcessWarning(self)


    def initializeRaw(self, outputFlags):
        """initializeRaw(CCopasiTask self, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_initializeRaw(self, outputFlags)


    def initializeRawWithOutputHandler(self, outputFlags, pHandler):
        """initializeRawWithOutputHandler(CCopasiTask self, int outputFlags, COutputHandler pHandler) -> bool"""
        return _COPASI.CCopasiTask_initializeRawWithOutputHandler(self, outputFlags, pHandler)


    def initialize(self, outputFlags):
        """initialize(CCopasiTask self, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_initialize(self, outputFlags)


    def processRaw(self, useInitialValues):
        """processRaw(CCopasiTask self, bool useInitialValues) -> bool"""
        return _COPASI.CCopasiTask_processRaw(self, useInitialValues)


    def processWithOutputFlags(self, useInitialValues, outputFlags):
        """processWithOutputFlags(CCopasiTask self, bool useInitialValues, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_processWithOutputFlags(self, useInitialValues, outputFlags)


    def process(self, useInitialValues):
        """process(CCopasiTask self, bool useInitialValues) -> bool"""
        return _COPASI.CCopasiTask_process(self, useInitialValues)

CCopasiTask_swigregister = _COPASI.CCopasiTask_swigregister
CCopasiTask_swigregister(CCopasiTask)

def CCopasiTask_fromData(data, pParent):
    """CCopasiTask_fromData(CData data, CUndoObjectInterface pParent) -> CCopasiTask"""
    return _COPASI.CCopasiTask_fromData(data, pParent)

class CDataHandler(COutputHandler):
    """Proxy of C++ CDataHandler class."""

    __swig_setmethods__ = {}
    for _s in [COutputHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataHandler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataHandler self, bool separate=False) -> CDataHandler
        __init__(CDataHandler self) -> CDataHandler
        __init__(CDataHandler self, CDataHandler src) -> CDataHandler
        """
        this = _COPASI.new_CDataHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cleanup(self):
        """cleanup(CDataHandler self)"""
        return _COPASI.CDataHandler_cleanup(self)

    __swig_destroy__ = _COPASI.delete_CDataHandler
    __del__ = lambda self: None

    def addBeforeName(self, name):
        """addBeforeName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addBeforeName(self, name)


    def addDuringName(self, name):
        """addDuringName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addDuringName(self, name)


    def addAfterName(self, name):
        """addAfterName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addAfterName(self, name)


    def addName(self, name, activity):
        """addName(CDataHandler self, CRegisteredCommonName name, COutputInterface::Activity const & activity) -> bool"""
        return _COPASI.CDataHandler_addName(self, name, activity)


    def getNames(self, activity):
        """getNames(CDataHandler self, COutputInterface::Activity const & activity) -> ReportItemVector"""
        return _COPASI.CDataHandler_getNames(self, activity)


    def clearNames(self, activity):
        """clearNames(CDataHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.CDataHandler_clearNames(self, activity)


    def getBeforeData(self):
        """getBeforeData(CDataHandler self) -> FloatStdVector"""
        return _COPASI.CDataHandler_getBeforeData(self)


    def getDuringData(self):
        """getDuringData(CDataHandler self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &"""
        return _COPASI.CDataHandler_getDuringData(self)


    def getAfterData(self):
        """getAfterData(CDataHandler self) -> FloatStdVector"""
        return _COPASI.CDataHandler_getAfterData(self)


    def getSeparate(self):
        """getSeparate(CDataHandler self) -> bool"""
        return _COPASI.CDataHandler_getSeparate(self)


    def setSeparate(self, separate):
        """setSeparate(CDataHandler self, bool separate)"""
        return _COPASI.CDataHandler_setSeparate(self, separate)


    def compile(self, listOfContainer):
        """compile(CDataHandler self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CDataHandler_compile(self, listOfContainer)


    def output(self, activity):
        """output(CDataHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.CDataHandler_output(self, activity)


    def separate(self, arg2):
        """separate(CDataHandler self, COutputInterface::Activity const & arg2)"""
        return _COPASI.CDataHandler_separate(self, arg2)


    def finish(self):
        """finish(CDataHandler self)"""
        return _COPASI.CDataHandler_finish(self)


    def getNumRowsDuring(self):
        """getNumRowsDuring(CDataHandler self) -> int"""
        return _COPASI.CDataHandler_getNumRowsDuring(self)


    def getNthRow(self, index):
        """getNthRow(CDataHandler self, int index) -> FloatStdVector"""
        return _COPASI.CDataHandler_getNthRow(self, index)

CDataHandler_swigregister = _COPASI.CDataHandler_swigregister
CDataHandler_swigregister(CDataHandler)

class CPlotDataChannelSpec(CRegisteredCommonName):
    """Proxy of C++ CPlotDataChannelSpec class."""

    __swig_setmethods__ = {}
    for _s in [CRegisteredCommonName]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPlotDataChannelSpec, name, value)
    __swig_getmethods__ = {}
    for _s in [CRegisteredCommonName]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPlotDataChannelSpec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _COPASI.CPlotDataChannelSpec_min_set
    __swig_getmethods__["min"] = _COPASI.CPlotDataChannelSpec_min_get
    if _newclass:
        min = _swig_property(_COPASI.CPlotDataChannelSpec_min_get, _COPASI.CPlotDataChannelSpec_min_set)
    __swig_setmethods__["max"] = _COPASI.CPlotDataChannelSpec_max_set
    __swig_getmethods__["max"] = _COPASI.CPlotDataChannelSpec_max_get
    if _newclass:
        max = _swig_property(_COPASI.CPlotDataChannelSpec_max_get, _COPASI.CPlotDataChannelSpec_max_set)
    __swig_setmethods__["minAutoscale"] = _COPASI.CPlotDataChannelSpec_minAutoscale_set
    __swig_getmethods__["minAutoscale"] = _COPASI.CPlotDataChannelSpec_minAutoscale_get
    if _newclass:
        minAutoscale = _swig_property(_COPASI.CPlotDataChannelSpec_minAutoscale_get, _COPASI.CPlotDataChannelSpec_minAutoscale_set)
    __swig_setmethods__["maxAutoscale"] = _COPASI.CPlotDataChannelSpec_maxAutoscale_set
    __swig_getmethods__["maxAutoscale"] = _COPASI.CPlotDataChannelSpec_maxAutoscale_get
    if _newclass:
        maxAutoscale = _swig_property(_COPASI.CPlotDataChannelSpec_maxAutoscale_get, _COPASI.CPlotDataChannelSpec_maxAutoscale_set)

    def __init__(self, *args):
        """
        __init__(CPlotDataChannelSpec self) -> CPlotDataChannelSpec
        __init__(CPlotDataChannelSpec self, CCommonName obj) -> CPlotDataChannelSpec
        __init__(CPlotDataChannelSpec self, CCommonName obj, double minimum, double maximum) -> CPlotDataChannelSpec
        """
        this = _COPASI.new_CPlotDataChannelSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CPlotDataChannelSpec
    __del__ = lambda self: None
CPlotDataChannelSpec_swigregister = _COPASI.CPlotDataChannelSpec_swigregister
CPlotDataChannelSpec_swigregister(CPlotDataChannelSpec)

class CPlotItem(CCopasiParameterGroup):
    """Proxy of C++ CPlotItem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPlotItem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPlotItem, name)
    __repr__ = _swig_repr
    unset = _COPASI.CPlotItem_unset
    curve2d = _COPASI.CPlotItem_curve2d
    histoItem1d = _COPASI.CPlotItem_histoItem1d
    bandedGraph = _COPASI.CPlotItem_bandedGraph
    surface = _COPASI.CPlotItem_surface
    plot2d = _COPASI.CPlotItem_plot2d
    simWiz = _COPASI.CPlotItem_simWiz
    spectogram = _COPASI.CPlotItem_spectogram

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CPlotItem"""
        return _COPASI.CPlotItem_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CPlotItem self, std::string const & name, CDataContainer pParent, CPlotItem::Type const & type) -> CPlotItem
        __init__(CPlotItem self, std::string const & name, CDataContainer pParent) -> CPlotItem
        __init__(CPlotItem self, std::string const & name) -> CPlotItem
        __init__(CPlotItem self) -> CPlotItem
        __init__(CPlotItem self, CPlotItem src, CDataContainer pParent) -> CPlotItem
        """
        this = _COPASI.new_CPlotItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CPlotItem
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CPlotItem self)"""
        return _COPASI.CPlotItem_cleanup(self)


    def getType(self):
        """getType(CPlotItem self) -> CPlotItem::Type const &"""
        return _COPASI.CPlotItem_getType(self)


    def setType(self, type):
        """setType(CPlotItem self, CPlotItem::Type type)"""
        return _COPASI.CPlotItem_setType(self, type)


    def setActivity(self, activity):
        """setActivity(CPlotItem self, COutputInterface::Activity const & activity)"""
        return _COPASI.CPlotItem_setActivity(self, activity)


    def getActivity(self):
        """getActivity(CPlotItem self) -> COutputInterface::Activity const &"""
        return _COPASI.CPlotItem_getActivity(self)


    def getTitle(self):
        """getTitle(CPlotItem self) -> std::string const &"""
        return _COPASI.CPlotItem_getTitle(self)


    def setTitle(self, title):
        """setTitle(CPlotItem self, std::string const & title)"""
        return _COPASI.CPlotItem_setTitle(self, title)


    def getChannels(self):
        """getChannels(CPlotItem self) -> PlotDataChannelSpecStdVector"""
        return _COPASI.CPlotItem_getChannels(self)


    def getNumChannels(self):
        """getNumChannels(CPlotItem self) -> size_t"""
        return _COPASI.CPlotItem_getNumChannels(self)


    def addChannel(self, channel):
        """addChannel(CPlotItem self, CPlotDataChannelSpec channel)"""
        return _COPASI.CPlotItem_addChannel(self, channel)

CPlotItem_swigregister = _COPASI.CPlotItem_swigregister
CPlotItem_swigregister(CPlotItem)
CPlotItem.RecordingActivityName = _COPASI.cvar.CPlotItem_RecordingActivityName

def CPlotItem_fromData(data, pParent):
    """CPlotItem_fromData(CData data, CUndoObjectInterface pParent) -> CPlotItem"""
    return _COPASI.CPlotItem_fromData(data, pParent)

class CPlotColors(_object):
    """Proxy of C++ CPlotColors class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPlotColors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPlotColors, name)
    __repr__ = _swig_repr

    def getCopasiColorStr(index):
        """getCopasiColorStr(size_t index) -> std::string"""
        return _COPASI.CPlotColors_getCopasiColorStr(index)

    getCopasiColorStr = staticmethod(getCopasiColorStr)

    def getNumCopasiColors():
        """getNumCopasiColors() -> size_t"""
        return _COPASI.CPlotColors_getNumCopasiColors()

    getNumCopasiColors = staticmethod(getNumCopasiColors)

    def __init__(self):
        """__init__(CPlotColors self) -> CPlotColors"""
        this = _COPASI.new_CPlotColors()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CPlotColors
    __del__ = lambda self: None
CPlotColors_swigregister = _COPASI.CPlotColors_swigregister
CPlotColors_swigregister(CPlotColors)

def CPlotColors_getCopasiColorStr(index):
    """CPlotColors_getCopasiColorStr(size_t index) -> std::string"""
    return _COPASI.CPlotColors_getCopasiColorStr(index)

def CPlotColors_getNumCopasiColors():
    """CPlotColors_getNumCopasiColors() -> size_t"""
    return _COPASI.CPlotColors_getNumCopasiColors()

class CPlotSpecification(CPlotItem):
    """Proxy of C++ CPlotSpecification class."""

    __swig_setmethods__ = {}
    for _s in [CPlotItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPlotSpecification, name, value)
    __swig_getmethods__ = {}
    for _s in [CPlotItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPlotSpecification, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CPlotSpecification"""
        return _COPASI.CPlotSpecification_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CPlotSpecification self, std::string const & name, CDataContainer pParent, CPlotItem::Type const & type) -> CPlotSpecification
        __init__(CPlotSpecification self, std::string const & name, CDataContainer pParent) -> CPlotSpecification
        __init__(CPlotSpecification self, std::string const & name) -> CPlotSpecification
        __init__(CPlotSpecification self) -> CPlotSpecification
        __init__(CPlotSpecification self, CPlotSpecification src, CDataContainer pParent) -> CPlotSpecification
        """
        this = _COPASI.new_CPlotSpecification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CPlotSpecification
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CPlotSpecification self)"""
        return _COPASI.CPlotSpecification_cleanup(self)


    def getItems(self):
        """getItems(CPlotSpecification self) -> PlotItemVector"""
        return _COPASI.CPlotSpecification_getItems(self)


    def createItem(self, name, type):
        """createItem(CPlotSpecification self, std::string const & name, CPlotItem::Type type) -> CPlotItem"""
        return _COPASI.CPlotSpecification_createItem(self, name, type)


    def createDefaultPlot(self, model):
        """createDefaultPlot(CPlotSpecification self, CModel model) -> bool"""
        return _COPASI.CPlotSpecification_createDefaultPlot(self, model)


    def setActive(self, active):
        """setActive(CPlotSpecification self, bool const & active)"""
        return _COPASI.CPlotSpecification_setActive(self, active)


    def isActive(self):
        """isActive(CPlotSpecification self) -> bool const &"""
        return _COPASI.CPlotSpecification_isActive(self)


    def appliesTo(self, list):
        """appliesTo(CPlotSpecification self, ContainerList list) -> bool"""
        return _COPASI.CPlotSpecification_appliesTo(self, list)


    def getTaskTypes(self):
        """getTaskTypes(CPlotSpecification self) -> std::string"""
        return _COPASI.CPlotSpecification_getTaskTypes(self)


    def setTaskTypes(self, *args):
        """
        setTaskTypes(CPlotSpecification self, std::string const & taskTypes)
        setTaskTypes(CPlotSpecification self, std::set< CTaskEnum::Task,std::less< CTaskEnum::Task >,std::allocator< CTaskEnum::Task > > const & taskTypes)
        """
        return _COPASI.CPlotSpecification_setTaskTypes(self, *args)


    def addTaskType(self, type):
        """addTaskType(CPlotSpecification self, CTaskEnum::Task const & type)"""
        return _COPASI.CPlotSpecification_addTaskType(self, type)


    def isLogX(self):
        """isLogX(CPlotSpecification self) -> bool"""
        return _COPASI.CPlotSpecification_isLogX(self)


    def isLogY(self):
        """isLogY(CPlotSpecification self) -> bool"""
        return _COPASI.CPlotSpecification_isLogY(self)


    def setLogX(self, l):
        """setLogX(CPlotSpecification self, bool l)"""
        return _COPASI.CPlotSpecification_setLogX(self, l)


    def setLogY(self, l):
        """setLogY(CPlotSpecification self, bool l)"""
        return _COPASI.CPlotSpecification_setLogY(self, l)


    def getChannel(self, index):
        """getChannel(CPlotSpecification self, int index) -> CPlotDataChannelSpec"""
        return _COPASI.CPlotSpecification_getChannel(self, index)


    def getNumPlotItems(self):
        """getNumPlotItems(CPlotSpecification self) -> size_t"""
        return _COPASI.CPlotSpecification_getNumPlotItems(self)


    def getItem(self, index):
        """getItem(CPlotSpecification self, int index) -> CPlotItem"""
        return _COPASI.CPlotSpecification_getItem(self, index)

CPlotSpecification_swigregister = _COPASI.CPlotSpecification_swigregister
CPlotSpecification_swigregister(CPlotSpecification)

def CPlotSpecification_fromData(data, pParent):
    """CPlotSpecification_fromData(CData data, CUndoObjectInterface pParent) -> CPlotSpecification"""
    return _COPASI.CPlotSpecification_fromData(data, pParent)

class COutputDefinitionVector(OutputDefinitionVectorN):
    """Proxy of C++ COutputDefinitionVector class."""

    __swig_setmethods__ = {}
    for _s in [OutputDefinitionVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputDefinitionVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COutputDefinitionVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COutputDefinitionVector self, std::string const & name, CDataContainer pParent=None) -> COutputDefinitionVector
        __init__(COutputDefinitionVector self, std::string const & name) -> COutputDefinitionVector
        __init__(COutputDefinitionVector self) -> COutputDefinitionVector
        """
        this = _COPASI.new_COutputDefinitionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COutputDefinitionVector
    __del__ = lambda self: None

    def createPlotSpec(self, *args):
        """
        createPlotSpec(COutputDefinitionVector self, std::string const & name, CPlotItem::Type type) -> CPlotSpecification
        createPlotSpec(COutputDefinitionVector self, std::string const & name) -> CPlotSpecification
        """
        return _COPASI.COutputDefinitionVector_createPlotSpec(self, *args)


    def removePlotSpec(self, key):
        """removePlotSpec(COutputDefinitionVector self, std::string const & key) -> bool"""
        return _COPASI.COutputDefinitionVector_removePlotSpec(self, key)


    def cleanup(self):
        """cleanup(COutputDefinitionVector self)"""
        return _COPASI.COutputDefinitionVector_cleanup(self)


    def getKey(self):
        """getKey(COutputDefinitionVector self) -> std::string const &"""
        return _COPASI.COutputDefinitionVector_getKey(self)

COutputDefinitionVector_swigregister = _COPASI.COutputDefinitionVector_swigregister
COutputDefinitionVector_swigregister(COutputDefinitionVector)

class CReportDefinition(CDataObject):
    """Proxy of C++ CReportDefinition class."""

    __swig_setmethods__ = {}
    for _s in [CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReportDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReportDefinition, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CReportDefinition"""
        return _COPASI.CReportDefinition_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CReportDefinition self, std::string const & name, CDataContainer pParent) -> CReportDefinition
        __init__(CReportDefinition self, std::string const & name) -> CReportDefinition
        __init__(CReportDefinition self) -> CReportDefinition
        __init__(CReportDefinition self, CReportDefinition src, CDataContainer pParent) -> CReportDefinition
        """
        this = _COPASI.new_CReportDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReportDefinition
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CReportDefinition self)"""
        return _COPASI.CReportDefinition_cleanup(self)


    def preCompileTable(self, listOfContainer):
        """preCompileTable(CReportDefinition self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CReportDefinition_preCompileTable(self, listOfContainer)


    def getComment(self):
        """getComment(CReportDefinition self) -> std::string const &"""
        return _COPASI.CReportDefinition_getComment(self)


    def setComment(self, comment):
        """setComment(CReportDefinition self, std::string const & comment)"""
        return _COPASI.CReportDefinition_setComment(self, comment)


    def getBodyAddr(self):
        """getBodyAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getBodyAddr(self)


    def getHeaderAddr(self):
        """getHeaderAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getHeaderAddr(self)


    def getFooterAddr(self):
        """getFooterAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getFooterAddr(self)


    def getTableAddr(self):
        """getTableAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getTableAddr(self)


    def setTaskType(self, taskType):
        """setTaskType(CReportDefinition self, CTaskEnum::Task const & taskType) -> bool"""
        return _COPASI.CReportDefinition_setTaskType(self, taskType)


    def getTaskType(self):
        """getTaskType(CReportDefinition self) -> CTaskEnum::Task const &"""
        return _COPASI.CReportDefinition_getTaskType(self)


    def getSeparator(self):
        """getSeparator(CReportDefinition self) -> CCopasiReportSeparator"""
        return _COPASI.CReportDefinition_getSeparator(self)


    def getTitle(self):
        """getTitle(CReportDefinition self) -> bool"""
        return _COPASI.CReportDefinition_getTitle(self)


    def setTitle(self, title):
        """setTitle(CReportDefinition self, bool title)"""
        return _COPASI.CReportDefinition_setTitle(self, title)


    def isTable(self):
        """isTable(CReportDefinition self) -> bool"""
        return _COPASI.CReportDefinition_isTable(self)


    def setIsTable(self, table):
        """setIsTable(CReportDefinition self, bool table)"""
        return _COPASI.CReportDefinition_setIsTable(self, table)


    def setPrecision(self, precision):
        """setPrecision(CReportDefinition self, unsigned int const & precision)"""
        return _COPASI.CReportDefinition_setPrecision(self, precision)


    def getPrecision(self):
        """getPrecision(CReportDefinition self) -> unsigned int const &"""
        return _COPASI.CReportDefinition_getPrecision(self)


    def getKey(self):
        """getKey(CReportDefinition self) -> std::string const &"""
        return _COPASI.CReportDefinition_getKey(self)


    def setSeparator(self, *args):
        """
        setSeparator(CReportDefinition self, std::string const & separator)
        setSeparator(CReportDefinition self, CCopasiReportSeparator separator)
        """
        return _COPASI.CReportDefinition_setSeparator(self, *args)


    def getNumBodyItems(self):
        """getNumBodyItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumBodyItems(self)


    def getNthBodyItem(self, index):
        """getNthBodyItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthBodyItem(self, index)


    def removeNthBodyItem(self, index):
        """removeNthBodyItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthBodyItem(self, index)


    def getNumHeaderItems(self):
        """getNumHeaderItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumHeaderItems(self)


    def getNthHeaderItem(self, index):
        """getNthHeaderItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthHeaderItem(self, index)


    def removeNthHeaderItem(self, index):
        """removeNthHeaderItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthHeaderItem(self, index)


    def getNumFooterItems(self):
        """getNumFooterItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumFooterItems(self)


    def getNthFooterItem(self, index):
        """getNthFooterItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthFooterItem(self, index)


    def removeNthFooterItem(self, index):
        """removeNthFooterItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthFooterItem(self, index)


    def getNumTableItems(self):
        """getNumTableItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumTableItems(self)


    def getNthTableItem(self, index):
        """getNthTableItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthTableItem(self, index)


    def removeNthTableItem(self, index):
        """removeNthTableItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthTableItem(self, index)


    def addHeaderItem(self, item):
        """addHeaderItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addHeaderItem(self, item)


    def addFooterItem(self, item):
        """addFooterItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addFooterItem(self, item)


    def addBodyItem(self, item):
        """addBodyItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addBodyItem(self, item)


    def addTableItem(self, item):
        """addTableItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addTableItem(self, item)

CReportDefinition_swigregister = _COPASI.CReportDefinition_swigregister
CReportDefinition_swigregister(CReportDefinition)

def CReportDefinition_fromData(data, pParent):
    """CReportDefinition_fromData(CData data, CUndoObjectInterface pParent) -> CReportDefinition"""
    return _COPASI.CReportDefinition_fromData(data, pParent)

class CReportDefinitionVector(ReportDefinitionVectorN):
    """Proxy of C++ CReportDefinitionVector class."""

    __swig_setmethods__ = {}
    for _s in [ReportDefinitionVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReportDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportDefinitionVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReportDefinitionVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CReportDefinitionVector self, std::string const & name, CDataContainer pParent=None) -> CReportDefinitionVector
        __init__(CReportDefinitionVector self, std::string const & name) -> CReportDefinitionVector
        __init__(CReportDefinitionVector self) -> CReportDefinitionVector
        """
        this = _COPASI.new_CReportDefinitionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReportDefinitionVector
    __del__ = lambda self: None

    def createReportDefinition(self, name, comment):
        """createReportDefinition(CReportDefinitionVector self, std::string const & name, std::string const & comment) -> CReportDefinition"""
        return _COPASI.CReportDefinitionVector_createReportDefinition(self, name, comment)


    def removeReportDefinition(self, key):
        """removeReportDefinition(CReportDefinitionVector self, std::string const & key) -> bool"""
        return _COPASI.CReportDefinitionVector_removeReportDefinition(self, key)


    def cleanup(self):
        """cleanup(CReportDefinitionVector self)"""
        return _COPASI.CReportDefinitionVector_cleanup(self)


    def getKey(self):
        """getKey(CReportDefinitionVector self) -> std::string const &"""
        return _COPASI.CReportDefinitionVector_getKey(self)

CReportDefinitionVector_swigregister = _COPASI.CReportDefinitionVector_swigregister
CReportDefinitionVector_swigregister(CReportDefinitionVector)

class CDataModel(CDataContainer, COutputHandler):
    """Proxy of C++ CDataModel class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer, COutputHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer, COutputHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataModel, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CDataModel"""
        return _COPASI.CDataModel_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CDataModel self) -> CDataModel
        __init__(CDataModel self, std::string const & name, CDataContainer pParent, std::string const & type, bool withGUI=False) -> CDataModel
        __init__(CDataModel self, std::string const & name, CDataContainer pParent, std::string const & type) -> CDataModel
        __init__(CDataModel self, std::string const & name, CDataContainer pParent) -> CDataModel
        __init__(CDataModel self, std::string const & name) -> CDataModel
        __init__(CDataModel self, CDataModel src, CDataContainer pParent) -> CDataModel
        """
        this = _COPASI.new_CDataModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CDataModel
    __del__ = lambda self: None

    def addModel(self, fileName, pProcessReport=None):
        """
        addModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None) -> bool
        addModel(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_addModel(self, fileName, pProcessReport)


    def loadModelParameterSets(self, fileName, pProcessReport=None):
        """
        loadModelParameterSets(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None) -> bool
        loadModelParameterSets(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_loadModelParameterSets(self, fileName, pProcessReport)


    def saveModelParameterSets(self, fileName):
        """saveModelParameterSets(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_saveModelParameterSets(self, fileName)


    def saveModelToString(self, pProcessReport=None):
        """
        saveModelToString(CDataModel self, CProcessReport pProcessReport=None) -> std::string
        saveModelToString(CDataModel self) -> std::string
        """
        return _COPASI.CDataModel_saveModelToString(self, pProcessReport)


    def importSBMLFromString(self, sbmlDocumentText, pImportHandler=None, deleteOldData=True):
        """
        importSBMLFromString(CDataModel self, std::string const & sbmlDocumentText, CProcessReport pImportHandler=None, bool const & deleteOldData=True) -> bool
        importSBMLFromString(CDataModel self, std::string const & sbmlDocumentText, CProcessReport pImportHandler=None) -> bool
        importSBMLFromString(CDataModel self, std::string const & sbmlDocumentText) -> bool
        """
        return _COPASI.CDataModel_importSBMLFromString(self, sbmlDocumentText, pImportHandler, deleteOldData)


    def importSBML(self, fileName, pImportHandler=None, deleteOldData=True):
        """
        importSBML(CDataModel self, std::string const & fileName, CProcessReport pImportHandler=None, bool const & deleteOldData=True) -> bool
        importSBML(CDataModel self, std::string const & fileName, CProcessReport pImportHandler=None) -> bool
        importSBML(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_importSBML(self, fileName, pImportHandler, deleteOldData)


    def exportSBML(self, fileName, overwriteFile=False, sbmlLevel=2, sbmlVersion=1, exportIncomplete=False, exportCOPASIMIRIAM=True, pExportHandler=None):
        """
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2, int sbmlVersion=1, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True, CProcessReport pExportHandler=None) -> bool
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2, int sbmlVersion=1, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True) -> bool
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2, int sbmlVersion=1, bool exportIncomplete=False) -> bool
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2, int sbmlVersion=1) -> bool
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2) -> bool
        exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False) -> bool
        exportSBML(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_exportSBML(self, fileName, overwriteFile, sbmlLevel, sbmlVersion, exportIncomplete, exportCOPASIMIRIAM, pExportHandler)


    def exportMathModel(self, fileName, pProcessReport, filter, overwriteFile=False):
        """
        exportMathModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, std::string const & filter, bool overwriteFile=False) -> bool
        exportMathModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, std::string const & filter) -> bool
        """
        return _COPASI.CDataModel_exportMathModel(self, fileName, pProcessReport, filter, overwriteFile)


    def findObjectByDisplayName(self, displayString):
        """findObjectByDisplayName(CDataModel self, std::string const & displayString) -> CDataObject"""
        return _COPASI.CDataModel_findObjectByDisplayName(self, displayString)


    def copyExperimentalDataTo(self, path):
        """copyExperimentalDataTo(CDataModel self, std::string const & path)"""
        return _COPASI.CDataModel_copyExperimentalDataTo(self, path)


    def exportCombineArchive(self, fileName, includeCOPASI=True, includeSBML=True, includeData=True, includeSEDML=False, overwriteFile=False, pProgressReport=None):
        """
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True, bool includeData=True, bool includeSEDML=False, bool overwriteFile=False, CProcessReport pProgressReport=None) -> bool
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True, bool includeData=True, bool includeSEDML=False, bool overwriteFile=False) -> bool
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True, bool includeData=True, bool includeSEDML=False) -> bool
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True, bool includeData=True) -> bool
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True) -> bool
        exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True) -> bool
        exportCombineArchive(CDataModel self, std::string fileName) -> bool
        """
        return _COPASI.CDataModel_exportCombineArchive(self, fileName, includeCOPASI, includeSBML, includeData, includeSEDML, overwriteFile, pProgressReport)


    def exportShinyArchive(self, fileName, includeCOPASI=True, includeData=True, overwriteFile=False, pProgressReport=None):
        """
        exportShinyArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeData=True, bool overwriteFile=False, CProcessReport pProgressReport=None) -> bool
        exportShinyArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeData=True, bool overwriteFile=False) -> bool
        exportShinyArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeData=True) -> bool
        exportShinyArchive(CDataModel self, std::string fileName, bool includeCOPASI=True) -> bool
        exportShinyArchive(CDataModel self, std::string fileName) -> bool
        """
        return _COPASI.CDataModel_exportShinyArchive(self, fileName, includeCOPASI, includeData, overwriteFile, pProgressReport)


    def addCopasiFileToArchive(self, *args):
        """
        addCopasiFileToArchive(CDataModel self, CombineArchive * archive, std::string const & targetName, CProcessReport pProgressReport=None)
        addCopasiFileToArchive(CDataModel self, CombineArchive * archive, std::string const & targetName)
        addCopasiFileToArchive(CDataModel self, CombineArchive * archive)
        """
        return _COPASI.CDataModel_addCopasiFileToArchive(self, *args)


    def openCombineArchive(self, fileName, pProgressReport=None, deleteOldData=True):
        """
        openCombineArchive(CDataModel self, std::string const & fileName, CProcessReport pProgressReport=None, bool const & deleteOldData=True) -> bool
        openCombineArchive(CDataModel self, std::string const & fileName, CProcessReport pProgressReport=None) -> bool
        openCombineArchive(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_openCombineArchive(self, fileName, pProgressReport, deleteOldData)


    def deleteOldData(self):
        """deleteOldData(CDataModel self)"""
        return _COPASI.CDataModel_deleteOldData(self)


    def getUndoStack(self):
        """getUndoStack(CDataModel self) -> CUndoStack *"""
        return _COPASI.CDataModel_getUndoStack(self)


    def getModel(self):
        """getModel(CDataModel self) -> CModel"""
        return _COPASI.CDataModel_getModel(self)


    def getTaskList(self):
        """getTaskList(CDataModel self) -> TaskVectorN"""
        return _COPASI.CDataModel_getTaskList(self)


    def addTask(self, taskType):
        """addTask(CDataModel self, CTaskEnum::Task const & taskType) -> CCopasiTask"""
        return _COPASI.CDataModel_addTask(self, taskType)


    def addDefaultTasks(self):
        """addDefaultTasks(CDataModel self) -> bool"""
        return _COPASI.CDataModel_addDefaultTasks(self)


    def getReportDefinitionList(self):
        """getReportDefinitionList(CDataModel self) -> CReportDefinitionVector"""
        return _COPASI.CDataModel_getReportDefinitionList(self)


    def addReport(self, taskType):
        """addReport(CDataModel self, CTaskEnum::Task const & taskType) -> CReportDefinition"""
        return _COPASI.CDataModel_addReport(self, taskType)


    def addDefaultReports(self):
        """addDefaultReports(CDataModel self) -> bool"""
        return _COPASI.CDataModel_addDefaultReports(self)


    def getPlotDefinitionList(self):
        """getPlotDefinitionList(CDataModel self) -> COutputDefinitionVector"""
        return _COPASI.CDataModel_getPlotDefinitionList(self)


    def getListOfLayouts(self):
        """getListOfLayouts(CDataModel self) -> CListOfLayouts"""
        return _COPASI.CDataModel_getListOfLayouts(self)


    def removeLayout(self, key):
        """removeLayout(CDataModel self, std::string const & key) -> bool"""
        return _COPASI.CDataModel_removeLayout(self, key)


    def getFileName(self):
        """getFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getFileName(self)


    def setFileName(self, fileName):
        """setFileName(CDataModel self, std::string const & fileName)"""
        return _COPASI.CDataModel_setFileName(self, fileName)


    def setSBMLFileName(self, fileName):
        """setSBMLFileName(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_setSBMLFileName(self, fileName)


    def getSBMLFileName(self):
        """getSBMLFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getSBMLFileName(self)


    def getReferenceDirectory(self):
        """getReferenceDirectory(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getReferenceDirectory(self)


    def importSEDMLFromString(self, sedmlDocumentText, pImportHandler=None, deleteOldData=True):
        """
        importSEDMLFromString(CDataModel self, std::string const & sedmlDocumentText, CProcessReport pImportHandler=None, bool const & deleteOldData=True) -> bool
        importSEDMLFromString(CDataModel self, std::string const & sedmlDocumentText, CProcessReport pImportHandler=None) -> bool
        importSEDMLFromString(CDataModel self, std::string const & sedmlDocumentText) -> bool
        """
        return _COPASI.CDataModel_importSEDMLFromString(self, sedmlDocumentText, pImportHandler, deleteOldData)


    def importSEDML(self, fileName, pImportHandler=None, deleteOldData=True):
        """
        importSEDML(CDataModel self, std::string const & fileName, CProcessReport pImportHandler=None, bool const & deleteOldData=True) -> bool
        importSEDML(CDataModel self, std::string const & fileName, CProcessReport pImportHandler=None) -> bool
        importSEDML(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_importSEDML(self, fileName, pImportHandler, deleteOldData)


    def exportSEDMLToString(self, *args):
        """
        exportSEDMLToString(CDataModel self, CProcessReport pExportHandler, int sedmlLevel, int sedmlVersion, std::string const & modelLocation) -> std::string
        exportSEDMLToString(CDataModel self, CProcessReport pExportHandler, int sedmlLevel, int sedmlVersion) -> std::string
        """
        return _COPASI.CDataModel_exportSEDMLToString(self, *args)


    def exportSEDML(self, fileName, overwriteFile=False, sedmlLevel=1, sedmlVersion=1, exportIncomplete=False, exportCOPASIMIRIAM=True, pExportHandler=None):
        """
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1, int sedmlVersion=1, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True, CProcessReport pExportHandler=None) -> bool
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1, int sedmlVersion=1, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True) -> bool
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1, int sedmlVersion=1, bool exportIncomplete=False) -> bool
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1, int sedmlVersion=1) -> bool
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1) -> bool
        exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False) -> bool
        exportSEDML(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_exportSEDML(self, fileName, overwriteFile, sedmlLevel, sedmlVersion, exportIncomplete, exportCOPASIMIRIAM, pExportHandler)


    def setSEDMLFileName(self, fileName):
        """setSEDMLFileName(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_setSEDMLFileName(self, fileName)


    def getSEDMLFileName(self):
        """getSEDMLFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getSEDMLFileName(self)


    def recordData(self, data):
        """recordData(CDataModel self, CUndoData data) -> CUndoData::CChangeSet"""
        return _COPASI.CDataModel_recordData(self, data)


    def changeModelParameter(element, value):
        """changeModelParameter(CDataObject element, double value) -> bool"""
        return _COPASI.CDataModel_changeModelParameter(element, value)

    changeModelParameter = staticmethod(changeModelParameter)

    def reparameterizeFromIniFile(self, fileName):
        """reparameterizeFromIniFile(CDataModel self, std::string const & fileName)"""
        return _COPASI.CDataModel_reparameterizeFromIniFile(self, fileName)


    def loadModelFromString(self, content, path):
        """loadModelFromString(CDataModel self, std::string const & content, std::string const & path) -> bool"""
        return _COPASI.CDataModel_loadModelFromString(self, content, path)


    def loadModel(self, fileName):
        """loadModel(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_loadModel(self, fileName)


    def saveModel(self, *args):
        """
        saveModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, bool overwriteFile=False, bool const & autoSave=False) -> bool
        saveModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, bool overwriteFile=False) -> bool
        saveModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport) -> bool
        saveModel(CDataModel self, std::string const & fileName, bool overwriteFile=False) -> bool
        saveModel(CDataModel self, std::string const & fileName) -> bool
        """
        return _COPASI.CDataModel_saveModel(self, *args)


    def exportSBMLToString(self, *args):
        """
        exportSBMLToString(CDataModel self, CProcessReport pExportHandler, int sbmlLevel, int sbmlVersion) -> std::string
        exportSBMLToString(CDataModel self, int sbmlLevel, int sbmlVersion) -> std::string
        exportSBMLToString(CDataModel self) -> std::string
        """
        return _COPASI.CDataModel_exportSBMLToString(self, *args)


    def exportMathModelToString(self, filter):
        """exportMathModelToString(CDataModel self, std::string const & filter) -> std::string"""
        return _COPASI.CDataModel_exportMathModelToString(self, filter)


    def newModel(self, *args):
        """
        newModel(CDataModel self, CProcessReport pProcessReport, bool const & deleteOldData) -> bool
        newModel(CDataModel self) -> bool
        """
        return _COPASI.CDataModel_newModel(self, *args)


    def getNumReportDefinitions(self):
        """getNumReportDefinitions(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumReportDefinitions(self)


    def removeReportDefinition(self, index):
        """removeReportDefinition(CDataModel self, unsigned int index) -> bool"""
        return _COPASI.CDataModel_removeReportDefinition(self, index)


    def removePlotSpecification(self, index):
        """removePlotSpecification(CDataModel self, unsigned int index) -> bool"""
        return _COPASI.CDataModel_removePlotSpecification(self, index)


    def getNumPlotSpecifications(self):
        """getNumPlotSpecifications(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumPlotSpecifications(self)


    def getReportDefinition(self, *args):
        """
        getReportDefinition(CDataModel self, unsigned int index) -> CReportDefinition
        getReportDefinition(CDataModel self, std::string const & name) -> CReportDefinition
        """
        return _COPASI.CDataModel_getReportDefinition(self, *args)


    def getPlotSpecification(self, *args):
        """
        getPlotSpecification(CDataModel self, unsigned int index) -> CPlotSpecification
        getPlotSpecification(CDataModel self, std::string const & name) -> CPlotSpecification
        """
        return _COPASI.CDataModel_getPlotSpecification(self, *args)


    def getNumTasks(self):
        """getNumTasks(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumTasks(self)


    def getTask(self, *args):
        """
        getTask(CDataModel self, unsigned int index) -> CCopasiTask
        getTask(CDataModel self, std::string const & name) -> CCopasiTask
        """
        return _COPASI.CDataModel_getTask(self, *args)

CDataModel_swigregister = _COPASI.CDataModel_swigregister
CDataModel_swigregister(CDataModel)

def CDataModel_fromData(data, pParent):
    """CDataModel_fromData(CData data, CUndoObjectInterface pParent) -> CDataModel"""
    return _COPASI.CDataModel_fromData(data, pParent)

def CDataModel_changeModelParameter(element, value):
    """CDataModel_changeModelParameter(CDataObject element, double value) -> bool"""
    return _COPASI.CDataModel_changeModelParameter(element, value)

class CTimeSeries(COutputInterface):
    """Proxy of C++ CTimeSeries class."""

    __swig_setmethods__ = {}
    for _s in [COutputInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTimeSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [COutputInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTimeSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CTimeSeries self) -> CTimeSeries
        __init__(CTimeSeries self, CTimeSeries src) -> CTimeSeries
        """
        this = _COPASI.new_CTimeSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTimeSeries
    __del__ = lambda self: None

    def compile(self, listOfContainer):
        """compile(CTimeSeries self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CTimeSeries_compile(self, listOfContainer)


    def output(self, activity):
        """output(CTimeSeries self, COutputInterface::Activity const & activity)"""
        return _COPASI.CTimeSeries_output(self, activity)


    def separate(self, activity):
        """separate(CTimeSeries self, COutputInterface::Activity const & activity)"""
        return _COPASI.CTimeSeries_separate(self, activity)


    def finish(self):
        """finish(CTimeSeries self)"""
        return _COPASI.CTimeSeries_finish(self)


    def allocate(self, steps):
        """allocate(CTimeSeries self, size_t const & steps)"""
        return _COPASI.CTimeSeries_allocate(self, steps)


    def increaseAllocation(self):
        """increaseAllocation(CTimeSeries self)"""
        return _COPASI.CTimeSeries_increaseAllocation(self)


    def clear(self):
        """clear(CTimeSeries self)"""
        return _COPASI.CTimeSeries_clear(self)


    def save(self, *args):
        """
        save(CTimeSeries self, std::string const & fileName, bool writeParticleNumbers=False, std::string const & separator) -> int
        save(CTimeSeries self, std::string const & fileName, bool writeParticleNumbers=False) -> int
        save(CTimeSeries self, std::string const & fileName) -> int
        save(CTimeSeries self, std::ostream & str, bool writeParticleNumbers=False, std::string const & separator) -> int
        save(CTimeSeries self, std::ostream & str, bool writeParticleNumbers=False) -> int
        save(CTimeSeries self, std::ostream & str) -> int
        """
        return _COPASI.CTimeSeries_save(self, *args)


    def getRecordedSteps(self):
        """getRecordedSteps(CTimeSeries self) -> size_t const &"""
        return _COPASI.CTimeSeries_getRecordedSteps(self)


    def getNumVariables(self):
        """getNumVariables(CTimeSeries self) -> size_t const &"""
        return _COPASI.CTimeSeries_getNumVariables(self)


    def getData(self, step, variable):
        """getData(CTimeSeries self, size_t const & step, size_t const & variable) -> double const &"""
        return _COPASI.CTimeSeries_getData(self, step, variable)


    def getConcentrationData(self, step, variable):
        """getConcentrationData(CTimeSeries self, size_t const & step, size_t const & variable) -> double"""
        return _COPASI.CTimeSeries_getConcentrationData(self, step, variable)


    def getTitle(self, variable):
        """getTitle(CTimeSeries self, size_t const & variable) -> std::string const &"""
        return _COPASI.CTimeSeries_getTitle(self, variable)


    def getKey(self, variable):
        """getKey(CTimeSeries self, size_t const & variable) -> std::string const &"""
        return _COPASI.CTimeSeries_getKey(self, variable)


    def getSBMLId(self, variable, pDataModel):
        """getSBMLId(CTimeSeries self, size_t const & variable, CDataModel pDataModel) -> std::string"""
        return _COPASI.CTimeSeries_getSBMLId(self, variable, pDataModel)



    def getTitles(self):
      """Returns the titles of the variables in the time series
      as a python list.
      If the time series contains no variables, an empty list is returned.
      """
      result=[]
      x=self.getNumVariables();
      for index in range(0,x):
          result.append(self.getTitle(index))
      return result;

    def getDataForIndex(self,index):
      """Returns the complete time course particle number data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getData(step,index))
      return result;

    def getConcentrationDataForIndex(self,index):
      """Returns the complete time course concentration data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getConcentrationData(step,index))
      return result;

    def getDataForObject(self,object):
      """Returns the complete time course particle number data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.

      The object argument must be an instance of CDataObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CDataObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CDataObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getDataForIndex(v)
      return result;

    def getConcentrationDataForObject(self,object):
      """Returns the complete time course concentration data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.

      The object argument must be an instance of CDataObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CDataObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CDataObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getConcentrationDataForIndex(v)
      return result;


CTimeSeries_swigregister = _COPASI.CTimeSeries_swigregister
CTimeSeries_swigregister(CTimeSeries)

class CTrajectoryProblem(CCopasiProblem):
    """Proxy of C++ CTrajectoryProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CTrajectoryProblem self, CDataContainer pParent) -> CTrajectoryProblem
        __init__(CTrajectoryProblem self) -> CTrajectoryProblem
        __init__(CTrajectoryProblem self, CTrajectoryProblem src, CDataContainer pParent) -> CTrajectoryProblem
        """
        this = _COPASI.new_CTrajectoryProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_elevateChildren(self)


    def setStepNumber(self, stepNumber):
        """setStepNumber(CTrajectoryProblem self, unsigned int const & stepNumber)"""
        return _COPASI.CTrajectoryProblem_setStepNumber(self, stepNumber)


    def getStepNumber(self):
        """getStepNumber(CTrajectoryProblem self) -> unsigned int const &"""
        return _COPASI.CTrajectoryProblem_getStepNumber(self)


    def setStepSize(self, stepSize):
        """setStepSize(CTrajectoryProblem self, double const & stepSize)"""
        return _COPASI.CTrajectoryProblem_setStepSize(self, stepSize)


    def getAutomaticStepSize(self):
        """getAutomaticStepSize(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getAutomaticStepSize(self)


    def setAutomaticStepSize(self, automaticStepSize):
        """setAutomaticStepSize(CTrajectoryProblem self, bool const & automaticStepSize)"""
        return _COPASI.CTrajectoryProblem_setAutomaticStepSize(self, automaticStepSize)


    def getStepSize(self):
        """getStepSize(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getStepSize(self)


    def setDuration(self, duration):
        """setDuration(CTrajectoryProblem self, double const & duration)"""
        return _COPASI.CTrajectoryProblem_setDuration(self, duration)


    def getDuration(self):
        """getDuration(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getDuration(self)


    def setOutputStartTime(self, endTime):
        """setOutputStartTime(CTrajectoryProblem self, double const & endTime)"""
        return _COPASI.CTrajectoryProblem_setOutputStartTime(self, endTime)


    def getOutputStartTime(self):
        """getOutputStartTime(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getOutputStartTime(self)


    def setTimeSeriesRequested(self, flag):
        """setTimeSeriesRequested(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setTimeSeriesRequested(self, flag)


    def timeSeriesRequested(self):
        """timeSeriesRequested(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_timeSeriesRequested(self)


    def setOutputEvent(self, outputEvent):
        """setOutputEvent(CTrajectoryProblem self, bool const & outputEvent)"""
        return _COPASI.CTrajectoryProblem_setOutputEvent(self, outputEvent)


    def getOutputEvent(self):
        """getOutputEvent(CTrajectoryProblem self) -> bool const &"""
        return _COPASI.CTrajectoryProblem_getOutputEvent(self)


    def setStartInSteadyState(self, flag):
        """setStartInSteadyState(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setStartInSteadyState(self, flag)


    def getStartInSteadyState(self):
        """getStartInSteadyState(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getStartInSteadyState(self)


    def setValues(self, *args):
        """
        setValues(CTrajectoryProblem self, std::string const & values)
        setValues(CTrajectoryProblem self, FloatStdVector values)
        """
        return _COPASI.CTrajectoryProblem_setValues(self, *args)


    def getValues(self):
        """getValues(CTrajectoryProblem self) -> std::set< double,std::less< double >,std::allocator< double > >"""
        return _COPASI.CTrajectoryProblem_getValues(self)


    def getValueString(self):
        """getValueString(CTrajectoryProblem self) -> std::string const &"""
        return _COPASI.CTrajectoryProblem_getValueString(self)


    def setUseValues(self, flag):
        """setUseValues(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setUseValues(self, flag)


    def getUseValues(self):
        """getUseValues(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getUseValues(self)

CTrajectoryProblem_swigregister = _COPASI.CTrajectoryProblem_swigregister
CTrajectoryProblem_swigregister(CTrajectoryProblem)

class CTrajectoryMethod(CCopasiMethod):
    """Proxy of C++ CTrajectoryMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryMethod, name)
    __repr__ = _swig_repr
    FAILURE = _COPASI.CTrajectoryMethod_FAILURE
    NORMAL = _COPASI.CTrajectoryMethod_NORMAL
    ROOT = _COPASI.CTrajectoryMethod_ROOT

    def __init__(self, *args):
        """
        __init__(CTrajectoryMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CTrajectoryMethod
        __init__(CTrajectoryMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CTrajectoryMethod
        __init__(CTrajectoryMethod self, CTrajectoryMethod src, CDataContainer pParent) -> CTrajectoryMethod
        """
        this = _COPASI.new_CTrajectoryMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryMethod
    __del__ = lambda self: None

    def setProblem(self, problem):
        """setProblem(CTrajectoryMethod self, CTrajectoryProblem problem)"""
        return _COPASI.CTrajectoryMethod_setProblem(self, problem)


    def stateChange(self, change):
        """stateChange(CTrajectoryMethod self, CMath::StateChange const & change)"""
        return _COPASI.CTrajectoryMethod_stateChange(self, change)


    def step(self, deltaT, final=False):
        """
        step(CTrajectoryMethod self, double const & deltaT, bool const & final=False) -> CTrajectoryMethod::Status
        step(CTrajectoryMethod self, double const & deltaT) -> CTrajectoryMethod::Status
        """
        return _COPASI.CTrajectoryMethod_step(self, deltaT, final)


    def start(self):
        """start(CTrajectoryMethod self)"""
        return _COPASI.CTrajectoryMethod_start(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CTrajectoryMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CTrajectoryMethod_isValidProblem(self, pProblem)


    def integrateReducedModel(self):
        """integrateReducedModel(CTrajectoryMethod self) -> bool const &"""
        return _COPASI.CTrajectoryMethod_integrateReducedModel(self)

CTrajectoryMethod_swigregister = _COPASI.CTrajectoryMethod_swigregister
CTrajectoryMethod_swigregister(CTrajectoryMethod)

class CTrajectoryTask(CCopasiTask):
    """Proxy of C++ CTrajectoryTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTrajectoryTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTrajectoryTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CTrajectoryTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CTrajectoryTask
        __init__(CTrajectoryTask self, CDataContainer pParent) -> CTrajectoryTask
        __init__(CTrajectoryTask self, CTrajectoryTask src, CDataContainer pParent) -> CTrajectoryTask
        """
        this = _COPASI.new_CTrajectoryTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTrajectoryTask
    __del__ = lambda self: None

    def processTrajectory(self, useInitialValues):
        """processTrajectory(CTrajectoryTask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTrajectoryTask_processTrajectory(self, useInitialValues)


    def processValues(self, useInitialValues):
        """processValues(CTrajectoryTask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTrajectoryTask_processValues(self, useInitialValues)


    def processStart(self, useInitialValues):
        """processStart(CTrajectoryTask self, bool const & useInitialValues)"""
        return _COPASI.CTrajectoryTask_processStart(self, useInitialValues)


    def processStep(self, nextTime, final=False):
        """
        processStep(CTrajectoryTask self, double const & nextTime, bool const & final=False) -> bool
        processStep(CTrajectoryTask self, double const & nextTime) -> bool
        """
        return _COPASI.CTrajectoryTask_processStep(self, nextTime, final)


    def getTimeSeries(self):
        """getTimeSeries(CTrajectoryTask self) -> CTimeSeries"""
        return _COPASI.CTrajectoryTask_getTimeSeries(self)


    def getValidMethods(self):
        """getValidMethods(CTrajectoryTask self) -> IntStdVector"""
        return _COPASI.CTrajectoryTask_getValidMethods(self)

CTrajectoryTask_swigregister = _COPASI.CTrajectoryTask_swigregister
CTrajectoryTask_swigregister(CTrajectoryTask)

class CDefaultOutputDescription(_object):
    """Proxy of C++ CDefaultOutputDescription class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDefaultOutputDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDefaultOutputDescription, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CDefaultOutputDescription self) -> CDefaultOutputDescription"""
        this = _COPASI.new_CDefaultOutputDescription()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["name"] = _COPASI.CDefaultOutputDescription_name_set
    __swig_getmethods__["name"] = _COPASI.CDefaultOutputDescription_name_get
    if _newclass:
        name = _swig_property(_COPASI.CDefaultOutputDescription_name_get, _COPASI.CDefaultOutputDescription_name_set)
    __swig_setmethods__["description"] = _COPASI.CDefaultOutputDescription_description_set
    __swig_getmethods__["description"] = _COPASI.CDefaultOutputDescription_description_get
    if _newclass:
        description = _swig_property(_COPASI.CDefaultOutputDescription_description_get, _COPASI.CDefaultOutputDescription_description_set)
    __swig_setmethods__["isPlot"] = _COPASI.CDefaultOutputDescription_isPlot_set
    __swig_getmethods__["isPlot"] = _COPASI.CDefaultOutputDescription_isPlot_get
    if _newclass:
        isPlot = _swig_property(_COPASI.CDefaultOutputDescription_isPlot_get, _COPASI.CDefaultOutputDescription_isPlot_set)
    __swig_setmethods__["mTaskType"] = _COPASI.CDefaultOutputDescription_mTaskType_set
    __swig_getmethods__["mTaskType"] = _COPASI.CDefaultOutputDescription_mTaskType_get
    if _newclass:
        mTaskType = _swig_property(_COPASI.CDefaultOutputDescription_mTaskType_get, _COPASI.CDefaultOutputDescription_mTaskType_set)
    __swig_setmethods__["mSecondaryTask"] = _COPASI.CDefaultOutputDescription_mSecondaryTask_set
    __swig_getmethods__["mSecondaryTask"] = _COPASI.CDefaultOutputDescription_mSecondaryTask_get
    if _newclass:
        mSecondaryTask = _swig_property(_COPASI.CDefaultOutputDescription_mSecondaryTask_get, _COPASI.CDefaultOutputDescription_mSecondaryTask_set)
    __swig_destroy__ = _COPASI.delete_CDefaultOutputDescription
    __del__ = lambda self: None
CDefaultOutputDescription_swigregister = _COPASI.CDefaultOutputDescription_swigregister
CDefaultOutputDescription_swigregister(CDefaultOutputDescription)

class COutputAssistant(_object):
    """Proxy of C++ COutputAssistant class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COutputAssistant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COutputAssistant, name)
    __repr__ = _swig_repr

    def getListOfDefaultOutputDescriptions(task=None):
        """
        getListOfDefaultOutputDescriptions(CCopasiTask task=None) -> IntStdVector
        getListOfDefaultOutputDescriptions() -> IntStdVector
        """
        return _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions(task)

    getListOfDefaultOutputDescriptions = staticmethod(getListOfDefaultOutputDescriptions)

    def getDefaultReportIndex(problem):
        """getDefaultReportIndex(CCopasiProblem problem) -> int"""
        return _COPASI.COutputAssistant_getDefaultReportIndex(problem)

    getDefaultReportIndex = staticmethod(getDefaultReportIndex)

    def getItemName(id):
        """getItemName(int id) -> std::string const &"""
        return _COPASI.COutputAssistant_getItemName(id)

    getItemName = staticmethod(getItemName)

    def getItem(id):
        """getItem(int id) -> CDefaultOutputDescription"""
        return _COPASI.COutputAssistant_getItem(id)

    getItem = staticmethod(getItem)

    def findItemByName(name, isPlot=True):
        """
        findItemByName(std::string const & name, bool isPlot=True) -> int
        findItemByName(std::string const & name) -> int
        """
        return _COPASI.COutputAssistant_findItemByName(name, isPlot)

    findItemByName = staticmethod(findItemByName)

    def createDefaultOutput(id, task, pDataModel, activate=True):
        """
        createDefaultOutput(int id, CCopasiTask task, CDataModel pDataModel, bool activate=True) -> CDataObject
        createDefaultOutput(int id, CCopasiTask task, CDataModel pDataModel) -> CDataObject
        """
        return _COPASI.COutputAssistant_createDefaultOutput(id, task, pDataModel, activate)

    createDefaultOutput = staticmethod(createDefaultOutput)

    def __init__(self):
        """__init__(COutputAssistant self) -> COutputAssistant"""
        this = _COPASI.new_COutputAssistant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COutputAssistant
    __del__ = lambda self: None
COutputAssistant_swigregister = _COPASI.COutputAssistant_swigregister
COutputAssistant_swigregister(COutputAssistant)

def COutputAssistant_getListOfDefaultOutputDescriptions(task=None):
    """
    getListOfDefaultOutputDescriptions(CCopasiTask task=None) -> IntStdVector
    COutputAssistant_getListOfDefaultOutputDescriptions() -> IntStdVector
    """
    return _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions(task)

def COutputAssistant_getDefaultReportIndex(problem):
    """COutputAssistant_getDefaultReportIndex(CCopasiProblem problem) -> int"""
    return _COPASI.COutputAssistant_getDefaultReportIndex(problem)

def COutputAssistant_getItemName(id):
    """COutputAssistant_getItemName(int id) -> std::string const &"""
    return _COPASI.COutputAssistant_getItemName(id)

def COutputAssistant_getItem(id):
    """COutputAssistant_getItem(int id) -> CDefaultOutputDescription"""
    return _COPASI.COutputAssistant_getItem(id)

def COutputAssistant_findItemByName(name, isPlot=True):
    """
    findItemByName(std::string const & name, bool isPlot=True) -> int
    COutputAssistant_findItemByName(std::string const & name) -> int
    """
    return _COPASI.COutputAssistant_findItemByName(name, isPlot)

def COutputAssistant_createDefaultOutput(id, task, pDataModel, activate=True):
    """
    createDefaultOutput(int id, CCopasiTask task, CDataModel pDataModel, bool activate=True) -> CDataObject
    COutputAssistant_createDefaultOutput(int id, CCopasiTask task, CDataModel pDataModel) -> CDataObject
    """
    return _COPASI.COutputAssistant_createDefaultOutput(id, task, pDataModel, activate)

class CSteadyStateProblem(CCopasiProblem):
    """Proxy of C++ CSteadyStateProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CSteadyStateProblem self, CDataContainer pParent) -> CSteadyStateProblem
        __init__(CSteadyStateProblem self) -> CSteadyStateProblem
        __init__(CSteadyStateProblem self, CSteadyStateProblem src, CDataContainer pParent) -> CSteadyStateProblem
        """
        this = _COPASI.new_CSteadyStateProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateProblem
    __del__ = lambda self: None

    def isJacobianRequested(self):
        """isJacobianRequested(CSteadyStateProblem self) -> bool"""
        return _COPASI.CSteadyStateProblem_isJacobianRequested(self)


    def isStabilityAnalysisRequested(self):
        """isStabilityAnalysisRequested(CSteadyStateProblem self) -> bool"""
        return _COPASI.CSteadyStateProblem_isStabilityAnalysisRequested(self)


    def setJacobianRequested(self, jacobianRequested):
        """setJacobianRequested(CSteadyStateProblem self, bool jacobianRequested)"""
        return _COPASI.CSteadyStateProblem_setJacobianRequested(self, jacobianRequested)


    def setStabilityAnalysisRequested(self, stabilityAnalysisRequested):
        """setStabilityAnalysisRequested(CSteadyStateProblem self, bool stabilityAnalysisRequested)"""
        return _COPASI.CSteadyStateProblem_setStabilityAnalysisRequested(self, stabilityAnalysisRequested)

CSteadyStateProblem_swigregister = _COPASI.CSteadyStateProblem_swigregister
CSteadyStateProblem_swigregister(CSteadyStateProblem)

class CSteadyStateMethod(CCopasiMethod):
    """Proxy of C++ CSteadyStateMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateMethod, name)
    __repr__ = _swig_repr
    notFound = _COPASI.CSteadyStateMethod_notFound
    found = _COPASI.CSteadyStateMethod_found
    foundEquilibrium = _COPASI.CSteadyStateMethod_foundEquilibrium
    foundNegative = _COPASI.CSteadyStateMethod_foundNegative

    def __init__(self, src, pParent):
        """__init__(CSteadyStateMethod self, CSteadyStateMethod src, CDataContainer pParent) -> CSteadyStateMethod"""
        this = _COPASI.new_CSteadyStateMethod(src, pParent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateMethod
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CSteadyStateMethod self) -> bool"""
        return _COPASI.CSteadyStateMethod_elevateChildren(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CSteadyStateMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CSteadyStateMethod_isValidProblem(self, pProblem)


    def initialize(self, pProblem):
        """initialize(CSteadyStateMethod self, CSteadyStateProblem pProblem) -> bool"""
        return _COPASI.CSteadyStateMethod_initialize(self, pProblem)


    def doJacobian(self, jacobian, jacobianX):
        """doJacobian(CSteadyStateMethod self, FloatMatrix jacobian, FloatMatrix jacobianX)"""
        return _COPASI.CSteadyStateMethod_doJacobian(self, jacobian, jacobianX)


    def getStabilityResolution(self):
        """getStabilityResolution(CSteadyStateMethod self) -> double"""
        return _COPASI.CSteadyStateMethod_getStabilityResolution(self)


    def getMethodLog(self):
        """getMethodLog(CSteadyStateMethod self) -> std::string"""
        return _COPASI.CSteadyStateMethod_getMethodLog(self)

CSteadyStateMethod_swigregister = _COPASI.CSteadyStateMethod_swigregister
CSteadyStateMethod_swigregister(CSteadyStateMethod)

class CSteadyStateTask(CCopasiTask):
    """Proxy of C++ CSteadyStateTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSteadyStateTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSteadyStateTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CSteadyStateTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CSteadyStateTask
        __init__(CSteadyStateTask self, CDataContainer pParent) -> CSteadyStateTask
        __init__(CSteadyStateTask self, CSteadyStateTask src, CDataContainer pParent) -> CSteadyStateTask
        """
        this = _COPASI.new_CSteadyStateTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSteadyStateTask
    __del__ = lambda self: None

    def updateMatrices(self):
        """updateMatrices(CSteadyStateTask self) -> bool"""
        return _COPASI.CSteadyStateTask_updateMatrices(self)


    def restore(self):
        """restore(CSteadyStateTask self) -> bool"""
        return _COPASI.CSteadyStateTask_restore(self)


    def getState(self):
        """getState(CSteadyStateTask self) -> FloatVectorCore"""
        return _COPASI.CSteadyStateTask_getState(self)


    def getJacobian(self):
        """getJacobian(CSteadyStateTask self) -> FloatMatrix"""
        return _COPASI.CSteadyStateTask_getJacobian(self)


    def getJacobianAnnotated(self):
        """getJacobianAnnotated(CSteadyStateTask self) -> CDataArray"""
        return _COPASI.CSteadyStateTask_getJacobianAnnotated(self)


    def getJacobianReduced(self):
        """getJacobianReduced(CSteadyStateTask self) -> FloatMatrix"""
        return _COPASI.CSteadyStateTask_getJacobianReduced(self)


    def getJacobianXAnnotated(self):
        """getJacobianXAnnotated(CSteadyStateTask self) -> CDataArray"""
        return _COPASI.CSteadyStateTask_getJacobianXAnnotated(self)


    def getEigenValues(self):
        """getEigenValues(CSteadyStateTask self) -> CEigen"""
        return _COPASI.CSteadyStateTask_getEigenValues(self)


    def getEigenValuesReduced(self):
        """getEigenValuesReduced(CSteadyStateTask self) -> CEigen"""
        return _COPASI.CSteadyStateTask_getEigenValuesReduced(self)


    def getResult(self):
        """getResult(CSteadyStateTask self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CSteadyStateTask_getResult(self)

CSteadyStateTask_swigregister = _COPASI.CSteadyStateTask_swigregister
CSteadyStateTask_swigregister(CSteadyStateTask)

class CNewtonMethod(CSteadyStateMethod):
    """Proxy of C++ CNewtonMethod class."""

    __swig_setmethods__ = {}
    for _s in [CSteadyStateMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNewtonMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CSteadyStateMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNewtonMethod, name)
    __repr__ = _swig_repr
    eTargetCriterion_DistanceAndRate = _COPASI.CNewtonMethod_eTargetCriterion_DistanceAndRate
    eTargetCriterion_Distance = _COPASI.CNewtonMethod_eTargetCriterion_Distance
    eTargetCriterion_Rate = _COPASI.CNewtonMethod_eTargetCriterion_Rate
    eTargetCriterion___SIZE = _COPASI.CNewtonMethod_eTargetCriterion___SIZE

    def __init__(self, *args):
        """
        __init__(CNewtonMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CNewtonMethod
        __init__(CNewtonMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CNewtonMethod
        __init__(CNewtonMethod self, CDataContainer pParent) -> CNewtonMethod
        __init__(CNewtonMethod self, CNewtonMethod src, CDataContainer pParent) -> CNewtonMethod
        """
        this = _COPASI.new_CNewtonMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CNewtonMethod
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CNewtonMethod self) -> bool"""
        return _COPASI.CNewtonMethod_elevateChildren(self)


    def processInternal(self):
        """processInternal(CNewtonMethod self) -> CSteadyStateMethod::ReturnCode"""
        return _COPASI.CNewtonMethod_processInternal(self)


    def isSteadyState(self, value):
        """isSteadyState(CNewtonMethod self, double const & value) -> bool"""
        return _COPASI.CNewtonMethod_isSteadyState(self, value)


    def targetFunction(self):
        """targetFunction(CNewtonMethod self) -> double"""
        return _COPASI.CNewtonMethod_targetFunction(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CNewtonMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CNewtonMethod_isValidProblem(self, pProblem)


    def initialize(self, pProblem):
        """initialize(CNewtonMethod self, CSteadyStateProblem pProblem) -> bool"""
        return _COPASI.CNewtonMethod_initialize(self, pProblem)

CNewtonMethod_swigregister = _COPASI.CNewtonMethod_swigregister
CNewtonMethod_swigregister(CNewtonMethod)
CNewtonMethod.TargetCriterion = _COPASI.cvar.CNewtonMethod_TargetCriterion

class CScanItem(_object):
    """Proxy of C++ CScanItem class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def createScanItemFromParameterGroup(si, rg):
        """createScanItemFromParameterGroup(CCopasiParameterGroup si, CRandom rg) -> CScanItem"""
        return _COPASI.CScanItem_createScanItemFromParameterGroup(si, rg)

    createScanItemFromParameterGroup = staticmethod(createScanItemFromParameterGroup)

    def getNumSteps(self):
        """getNumSteps(CScanItem self) -> size_t"""
        return _COPASI.CScanItem_getNumSteps(self)


    def restoreValue(self):
        """restoreValue(CScanItem self)"""
        return _COPASI.CScanItem_restoreValue(self)


    def storeValue(self):
        """storeValue(CScanItem self)"""
        return _COPASI.CScanItem_storeValue(self)


    def reset(self):
        """reset(CScanItem self)"""
        return _COPASI.CScanItem_reset(self)


    def isFinished(self):
        """isFinished(CScanItem self) -> bool"""
        return _COPASI.CScanItem_isFinished(self)


    def step(self):
        """step(CScanItem self)"""
        return _COPASI.CScanItem_step(self)


    def isNesting(self):
        """isNesting(CScanItem self) -> bool"""
        return _COPASI.CScanItem_isNesting(self)

    __swig_destroy__ = _COPASI.delete_CScanItem
    __del__ = lambda self: None

    def isValidScanItem(self, continueFromCurrentState):
        """isValidScanItem(CScanItem self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItem_isValidScanItem(self, continueFromCurrentState)


    def getObject(self):
        """getObject(CScanItem self) -> CObjectInterface"""
        return _COPASI.CScanItem_getObject(self)


    __metaclass__ = AutoProperty

CScanItem_swigregister = _COPASI.CScanItem_swigregister
CScanItem_swigregister(CScanItem)

def CScanItem_createScanItemFromParameterGroup(si, rg):
    """CScanItem_createScanItemFromParameterGroup(CCopasiParameterGroup si, CRandom rg) -> CScanItem"""
    return _COPASI.CScanItem_createScanItemFromParameterGroup(si, rg)

class CScanItemRepeat(CScanItem):
    """Proxy of C++ CScanItemRepeat class."""

    __swig_setmethods__ = {}
    for _s in [CScanItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemRepeat, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemRepeat, name)
    __repr__ = _swig_repr

    def __init__(self, si):
        """__init__(CScanItemRepeat self, CCopasiParameterGroup si) -> CScanItemRepeat"""
        this = _COPASI.new_CScanItemRepeat(si)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self):
        """step(CScanItemRepeat self)"""
        return _COPASI.CScanItemRepeat_step(self)

    __swig_destroy__ = _COPASI.delete_CScanItemRepeat
    __del__ = lambda self: None

    def isValidScanItem(self, continueFromCurrentState):
        """isValidScanItem(CScanItemRepeat self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItemRepeat_isValidScanItem(self, continueFromCurrentState)

CScanItemRepeat_swigregister = _COPASI.CScanItemRepeat_swigregister
CScanItemRepeat_swigregister(CScanItemRepeat)

class CScanItemLinear(CScanItem):
    """Proxy of C++ CScanItemLinear class."""

    __swig_setmethods__ = {}
    for _s in [CScanItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemLinear, name)
    __repr__ = _swig_repr

    def __init__(self, si):
        """__init__(CScanItemLinear self, CCopasiParameterGroup si) -> CScanItemLinear"""
        this = _COPASI.new_CScanItemLinear(si)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self):
        """step(CScanItemLinear self)"""
        return _COPASI.CScanItemLinear_step(self)

    __swig_destroy__ = _COPASI.delete_CScanItemLinear
    __del__ = lambda self: None

    def isValidScanItem(self, continueFromCurrentState):
        """isValidScanItem(CScanItemLinear self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItemLinear_isValidScanItem(self, continueFromCurrentState)

CScanItemLinear_swigregister = _COPASI.CScanItemLinear_swigregister
CScanItemLinear_swigregister(CScanItemLinear)

class CScanItemRandom(CScanItem):
    """Proxy of C++ CScanItemRandom class."""

    __swig_setmethods__ = {}
    for _s in [CScanItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanItemRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [CScanItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanItemRandom, name)
    __repr__ = _swig_repr

    def __init__(self, si, rg):
        """__init__(CScanItemRandom self, CCopasiParameterGroup si, CRandom rg) -> CScanItemRandom"""
        this = _COPASI.new_CScanItemRandom(si, rg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CScanItemRandom
    __del__ = lambda self: None

    def step(self):
        """step(CScanItemRandom self)"""
        return _COPASI.CScanItemRandom_step(self)


    def isNesting(self):
        """isNesting(CScanItemRandom self) -> bool"""
        return _COPASI.CScanItemRandom_isNesting(self)

CScanItemRandom_swigregister = _COPASI.CScanItemRandom_swigregister
CScanItemRandom_swigregister(CScanItemRandom)

class CScanMethod(CCopasiMethod):
    """Proxy of C++ CScanMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CScanMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CScanMethod
        __init__(CScanMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CScanMethod
        __init__(CScanMethod self, CDataContainer pParent) -> CScanMethod
        """
        this = _COPASI.new_CScanMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CScanMethod
    __del__ = lambda self: None

    def setProblem(self, problem):
        """setProblem(CScanMethod self, CScanProblem problem)"""
        return _COPASI.CScanMethod_setProblem(self, problem)


    def scan(self):
        """scan(CScanMethod self) -> bool"""
        return _COPASI.CScanMethod_scan(self)


    def getTotalNumberOfSteps(self):
        """getTotalNumberOfSteps(CScanMethod self) -> size_t"""
        return _COPASI.CScanMethod_getTotalNumberOfSteps(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CScanMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CScanMethod_isValidProblem(self, pProblem)

CScanMethod_swigregister = _COPASI.CScanMethod_swigregister
CScanMethod_swigregister(CScanMethod)

class CScanProblem(CCopasiProblem):
    """Proxy of C++ CScanProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanProblem, name)
    __repr__ = _swig_repr
    SCAN_REPEAT = _COPASI.CScanProblem_SCAN_REPEAT
    SCAN_LINEAR = _COPASI.CScanProblem_SCAN_LINEAR
    SCAN_RANDOM = _COPASI.CScanProblem_SCAN_RANDOM
    SCAN_BREAK = _COPASI.CScanProblem_SCAN_BREAK

    def __init__(self, *args):
        """
        __init__(CScanProblem self, CDataContainer pParent) -> CScanProblem
        __init__(CScanProblem self) -> CScanProblem
        __init__(CScanProblem self, CScanProblem src, CDataContainer pParent) -> CScanProblem
        """
        this = _COPASI.new_CScanProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CScanProblem
    __del__ = lambda self: None

    def setSubtask(self, type):
        """setSubtask(CScanProblem self, CTaskEnum::Task type)"""
        return _COPASI.CScanProblem_setSubtask(self, type)


    def getSubtask(self):
        """getSubtask(CScanProblem self) -> CTaskEnum::Task"""
        return _COPASI.CScanProblem_getSubtask(self)


    def setOutputInSubtask(self, ois):
        """setOutputInSubtask(CScanProblem self, bool ois)"""
        return _COPASI.CScanProblem_setOutputInSubtask(self, ois)


    def getOutputInSubtask(self):
        """getOutputInSubtask(CScanProblem self) -> bool const &"""
        return _COPASI.CScanProblem_getOutputInSubtask(self)


    def setContinueFromCurrentState(self, aic):
        """setContinueFromCurrentState(CScanProblem self, bool aic)"""
        return _COPASI.CScanProblem_setContinueFromCurrentState(self, aic)


    def getContinueFromCurrentState(self):
        """getContinueFromCurrentState(CScanProblem self) -> bool"""
        return _COPASI.CScanProblem_getContinueFromCurrentState(self)


    def getContinueOnError(self):
        """getContinueOnError(CScanProblem self) -> bool"""
        return _COPASI.CScanProblem_getContinueOnError(self)


    def setContinueOnError(self, coe):
        """setContinueOnError(CScanProblem self, bool coe)"""
        return _COPASI.CScanProblem_setContinueOnError(self, coe)


    def getNumberOfScanItems(self):
        """getNumberOfScanItems(CScanProblem self) -> size_t"""
        return _COPASI.CScanProblem_getNumberOfScanItems(self)


    def getScanItem(self, index):
        """getScanItem(CScanProblem self, size_t index) -> CCopasiParameterGroup"""
        return _COPASI.CScanProblem_getScanItem(self, index)


    def addScanItem(self, type, steps=5, obj=None):
        """
        addScanItem(CScanProblem self, CScanProblem::Type type, size_t steps=5, CDataObject obj=None) -> CCopasiParameterGroup
        addScanItem(CScanProblem self, CScanProblem::Type type, size_t steps=5) -> CCopasiParameterGroup
        addScanItem(CScanProblem self, CScanProblem::Type type) -> CCopasiParameterGroup
        """
        return _COPASI.CScanProblem_addScanItem(self, type, steps, obj)


    def removeScanItem(self, index):
        """removeScanItem(CScanProblem self, size_t const & index) -> bool"""
        return _COPASI.CScanProblem_removeScanItem(self, index)


    def createScanItem(type, steps=5, obj=None):
        """
        createScanItem(CScanProblem::Type type, size_t steps=5, CDataObject obj=None) -> CCopasiParameterGroup
        createScanItem(CScanProblem::Type type, size_t steps=5) -> CCopasiParameterGroup
        createScanItem(CScanProblem::Type type) -> CCopasiParameterGroup
        """
        return _COPASI.CScanProblem_createScanItem(type, steps, obj)

    createScanItem = staticmethod(createScanItem)

    def clearScanItems(self):
        """clearScanItems(CScanProblem self)"""
        return _COPASI.CScanProblem_clearScanItems(self)


    def fixBuild81(self):
        """fixBuild81(CScanProblem self)"""
        return _COPASI.CScanProblem_fixBuild81(self)

CScanProblem_swigregister = _COPASI.CScanProblem_swigregister
CScanProblem_swigregister(CScanProblem)

def CScanProblem_createScanItem(type, steps=5, obj=None):
    """
    createScanItem(CScanProblem::Type type, size_t steps=5, CDataObject obj=None) -> CCopasiParameterGroup
    createScanItem(CScanProblem::Type type, size_t steps=5) -> CCopasiParameterGroup
    CScanProblem_createScanItem(CScanProblem::Type type) -> CCopasiParameterGroup
    """
    return _COPASI.CScanProblem_createScanItem(type, steps, obj)

class CScanTask(CCopasiTask):
    """Proxy of C++ CScanTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScanTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScanTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CScanTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CScanTask
        __init__(CScanTask self, CDataContainer pParent) -> CScanTask
        __init__(CScanTask self, CScanTask src, CDataContainer pParent) -> CScanTask
        """
        this = _COPASI.new_CScanTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CScanTask
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CScanTask self)"""
        return _COPASI.CScanTask_cleanup(self)


    def processCallback(self):
        """processCallback(CScanTask self) -> bool"""
        return _COPASI.CScanTask_processCallback(self)


    def outputSeparatorCallback(self, isLast=False):
        """
        outputSeparatorCallback(CScanTask self, bool isLast=False) -> bool
        outputSeparatorCallback(CScanTask self) -> bool
        """
        return _COPASI.CScanTask_outputSeparatorCallback(self, isLast)


    def fixBuild81(self):
        """fixBuild81(CScanTask self)"""
        return _COPASI.CScanTask_fixBuild81(self)

CScanTask_swigregister = _COPASI.CScanTask_swigregister
CScanTask_swigregister(CScanTask)

class CLyapMethod(CCopasiMethod):
    """Proxy of C++ CLyapMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isValidSubType(subType):
        """isValidSubType(CTaskEnum::Method const & subType) -> bool"""
        return _COPASI.CLyapMethod_isValidSubType(subType)

    isValidSubType = staticmethod(isValidSubType)
    __swig_destroy__ = _COPASI.delete_CLyapMethod
    __del__ = lambda self: None

    def setProblem(self, problem):
        """setProblem(CLyapMethod self, CLyapProblem problem)"""
        return _COPASI.CLyapMethod_setProblem(self, problem)


    def step(self, deltaT):
        """step(CLyapMethod self, double const & deltaT) -> double"""
        return _COPASI.CLyapMethod_step(self, deltaT)


    def calculate(self):
        """calculate(CLyapMethod self) -> bool"""
        return _COPASI.CLyapMethod_calculate(self)


    def start(self, initialState):
        """start(CLyapMethod self, FloatVectorCore initialState)"""
        return _COPASI.CLyapMethod_start(self, initialState)


    def isValidProblem(self, pProblem):
        """isValidProblem(CLyapMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CLyapMethod_isValidProblem(self, pProblem)

CLyapMethod_swigregister = _COPASI.CLyapMethod_swigregister
CLyapMethod_swigregister(CLyapMethod)

def CLyapMethod_isValidSubType(subType):
    """CLyapMethod_isValidSubType(CTaskEnum::Method const & subType) -> bool"""
    return _COPASI.CLyapMethod_isValidSubType(subType)

class CLyapProblem(CCopasiProblem):
    """Proxy of C++ CLyapProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLyapProblem self, CDataContainer pParent) -> CLyapProblem
        __init__(CLyapProblem self) -> CLyapProblem
        __init__(CLyapProblem self, CLyapProblem src, CDataContainer pParent) -> CLyapProblem
        """
        this = _COPASI.new_CLyapProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLyapProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CLyapProblem self) -> bool"""
        return _COPASI.CLyapProblem_elevateChildren(self)


    def setExponentNumber(self, number):
        """setExponentNumber(CLyapProblem self, unsigned int const & number)"""
        return _COPASI.CLyapProblem_setExponentNumber(self, number)


    def getExponentNumber(self):
        """getExponentNumber(CLyapProblem self) -> unsigned int const &"""
        return _COPASI.CLyapProblem_getExponentNumber(self)


    def setTransientTime(self, endTime):
        """setTransientTime(CLyapProblem self, double const & endTime)"""
        return _COPASI.CLyapProblem_setTransientTime(self, endTime)


    def getTransientTime(self):
        """getTransientTime(CLyapProblem self) -> double const &"""
        return _COPASI.CLyapProblem_getTransientTime(self)


    def setDivergenceRequested(self, flag):
        """setDivergenceRequested(CLyapProblem self, bool flag)"""
        return _COPASI.CLyapProblem_setDivergenceRequested(self, flag)


    def divergenceRequested(self):
        """divergenceRequested(CLyapProblem self) -> bool"""
        return _COPASI.CLyapProblem_divergenceRequested(self)

CLyapProblem_swigregister = _COPASI.CLyapProblem_swigregister
CLyapProblem_swigregister(CLyapProblem)

class CLyapTask(CCopasiTask):
    """Proxy of C++ CLyapTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLyapTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLyapTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLyapTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CLyapTask
        __init__(CLyapTask self, CDataContainer pParent) -> CLyapTask
        """
        this = _COPASI.new_CLyapTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLyapTask
    __del__ = lambda self: None

    def exponents(self):
        """exponents(CLyapTask self) -> FloatVector"""
        return _COPASI.CLyapTask_exponents(self)


    def sumOfExponents(self):
        """sumOfExponents(CLyapTask self) -> double const &"""
        return _COPASI.CLyapTask_sumOfExponents(self)


    def averageDivergence(self):
        """averageDivergence(CLyapTask self) -> double const &"""
        return _COPASI.CLyapTask_averageDivergence(self)


    def resultAvailable(self):
        """resultAvailable(CLyapTask self) -> bool"""
        return _COPASI.CLyapTask_resultAvailable(self)


    def resultHasDivergence(self):
        """resultHasDivergence(CLyapTask self) -> bool"""
        return _COPASI.CLyapTask_resultHasDivergence(self)


    def modelVariablesInResult(self):
        """modelVariablesInResult(CLyapTask self) -> size_t"""
        return _COPASI.CLyapTask_modelVariablesInResult(self)


    def numberOfExponentsCalculated(self):
        """numberOfExponentsCalculated(CLyapTask self) -> size_t"""
        return _COPASI.CLyapTask_numberOfExponentsCalculated(self)


    def methodCallback(self, percentage, onlyProgress):
        """methodCallback(CLyapTask self, double const & percentage, bool onlyProgress) -> bool"""
        return _COPASI.CLyapTask_methodCallback(self, percentage, onlyProgress)

CLyapTask_swigregister = _COPASI.CLyapTask_swigregister
CLyapTask_swigregister(CLyapTask)

class COptItem(CCopasiParameterGroup):
    """Proxy of C++ COptItem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptItem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptItem self, CDataContainer pParent, std::string const & name) -> COptItem
        __init__(COptItem self, CDataContainer pParent) -> COptItem
        __init__(COptItem self, COptItem src, CDataContainer pParent) -> COptItem
        __init__(COptItem self, CCopasiParameterGroup group, CDataContainer pParent) -> COptItem
        """
        this = _COPASI.new_COptItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptItem
    __del__ = lambda self: None

    def setObjectCN(self, objectCN):
        """setObjectCN(COptItem self, CCommonName objectCN) -> bool"""
        return _COPASI.COptItem_setObjectCN(self, objectCN)


    def getObjectCN(self):
        """getObjectCN(COptItem self) -> CCommonName"""
        return _COPASI.COptItem_getObjectCN(self)


    def getObject(self):
        """getObject(COptItem self) -> CObjectInterface"""
        return _COPASI.COptItem_getObject(self)


    def getObjectDisplayName(self):
        """getObjectDisplayName(COptItem self) -> std::string"""
        return _COPASI.COptItem_getObjectDisplayName(self)


    def setLowerBound(self, lowerBound):
        """setLowerBound(COptItem self, CCommonName lowerBound) -> bool"""
        return _COPASI.COptItem_setLowerBound(self, lowerBound)


    def getLowerBound(self):
        """getLowerBound(COptItem self) -> std::string const"""
        return _COPASI.COptItem_getLowerBound(self)


    def setUpperBound(self, upperBound):
        """setUpperBound(COptItem self, CCommonName upperBound) -> bool"""
        return _COPASI.COptItem_setUpperBound(self, upperBound)


    def getUpperBound(self):
        """getUpperBound(COptItem self) -> std::string const"""
        return _COPASI.COptItem_getUpperBound(self)


    def isValid(*args):
        """
        isValid() -> bool
        isValid(CCopasiParameterGroup group) -> bool
        """
        return _COPASI.COptItem_isValid(*args)

    isValid = staticmethod(isValid)

    def compile(self, *args):
        """
        compile(COptItem self, ContainerList listOfContainer) -> bool
        compile(COptItem self) -> bool
        """
        return _COPASI.COptItem_compile(self, *args)


    def getConstraintViolation(self):
        """getConstraintViolation(COptItem self) -> double"""
        return _COPASI.COptItem_getConstraintViolation(self)


    def checkConstraint(self, *args):
        """
        checkConstraint(COptItem self) -> int
        checkConstraint(COptItem self, double const & value) -> int
        """
        return _COPASI.COptItem_checkConstraint(self, *args)


    def checkLowerBound(self, value):
        """checkLowerBound(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_checkLowerBound(self, value)


    def checkUpperBound(self, value):
        """checkUpperBound(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_checkUpperBound(self, value)


    def setStartValue(self, value):
        """setStartValue(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_setStartValue(self, value)


    def getStartValue(self):
        """getStartValue(COptItem self) -> double const &"""
        return _COPASI.COptItem_getStartValue(self)


    def getLastStartValue(self):
        """getLastStartValue(COptItem self) -> double const &"""
        return _COPASI.COptItem_getLastStartValue(self)


    def rememberStartValue(self):
        """rememberStartValue(COptItem self)"""
        return _COPASI.COptItem_rememberStartValue(self)


    def getRandomValue(self, Random):
        """getRandomValue(COptItem self, CRandom Random) -> double"""
        return _COPASI.COptItem_getRandomValue(self, Random)


    def getObjectValue(self):
        """getObjectValue(COptItem self) -> double"""
        return _COPASI.COptItem_getObjectValue(self)


    def getLowerBoundValue(self):
        """getLowerBoundValue(COptItem self) -> double"""
        return _COPASI.COptItem_getLowerBoundValue(self)


    def getUpperBoundValue(self):
        """getUpperBoundValue(COptItem self) -> double"""
        return _COPASI.COptItem_getUpperBoundValue(self)


    def asFitItem(self):
        """asFitItem(COptItem self) -> CFitItem"""
        return _COPASI.COptItem_asFitItem(self)

COptItem_swigregister = _COPASI.COptItem_swigregister
COptItem_swigregister(COptItem)

def COptItem_isValid(*args):
    """
    isValid() -> bool
    COptItem_isValid(CCopasiParameterGroup group) -> bool
    """
    return _COPASI.COptItem_isValid(*args)

class COptLogItem(_object):
    """Proxy of C++ COptLogItem class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptLogItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COptLogItem, name)
    __repr__ = _swig_repr
    STD_start = _COPASI.COptLogItem_STD_start
    STD_start_nodoc = _COPASI.COptLogItem_STD_start_nodoc
    STD_early_stop = _COPASI.COptLogItem_STD_early_stop
    STD_finish = _COPASI.COptLogItem_STD_finish
    STD_finish_x_of_max_iter = _COPASI.COptLogItem_STD_finish_x_of_max_iter
    STD_finish_x_of_max_gener = _COPASI.COptLogItem_STD_finish_x_of_max_gener
    STD_finish_temp_info = _COPASI.COptLogItem_STD_finish_temp_info
    STD_initial_point_out_of_domain = _COPASI.COptLogItem_STD_initial_point_out_of_domain
    PS_usrdef_error_swarm_size = _COPASI.COptLogItem_PS_usrdef_error_swarm_size
    PS_info_informants = _COPASI.COptLogItem_PS_info_informants
    PS_no_particle_improved = _COPASI.COptLogItem_PS_no_particle_improved
    PS_stddev_lower_than_tol_termination = _COPASI.COptLogItem_PS_stddev_lower_than_tol_termination
    SA_steps_per_temp = _COPASI.COptLogItem_SA_steps_per_temp
    SA_fval_progress_lower_than_tol = _COPASI.COptLogItem_SA_fval_progress_lower_than_tol
    SA_fval_tol_termination = _COPASI.COptLogItem_SA_fval_tol_termination
    DE_usrdef_error_pop_size = _COPASI.COptLogItem_DE_usrdef_error_pop_size
    DE_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_DE_fittest_not_changed_x_random_generated
    GA_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_GA_fittest_not_changed_x_random_generated
    GASR_usrdef_error_pf = _COPASI.COptLogItem_GASR_usrdef_error_pf
    GASR_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_GASR_fittest_not_changed_x_random_generated
    HJ_steplength_lower_than_tol = _COPASI.COptLogItem_HJ_steplength_lower_than_tol
    LM_hess_pos_def = _COPASI.COptLogItem_LM_hess_pos_def
    LM_hess_not_pos_def = _COPASI.COptLogItem_LM_hess_not_pos_def
    LM_fval_and_param_change_lower_than_tol = _COPASI.COptLogItem_LM_fval_and_param_change_lower_than_tol
    LM_fval_and_param_change_lower_than_tol_termination = _COPASI.COptLogItem_LM_fval_and_param_change_lower_than_tol_termination
    LM_lambda_max_termination = _COPASI.COptLogItem_LM_lambda_max_termination
    LM_inc_lambda = _COPASI.COptLogItem_LM_inc_lambda
    LM_count_edge_of_param_domain = _COPASI.COptLogItem_LM_count_edge_of_param_domain
    CW_min_step_size = _COPASI.COptLogItem_CW_min_step_size
    NM_fval_change_lower_than_tol = _COPASI.COptLogItem_NM_fval_change_lower_than_tol
    NM_local_min_termination = _COPASI.COptLogItem_NM_local_min_termination
    NM_no_local_min_reducing_simplex = _COPASI.COptLogItem_NM_no_local_min_reducing_simplex
    SRES_usrdef_error_pf = _COPASI.COptLogItem_SRES_usrdef_error_pf
    SRES_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_SRES_fittest_not_changed_x_random_generated
    TN_next_repeat = _COPASI.COptLogItem_TN_next_repeat

    def __init__(self, *args):
        """
        __init__(COptLogItem self, COptLogItem::MsgID id, std::string const & statusDump) -> COptLogItem
        __init__(COptLogItem self, COptLogItem::MsgID id) -> COptLogItem
        """
        this = _COPASI.new_COptLogItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptLogItem
    __del__ = lambda self: None

    def iter(self, val):
        """iter(COptLogItem self, size_t val) -> COptLogItem"""
        return _COPASI.COptLogItem_iter(self, val)


    def getMsgId(self):
        """getMsgId(COptLogItem self) -> COptLogItem::MsgID"""
        return _COPASI.COptLogItem_getMsgId(self)


    def getHeader(self):
        """getHeader(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getHeader(self)


    def getSubtext(self):
        """getSubtext(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getSubtext(self)


    def getStatusDetails(self):
        """getStatusDetails(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getStatusDetails(self)

COptLogItem_swigregister = _COPASI.COptLogItem_swigregister
COptLogItem_swigregister(COptLogItem)

class COptLog(_object):
    """Proxy of C++ COptLog class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COptLog, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(COptLog self) -> COptLog"""
        this = _COPASI.new_COptLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptLog
    __del__ = lambda self: None

    def enterLogEntry(self, entry):
        """enterLogEntry(COptLog self, COptLogEntry entry)"""
        return _COPASI.COptLog_enterLogEntry(self, entry)


    def getElementCount(self):
        """getElementCount(COptLog self) -> size_t"""
        return _COPASI.COptLog_getElementCount(self)


    def getPlainLog(self):
        """getPlainLog(COptLog self) -> std::string"""
        return _COPASI.COptLog_getPlainLog(self)


    def getRichLog(self):
        """getRichLog(COptLog self) -> std::string"""
        return _COPASI.COptLog_getRichLog(self)

COptLog_swigregister = _COPASI.COptLog_swigregister
COptLog_swigregister(COptLog)

class COptMethod(CCopasiMethod):
    """Proxy of C++ COptMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethod
        __init__(COptMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethod
        __init__(COptMethod self, COptMethod src, CDataContainer pParent) -> COptMethod
        """
        this = _COPASI.new_COptMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethod
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethod self) -> bool"""
        return _COPASI.COptMethod_optimise(self)


    def setProblem(self, problem):
        """setProblem(COptMethod self, COptProblem problem)"""
        return _COPASI.COptMethod_setProblem(self, problem)


    def initialize(self):
        """initialize(COptMethod self) -> bool"""
        return _COPASI.COptMethod_initialize(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(COptMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.COptMethod_isValidProblem(self, pProblem)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethod self) -> unsigned int"""
        return _COPASI.COptMethod_getMaxLogVerbosity(self)


    def getMethodLog(self):
        """getMethodLog(COptMethod self) -> COptLog"""
        return _COPASI.COptMethod_getMethodLog(self)

COptMethod_swigregister = _COPASI.COptMethod_swigregister
COptMethod_swigregister(COptMethod)

class COptPopulationMethod(COptMethod):
    """Proxy of C++ COptPopulationMethod class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptPopulationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptPopulationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptPopulationMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptPopulationMethod
        __init__(COptPopulationMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptPopulationMethod
        __init__(COptPopulationMethod self, COptPopulationMethod src, CDataContainer pParent) -> COptPopulationMethod
        """
        this = _COPASI.new_COptPopulationMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptPopulationMethod
    __del__ = lambda self: None

    def initObjects(self):
        """initObjects(COptPopulationMethod self)"""
        return _COPASI.COptPopulationMethod_initObjects(self)


    def initialize(self):
        """initialize(COptPopulationMethod self) -> bool"""
        return _COPASI.COptPopulationMethod_initialize(self)


    def cleanup(self):
        """cleanup(COptPopulationMethod self) -> bool"""
        return _COPASI.COptPopulationMethod_cleanup(self)


    def getPopulationSize(self):
        """getPopulationSize(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getPopulationSize(self)


    def getNumGenerations(self):
        """getNumGenerations(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getNumGenerations(self)


    def getCurrentGeneration(self):
        """getCurrentGeneration(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getCurrentGeneration(self)


    def getPopulation(self):
        """getPopulation(COptPopulationMethod self) -> std::vector< CVector< double > *,std::allocator< CVector< double > * > > const &"""
        return _COPASI.COptPopulationMethod_getPopulation(self)


    def getObjectiveValues(self):
        """getObjectiveValues(COptPopulationMethod self) -> FloatVector"""
        return _COPASI.COptPopulationMethod_getObjectiveValues(self)

COptPopulationMethod_swigregister = _COPASI.COptPopulationMethod_swigregister
COptPopulationMethod_swigregister(COptPopulationMethod)

class FloatCVector(FloatVectorCore):
    """Proxy of C++ CVector<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatVectorCore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatCVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatVectorCore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatCVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CVector<(double)> self, size_t size=0) -> FloatCVector
        __init__(CVector<(double)> self) -> FloatCVector
        __init__(CVector<(double)> self, FloatVectorCore src) -> FloatCVector
        __init__(CVector<(double)> self, FloatVector src) -> FloatCVector
        """
        this = _COPASI.new_FloatCVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_FloatCVector
    __del__ = lambda self: None
FloatCVector_swigregister = _COPASI.FloatCVector_swigregister
FloatCVector_swigregister(FloatCVector)

SteadyState = _COPASI.SteadyState
Trajectory = _COPASI.Trajectory
class COptProblem(CCopasiProblem):
    """Proxy of C++ COptProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptProblem self, CTaskEnum::Task const & type, CDataContainer pParent) -> COptProblem
        __init__(COptProblem self, CTaskEnum::Task const & type) -> COptProblem
        __init__(COptProblem self) -> COptProblem
        __init__(COptProblem self, COptProblem src, CDataContainer pParent) -> COptProblem
        """
        this = _COPASI.new_COptProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(COptProblem self) -> bool"""
        return _COPASI.COptProblem_elevateChildren(self)


    def setCallBack(self, pCallBack):
        """setCallBack(COptProblem self, CProcessReport pCallBack) -> bool"""
        return _COPASI.COptProblem_setCallBack(self, pCallBack)


    def initializeSubtaskBeforeOutput(self):
        """initializeSubtaskBeforeOutput(COptProblem self) -> bool"""
        return _COPASI.COptProblem_initializeSubtaskBeforeOutput(self)


    def reset(self):
        """reset(COptProblem self)"""
        return _COPASI.COptProblem_reset(self)


    def calculateStatistics(self, factor=1.0e-003, resolution=1.0e-009):
        """
        calculateStatistics(COptProblem self, double const & factor=1.0e-003, double const & resolution=1.0e-009) -> bool
        calculateStatistics(COptProblem self, double const & factor=1.0e-003) -> bool
        calculateStatistics(COptProblem self) -> bool
        """
        return _COPASI.COptProblem_calculateStatistics(self, factor, resolution)


    def getOptItemList(self):
        """getOptItemList(COptProblem self) -> OptItemStdVector"""
        return _COPASI.COptProblem_getOptItemList(self)


    def getConstraintList(self):
        """getConstraintList(COptProblem self) -> OptItemStdVector"""
        return _COPASI.COptProblem_getConstraintList(self)


    def getContainerVariables(self):
        """getContainerVariables(COptProblem self) -> CVectorCore< double * > &"""
        return _COPASI.COptProblem_getContainerVariables(self)


    def getCalculateValue(self):
        """getCalculateValue(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getCalculateValue(self)


    def getSolutionVariables(self):
        """getSolutionVariables(COptProblem self) -> FloatVector"""
        return _COPASI.COptProblem_getSolutionVariables(self)


    def getVariableGradients(self):
        """getVariableGradients(COptProblem self) -> FloatVector"""
        return _COPASI.COptProblem_getVariableGradients(self)


    def setSolution(self, value, variables):
        """setSolution(COptProblem self, double const & value, FloatVector variables) -> bool"""
        return _COPASI.COptProblem_setSolution(self, value, variables)


    def getSolutionValue(self):
        """getSolutionValue(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getSolutionValue(self)


    def getOptItem(self, index):
        """getOptItem(COptProblem self, size_t const & index) -> COptItem"""
        return _COPASI.COptProblem_getOptItem(self, index)


    def getOptItemSize(self):
        """getOptItemSize(COptProblem self) -> size_t"""
        return _COPASI.COptProblem_getOptItemSize(self)


    def addOptItem(self, objectCN):
        """addOptItem(COptProblem self, CCommonName objectCN) -> COptItem"""
        return _COPASI.COptProblem_addOptItem(self, objectCN)


    def removeOptItem(self, index):
        """removeOptItem(COptProblem self, size_t const & index) -> bool"""
        return _COPASI.COptProblem_removeOptItem(self, index)


    def swapOptItem(self, iFrom, iTo):
        """swapOptItem(COptProblem self, size_t const & iFrom, size_t const & iTo) -> bool"""
        return _COPASI.COptProblem_swapOptItem(self, iFrom, iTo)


    def setObjectiveFunction(self, infix):
        """setObjectiveFunction(COptProblem self, std::string const & infix) -> bool"""
        return _COPASI.COptProblem_setObjectiveFunction(self, infix)


    def getObjectiveFunction(self):
        """getObjectiveFunction(COptProblem self) -> std::string const"""
        return _COPASI.COptProblem_getObjectiveFunction(self)


    def setSubtaskType(self, subtaskType):
        """setSubtaskType(COptProblem self, CTaskEnum::Task const & subtaskType) -> bool"""
        return _COPASI.COptProblem_setSubtaskType(self, subtaskType)


    def getSubtaskType(self):
        """getSubtaskType(COptProblem self) -> CTaskEnum::Task"""
        return _COPASI.COptProblem_getSubtaskType(self)


    def setMaximize(self, maximize):
        """setMaximize(COptProblem self, bool const & maximize)"""
        return _COPASI.COptProblem_setMaximize(self, maximize)


    def maximize(self):
        """maximize(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_maximize(self)


    def setRandomizeStartValues(self, randomize):
        """setRandomizeStartValues(COptProblem self, bool const & randomize)"""
        return _COPASI.COptProblem_setRandomizeStartValues(self, randomize)


    def getRandomizeStartValues(self):
        """getRandomizeStartValues(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_getRandomizeStartValues(self)


    def randomizeStartValues(self):
        """randomizeStartValues(COptProblem self)"""
        return _COPASI.COptProblem_randomizeStartValues(self)


    def rememberStartValues(self):
        """rememberStartValues(COptProblem self)"""
        return _COPASI.COptProblem_rememberStartValues(self)


    def setCalculateStatistics(self, calculate):
        """setCalculateStatistics(COptProblem self, bool const & calculate)"""
        return _COPASI.COptProblem_setCalculateStatistics(self, calculate)


    def getCalculateStatistics(self):
        """getCalculateStatistics(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_getCalculateStatistics(self)


    def getFunctionEvaluations(self):
        """getFunctionEvaluations(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFunctionEvaluations(self)


    def incrementEvaluations(self, increment):
        """incrementEvaluations(COptProblem self, unsigned int increment)"""
        return _COPASI.COptProblem_incrementEvaluations(self, increment)


    def resetEvaluations(self):
        """resetEvaluations(COptProblem self)"""
        return _COPASI.COptProblem_resetEvaluations(self)


    def getFailedEvaluationsExc(self):
        """getFailedEvaluationsExc(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFailedEvaluationsExc(self)


    def getFailedEvaluationsNaN(self):
        """getFailedEvaluationsNaN(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFailedEvaluationsNaN(self)


    def getExecutionTime(self):
        """getExecutionTime(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getExecutionTime(self)

COptProblem_swigregister = _COPASI.COptProblem_swigregister
COptProblem_swigregister(COptProblem)
COptProblem.ValidSubtasks = _COPASI.cvar.COptProblem_ValidSubtasks

class COptTask(CCopasiTask):
    """Proxy of C++ COptTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> COptTask
        __init__(COptTask self, CDataContainer pParent) -> COptTask
        __init__(COptTask self, COptTask src, CDataContainer pParent) -> COptTask
        """
        this = _COPASI.new_COptTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptTask
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(COptTask self)"""
        return _COPASI.COptTask_cleanup(self)


    def setCallBack(self, pCallBack):
        """setCallBack(COptTask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.COptTask_setCallBack(self, pCallBack)


    def getValidMethods(self):
        """getValidMethods(COptTask self) -> IntStdVector"""
        return _COPASI.COptTask_getValidMethods(self)

COptTask_swigregister = _COPASI.COptTask_swigregister
COptTask_swigregister(COptTask)

class CExperimentFileInfo(_object):
    """Proxy of C++ CExperimentFileInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentFileInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentFileInfo, name)
    __repr__ = _swig_repr

    def __init__(self, set):
        """__init__(CExperimentFileInfo self, CExperimentSet set) -> CExperimentFileInfo"""
        this = _COPASI.new_CExperimentFileInfo(set)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentFileInfo
    __del__ = lambda self: None

    def setFileName(self, fileName):
        """setFileName(CExperimentFileInfo self, std::string const & fileName) -> bool"""
        return _COPASI.CExperimentFileInfo_setFileName(self, fileName)


    def countLines(self):
        """countLines(CExperimentFileInfo self) -> size_t"""
        return _COPASI.CExperimentFileInfo_countLines(self)


    def getFileName(self):
        """getFileName(CExperimentFileInfo self) -> std::string const &"""
        return _COPASI.CExperimentFileInfo_getFileName(self)


    def sync(self):
        """sync(CExperimentFileInfo self) -> bool"""
        return _COPASI.CExperimentFileInfo_sync(self)


    def validate(self):
        """validate(CExperimentFileInfo self) -> bool"""
        return _COPASI.CExperimentFileInfo_validate(self)


    def removeInvalidExperiments(self):
        """removeInvalidExperiments(CExperimentFileInfo self)"""
        return _COPASI.CExperimentFileInfo_removeInvalidExperiments(self)


    def removeLastExperiments(self, start):
        """removeLastExperiments(CExperimentFileInfo self, size_t start)"""
        return _COPASI.CExperimentFileInfo_removeLastExperiments(self, start)


    def validateFirst(self, index, value):
        """validateFirst(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateFirst(self, index, value)


    def validateLast(self, index, value):
        """validateLast(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateLast(self, index, value)


    def validateHeader(self, index, value):
        """validateHeader(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateHeader(self, index, value)


    def getExperimentNames(self):
        """getExperimentNames(CExperimentFileInfo self) -> StringStdVector"""
        return _COPASI.CExperimentFileInfo_getExperimentNames(self)


    def getExperiment(self, name):
        """getExperiment(CExperimentFileInfo self, std::string const & name) -> CExperiment"""
        return _COPASI.CExperimentFileInfo_getExperiment(self, name)


    def getInterruption(self, first, last):
        """getInterruption(CExperimentFileInfo self, size_t first, size_t last) -> size_t"""
        return _COPASI.CExperimentFileInfo_getInterruption(self, first, last)

CExperimentFileInfo_swigregister = _COPASI.CExperimentFileInfo_swigregister
CExperimentFileInfo_swigregister(CExperimentFileInfo)

class CFittingPoint(CDataContainer):
    """Proxy of C++ CFittingPoint class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFittingPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFittingPoint, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CFittingPoint"""
        return _COPASI.CFittingPoint_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CFittingPoint self, std::string const & name, CDataContainer pParent) -> CFittingPoint
        __init__(CFittingPoint self, std::string const & name) -> CFittingPoint
        __init__(CFittingPoint self) -> CFittingPoint
        __init__(CFittingPoint self, CFittingPoint src, CDataContainer pParent) -> CFittingPoint
        """
        this = _COPASI.new_CFittingPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFittingPoint
    __del__ = lambda self: None

    def getObjectDisplayName(self):
        """getObjectDisplayName(CFittingPoint self) -> std::string"""
        return _COPASI.CFittingPoint_getObjectDisplayName(self)


    def getModelObjectCN(self):
        """getModelObjectCN(CFittingPoint self) -> std::string const &"""
        return _COPASI.CFittingPoint_getModelObjectCN(self)


    def setValues(self, independent, measured, fitted, weightedError):
        """setValues(CFittingPoint self, double const & independent, double const & measured, double const & fitted, double const & weightedError)"""
        return _COPASI.CFittingPoint_setValues(self, independent, measured, fitted, weightedError)

CFittingPoint_swigregister = _COPASI.CFittingPoint_swigregister
CFittingPoint_swigregister(CFittingPoint)

def CFittingPoint_fromData(data, pParent):
    """CFittingPoint_fromData(CData data, CUndoObjectInterface pParent) -> CFittingPoint"""
    return _COPASI.CFittingPoint_fromData(data, pParent)

class CExperiment(CCopasiParameterGroup):
    """Proxy of C++ CExperiment class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperiment, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperiment, name)
    __repr__ = _swig_repr
    ignore = _COPASI.CExperiment_ignore
    independent = _COPASI.CExperiment_independent
    dependent = _COPASI.CExperiment_dependent
    time = _COPASI.CExperiment_time
    MEAN = _COPASI.CExperiment_MEAN
    MEAN_SQUARE = _COPASI.CExperiment_MEAN_SQUARE
    SD = _COPASI.CExperiment_SD
    VALUE_SCALING = _COPASI.CExperiment_VALUE_SCALING

    def __init__(self, *args):
        """
        __init__(CExperiment self, CDataContainer pParent, std::string const & name) -> CExperiment
        __init__(CExperiment self, CDataContainer pParent) -> CExperiment
        __init__(CExperiment self, CExperiment src, CDataContainer pParent) -> CExperiment
        __init__(CExperiment self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperiment
        """
        this = _COPASI.new_CExperiment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CExperiment
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CExperiment self) -> bool"""
        return _COPASI.CExperiment_elevateChildren(self)


    def compile(self, pMathContainer):
        """compile(CExperiment self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperiment_compile(self, pMathContainer)


    def calculateWeights(self):
        """calculateWeights(CExperiment self) -> bool"""
        return _COPASI.CExperiment_calculateWeights(self)


    def getDependentObjectsMap(self):
        """getDependentObjectsMap(CExperiment self) -> std::map< CObjectInterface const *,size_t,std::less< CObjectInterface const * >,std::allocator< std::pair< CObjectInterface const *const,size_t > > > const &"""
        return _COPASI.CExperiment_getDependentObjectsMap(self)


    def initExtendedTimeSeries(self, s):
        """initExtendedTimeSeries(CExperiment self, size_t s)"""
        return _COPASI.CExperiment_initExtendedTimeSeries(self, s)


    def storeExtendedTimeSeriesData(self, time):
        """storeExtendedTimeSeriesData(CExperiment self, double time)"""
        return _COPASI.CExperiment_storeExtendedTimeSeriesData(self, time)


    def extendedTimeSeriesSize(self):
        """extendedTimeSeriesSize(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_extendedTimeSeriesSize(self)


    def calculateStatistics(self):
        """calculateStatistics(CExperiment self) -> bool"""
        return _COPASI.CExperiment_calculateStatistics(self)


    def readColumnNames(self):
        """readColumnNames(CExperiment self) -> bool"""
        return _COPASI.CExperiment_readColumnNames(self)


    def guessColumnNumber(self):
        """guessColumnNumber(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_guessColumnNumber(self)


    def getColumnNames(self):
        """getColumnNames(CExperiment self) -> StringStdVector"""
        return _COPASI.CExperiment_getColumnNames(self)


    def updateModelWithIndependentData(self, index):
        """updateModelWithIndependentData(CExperiment self, size_t const & index) -> bool"""
        return _COPASI.CExperiment_updateModelWithIndependentData(self, index)


    def setExperimentType(self, type):
        """setExperimentType(CExperiment self, CTaskEnum::Task const & type) -> bool"""
        return _COPASI.CExperiment_setExperimentType(self, type)


    def getExperimentType(self):
        """getExperimentType(CExperiment self) -> CTaskEnum::Task const &"""
        return _COPASI.CExperiment_getExperimentType(self)


    def setNormalizeWeightsPerExperiment(self, flag):
        """setNormalizeWeightsPerExperiment(CExperiment self, bool flag)"""
        return _COPASI.CExperiment_setNormalizeWeightsPerExperiment(self, flag)


    def getNormalizeWeightsPerExperiment(self):
        """getNormalizeWeightsPerExperiment(CExperiment self) -> bool"""
        return _COPASI.CExperiment_getNormalizeWeightsPerExperiment(self)


    def getTimeData(self):
        """getTimeData(CExperiment self) -> FloatVector"""
        return _COPASI.CExperiment_getTimeData(self)


    def getIndependentData(self):
        """getIndependentData(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getIndependentData(self)


    def getDependentData(self):
        """getDependentData(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getDependentData(self)


    def getFileName(self):
        """getFileName(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getFileName(self)


    def getFileNameOnly(self):
        """getFileNameOnly(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getFileNameOnly(self)


    def setFileName(self, fileName):
        """setFileName(CExperiment self, std::string const & fileName) -> bool"""
        return _COPASI.CExperiment_setFileName(self, fileName)


    def getObjectMap(self):
        """getObjectMap(CExperiment self) -> CExperimentObjectMap"""
        return _COPASI.CExperiment_getObjectMap(self)


    def getFittingPoints(self):
        """getFittingPoints(CExperiment self) -> FittingPointVector"""
        return _COPASI.CExperiment_getFittingPoints(self)


    def updateFittedPoints(self):
        """updateFittedPoints(CExperiment self)"""
        return _COPASI.CExperiment_updateFittedPoints(self)


    def updateFittedPointValues(self, index, includeSimulation):
        """updateFittedPointValues(CExperiment self, size_t const & index, bool includeSimulation)"""
        return _COPASI.CExperiment_updateFittedPointValues(self, index, includeSimulation)


    def updateFittedPointValuesFromExtendedTimeSeries(self, index):
        """updateFittedPointValuesFromExtendedTimeSeries(CExperiment self, size_t const & index)"""
        return _COPASI.CExperiment_updateFittedPointValuesFromExtendedTimeSeries(self, index)


    def getNumColumns(self):
        """getNumColumns(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getNumColumns(self)


    def setNumColumns(self, cols):
        """setNumColumns(CExperiment self, unsigned int const & cols) -> bool"""
        return _COPASI.CExperiment_setNumColumns(self, cols)


    def getFirstRow(self):
        """getFirstRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getFirstRow(self)


    def setFirstRow(self, firstRow):
        """setFirstRow(CExperiment self, unsigned int const & firstRow) -> bool"""
        return _COPASI.CExperiment_setFirstRow(self, firstRow)


    def getLastRow(self):
        """getLastRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getLastRow(self)


    def setLastRow(self, lastRow):
        """setLastRow(CExperiment self, unsigned int const & lastRow) -> bool"""
        return _COPASI.CExperiment_setLastRow(self, lastRow)


    def getHeaderRow(self):
        """getHeaderRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getHeaderRow(self)


    def setHeaderRow(self, headerRow):
        """setHeaderRow(CExperiment self, unsigned int const & headerRow) -> bool"""
        return _COPASI.CExperiment_setHeaderRow(self, headerRow)


    def getNumDataRows(self):
        """getNumDataRows(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getNumDataRows(self)


    def getSeparator(self):
        """getSeparator(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getSeparator(self)


    def setSeparator(self, seperator):
        """setSeparator(CExperiment self, std::string const & seperator) -> bool"""
        return _COPASI.CExperiment_setSeparator(self, seperator)


    def getWeightMethod(self):
        """getWeightMethod(CExperiment self) -> CExperiment::WeightMethod const &"""
        return _COPASI.CExperiment_getWeightMethod(self)


    def setWeightMethod(self, weightMethod):
        """setWeightMethod(CExperiment self, CExperiment::WeightMethod const & weightMethod) -> bool"""
        return _COPASI.CExperiment_setWeightMethod(self, weightMethod)


    def isRowOriented(self):
        """isRowOriented(CExperiment self) -> bool const &"""
        return _COPASI.CExperiment_isRowOriented(self)


    def setIsRowOriented(self, isRowOriented):
        """setIsRowOriented(CExperiment self, bool const & isRowOriented) -> bool"""
        return _COPASI.CExperiment_setIsRowOriented(self, isRowOriented)


    def compare(lhs, rhs):
        """compare(CExperiment lhs, CExperiment rhs) -> bool"""
        return _COPASI.CExperiment_compare(lhs, rhs)

    compare = staticmethod(compare)

    def getErrorMean(self):
        """getErrorMean(CExperiment self) -> double const &"""
        return _COPASI.CExperiment_getErrorMean(self)


    def getObjectiveValue(self, *args):
        """
        getObjectiveValue(CExperiment self) -> double const
        getObjectiveValue(CExperiment self, CObjectInterface pObject) -> double
        """
        return _COPASI.CExperiment_getObjectiveValue(self, *args)


    def getDefaultScale(self, pObject):
        """getDefaultScale(CExperiment self, CObjectInterface pObject) -> double"""
        return _COPASI.CExperiment_getDefaultScale(self, pObject)


    def getScale(self, pObject):
        """getScale(CExperiment self, CObjectInterface pObject) -> double const *"""
        return _COPASI.CExperiment_getScale(self, pObject)


    def getScalingMatrix(self):
        """getScalingMatrix(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getScalingMatrix(self)


    def getRMS(self, *args):
        """
        getRMS(CExperiment self) -> double const
        getRMS(CExperiment self, CObjectInterface pObject) -> double
        """
        return _COPASI.CExperiment_getRMS(self, *args)


    def getErrorSum(self, pObject):
        """getErrorSum(CExperiment self, CObjectInterface pObject) -> double"""
        return _COPASI.CExperiment_getErrorSum(self, pObject)


    def getErrorMeanSD(self, *args):
        """
        getErrorMeanSD(CExperiment self) -> double const
        getErrorMeanSD(CExperiment self, CObjectInterface pObject, double const & errorMean) -> double
        """
        return _COPASI.CExperiment_getErrorMeanSD(self, *args)


    def getColumnValidValueCount(self, pObject):
        """getColumnValidValueCount(CExperiment self, CObjectInterface pObject) -> size_t"""
        return _COPASI.CExperiment_getColumnValidValueCount(self, pObject)


    def getValidValueCount(self):
        """getValidValueCount(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getValidValueCount(self)


    def getTotalValueCount(self):
        """getTotalValueCount(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getTotalValueCount(self)


    def fixBuild55(self):
        """fixBuild55(CExperiment self)"""
        return _COPASI.CExperiment_fixBuild55(self)

CExperiment_swigregister = _COPASI.CExperiment_swigregister
CExperiment_swigregister(CExperiment)

def CExperiment_compare(lhs, rhs):
    """CExperiment_compare(CExperiment lhs, CExperiment rhs) -> bool"""
    return _COPASI.CExperiment_compare(lhs, rhs)

class CExperimentSet(CCopasiParameterGroup):
    """Proxy of C++ CExperimentSet class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentSet, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CExperimentSet self, CDataContainer pParent, std::string const & name) -> CExperimentSet
        __init__(CExperimentSet self, CDataContainer pParent) -> CExperimentSet
        __init__(CExperimentSet self, CExperimentSet src, CDataContainer pParent) -> CExperimentSet
        __init__(CExperimentSet self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperimentSet
        """
        this = _COPASI.new_CExperimentSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentSet
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CExperimentSet self) -> bool"""
        return _COPASI.CExperimentSet_elevateChildren(self)


    def compile(self, pMathContainer):
        """compile(CExperimentSet self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperimentSet_compile(self, pMathContainer)


    def calculateStatistics(self):
        """calculateStatistics(CExperimentSet self) -> bool"""
        return _COPASI.CExperimentSet_calculateStatistics(self)


    def getExperimentCount(self):
        """getExperimentCount(CExperimentSet self) -> size_t"""
        return _COPASI.CExperimentSet_getExperimentCount(self)


    def addExperiment(self, experiment):
        """addExperiment(CExperimentSet self, CExperiment experiment) -> CExperiment"""
        return _COPASI.CExperimentSet_addExperiment(self, experiment)


    def removeExperiment(self, index):
        """removeExperiment(CExperimentSet self, size_t const & index)"""
        return _COPASI.CExperimentSet_removeExperiment(self, index)


    def getExperiment(self, *args):
        """
        getExperiment(CExperimentSet self, size_t const & index) -> CExperiment
        getExperiment(CExperimentSet self, std::string const & name) -> CExperiment
        """
        return _COPASI.CExperimentSet_getExperiment(self, *args)


    def hasDataForTaskType(self, type):
        """hasDataForTaskType(CExperimentSet self, CTaskEnum::Task const & type) -> bool"""
        return _COPASI.CExperimentSet_hasDataForTaskType(self, type)


    def getExperimentType(self, index):
        """getExperimentType(CExperimentSet self, size_t const & index) -> CTaskEnum::Task const &"""
        return _COPASI.CExperimentSet_getExperimentType(self, index)


    def getIndependentData(self, index):
        """getIndependentData(CExperimentSet self, size_t const & index) -> FloatMatrix"""
        return _COPASI.CExperimentSet_getIndependentData(self, index)


    def getDependentData(self, index):
        """getDependentData(CExperimentSet self, size_t const & index) -> FloatMatrix"""
        return _COPASI.CExperimentSet_getDependentData(self, index)


    def keyToIndex(self, key):
        """keyToIndex(CExperimentSet self, std::string const & key) -> size_t"""
        return _COPASI.CExperimentSet_keyToIndex(self, key)


    def sort(self):
        """sort(CExperimentSet self)"""
        return _COPASI.CExperimentSet_sort(self)


    def getFileNames(self):
        """getFileNames(CExperimentSet self) -> StringStdVector"""
        return _COPASI.CExperimentSet_getFileNames(self)


    def getDataPointCount(self):
        """getDataPointCount(CExperimentSet self) -> size_t"""
        return _COPASI.CExperimentSet_getDataPointCount(self)


    def getValidValueCount(self):
        """getValidValueCount(CExperimentSet self) -> size_t const &"""
        return _COPASI.CExperimentSet_getValidValueCount(self)


    def getDependentObjects(self):
        """getDependentObjects(CExperimentSet self) -> ConstObjectInterfaceVector"""
        return _COPASI.CExperimentSet_getDependentObjects(self)


    def getDependentObjectiveValues(self):
        """getDependentObjectiveValues(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentObjectiveValues(self)


    def getDependentRMS(self):
        """getDependentRMS(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentRMS(self)


    def getDependentErrorMean(self):
        """getDependentErrorMean(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentErrorMean(self)


    def getDependentErrorMeanSD(self):
        """getDependentErrorMeanSD(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentErrorMeanSD(self)


    def getDependentDataCount(self):
        """getDependentDataCount(CExperimentSet self) -> SizeTVector"""
        return _COPASI.CExperimentSet_getDependentDataCount(self)


    def fixBuild55(self):
        """fixBuild55(CExperimentSet self)"""
        return _COPASI.CExperimentSet_fixBuild55(self)

CExperimentSet_swigregister = _COPASI.CExperimentSet_swigregister
CExperimentSet_swigregister(CExperimentSet)

class CCrossValidationSet(CExperimentSet):
    """Proxy of C++ CCrossValidationSet class."""

    __swig_setmethods__ = {}
    for _s in [CExperimentSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCrossValidationSet, name, value)
    __swig_getmethods__ = {}
    for _s in [CExperimentSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCrossValidationSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCrossValidationSet self, CDataContainer pParent, std::string const & name) -> CCrossValidationSet
        __init__(CCrossValidationSet self, CDataContainer pParent) -> CCrossValidationSet
        __init__(CCrossValidationSet self, CCrossValidationSet src, CDataContainer pParent) -> CCrossValidationSet
        __init__(CCrossValidationSet self, CCopasiParameterGroup group, CDataContainer pParent) -> CCrossValidationSet
        """
        this = _COPASI.new_CCrossValidationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCrossValidationSet
    __del__ = lambda self: None

    def setWeight(self, weight):
        """setWeight(CCrossValidationSet self, double const & weight)"""
        return _COPASI.CCrossValidationSet_setWeight(self, weight)


    def getWeight(self):
        """getWeight(CCrossValidationSet self) -> double const &"""
        return _COPASI.CCrossValidationSet_getWeight(self)


    def setThreshold(self, threshold):
        """setThreshold(CCrossValidationSet self, unsigned int const & threshold)"""
        return _COPASI.CCrossValidationSet_setThreshold(self, threshold)


    def getThreshold(self):
        """getThreshold(CCrossValidationSet self) -> unsigned int const &"""
        return _COPASI.CCrossValidationSet_getThreshold(self)

CCrossValidationSet_swigregister = _COPASI.CCrossValidationSet_swigregister
CCrossValidationSet_swigregister(CCrossValidationSet)

class CExperimentObjectMap(CCopasiParameterGroup):
    """Proxy of C++ CExperimentObjectMap class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExperimentObjectMap, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExperimentObjectMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CExperimentObjectMap self, std::string const & name, CDataContainer pParent) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self, std::string const & name) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self, CExperimentObjectMap src, CDataContainer pParent) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperimentObjectMap
        """
        this = _COPASI.new_CExperimentObjectMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CExperimentObjectMap
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CExperimentObjectMap self) -> bool"""
        return _COPASI.CExperimentObjectMap_elevateChildren(self)


    def setNumCols(self, numCols):
        """setNumCols(CExperimentObjectMap self, size_t const & numCols) -> bool"""
        return _COPASI.CExperimentObjectMap_setNumCols(self, numCols)


    def getLastNotIgnoredColumn(self):
        """getLastNotIgnoredColumn(CExperimentObjectMap self) -> size_t"""
        return _COPASI.CExperimentObjectMap_getLastNotIgnoredColumn(self)


    def getName(self, index):
        """getName(CExperimentObjectMap self, size_t const & index) -> std::string const &"""
        return _COPASI.CExperimentObjectMap_getName(self, index)


    def setRole(self, index, role):
        """setRole(CExperimentObjectMap self, size_t const & index, CExperiment::Type const & role) -> bool"""
        return _COPASI.CExperimentObjectMap_setRole(self, index, role)


    def getRole(self, index):
        """getRole(CExperimentObjectMap self, size_t const & index) -> CExperiment::Type"""
        return _COPASI.CExperimentObjectMap_getRole(self, index)


    def setObjectCN(self, index, objectCN):
        """setObjectCN(CExperimentObjectMap self, size_t const & index, std::string const & objectCN) -> bool"""
        return _COPASI.CExperimentObjectMap_setObjectCN(self, index, objectCN)


    def getObjectCN(self, index):
        """getObjectCN(CExperimentObjectMap self, size_t const & index) -> std::string"""
        return _COPASI.CExperimentObjectMap_getObjectCN(self, index)


    def setScale(self, index, scale):
        """setScale(CExperimentObjectMap self, size_t const & index, double const & scale) -> bool"""
        return _COPASI.CExperimentObjectMap_setScale(self, index, scale)


    def getScale(self, index):
        """getScale(CExperimentObjectMap self, size_t const & index) -> double"""
        return _COPASI.CExperimentObjectMap_getScale(self, index)


    def getDefaultScale(self, index):
        """getDefaultScale(CExperimentObjectMap self, size_t const & index) -> double"""
        return _COPASI.CExperimentObjectMap_getDefaultScale(self, index)


    def compile(self, pMathContainer):
        """compile(CExperimentObjectMap self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperimentObjectMap_compile(self, pMathContainer)


    def getDataObjects(self):
        """getDataObjects(CExperimentObjectMap self) -> ConstObjectVector"""
        return _COPASI.CExperimentObjectMap_getDataObjects(self)


    def getLastColumn(self):
        """getLastColumn(CExperimentObjectMap self) -> size_t const &"""
        return _COPASI.CExperimentObjectMap_getLastColumn(self)


    def fixBuild55(self):
        """fixBuild55(CExperimentObjectMap self)"""
        return _COPASI.CExperimentObjectMap_fixBuild55(self)

CExperimentObjectMap_swigregister = _COPASI.CExperimentObjectMap_swigregister
CExperimentObjectMap_swigregister(CExperimentObjectMap)

class CFitItem(COptItem):
    """Proxy of C++ CFitItem class."""

    __swig_setmethods__ = {}
    for _s in [COptItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitItem, name, value)
    __swig_getmethods__ = {}
    for _s in [COptItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFitItem self, CDataContainer pParent, std::string const & name) -> CFitItem
        __init__(CFitItem self, CDataContainer pParent) -> CFitItem
        __init__(CFitItem self, CFitItem src, CDataContainer pParent) -> CFitItem
        __init__(CFitItem self, CCopasiParameterGroup group, CDataContainer pParent) -> CFitItem
        """
        this = _COPASI.new_CFitItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFitItem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CFitItem self) -> bool"""
        return _COPASI.CFitItem_elevateChildren(self)


    def isValid(*args):
        """
        isValid() -> bool
        isValid(CCopasiParameterGroup group) -> bool
        """
        return _COPASI.CFitItem_isValid(*args)

    isValid = staticmethod(isValid)

    def compile(self, *args):
        """
        compile(CFitItem self, ContainerList listOfContainer) -> bool
        compile(CFitItem self) -> bool
        """
        return _COPASI.CFitItem_compile(self, *args)


    def checkConstraint(self):
        """checkConstraint(CFitItem self) -> int"""
        return _COPASI.CFitItem_checkConstraint(self)


    def getConstraintViolation(self):
        """getConstraintViolation(CFitItem self) -> double"""
        return _COPASI.CFitItem_getConstraintViolation(self)


    def setLocalValue(self, value):
        """setLocalValue(CFitItem self, double const & value)"""
        return _COPASI.CFitItem_setLocalValue(self, value)


    def getLocalValue(self):
        """getLocalValue(CFitItem self) -> double const &"""
        return _COPASI.CFitItem_getLocalValue(self)


    def addExperiment(self, key):
        """addExperiment(CFitItem self, std::string const & key) -> bool"""
        return _COPASI.CFitItem_addExperiment(self, key)


    def getExperiment(self, index):
        """getExperiment(CFitItem self, size_t const & index) -> std::string const &"""
        return _COPASI.CFitItem_getExperiment(self, index)


    def removeExperiment(self, index):
        """removeExperiment(CFitItem self, size_t const & index) -> bool"""
        return _COPASI.CFitItem_removeExperiment(self, index)


    def getExperimentCount(self):
        """getExperimentCount(CFitItem self) -> size_t"""
        return _COPASI.CFitItem_getExperimentCount(self)


    def getExperiments(self):
        """getExperiments(CFitItem self) -> std::string"""
        return _COPASI.CFitItem_getExperiments(self)


    def addCrossValidation(self, key):
        """addCrossValidation(CFitItem self, std::string const & key) -> bool"""
        return _COPASI.CFitItem_addCrossValidation(self, key)


    def getCrossValidation(self, index):
        """getCrossValidation(CFitItem self, size_t const & index) -> std::string const &"""
        return _COPASI.CFitItem_getCrossValidation(self, index)


    def removeCrossValidation(self, index):
        """removeCrossValidation(CFitItem self, size_t const & index) -> bool"""
        return _COPASI.CFitItem_removeCrossValidation(self, index)


    def getCrossValidationCount(self):
        """getCrossValidationCount(CFitItem self) -> size_t"""
        return _COPASI.CFitItem_getCrossValidationCount(self)


    def getCrossValidations(self):
        """getCrossValidations(CFitItem self) -> std::string"""
        return _COPASI.CFitItem_getCrossValidations(self)


    def getObjectValue(self):
        """getObjectValue(CFitItem self) -> double"""
        return _COPASI.CFitItem_getObjectValue(self)

CFitItem_swigregister = _COPASI.CFitItem_swigregister
CFitItem_swigregister(CFitItem)

def CFitItem_isValid(*args):
    """
    isValid() -> bool
    CFitItem_isValid(CCopasiParameterGroup group) -> bool
    """
    return _COPASI.CFitItem_isValid(*args)

class CFitConstraint(CFitItem):
    """Proxy of C++ CFitConstraint class."""

    __swig_setmethods__ = {}
    for _s in [CFitItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [CFitItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFitConstraint self, CDataContainer pParent, std::string const & name) -> CFitConstraint
        __init__(CFitConstraint self, CDataContainer pParent) -> CFitConstraint
        __init__(CFitConstraint self, CFitConstraint src, CDataContainer pParent) -> CFitConstraint
        __init__(CFitConstraint self, CCopasiParameterGroup group, CDataContainer pParent) -> CFitConstraint
        """
        this = _COPASI.new_CFitConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFitConstraint
    __del__ = lambda self: None

    def resetConstraintViolation(self):
        """resetConstraintViolation(CFitConstraint self)"""
        return _COPASI.CFitConstraint_resetConstraintViolation(self)


    def calculateConstraintViolation(self):
        """calculateConstraintViolation(CFitConstraint self)"""
        return _COPASI.CFitConstraint_calculateConstraintViolation(self)


    def checkConstraint(self):
        """checkConstraint(CFitConstraint self) -> int"""
        return _COPASI.CFitConstraint_checkConstraint(self)


    def getConstraintViolation(self):
        """getConstraintViolation(CFitConstraint self) -> double"""
        return _COPASI.CFitConstraint_getConstraintViolation(self)

CFitConstraint_swigregister = _COPASI.CFitConstraint_swigregister
CFitConstraint_swigregister(CFitConstraint)

class CFitProblem(COptProblem):
    """Proxy of C++ CFitProblem class."""

    __swig_setmethods__ = {}
    for _s in [COptProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [COptProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFitProblem self, CTaskEnum::Task const & type, CDataContainer pParent) -> CFitProblem
        __init__(CFitProblem self, CTaskEnum::Task const & type) -> CFitProblem
        __init__(CFitProblem self) -> CFitProblem
        __init__(CFitProblem self, CFitProblem src, CDataContainer pParent) -> CFitProblem
        """
        this = _COPASI.new_CFitProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFitProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CFitProblem self) -> bool"""
        return _COPASI.CFitProblem_elevateChildren(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CFitProblem self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CFitProblem_setCallBack(self, pCallBack)


    def restore(self, updateModel, pExp):
        """restore(CFitProblem self, bool const & updateModel, CExperiment pExp) -> bool"""
        return _COPASI.CFitProblem_restore(self, updateModel, pExp)


    def updateInitialState(self):
        """updateInitialState(CFitProblem self)"""
        return _COPASI.CFitProblem_updateInitialState(self)


    def setResidualsRequired(self, required):
        """setResidualsRequired(CFitProblem self, bool const & required) -> bool"""
        return _COPASI.CFitProblem_setResidualsRequired(self, required)


    def getResiduals(self):
        """getResiduals(CFitProblem self) -> FloatVector"""
        return _COPASI.CFitProblem_getResiduals(self)


    def calcFIM(self, jacobian, fim):
        """calcFIM(CFitProblem self, FloatMatrix jacobian, FloatMatrix fim)"""
        return _COPASI.CFitProblem_calcFIM(self, jacobian, fim)


    def calcPartialFIM(self, jacobian, fim, a, b, exclude=False):
        """
        calcPartialFIM(CFitProblem self, FloatMatrix jacobian, FloatMatrix fim, size_t a, size_t b, bool exclude=False)
        calcPartialFIM(CFitProblem self, FloatMatrix jacobian, FloatMatrix fim, size_t a, size_t b)
        """
        return _COPASI.CFitProblem_calcPartialFIM(self, jacobian, fim, a, b, exclude)


    def calcEigen(self, fim, eigenvalues, eigenvectors):
        """calcEigen(CFitProblem self, FloatMatrix fim, FloatMatrix eigenvalues, FloatMatrix eigenvectors)"""
        return _COPASI.CFitProblem_calcEigen(self, fim, eigenvalues, eigenvectors)


    def calcCov(self, fim, corr, sd, scale):
        """calcCov(CFitProblem self, FloatMatrix fim, FloatMatrix corr, FloatVector sd, bool scale) -> bool"""
        return _COPASI.CFitProblem_calcCov(self, fim, corr, sd, scale)


    def calculateStatistics(self, factor=1.0e-003, resolution=1.0e-009):
        """
        calculateStatistics(CFitProblem self, double const & factor=1.0e-003, double const & resolution=1.0e-009) -> bool
        calculateStatistics(CFitProblem self, double const & factor=1.0e-003) -> bool
        calculateStatistics(CFitProblem self) -> bool
        """
        return _COPASI.CFitProblem_calculateStatistics(self, factor, resolution)


    def getRMS(self):
        """getRMS(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getRMS(self)


    def getStdDeviation(self):
        """getStdDeviation(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getStdDeviation(self)


    def getVariableStdDeviations(self):
        """getVariableStdDeviations(CFitProblem self) -> FloatVector"""
        return _COPASI.CFitProblem_getVariableStdDeviations(self)


    def getParameterEstimationJacobian(self):
        """getParameterEstimationJacobian(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getParameterEstimationJacobian(self)


    def getScaledParameterEstimationJacobian(self):
        """getScaledParameterEstimationJacobian(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledParameterEstimationJacobian(self)


    def getFisherInformation(self):
        """getFisherInformation(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformation(self)


    def getFisherInformationEigenvalues(self):
        """getFisherInformationEigenvalues(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformationEigenvalues(self)


    def getFisherInformationEigenvectors(self):
        """getFisherInformationEigenvectors(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformationEigenvectors(self)


    def getScaledFisherInformation(self):
        """getScaledFisherInformation(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformation(self)


    def getScaledFisherInformationEigenvalues(self):
        """getScaledFisherInformationEigenvalues(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformationEigenvalues(self)


    def getScaledFisherInformationEigenvectors(self):
        """getScaledFisherInformationEigenvectors(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformationEigenvectors(self)


    def getCorrelations(self):
        """getCorrelations(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getCorrelations(self)


    def getExperimentSet(self):
        """getExperimentSet(CFitProblem self) -> CExperimentSet"""
        return _COPASI.CFitProblem_getExperimentSet(self)


    def getCrossValidationSet(self):
        """getCrossValidationSet(CFitProblem self) -> CCrossValidationSet"""
        return _COPASI.CFitProblem_getCrossValidationSet(self)


    def addFitItem(self, objectCN):
        """addFitItem(CFitProblem self, CCommonName objectCN) -> CFitItem"""
        return _COPASI.CFitProblem_addFitItem(self, objectCN)


    def setSolution(self, value, variables):
        """setSolution(CFitProblem self, double const & value, FloatVector variables) -> bool"""
        return _COPASI.CFitProblem_setSolution(self, value, variables)


    def getCrossValidationSolutionValue(self):
        """getCrossValidationSolutionValue(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationSolutionValue(self)


    def getCrossValidationRMS(self):
        """getCrossValidationRMS(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationRMS(self)


    def getCrossValidationSD(self):
        """getCrossValidationSD(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationSD(self)


    def fixBuild55(self):
        """fixBuild55(CFitProblem self)"""
        return _COPASI.CFitProblem_fixBuild55(self)


    def setCreateParameterSets(self, create):
        """setCreateParameterSets(CFitProblem self, bool const & create)"""
        return _COPASI.CFitProblem_setCreateParameterSets(self, create)


    def getCreateParameterSets(self):
        """getCreateParameterSets(CFitProblem self) -> bool const &"""
        return _COPASI.CFitProblem_getCreateParameterSets(self)


    def setUseTimeSens(self, value):
        """setUseTimeSens(CFitProblem self, bool value)"""
        return _COPASI.CFitProblem_setUseTimeSens(self, value)


    def getUseTimeSens(self):
        """getUseTimeSens(CFitProblem self) -> bool const &"""
        return _COPASI.CFitProblem_getUseTimeSens(self)


    def createParameterSets(self):
        """createParameterSets(CFitProblem self)"""
        return _COPASI.CFitProblem_createParameterSets(self)


    def getTimeSensJac(self, *args):
        """
        getTimeSensJac(CFitProblem self) -> FloatMatrix
        getTimeSensJac(CFitProblem self) -> FloatMatrix
        """
        return _COPASI.CFitProblem_getTimeSensJac(self, *args)

CFitProblem_swigregister = _COPASI.CFitProblem_swigregister
CFitProblem_swigregister(CFitProblem)

class CFitTask(COptTask):
    """Proxy of C++ CFitTask class."""

    __swig_setmethods__ = {}
    for _s in [COptTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFitTask, name, value)
    __swig_getmethods__ = {}
    for _s in [COptTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFitTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFitTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CFitTask
        __init__(CFitTask self, CDataContainer pParent) -> CFitTask
        __init__(CFitTask self, CFitTask src, CDataContainer pParent) -> CFitTask
        """
        this = _COPASI.new_CFitTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFitTask
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CFitTask self)"""
        return _COPASI.CFitTask_cleanup(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CFitTask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CFitTask_setCallBack(self, pCallBack)


    def fixBuild55(self):
        """fixBuild55(CFitTask self)"""
        return _COPASI.CFitTask_fixBuild55(self)


    def getValidMethods(self):
        """getValidMethods(CFitTask self) -> IntStdVector"""
        return _COPASI.CFitTask_getValidMethods(self)

CFitTask_swigregister = _COPASI.CFitTask_swigregister
CFitTask_swigregister(CFitTask)

class CMCAMethod(CCopasiMethod):
    """Proxy of C++ CMCAMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCAMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCAMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMCAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CMCAMethod
        __init__(CMCAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CMCAMethod
        __init__(CMCAMethod self, CDataContainer pParent) -> CMCAMethod
        __init__(CMCAMethod self, CMCAMethod src, CDataContainer pParent) -> CMCAMethod
        """
        this = _COPASI.new_CMCAMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMCAMethod
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_elevateChildren(self)


    def getUnscaledElasticities(self):
        """getUnscaledElasticities(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledElasticities(self)


    def calculateUnscaledElasticities(self, res):
        """calculateUnscaledElasticities(CMCAMethod self, double res)"""
        return _COPASI.CMCAMethod_calculateUnscaledElasticities(self, res)


    def getUnscaledConcentrationCC(self):
        """getUnscaledConcentrationCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledConcentrationCC(self)


    def calculateUnscaledConcentrationCC(self):
        """calculateUnscaledConcentrationCC(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_calculateUnscaledConcentrationCC(self)


    def getUnscaledFluxCC(self):
        """getUnscaledFluxCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledFluxCC(self)


    def calculateUnscaledFluxCC(self, status):
        """calculateUnscaledFluxCC(CMCAMethod self, bool const & status) -> bool"""
        return _COPASI.CMCAMethod_calculateUnscaledFluxCC(self, status)


    def getScaledElasticities(self):
        """getScaledElasticities(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledElasticities(self)


    def getScaledConcentrationCC(self):
        """getScaledConcentrationCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledConcentrationCC(self)


    def getScaledFluxCC(self):
        """getScaledFluxCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledFluxCC(self)


    def getUnscaledElasticitiesAnn(self):
        """getUnscaledElasticitiesAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledElasticitiesAnn(self)


    def getScaledElasticitiesAnn(self):
        """getScaledElasticitiesAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledElasticitiesAnn(self)


    def getUnscaledConcentrationCCAnn(self):
        """getUnscaledConcentrationCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledConcentrationCCAnn(self)


    def getScaledConcentrationCCAnn(self):
        """getScaledConcentrationCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledConcentrationCCAnn(self)


    def getUnscaledFluxCCAnn(self):
        """getUnscaledFluxCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledFluxCCAnn(self)


    def getScaledFluxCCAnn(self):
        """getScaledFluxCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledFluxCCAnn(self)


    def resizeAllMatrices(self):
        """resizeAllMatrices(CMCAMethod self)"""
        return _COPASI.CMCAMethod_resizeAllMatrices(self)


    def scaleMCA(self, status, res):
        """scaleMCA(CMCAMethod self, bool const & status, double res) -> bool"""
        return _COPASI.CMCAMethod_scaleMCA(self, status, res)


    def checkSummationTheorems(self, resolution):
        """checkSummationTheorems(CMCAMethod self, double const & resolution) -> bool"""
        return _COPASI.CMCAMethod_checkSummationTheorems(self, resolution)


    def getModel(self):
        """getModel(CMCAMethod self) -> CModel"""
        return _COPASI.CMCAMethod_getModel(self)


    def CalculateMCA(self, res):
        """CalculateMCA(CMCAMethod self, double res) -> bool"""
        return _COPASI.CMCAMethod_CalculateMCA(self, res)


    def process(self):
        """process(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_process(self)


    def setSteadyStateTask(self, pSteadyStateTask):
        """setSteadyStateTask(CMCAMethod self, CSteadyStateTask pSteadyStateTask)"""
        return _COPASI.CMCAMethod_setSteadyStateTask(self, pSteadyStateTask)


    def getSteadyStateStatus(self):
        """getSteadyStateStatus(CMCAMethod self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CMCAMethod_getSteadyStateStatus(self)


    def setFactor(self, factor):
        """setFactor(CMCAMethod self, double factor)"""
        return _COPASI.CMCAMethod_setFactor(self, factor)


    def setSteadyStateResolution(self, factor):
        """setSteadyStateResolution(CMCAMethod self, double factor)"""
        return _COPASI.CMCAMethod_setSteadyStateResolution(self, factor)


    def isValidProblem(self, pProblem):
        """isValidProblem(CMCAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CMCAMethod_isValidProblem(self, pProblem)

CMCAMethod_swigregister = _COPASI.CMCAMethod_swigregister
CMCAMethod_swigregister(CMCAMethod)

class CMCAProblem(CCopasiProblem):
    """Proxy of C++ CMCAProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCAProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCAProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMCAProblem self, CDataContainer pParent) -> CMCAProblem
        __init__(CMCAProblem self) -> CMCAProblem
        __init__(CMCAProblem self, CMCAProblem src, CDataContainer pParent) -> CMCAProblem
        """
        this = _COPASI.new_CMCAProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMCAProblem
    __del__ = lambda self: None

    def setSteadyStateRequested(self, steadyStateRequested):
        """setSteadyStateRequested(CMCAProblem self, bool const & steadyStateRequested)"""
        return _COPASI.CMCAProblem_setSteadyStateRequested(self, steadyStateRequested)


    def isSteadyStateRequested(self):
        """isSteadyStateRequested(CMCAProblem self) -> bool"""
        return _COPASI.CMCAProblem_isSteadyStateRequested(self)


    def getSubTask(self):
        """getSubTask(CMCAProblem self) -> CSteadyStateTask"""
        return _COPASI.CMCAProblem_getSubTask(self)

CMCAProblem_swigregister = _COPASI.CMCAProblem_swigregister
CMCAProblem_swigregister(CMCAProblem)

class CMCATask(CCopasiTask):
    """Proxy of C++ CMCATask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCATask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCATask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMCATask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CMCATask
        __init__(CMCATask self, CDataContainer pParent) -> CMCATask
        __init__(CMCATask self, CMCATask src, CDataContainer pParent) -> CMCATask
        """
        this = _COPASI.new_CMCATask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMCATask
    __del__ = lambda self: None

    def updateMatrices(self):
        """updateMatrices(CMCATask self) -> bool"""
        return _COPASI.CMCATask_updateMatrices(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CMCATask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CMCATask_setCallBack(self, pCallBack)

CMCATask_swigregister = _COPASI.CMCATask_swigregister
CMCATask_swigregister(CMCATask)

class CRootContainer(CDataContainer):
    """Proxy of C++ CRootContainer class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRootContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRootContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRootContainer
    __del__ = lambda self: None

    def destroy():
        """destroy()"""
        return _COPASI.CRootContainer_destroy()

    destroy = staticmethod(destroy)

    def getRoot():
        """getRoot() -> CDataContainer"""
        return _COPASI.CRootContainer_getRoot()

    getRoot = staticmethod(getRoot)

    def getFunctionList():
        """getFunctionList() -> CFunctionDB"""
        return _COPASI.CRootContainer_getFunctionList()

    getFunctionList = staticmethod(getFunctionList)

    def getDatamodelList():
        """getDatamodelList() -> DataModelVector"""
        return _COPASI.CRootContainer_getDatamodelList()

    getDatamodelList = staticmethod(getDatamodelList)

    def getUnitList():
        """getUnitList() -> CUnitDefinitionDB *"""
        return _COPASI.CRootContainer_getUnitList()

    getUnitList = staticmethod(getUnitList)

    def getUnitDefFromSymbol(symbol):
        """getUnitDefFromSymbol(std::string const symbol) -> CUnitDefinition const *"""
        return _COPASI.CRootContainer_getUnitDefFromSymbol(symbol)

    getUnitDefFromSymbol = staticmethod(getUnitDefFromSymbol)

    def quoteUnitDefSymbol(symbol):
        """quoteUnitDefSymbol(std::string const & symbol) -> std::string"""
        return _COPASI.CRootContainer_quoteUnitDefSymbol(symbol)

    quoteUnitDefSymbol = staticmethod(quoteUnitDefSymbol)

    def replaceSymbol(oldSymbol, newSymbol):
        """replaceSymbol(std::string const & oldSymbol, std::string const & newSymbol)"""
        return _COPASI.CRootContainer_replaceSymbol(oldSymbol, newSymbol)

    replaceSymbol = staticmethod(replaceSymbol)

    def addDatamodel():
        """addDatamodel() -> CDataModel"""
        return _COPASI.CRootContainer_addDatamodel()

    addDatamodel = staticmethod(addDatamodel)

    def getUndefinedFunction():
        """getUndefinedFunction() -> CFunction"""
        return _COPASI.CRootContainer_getUndefinedFunction()

    getUndefinedFunction = staticmethod(getUndefinedFunction)

    def functionDefinitionChanged(pFunction):
        """functionDefinitionChanged(CFunction pFunction)"""
        return _COPASI.CRootContainer_functionDefinitionChanged(pFunction)

    functionDefinitionChanged = staticmethod(functionDefinitionChanged)

    def getKeyFactory():
        """getKeyFactory() -> CKeyFactory"""
        return _COPASI.CRootContainer_getKeyFactory()

    getKeyFactory = staticmethod(getKeyFactory)

    def getUnknownMiriamResource():
        """getUnknownMiriamResource() -> CMIRIAMResource"""
        return _COPASI.CRootContainer_getUnknownMiriamResource()

    getUnknownMiriamResource = staticmethod(getUnknownMiriamResource)

    def removeDatamodel(pDatamodel):
        """removeDatamodel(CDataModel pDatamodel) -> bool"""
        return _COPASI.CRootContainer_removeDatamodel(pDatamodel)

    removeDatamodel = staticmethod(removeDatamodel)

    def removeDatamodelWithIndex(index):
        """removeDatamodelWithIndex(unsigned int const index) -> bool"""
        return _COPASI.CRootContainer_removeDatamodelWithIndex(index)

    removeDatamodelWithIndex = staticmethod(removeDatamodelWithIndex)

    def getLicenseTxt():
        """getLicenseTxt() -> char const *"""
        return _COPASI.CRootContainer_getLicenseTxt()

    getLicenseTxt = staticmethod(getLicenseTxt)

    def getLicenseHTML():
        """getLicenseHTML() -> char const *"""
        return _COPASI.CRootContainer_getLicenseHTML()

    getLicenseHTML = staticmethod(getLicenseHTML)

    def get(index):
        """get(unsigned int index) -> CDataModel"""
        return _COPASI.CRootContainer_get(index)

    get = staticmethod(get)

    def getDatamodel(self, index):
        """getDatamodel(CRootContainer self, unsigned int index) -> CDataModel"""
        return _COPASI.CRootContainer_getDatamodel(self, index)


    def init():
        """init()"""
        return _COPASI.CRootContainer_init()

    init = staticmethod(init)
CRootContainer_swigregister = _COPASI.CRootContainer_swigregister
CRootContainer_swigregister(CRootContainer)

def CRootContainer_destroy():
    """CRootContainer_destroy()"""
    return _COPASI.CRootContainer_destroy()

def CRootContainer_getRoot():
    """CRootContainer_getRoot() -> CDataContainer"""
    return _COPASI.CRootContainer_getRoot()

def CRootContainer_getFunctionList():
    """CRootContainer_getFunctionList() -> CFunctionDB"""
    return _COPASI.CRootContainer_getFunctionList()

def CRootContainer_getDatamodelList():
    """CRootContainer_getDatamodelList() -> DataModelVector"""
    return _COPASI.CRootContainer_getDatamodelList()

def CRootContainer_getUnitList():
    """CRootContainer_getUnitList() -> CUnitDefinitionDB *"""
    return _COPASI.CRootContainer_getUnitList()

def CRootContainer_getUnitDefFromSymbol(symbol):
    """CRootContainer_getUnitDefFromSymbol(std::string const symbol) -> CUnitDefinition const *"""
    return _COPASI.CRootContainer_getUnitDefFromSymbol(symbol)

def CRootContainer_quoteUnitDefSymbol(symbol):
    """CRootContainer_quoteUnitDefSymbol(std::string const & symbol) -> std::string"""
    return _COPASI.CRootContainer_quoteUnitDefSymbol(symbol)

def CRootContainer_replaceSymbol(oldSymbol, newSymbol):
    """CRootContainer_replaceSymbol(std::string const & oldSymbol, std::string const & newSymbol)"""
    return _COPASI.CRootContainer_replaceSymbol(oldSymbol, newSymbol)

def CRootContainer_addDatamodel():
    """CRootContainer_addDatamodel() -> CDataModel"""
    return _COPASI.CRootContainer_addDatamodel()

def CRootContainer_getUndefinedFunction():
    """CRootContainer_getUndefinedFunction() -> CFunction"""
    return _COPASI.CRootContainer_getUndefinedFunction()

def CRootContainer_functionDefinitionChanged(pFunction):
    """CRootContainer_functionDefinitionChanged(CFunction pFunction)"""
    return _COPASI.CRootContainer_functionDefinitionChanged(pFunction)

def CRootContainer_getKeyFactory():
    """CRootContainer_getKeyFactory() -> CKeyFactory"""
    return _COPASI.CRootContainer_getKeyFactory()

def CRootContainer_getUnknownMiriamResource():
    """CRootContainer_getUnknownMiriamResource() -> CMIRIAMResource"""
    return _COPASI.CRootContainer_getUnknownMiriamResource()

def CRootContainer_removeDatamodel(pDatamodel):
    """CRootContainer_removeDatamodel(CDataModel pDatamodel) -> bool"""
    return _COPASI.CRootContainer_removeDatamodel(pDatamodel)

def CRootContainer_removeDatamodelWithIndex(index):
    """CRootContainer_removeDatamodelWithIndex(unsigned int const index) -> bool"""
    return _COPASI.CRootContainer_removeDatamodelWithIndex(index)

def CRootContainer_getLicenseTxt():
    """CRootContainer_getLicenseTxt() -> char const *"""
    return _COPASI.CRootContainer_getLicenseTxt()

def CRootContainer_getLicenseHTML():
    """CRootContainer_getLicenseHTML() -> char const *"""
    return _COPASI.CRootContainer_getLicenseHTML()

def CRootContainer_get(index):
    """CRootContainer_get(unsigned int index) -> CDataModel"""
    return _COPASI.CRootContainer_get(index)

def CRootContainer_init():
    """CRootContainer_init()"""
    return _COPASI.CRootContainer_init()

class CEventAssignment(CDataContainer):
    """Proxy of C++ CEventAssignment class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventAssignment, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CEventAssignment"""
        return _COPASI.CEventAssignment_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CEventAssignment self, std::string const & targetCN, CDataContainer pParent) -> CEventAssignment
        __init__(CEventAssignment self, std::string const & targetCN) -> CEventAssignment
        __init__(CEventAssignment self) -> CEventAssignment
        __init__(CEventAssignment self, CEventAssignment src, CDataContainer pParent) -> CEventAssignment
        """
        this = _COPASI.new_CEventAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEventAssignment
    __del__ = lambda self: None

    def __ne__(self, rhs):
        """__ne__(CEventAssignment self, CEventAssignment rhs) -> bool"""
        return _COPASI.CEventAssignment___ne__(self, rhs)


    def setObjectParent(self, pParent):
        """setObjectParent(CEventAssignment self, CDataContainer pParent) -> bool"""
        return _COPASI.CEventAssignment_setObjectParent(self, pParent)


    def compile(self, listOfContainer):
        """compile(CEventAssignment self, ContainerList listOfContainer) -> CIssue"""
        return _COPASI.CEventAssignment_compile(self, listOfContainer)


    def getKey(self):
        """getKey(CEventAssignment self) -> std::string const &"""
        return _COPASI.CEventAssignment_getKey(self)


    def setTargetCN(self, targetCN):
        """setTargetCN(CEventAssignment self, std::string const & targetCN) -> bool"""
        return _COPASI.CEventAssignment_setTargetCN(self, targetCN)


    def getTargetCN(self):
        """getTargetCN(CEventAssignment self) -> std::string const &"""
        return _COPASI.CEventAssignment_getTargetCN(self)


    def getTargetObject(self):
        """getTargetObject(CEventAssignment self) -> CDataObject"""
        return _COPASI.CEventAssignment_getTargetObject(self)


    def setExpression(self, expression):
        """setExpression(CEventAssignment self, std::string const & expression) -> bool"""
        return _COPASI.CEventAssignment_setExpression(self, expression)


    def setExpressionPtr(self, pExpression):
        """setExpressionPtr(CEventAssignment self, CExpression pExpression) -> bool"""
        val = _COPASI.CEventAssignment_setExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getExpression(self):
        """getExpression(CEventAssignment self) -> std::string"""
        return _COPASI.CEventAssignment_getExpression(self)


    def getExpressionPtr(self):
        """getExpressionPtr(CEventAssignment self) -> CExpression"""
        return _COPASI.CEventAssignment_getExpressionPtr(self)

CEventAssignment_swigregister = _COPASI.CEventAssignment_swigregister
CEventAssignment_swigregister(CEventAssignment)

def CEventAssignment_fromData(data, pParent):
    """CEventAssignment_fromData(CData data, CUndoObjectInterface pParent) -> CEventAssignment"""
    return _COPASI.CEventAssignment_fromData(data, pParent)

class CEvent(CDataContainer, CAnnotation):
    """Proxy of C++ CEvent class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer, CAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEvent, name)
    __repr__ = _swig_repr
    Assignment = _COPASI.CEvent_Assignment
    Discontinuity = _COPASI.CEvent_Discontinuity
    Callback = _COPASI.CEvent_Callback
    Stop = _COPASI.CEvent_Stop

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CEvent"""
        return _COPASI.CEvent_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CEvent self, std::string const & name, CDataContainer pParent) -> CEvent
        __init__(CEvent self, std::string const & name) -> CEvent
        __init__(CEvent self) -> CEvent
        __init__(CEvent self, CEvent src, CDataContainer pParent) -> CEvent
        """
        this = _COPASI.new_CEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEvent
    __del__ = lambda self: None

    def setObjectParent(self, pParent):
        """setObjectParent(CEvent self, CDataContainer pParent) -> bool"""
        return _COPASI.CEvent_setObjectParent(self, pParent)


    def getObjectDisplayName(self):
        """getObjectDisplayName(CEvent self) -> std::string"""
        return _COPASI.CEvent_getObjectDisplayName(self)


    def getKey(self):
        """getKey(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getKey(self)


    def getOriginFor(self, deletedObjects):
        """getOriginFor(CEvent self, DataObjectSet deletedObjects) -> std::string"""
        return _COPASI.CEvent_getOriginFor(self, deletedObjects)


    def compile(self, listOfContainer):
        """compile(CEvent self, ContainerList listOfContainer) -> CIssue"""
        return _COPASI.CEvent_compile(self, listOfContainer)


    def setSBMLId(self, id):
        """setSBMLId(CEvent self, std::string const & id)"""
        return _COPASI.CEvent_setSBMLId(self, id)


    def getSBMLId(self):
        """getSBMLId(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getSBMLId(self)


    def setDelayAssignment(self, delayCalculation):
        """setDelayAssignment(CEvent self, bool const & delayCalculation)"""
        return _COPASI.CEvent_setDelayAssignment(self, delayCalculation)


    def getDelayAssignment(self):
        """getDelayAssignment(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getDelayAssignment(self)


    def setFireAtInitialTime(self, fireAtInitialTime):
        """setFireAtInitialTime(CEvent self, bool const & fireAtInitialTime)"""
        return _COPASI.CEvent_setFireAtInitialTime(self, fireAtInitialTime)


    def getFireAtInitialTime(self):
        """getFireAtInitialTime(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getFireAtInitialTime(self)


    def setPersistentTrigger(self, persistentTrigger):
        """setPersistentTrigger(CEvent self, bool const & persistentTrigger)"""
        return _COPASI.CEvent_setPersistentTrigger(self, persistentTrigger)


    def getPersistentTrigger(self):
        """getPersistentTrigger(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getPersistentTrigger(self)


    def setTriggerExpression(self, expression):
        """setTriggerExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setTriggerExpression(self, expression)


    def setTriggerExpressionPtr(self, pExpression):
        """setTriggerExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        val = _COPASI.CEvent_setTriggerExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getTriggerExpression(self):
        """getTriggerExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getTriggerExpression(self)


    def getTriggerExpressionPtr(self):
        """getTriggerExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getTriggerExpressionPtr(self)


    def setDelayExpression(self, expression):
        """setDelayExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setDelayExpression(self, expression)


    def setDelayExpressionPtr(self, pExpression):
        """setDelayExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        val = _COPASI.CEvent_setDelayExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getDelayExpression(self):
        """getDelayExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getDelayExpression(self)


    def getDelayExpressionPtr(self):
        """getDelayExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getDelayExpressionPtr(self)


    def setPriorityExpression(self, expression):
        """setPriorityExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setPriorityExpression(self, expression)


    def setPriorityExpressionPtr(self, pExpression):
        """setPriorityExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        return _COPASI.CEvent_setPriorityExpressionPtr(self, pExpression)


    def getPriorityExpression(self):
        """getPriorityExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getPriorityExpression(self)


    def getPriorityExpressionPtr(self):
        """getPriorityExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getPriorityExpressionPtr(self)


    def getAssignments(self):
        """getAssignments(CEvent self) -> EventAssignmentVectorN"""
        return _COPASI.CEvent_getAssignments(self)


    def deleteAssignment(self, key):
        """deleteAssignment(CEvent self, std::string const & key)"""
        return _COPASI.CEvent_deleteAssignment(self, key)


    def getType(self):
        """getType(CEvent self) -> CEvent::Type const &"""
        return _COPASI.CEvent_getType(self)


    def setType(self, type):
        """setType(CEvent self, CEvent::Type const & type)"""
        return _COPASI.CEvent_setType(self, type)


    def createAssignment(self, *args):
        """
        createAssignment(CEvent self, std::string targetCN) -> CEventAssignment
        createAssignment(CEvent self) -> CEventAssignment
        """
        return _COPASI.CEvent_createAssignment(self, *args)


    def getNumAssignments(self):
        """getNumAssignments(CEvent self) -> unsigned int"""
        return _COPASI.CEvent_getNumAssignments(self)


    def getAssignment(self, index):
        """getAssignment(CEvent self, unsigned int index) -> CEventAssignment"""
        return _COPASI.CEvent_getAssignment(self, index)


    def setNotes(self, notes):
        """setNotes(CEvent self, std::string const & notes)"""
        return _COPASI.CEvent_setNotes(self, notes)


    def getNotes(self):
        """getNotes(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getNotes(self)


    def getMiriamAnnotation(self):
        """getMiriamAnnotation(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getMiriamAnnotation(self)


    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        """setMiriamAnnotation(CEvent self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CEvent_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)


    def hasUnsupportedAnnotation(self, name):
        """hasUnsupportedAnnotation(CEvent self, std::string name) -> bool"""
        return _COPASI.CEvent_hasUnsupportedAnnotation(self, name)


    def getNumUnsupportedAnnotations(self):
        """getNumUnsupportedAnnotations(CEvent self) -> int"""
        return _COPASI.CEvent_getNumUnsupportedAnnotations(self)


    def getUnsupportedAnnotation(self, *args):
        """
        getUnsupportedAnnotation(CEvent self, std::string name) -> std::string
        getUnsupportedAnnotation(CEvent self, int index) -> std::string
        """
        return _COPASI.CEvent_getUnsupportedAnnotation(self, *args)


    def getUnsupportedAnnotationName(self, index):
        """getUnsupportedAnnotationName(CEvent self, int index) -> std::string"""
        return _COPASI.CEvent_getUnsupportedAnnotationName(self, index)


    def addUnsupportedAnnotation(self, name, xml):
        """addUnsupportedAnnotation(CEvent self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CEvent_addUnsupportedAnnotation(self, name, xml)


    def replaceUnsupportedAnnotation(self, name, xml):
        """replaceUnsupportedAnnotation(CEvent self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CEvent_replaceUnsupportedAnnotation(self, name, xml)


    def removeUnsupportedAnnotation(self, name):
        """removeUnsupportedAnnotation(CEvent self, std::string const & name) -> bool"""
        return _COPASI.CEvent_removeUnsupportedAnnotation(self, name)

CEvent_swigregister = _COPASI.CEvent_swigregister
CEvent_swigregister(CEvent)

def CEvent_fromData(data, pParent):
    """CEvent_fromData(CData data, CUndoObjectInterface pParent) -> CEvent"""
    return _COPASI.CEvent_fromData(data, pParent)

class CLBase(_object):
    """Proxy of C++ CLBase class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLBase self) -> CLBase
        __init__(CLBase self, CLBase b) -> CLBase
        """
        this = _COPASI.new_CLBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLBase
    __del__ = lambda self: None

    def moveBy(self, arg2):
        """moveBy(CLBase self, CLPoint arg2)"""
        return _COPASI.CLBase_moveBy(self, arg2)


    def getTag(self):
        """getTag(CLBase self) -> std::string const &"""
        return _COPASI.CLBase_getTag(self)


    def setTag(self, tag):
        """setTag(CLBase self, std::string const & tag)"""
        return _COPASI.CLBase_setTag(self, tag)


    def hasTag(self):
        """hasTag(CLBase self) -> bool"""
        return _COPASI.CLBase_hasTag(self)

CLBase_swigregister = _COPASI.CLBase_swigregister
CLBase_swigregister(CLBase)

class CLPoint(CLBase):
    """Proxy of C++ CLPoint class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLPoint self) -> CLPoint
        __init__(CLPoint self, double const & x, double const & y, double const & z=0.0) -> CLPoint
        __init__(CLPoint self, double const & x, double const & y) -> CLPoint
        """
        this = _COPASI.new_CLPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setX(self, x):
        """setX(CLPoint self, double const & x)"""
        return _COPASI.CLPoint_setX(self, x)


    def setY(self, y):
        """setY(CLPoint self, double const & y)"""
        return _COPASI.CLPoint_setY(self, y)


    def setZ(self, z):
        """setZ(CLPoint self, double const & z)"""
        return _COPASI.CLPoint_setZ(self, z)


    def scale(self, scaleFactor):
        """scale(CLPoint self, double const & scaleFactor)"""
        return _COPASI.CLPoint_scale(self, scaleFactor)


    def __eq__(self, rhs):
        """__eq__(CLPoint self, CLPoint rhs) -> bool"""
        return _COPASI.CLPoint___eq__(self, rhs)


    def sub(self, rhs):
        """sub(CLPoint self, CLPoint rhs) -> CLPoint"""
        return _COPASI.CLPoint_sub(self, rhs)


    def add(self, rhs):
        """add(CLPoint self, CLPoint rhs) -> CLPoint"""
        return _COPASI.CLPoint_add(self, rhs)


    def moveBy(self, p):
        """moveBy(CLPoint self, CLPoint p)"""
        return _COPASI.CLPoint_moveBy(self, p)


    def mul(self, rhs):
        """mul(CLPoint self, double const & rhs) -> CLPoint"""
        return _COPASI.CLPoint_mul(self, rhs)


    def dot(self, rhs):
        """dot(CLPoint self, CLPoint rhs) -> double"""
        return _COPASI.CLPoint_dot(self, rhs)


    def isEmpty(self):
        """isEmpty(CLPoint self) -> bool"""
        return _COPASI.CLPoint_isEmpty(self)


    def getX(self):
        """getX(CLPoint self) -> double"""
        return _COPASI.CLPoint_getX(self)


    def getY(self):
        """getY(CLPoint self) -> double"""
        return _COPASI.CLPoint_getY(self)

    __swig_destroy__ = _COPASI.delete_CLPoint
    __del__ = lambda self: None
CLPoint_swigregister = _COPASI.CLPoint_swigregister
CLPoint_swigregister(CLPoint)

class CLDimensions(CLBase):
    """Proxy of C++ CLDimensions class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLDimensions, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLDimensions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLDimensions self) -> CLDimensions
        __init__(CLDimensions self, double const & w, double const & h, double const & d=0.0) -> CLDimensions
        __init__(CLDimensions self, double const & w, double const & h) -> CLDimensions
        """
        this = _COPASI.new_CLDimensions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setWidth(self, w):
        """setWidth(CLDimensions self, double const & w)"""
        return _COPASI.CLDimensions_setWidth(self, w)


    def setHeight(self, h):
        """setHeight(CLDimensions self, double const & h)"""
        return _COPASI.CLDimensions_setHeight(self, h)


    def setDepth(self, d):
        """setDepth(CLDimensions self, double const & d)"""
        return _COPASI.CLDimensions_setDepth(self, d)


    def scale(self, scaleFactor):
        """scale(CLDimensions self, double const & scaleFactor)"""
        return _COPASI.CLDimensions_scale(self, scaleFactor)


    def isEmpty(self):
        """isEmpty(CLDimensions self) -> bool"""
        return _COPASI.CLDimensions_isEmpty(self)


    def getHeight(self):
        """getHeight(CLDimensions self) -> double"""
        return _COPASI.CLDimensions_getHeight(self)


    def getWidth(self):
        """getWidth(CLDimensions self) -> double"""
        return _COPASI.CLDimensions_getWidth(self)

    __swig_destroy__ = _COPASI.delete_CLDimensions
    __del__ = lambda self: None
CLDimensions_swigregister = _COPASI.CLDimensions_swigregister
CLDimensions_swigregister(CLDimensions)

class CLBoundingBox(CLBase):
    """Proxy of C++ CLBoundingBox class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLBoundingBox, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLBoundingBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLBoundingBox self) -> CLBoundingBox
        __init__(CLBoundingBox self, CLPoint p, CLDimensions d) -> CLBoundingBox
        """
        this = _COPASI.new_CLBoundingBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPosition(self):
        """getPosition(CLBoundingBox self) -> CLPoint"""
        return _COPASI.CLBoundingBox_getPosition(self)


    def getCenter(self):
        """getCenter(CLBoundingBox self) -> CLPoint"""
        return _COPASI.CLBoundingBox_getCenter(self)


    def getDimensions(self):
        """getDimensions(CLBoundingBox self) -> CLDimensions"""
        return _COPASI.CLBoundingBox_getDimensions(self)


    def setPosition(self, p):
        """setPosition(CLBoundingBox self, CLPoint p)"""
        return _COPASI.CLBoundingBox_setPosition(self, p)


    def setDimensions(self, d):
        """setDimensions(CLBoundingBox self, CLDimensions d)"""
        return _COPASI.CLBoundingBox_setDimensions(self, d)


    def isEmpty(self):
        """isEmpty(CLBoundingBox self) -> bool"""
        return _COPASI.CLBoundingBox_isEmpty(self)


    def moveBy(self, p):
        """moveBy(CLBoundingBox self, CLPoint p)"""
        return _COPASI.CLBoundingBox_moveBy(self, p)


    def scale(self, scaleFactor):
        """scale(CLBoundingBox self, double const & scaleFactor)"""
        return _COPASI.CLBoundingBox_scale(self, scaleFactor)

    __swig_destroy__ = _COPASI.delete_CLBoundingBox
    __del__ = lambda self: None
CLBoundingBox_swigregister = _COPASI.CLBoundingBox_swigregister
CLBoundingBox_swigregister(CLBoundingBox)

class CLGraphicalObject(CLBase, CDataContainer):
    """Proxy of C++ CLGraphicalObject class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGraphicalObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGraphicalObject, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGraphicalObject"""
        return _COPASI.CLGraphicalObject_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGraphicalObject self, std::string const & name, CDataContainer pParent) -> CLGraphicalObject
        __init__(CLGraphicalObject self, std::string const & name) -> CLGraphicalObject
        __init__(CLGraphicalObject self) -> CLGraphicalObject
        __init__(CLGraphicalObject self, CLGraphicalObject src, CDataContainer pParent) -> CLGraphicalObject
        """
        this = _COPASI.new_CLGraphicalObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLGraphicalObject
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getKey(self)


    def clone(self):
        """clone(CLGraphicalObject self) -> CLGraphicalObject"""
        return _COPASI.CLGraphicalObject_clone(self)


    def moveBy(self, p):
        """moveBy(CLGraphicalObject self, CLPoint p)"""
        return _COPASI.CLGraphicalObject_moveBy(self, p)


    def getBoundingBox(self):
        """getBoundingBox(CLGraphicalObject self) -> CLBoundingBox"""
        return _COPASI.CLGraphicalObject_getBoundingBox(self)


    def setBoundingBox(self, bb):
        """setBoundingBox(CLGraphicalObject self, CLBoundingBox bb)"""
        return _COPASI.CLGraphicalObject_setBoundingBox(self, bb)


    def getPosition(self):
        """getPosition(CLGraphicalObject self) -> CLPoint"""
        return _COPASI.CLGraphicalObject_getPosition(self)


    def setPosition(self, p):
        """setPosition(CLGraphicalObject self, CLPoint p)"""
        return _COPASI.CLGraphicalObject_setPosition(self, p)


    def getX(self):
        """getX(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getX(self)


    def setX(self, x):
        """setX(CLGraphicalObject self, double const & x)"""
        return _COPASI.CLGraphicalObject_setX(self, x)


    def getY(self):
        """getY(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getY(self)


    def setY(self, y):
        """setY(CLGraphicalObject self, double const & y)"""
        return _COPASI.CLGraphicalObject_setY(self, y)


    def getDimensions(self):
        """getDimensions(CLGraphicalObject self) -> CLDimensions"""
        return _COPASI.CLGraphicalObject_getDimensions(self)


    def setDimensions(self, d):
        """setDimensions(CLGraphicalObject self, CLDimensions d)"""
        return _COPASI.CLGraphicalObject_setDimensions(self, d)


    def getWidth(self):
        """getWidth(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getWidth(self)


    def setWidth(self, w):
        """setWidth(CLGraphicalObject self, double const & w)"""
        return _COPASI.CLGraphicalObject_setWidth(self, w)


    def getHeight(self):
        """getHeight(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getHeight(self)


    def setHeight(self, h):
        """setHeight(CLGraphicalObject self, double const & h)"""
        return _COPASI.CLGraphicalObject_setHeight(self, h)


    def getModelObjectKey(self):
        """getModelObjectKey(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getModelObjectKey(self)


    def setModelObjectKey(self, k):
        """setModelObjectKey(CLGraphicalObject self, std::string const & k)"""
        return _COPASI.CLGraphicalObject_setModelObjectKey(self, k)


    def getModelObject(self):
        """getModelObject(CLGraphicalObject self) -> CDataObject"""
        return _COPASI.CLGraphicalObject_getModelObject(self)


    def getModelObjectName(self):
        """getModelObjectName(CLGraphicalObject self) -> std::string"""
        return _COPASI.CLGraphicalObject_getModelObjectName(self)


    def getModelObjectDisplayName(self, regular=True, richtext=False):
        """
        getModelObjectDisplayName(CLGraphicalObject self, bool regular=True, bool richtext=False) -> std::string
        getModelObjectDisplayName(CLGraphicalObject self, bool regular=True) -> std::string
        getModelObjectDisplayName(CLGraphicalObject self) -> std::string
        """
        return _COPASI.CLGraphicalObject_getModelObjectDisplayName(self, regular, richtext)


    def setObjectRole(self, role):
        """setObjectRole(CLGraphicalObject self, std::string const & role)"""
        return _COPASI.CLGraphicalObject_setObjectRole(self, role)


    def getObjectRole(self):
        """getObjectRole(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getObjectRole(self)


    def hasValidModelReference(self):
        """hasValidModelReference(CLGraphicalObject self) -> bool"""
        return _COPASI.CLGraphicalObject_hasValidModelReference(self)

CLGraphicalObject_swigregister = _COPASI.CLGraphicalObject_swigregister
CLGraphicalObject_swigregister(CLGraphicalObject)

def CLGraphicalObject_fromData(data, pParent):
    """CLGraphicalObject_fromData(CData data, CUndoObjectInterface pParent) -> CLGraphicalObject"""
    return _COPASI.CLGraphicalObject_fromData(data, pParent)

class CLMetabGlyph(CLGraphicalObject):
    """Proxy of C++ CLMetabGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLMetabGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLMetabGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLMetabGlyph"""
        return _COPASI.CLMetabGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLMetabGlyph self, std::string const & name, CDataContainer pParent) -> CLMetabGlyph
        __init__(CLMetabGlyph self, std::string const & name) -> CLMetabGlyph
        __init__(CLMetabGlyph self) -> CLMetabGlyph
        __init__(CLMetabGlyph self, CLMetabGlyph src, CDataContainer pParent) -> CLMetabGlyph
        """
        this = _COPASI.new_CLMetabGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CLMetabGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLMetabGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLMetabGlyph
    __del__ = lambda self: None
CLMetabGlyph_swigregister = _COPASI.CLMetabGlyph_swigregister
CLMetabGlyph_swigregister(CLMetabGlyph)

def CLMetabGlyph_fromData(data, pParent):
    """CLMetabGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLMetabGlyph"""
    return _COPASI.CLMetabGlyph_fromData(data, pParent)

class CLCompartmentGlyph(CLGraphicalObject):
    """Proxy of C++ CLCompartmentGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLCompartmentGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLCompartmentGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLCompartmentGlyph"""
        return _COPASI.CLCompartmentGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLCompartmentGlyph self, std::string const & name, CDataContainer pParent) -> CLCompartmentGlyph
        __init__(CLCompartmentGlyph self, std::string const & name) -> CLCompartmentGlyph
        __init__(CLCompartmentGlyph self) -> CLCompartmentGlyph
        __init__(CLCompartmentGlyph self, CLCompartmentGlyph src, CDataContainer pParent) -> CLCompartmentGlyph
        """
        this = _COPASI.new_CLCompartmentGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CLCompartmentGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLCompartmentGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLCompartmentGlyph
    __del__ = lambda self: None
CLCompartmentGlyph_swigregister = _COPASI.CLCompartmentGlyph_swigregister
CLCompartmentGlyph_swigregister(CLCompartmentGlyph)

def CLCompartmentGlyph_fromData(data, pParent):
    """CLCompartmentGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLCompartmentGlyph"""
    return _COPASI.CLCompartmentGlyph_fromData(data, pParent)

class CLTextGlyph(CLGraphicalObject):
    """Proxy of C++ CLTextGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLTextGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLTextGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLTextGlyph"""
        return _COPASI.CLTextGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLTextGlyph self, std::string const & name, CDataContainer pParent) -> CLTextGlyph
        __init__(CLTextGlyph self, std::string const & name) -> CLTextGlyph
        __init__(CLTextGlyph self) -> CLTextGlyph
        __init__(CLTextGlyph self, CLTextGlyph src, CDataContainer pParent) -> CLTextGlyph
        """
        this = _COPASI.new_CLTextGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getText(self):
        """getText(CLTextGlyph self) -> std::string"""
        return _COPASI.CLTextGlyph_getText(self)


    def setText(self, t):
        """setText(CLTextGlyph self, std::string const & t)"""
        return _COPASI.CLTextGlyph_setText(self, t)


    def clearText(self):
        """clearText(CLTextGlyph self)"""
        return _COPASI.CLTextGlyph_clearText(self)


    def isTextSet(self):
        """isTextSet(CLTextGlyph self) -> bool"""
        return _COPASI.CLTextGlyph_isTextSet(self)


    def getGraphicalObjectKey(self):
        """getGraphicalObjectKey(CLTextGlyph self) -> std::string const &"""
        return _COPASI.CLTextGlyph_getGraphicalObjectKey(self)


    def getGraphicalObject(self):
        """getGraphicalObject(CLTextGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLTextGlyph_getGraphicalObject(self)


    def setGraphicalObjectKey(self, k):
        """setGraphicalObjectKey(CLTextGlyph self, std::string const & k)"""
        return _COPASI.CLTextGlyph_setGraphicalObjectKey(self, k)


    def clone(self):
        """clone(CLTextGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLTextGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLTextGlyph
    __del__ = lambda self: None
CLTextGlyph_swigregister = _COPASI.CLTextGlyph_swigregister
CLTextGlyph_swigregister(CLTextGlyph)

def CLTextGlyph_fromData(data, pParent):
    """CLTextGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLTextGlyph"""
    return _COPASI.CLTextGlyph_fromData(data, pParent)

class CLLineSegment(CLBase):
    """Proxy of C++ CLLineSegment class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLineSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLineSegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLLineSegment self) -> CLLineSegment
        __init__(CLLineSegment self, CLPoint s, CLPoint e) -> CLLineSegment
        __init__(CLLineSegment self, CLPoint s, CLPoint e, CLPoint b1, CLPoint b2) -> CLLineSegment
        """
        this = _COPASI.new_CLLineSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStart(self):
        """getStart(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getStart(self)


    def getEnd(self):
        """getEnd(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getEnd(self)


    def setStart(self, p):
        """setStart(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setStart(self, p)


    def setEnd(self, p):
        """setEnd(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setEnd(self, p)


    def getBase1(self):
        """getBase1(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getBase1(self)


    def getBase2(self):
        """getBase2(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getBase2(self)


    def setBase1(self, p):
        """setBase1(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setBase1(self, p)


    def setBase2(self, p):
        """setBase2(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setBase2(self, p)


    def isBezier(self):
        """isBezier(CLLineSegment self) -> bool"""
        return _COPASI.CLLineSegment_isBezier(self)


    def setIsBezier(self, b):
        """setIsBezier(CLLineSegment self, bool b)"""
        return _COPASI.CLLineSegment_setIsBezier(self, b)


    def __eq__(self, rhs):
        """__eq__(CLLineSegment self, CLLineSegment rhs) -> bool"""
        return _COPASI.CLLineSegment___eq__(self, rhs)


    def scale(self, scaleFactor):
        """scale(CLLineSegment self, double const & scaleFactor)"""
        return _COPASI.CLLineSegment_scale(self, scaleFactor)

    __swig_destroy__ = _COPASI.delete_CLLineSegment
    __del__ = lambda self: None
CLLineSegment_swigregister = _COPASI.CLLineSegment_swigregister
CLLineSegment_swigregister(CLLineSegment)

class CLCurve(CLBase):
    """Proxy of C++ CLCurve class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLCurve self) -> CLCurve
        __init__(CLCurve self, CLCurve c) -> CLCurve
        """
        this = _COPASI.new_CLCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLCurve
    __del__ = lambda self: None

    def getCurveSegments(self):
        """getCurveSegments(CLCurve self) -> LineSegmentStdVector"""
        return _COPASI.CLCurve_getCurveSegments(self)


    def getSegmentAt(self, i):
        """getSegmentAt(CLCurve self, size_t i) -> CLLineSegment"""
        return _COPASI.CLCurve_getSegmentAt(self, i)


    def getNumCurveSegments(self):
        """getNumCurveSegments(CLCurve self) -> size_t"""
        return _COPASI.CLCurve_getNumCurveSegments(self)


    def clear(self):
        """clear(CLCurve self)"""
        return _COPASI.CLCurve_clear(self)


    def addCurveSegment(self, ls):
        """addCurveSegment(CLCurve self, CLLineSegment ls)"""
        return _COPASI.CLCurve_addCurveSegment(self, ls)


    def isContinuous(self):
        """isContinuous(CLCurve self) -> bool"""
        return _COPASI.CLCurve_isContinuous(self)


    def getListOfPoints(self):
        """getListOfPoints(CLCurve self) -> PointStdVector"""
        return _COPASI.CLCurve_getListOfPoints(self)


    def __eq__(self, rhs):
        """__eq__(CLCurve self, CLCurve rhs) -> bool"""
        return _COPASI.CLCurve___eq__(self, rhs)


    def scale(self, scaleFactor):
        """scale(CLCurve self, double const & scaleFactor)"""
        return _COPASI.CLCurve_scale(self, scaleFactor)


    def calculateBoundingBox(self):
        """calculateBoundingBox(CLCurve self) -> CLBoundingBox"""
        return _COPASI.CLCurve_calculateBoundingBox(self)


    def moveBy(self, p):
        """moveBy(CLCurve self, CLPoint p)"""
        return _COPASI.CLCurve_moveBy(self, p)

CLCurve_swigregister = _COPASI.CLCurve_swigregister
CLCurve_swigregister(CLCurve)

class CLGlyphWithCurve(CLGraphicalObject):
    """Proxy of C++ CLGlyphWithCurve class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGlyphWithCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGlyphWithCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLGlyphWithCurve self, std::string const & name, CDataContainer pParent) -> CLGlyphWithCurve
        __init__(CLGlyphWithCurve self, std::string const & name) -> CLGlyphWithCurve
        __init__(CLGlyphWithCurve self) -> CLGlyphWithCurve
        __init__(CLGlyphWithCurve self, CLGlyphWithCurve src, CDataContainer pParent) -> CLGlyphWithCurve
        """
        this = _COPASI.new_CLGlyphWithCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurve(self):
        """getCurve(CLGlyphWithCurve self) -> CLCurve"""
        return _COPASI.CLGlyphWithCurve_getCurve(self)


    def setCurve(self, c):
        """setCurve(CLGlyphWithCurve self, CLCurve c)"""
        return _COPASI.CLGlyphWithCurve_setCurve(self, c)


    def moveBy(self, p):
        """moveBy(CLGlyphWithCurve self, CLPoint p)"""
        return _COPASI.CLGlyphWithCurve_moveBy(self, p)

    __swig_destroy__ = _COPASI.delete_CLGlyphWithCurve
    __del__ = lambda self: None
CLGlyphWithCurve_swigregister = _COPASI.CLGlyphWithCurve_swigregister
CLGlyphWithCurve_swigregister(CLGlyphWithCurve)

class CLReferenceGlyph(CLGlyphWithCurve):
    """Proxy of C++ CLReferenceGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLReferenceGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLReferenceGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLReferenceGlyph"""
        return _COPASI.CLReferenceGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLReferenceGlyph self, std::string const & name, CDataContainer pParent) -> CLReferenceGlyph
        __init__(CLReferenceGlyph self, std::string const & name) -> CLReferenceGlyph
        __init__(CLReferenceGlyph self) -> CLReferenceGlyph
        __init__(CLReferenceGlyph self, CLReferenceGlyph src, CDataContainer pParent) -> CLReferenceGlyph
        """
        this = _COPASI.new_CLReferenceGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRole(self):
        """getRole(CLReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLReferenceGlyph_getRole(self)


    def setRole(self, r):
        """setRole(CLReferenceGlyph self, std::string const & r)"""
        return _COPASI.CLReferenceGlyph_setRole(self, r)


    def getTargetGlyphKey(self):
        """getTargetGlyphKey(CLReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLReferenceGlyph_getTargetGlyphKey(self)


    def getTargetGlyph(self):
        """getTargetGlyph(CLReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReferenceGlyph_getTargetGlyph(self)


    def setTargetGlyphKey(self, k):
        """setTargetGlyphKey(CLReferenceGlyph self, std::string const & k)"""
        return _COPASI.CLReferenceGlyph_setTargetGlyphKey(self, k)


    def clone(self):
        """clone(CLReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReferenceGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLReferenceGlyph
    __del__ = lambda self: None
CLReferenceGlyph_swigregister = _COPASI.CLReferenceGlyph_swigregister
CLReferenceGlyph_swigregister(CLReferenceGlyph)

def CLReferenceGlyph_fromData(data, pParent):
    """CLReferenceGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLReferenceGlyph"""
    return _COPASI.CLReferenceGlyph_fromData(data, pParent)

class CLMetabReferenceGlyph(CLGlyphWithCurve):
    """Proxy of C++ CLMetabReferenceGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLMetabReferenceGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLMetabReferenceGlyph, name)
    __repr__ = _swig_repr
    UNDEFINED = _COPASI.CLMetabReferenceGlyph_UNDEFINED
    SUBSTRATE = _COPASI.CLMetabReferenceGlyph_SUBSTRATE
    PRODUCT = _COPASI.CLMetabReferenceGlyph_PRODUCT
    SIDESUBSTRATE = _COPASI.CLMetabReferenceGlyph_SIDESUBSTRATE
    SIDEPRODUCT = _COPASI.CLMetabReferenceGlyph_SIDEPRODUCT
    MODIFIER = _COPASI.CLMetabReferenceGlyph_MODIFIER
    ACTIVATOR = _COPASI.CLMetabReferenceGlyph_ACTIVATOR
    INHIBITOR = _COPASI.CLMetabReferenceGlyph_INHIBITOR

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLMetabReferenceGlyph"""
        return _COPASI.CLMetabReferenceGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLMetabReferenceGlyph self, std::string const & name, CDataContainer pParent) -> CLMetabReferenceGlyph
        __init__(CLMetabReferenceGlyph self, std::string const & name) -> CLMetabReferenceGlyph
        __init__(CLMetabReferenceGlyph self) -> CLMetabReferenceGlyph
        __init__(CLMetabReferenceGlyph self, CLMetabReferenceGlyph src, CDataContainer pParent) -> CLMetabReferenceGlyph
        """
        this = _COPASI.new_CLMetabReferenceGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMetabGlyphKey(self):
        """getMetabGlyphKey(CLMetabReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLMetabReferenceGlyph_getMetabGlyphKey(self)


    def getMetabGlyph(self):
        """getMetabGlyph(CLMetabReferenceGlyph self) -> CLMetabGlyph"""
        return _COPASI.CLMetabReferenceGlyph_getMetabGlyph(self)


    def setMetabGlyphKey(self, k):
        """setMetabGlyphKey(CLMetabReferenceGlyph self, std::string const & k)"""
        return _COPASI.CLMetabReferenceGlyph_setMetabGlyphKey(self, k)


    def getRole(self):
        """getRole(CLMetabReferenceGlyph self) -> CLMetabReferenceGlyph::Role"""
        return _COPASI.CLMetabReferenceGlyph_getRole(self)


    def setRole(self, r):
        """setRole(CLMetabReferenceGlyph self, CLMetabReferenceGlyph::Role r)"""
        return _COPASI.CLMetabReferenceGlyph_setRole(self, r)


    def getFunctionalRole(self):
        """getFunctionalRole(CLMetabReferenceGlyph self) -> CLMetabReferenceGlyph::Role"""
        return _COPASI.CLMetabReferenceGlyph_getFunctionalRole(self)


    def setFunctionalRole(self, r):
        """setFunctionalRole(CLMetabReferenceGlyph self, CLMetabReferenceGlyph::Role r)"""
        return _COPASI.CLMetabReferenceGlyph_setFunctionalRole(self, r)


    def getRoleDisplayName(self):
        """getRoleDisplayName(CLMetabReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLMetabReferenceGlyph_getRoleDisplayName(self)


    def clone(self):
        """clone(CLMetabReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLMetabReferenceGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLMetabReferenceGlyph
    __del__ = lambda self: None
CLMetabReferenceGlyph_swigregister = _COPASI.CLMetabReferenceGlyph_swigregister
CLMetabReferenceGlyph_swigregister(CLMetabReferenceGlyph)

def CLMetabReferenceGlyph_fromData(data, pParent):
    """CLMetabReferenceGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLMetabReferenceGlyph"""
    return _COPASI.CLMetabReferenceGlyph_fromData(data, pParent)

class CLGeneralGlyph(CLGlyphWithCurve):
    """Proxy of C++ CLGeneralGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGeneralGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGeneralGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGeneralGlyph"""
        return _COPASI.CLGeneralGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGeneralGlyph self, std::string const & name, CDataContainer pParent) -> CLGeneralGlyph
        __init__(CLGeneralGlyph self, std::string const & name) -> CLGeneralGlyph
        __init__(CLGeneralGlyph self) -> CLGeneralGlyph
        __init__(CLGeneralGlyph self, CLGeneralGlyph src, CDataContainer pParent) -> CLGeneralGlyph
        """
        this = _COPASI.new_CLGeneralGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getListOfReferenceGlyphs(self):
        """getListOfReferenceGlyphs(CLGeneralGlyph self) -> ReferenceGlyphVector"""
        return _COPASI.CLGeneralGlyph_getListOfReferenceGlyphs(self)


    def getListOfSubglyphs(self):
        """getListOfSubglyphs(CLGeneralGlyph self) -> GraphicalObjectVector"""
        return _COPASI.CLGeneralGlyph_getListOfSubglyphs(self)


    def addReferenceGlyph(self, glyph):
        """addReferenceGlyph(CLGeneralGlyph self, CLReferenceGlyph glyph)"""
        return _COPASI.CLGeneralGlyph_addReferenceGlyph(self, glyph)


    def addSubglyph(self, glyph):
        """addSubglyph(CLGeneralGlyph self, CLGraphicalObject glyph)"""
        return _COPASI.CLGeneralGlyph_addSubglyph(self, glyph)


    def moveBy(self, p):
        """moveBy(CLGeneralGlyph self, CLPoint p)"""
        return _COPASI.CLGeneralGlyph_moveBy(self, p)


    def clone(self):
        """clone(CLGeneralGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLGeneralGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLGeneralGlyph
    __del__ = lambda self: None
CLGeneralGlyph_swigregister = _COPASI.CLGeneralGlyph_swigregister
CLGeneralGlyph_swigregister(CLGeneralGlyph)

def CLGeneralGlyph_fromData(data, pParent):
    """CLGeneralGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLGeneralGlyph"""
    return _COPASI.CLGeneralGlyph_fromData(data, pParent)

class CLReactionGlyph(CLGlyphWithCurve):
    """Proxy of C++ CLReactionGlyph class."""

    __swig_setmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLReactionGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGlyphWithCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLReactionGlyph, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLReactionGlyph"""
        return _COPASI.CLReactionGlyph_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLReactionGlyph self, std::string const & name, CDataContainer pParent) -> CLReactionGlyph
        __init__(CLReactionGlyph self, std::string const & name) -> CLReactionGlyph
        __init__(CLReactionGlyph self) -> CLReactionGlyph
        __init__(CLReactionGlyph self, CLReactionGlyph src, CDataContainer pParent) -> CLReactionGlyph
        """
        this = _COPASI.new_CLReactionGlyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getListOfMetabReferenceGlyphs(self):
        """getListOfMetabReferenceGlyphs(CLReactionGlyph self) -> MetabReferenceGlyphVector"""
        return _COPASI.CLReactionGlyph_getListOfMetabReferenceGlyphs(self)


    def addMetabReferenceGlyph(self, glyph):
        """addMetabReferenceGlyph(CLReactionGlyph self, CLMetabReferenceGlyph glyph)"""
        return _COPASI.CLReactionGlyph_addMetabReferenceGlyph(self, glyph)


    def moveBy(self, p):
        """moveBy(CLReactionGlyph self, CLPoint p)"""
        return _COPASI.CLReactionGlyph_moveBy(self, p)


    def clone(self):
        """clone(CLReactionGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReactionGlyph_clone(self)

    __swig_destroy__ = _COPASI.delete_CLReactionGlyph
    __del__ = lambda self: None
CLReactionGlyph_swigregister = _COPASI.CLReactionGlyph_swigregister
CLReactionGlyph_swigregister(CLReactionGlyph)

def CLReactionGlyph_fromData(data, pParent):
    """CLReactionGlyph_fromData(CData data, CUndoObjectInterface pParent) -> CLReactionGlyph"""
    return _COPASI.CLReactionGlyph_fromData(data, pParent)

class MetabReferenceGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLMetabReferenceGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabReferenceGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabReferenceGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabReferenceGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(MetabReferenceGlyphVector self)"""
        return _COPASI.MetabReferenceGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(MetabReferenceGlyphVector self, CLMetabReferenceGlyph src) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(MetabReferenceGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabReferenceGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(MetabReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(MetabReferenceGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabReferenceGlyphVector_getObject(self, name)


    def size(self):
        """size(MetabReferenceGlyphVector self) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector_size(self)


    def empty(self):
        """empty(MetabReferenceGlyphVector self) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_empty(self)


    def clear(self):
        """clear(MetabReferenceGlyphVector self)"""
        return _COPASI.MetabReferenceGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(MetabReferenceGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(MetabReferenceGlyphVector self, unsigned int index)"""
        return _COPASI.MetabReferenceGlyphVector_remove(self, index)


    def get(self, index):
        """get(MetabReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabReferenceGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(MetabReferenceGlyphVector self, CLMetabReferenceGlyph DISOWN) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(MetabReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(MetabReferenceGlyphVector self) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector___len__(self)

MetabReferenceGlyphVector_swigregister = _COPASI.MetabReferenceGlyphVector_swigregister
MetabReferenceGlyphVector_swigregister(MetabReferenceGlyphVector)

class ReferenceGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLReferenceGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReferenceGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ReferenceGlyphVector self)"""
        return _COPASI.ReferenceGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ReferenceGlyphVector self, CLReferenceGlyph src) -> bool"""
        return _COPASI.ReferenceGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ReferenceGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReferenceGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ReferenceGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReferenceGlyphVector_getObject(self, name)


    def size(self):
        """size(ReferenceGlyphVector self) -> size_t"""
        return _COPASI.ReferenceGlyphVector_size(self)


    def empty(self):
        """empty(ReferenceGlyphVector self) -> bool"""
        return _COPASI.ReferenceGlyphVector_empty(self)


    def clear(self):
        """clear(ReferenceGlyphVector self)"""
        return _COPASI.ReferenceGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ReferenceGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReferenceGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ReferenceGlyphVector self, unsigned int index)"""
        return _COPASI.ReferenceGlyphVector_remove(self, index)


    def get(self, index):
        """get(ReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ReferenceGlyphVector self, CLReferenceGlyph DISOWN) -> bool"""
        return _COPASI.ReferenceGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ReferenceGlyphVector self) -> size_t"""
        return _COPASI.ReferenceGlyphVector___len__(self)

ReferenceGlyphVector_swigregister = _COPASI.ReferenceGlyphVector_swigregister
ReferenceGlyphVector_swigregister(ReferenceGlyphVector)

class GeneralGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGeneralGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GeneralGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GeneralGlyphVector self)"""
        return _COPASI.GeneralGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GeneralGlyphVector self, CLGeneralGlyph src) -> bool"""
        return _COPASI.GeneralGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GeneralGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GeneralGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GeneralGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.GeneralGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GeneralGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GeneralGlyphVector_getObject(self, name)


    def size(self):
        """size(GeneralGlyphVector self) -> size_t"""
        return _COPASI.GeneralGlyphVector_size(self)


    def empty(self):
        """empty(GeneralGlyphVector self) -> bool"""
        return _COPASI.GeneralGlyphVector_empty(self)


    def clear(self):
        """clear(GeneralGlyphVector self)"""
        return _COPASI.GeneralGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GeneralGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GeneralGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GeneralGlyphVector self, unsigned int index)"""
        return _COPASI.GeneralGlyphVector_remove(self, index)


    def get(self, index):
        """get(GeneralGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GeneralGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GeneralGlyphVector self, CLGeneralGlyph DISOWN) -> bool"""
        return _COPASI.GeneralGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GeneralGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.GeneralGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GeneralGlyphVector self) -> size_t"""
        return _COPASI.GeneralGlyphVector___len__(self)

GeneralGlyphVector_swigregister = _COPASI.GeneralGlyphVector_swigregister
GeneralGlyphVector_swigregister(GeneralGlyphVector)

class CompartmentGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLCompartmentGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CompartmentGlyphVector self)"""
        return _COPASI.CompartmentGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CompartmentGlyphVector self, CLCompartmentGlyph src) -> bool"""
        return _COPASI.CompartmentGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CompartmentGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CompartmentGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CompartmentGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CompartmentGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentGlyphVector_getObject(self, name)


    def size(self):
        """size(CompartmentGlyphVector self) -> size_t"""
        return _COPASI.CompartmentGlyphVector_size(self)


    def empty(self):
        """empty(CompartmentGlyphVector self) -> bool"""
        return _COPASI.CompartmentGlyphVector_empty(self)


    def clear(self):
        """clear(CompartmentGlyphVector self)"""
        return _COPASI.CompartmentGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CompartmentGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CompartmentGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CompartmentGlyphVector self, unsigned int index)"""
        return _COPASI.CompartmentGlyphVector_remove(self, index)


    def get(self, index):
        """get(CompartmentGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CompartmentGlyphVector self, CLCompartmentGlyph DISOWN) -> bool"""
        return _COPASI.CompartmentGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CompartmentGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CompartmentGlyphVector self) -> size_t"""
        return _COPASI.CompartmentGlyphVector___len__(self)

CompartmentGlyphVector_swigregister = _COPASI.CompartmentGlyphVector_swigregister
CompartmentGlyphVector_swigregister(CompartmentGlyphVector)

class MetabGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLMetabGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetabGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetabGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(MetabGlyphVector self)"""
        return _COPASI.MetabGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(MetabGlyphVector self, CLMetabGlyph src) -> bool"""
        return _COPASI.MetabGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(MetabGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(MetabGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(MetabGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabGlyphVector_getObject(self, name)


    def size(self):
        """size(MetabGlyphVector self) -> size_t"""
        return _COPASI.MetabGlyphVector_size(self)


    def empty(self):
        """empty(MetabGlyphVector self) -> bool"""
        return _COPASI.MetabGlyphVector_empty(self)


    def clear(self):
        """clear(MetabGlyphVector self)"""
        return _COPASI.MetabGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(MetabGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(MetabGlyphVector self, unsigned int index)"""
        return _COPASI.MetabGlyphVector_remove(self, index)


    def get(self, index):
        """get(MetabGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(MetabGlyphVector self, CLMetabGlyph DISOWN) -> bool"""
        return _COPASI.MetabGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(MetabGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(MetabGlyphVector self) -> size_t"""
        return _COPASI.MetabGlyphVector___len__(self)

MetabGlyphVector_swigregister = _COPASI.MetabGlyphVector_swigregister
MetabGlyphVector_swigregister(MetabGlyphVector)

class ReactionGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLReactionGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ReactionGlyphVector self)"""
        return _COPASI.ReactionGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ReactionGlyphVector self, CLReactionGlyph src) -> bool"""
        return _COPASI.ReactionGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ReactionGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReactionGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ReactionGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ReactionGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionGlyphVector_getObject(self, name)


    def size(self):
        """size(ReactionGlyphVector self) -> size_t"""
        return _COPASI.ReactionGlyphVector_size(self)


    def empty(self):
        """empty(ReactionGlyphVector self) -> bool"""
        return _COPASI.ReactionGlyphVector_empty(self)


    def clear(self):
        """clear(ReactionGlyphVector self)"""
        return _COPASI.ReactionGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ReactionGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReactionGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ReactionGlyphVector self, unsigned int index)"""
        return _COPASI.ReactionGlyphVector_remove(self, index)


    def get(self, index):
        """get(ReactionGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ReactionGlyphVector self, CLReactionGlyph DISOWN) -> bool"""
        return _COPASI.ReactionGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ReactionGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ReactionGlyphVector self) -> size_t"""
        return _COPASI.ReactionGlyphVector___len__(self)

ReactionGlyphVector_swigregister = _COPASI.ReactionGlyphVector_swigregister
ReactionGlyphVector_swigregister(ReactionGlyphVector)

class TextGlyphVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLTextGlyph)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextGlyphVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextGlyphVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TextGlyphVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(TextGlyphVector self)"""
        return _COPASI.TextGlyphVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(TextGlyphVector self, CLTextGlyph src) -> bool"""
        return _COPASI.TextGlyphVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(TextGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.TextGlyphVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(TextGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.TextGlyphVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(TextGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TextGlyphVector_getObject(self, name)


    def size(self):
        """size(TextGlyphVector self) -> size_t"""
        return _COPASI.TextGlyphVector_size(self)


    def empty(self):
        """empty(TextGlyphVector self) -> bool"""
        return _COPASI.TextGlyphVector_empty(self)


    def clear(self):
        """clear(TextGlyphVector self)"""
        return _COPASI.TextGlyphVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(TextGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.TextGlyphVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(TextGlyphVector self, unsigned int index)"""
        return _COPASI.TextGlyphVector_remove(self, index)


    def get(self, index):
        """get(TextGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TextGlyphVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(TextGlyphVector self, CLTextGlyph DISOWN) -> bool"""
        return _COPASI.TextGlyphVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(TextGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.TextGlyphVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(TextGlyphVector self) -> size_t"""
        return _COPASI.TextGlyphVector___len__(self)

TextGlyphVector_swigregister = _COPASI.TextGlyphVector_swigregister
TextGlyphVector_swigregister(TextGlyphVector)

class GraphicalObjectVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGraphicalObject)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicalObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicalObjectVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GraphicalObjectVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GraphicalObjectVector self)"""
        return _COPASI.GraphicalObjectVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GraphicalObjectVector self, CLGraphicalObject src) -> bool"""
        return _COPASI.GraphicalObjectVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GraphicalObjectVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GraphicalObjectVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GraphicalObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.GraphicalObjectVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GraphicalObjectVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GraphicalObjectVector_getObject(self, name)


    def size(self):
        """size(GraphicalObjectVector self) -> size_t"""
        return _COPASI.GraphicalObjectVector_size(self)


    def empty(self):
        """empty(GraphicalObjectVector self) -> bool"""
        return _COPASI.GraphicalObjectVector_empty(self)


    def clear(self):
        """clear(GraphicalObjectVector self)"""
        return _COPASI.GraphicalObjectVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GraphicalObjectVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GraphicalObjectVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GraphicalObjectVector self, unsigned int index)"""
        return _COPASI.GraphicalObjectVector_remove(self, index)


    def get(self, index):
        """get(GraphicalObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GraphicalObjectVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GraphicalObjectVector self, CLGraphicalObject DISOWN) -> bool"""
        return _COPASI.GraphicalObjectVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GraphicalObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.GraphicalObjectVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GraphicalObjectVector self) -> size_t"""
        return _COPASI.GraphicalObjectVector___len__(self)

GraphicalObjectVector_swigregister = _COPASI.GraphicalObjectVector_swigregister
GraphicalObjectVector_swigregister(GraphicalObjectVector)

class CLayout(CLBase, CDataContainer):
    """Proxy of C++ CLayout class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLayout, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLayout, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLayout"""
        return _COPASI.CLayout_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLayout self, std::string const & name, CDataContainer pParent) -> CLayout
        __init__(CLayout self, std::string const & name) -> CLayout
        __init__(CLayout self) -> CLayout
        __init__(CLayout self, CLayout src, CDataContainer pParent) -> CLayout
        """
        this = _COPASI.new_CLayout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLayout
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CLayout self) -> std::string const &"""
        return _COPASI.CLayout_getKey(self)


    def moveBy(self, p):
        """moveBy(CLayout self, CLPoint p)"""
        return _COPASI.CLayout_moveBy(self, p)


    def getDimensions(self):
        """getDimensions(CLayout self) -> CLDimensions"""
        return _COPASI.CLayout_getDimensions(self)


    def setDimensions(self, d):
        """setDimensions(CLayout self, CLDimensions d)"""
        return _COPASI.CLayout_setDimensions(self, d)


    def getListOfCompartmentGlyphs(self):
        """getListOfCompartmentGlyphs(CLayout self) -> CompartmentGlyphVector"""
        return _COPASI.CLayout_getListOfCompartmentGlyphs(self)


    def addCompartmentGlyph(self, glyph):
        """addCompartmentGlyph(CLayout self, CLCompartmentGlyph glyph)"""
        return _COPASI.CLayout_addCompartmentGlyph(self, glyph)


    def addMetaboliteGlyph(self, glyph):
        """addMetaboliteGlyph(CLayout self, CLMetabGlyph glyph)"""
        return _COPASI.CLayout_addMetaboliteGlyph(self, glyph)


    def getListOfReactionGlyphs(self):
        """getListOfReactionGlyphs(CLayout self) -> ReactionGlyphVector"""
        return _COPASI.CLayout_getListOfReactionGlyphs(self)


    def addReactionGlyph(self, glyph):
        """addReactionGlyph(CLayout self, CLReactionGlyph glyph)"""
        return _COPASI.CLayout_addReactionGlyph(self, glyph)


    def addTextGlyph(self, glyph):
        """addTextGlyph(CLayout self, CLTextGlyph glyph)"""
        return _COPASI.CLayout_addTextGlyph(self, glyph)


    def getListOfGeneralGlyphs(self):
        """getListOfGeneralGlyphs(CLayout self) -> GeneralGlyphVector"""
        return _COPASI.CLayout_getListOfGeneralGlyphs(self)


    def addGeneralGlyph(self, glyph):
        """addGeneralGlyph(CLayout self, CLGeneralGlyph glyph)"""
        return _COPASI.CLayout_addGeneralGlyph(self, glyph)


    def addLocalRenderInformation(self, pRenderInfo):
        """addLocalRenderInformation(CLayout self, CLLocalRenderInformation pRenderInfo)"""
        return _COPASI.CLayout_addLocalRenderInformation(self, pRenderInfo)


    def calculateBoundingBox(self):
        """calculateBoundingBox(CLayout self) -> CLBoundingBox"""
        return _COPASI.CLayout_calculateBoundingBox(self)


    def calculateAndAssignBounds(self):
        """calculateAndAssignBounds(CLayout self)"""
        return _COPASI.CLayout_calculateAndAssignBounds(self)


    def scale(self, scaleFactor):
        """scale(CLayout self, double const & scaleFactor)"""
        return _COPASI.CLayout_scale(self, scaleFactor)

CLayout_swigregister = _COPASI.CLayout_swigregister
CLayout_swigregister(CLayout)

def CLayout_fromData(data, pParent):
    """CLayout_fromData(CData data, CUndoObjectInterface pParent) -> CLayout"""
    return _COPASI.CLayout_fromData(data, pParent)

class LayoutVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLayout)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LayoutVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(LayoutVector self)"""
        return _COPASI.LayoutVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(LayoutVector self, CLayout src) -> bool"""
        return _COPASI.LayoutVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(LayoutVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LayoutVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(LayoutVector self, CDataObject pObject) -> bool"""
        return _COPASI.LayoutVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(LayoutVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LayoutVector_getObject(self, name)


    def size(self):
        """size(LayoutVector self) -> size_t"""
        return _COPASI.LayoutVector_size(self)


    def empty(self):
        """empty(LayoutVector self) -> bool"""
        return _COPASI.LayoutVector_empty(self)


    def clear(self):
        """clear(LayoutVector self)"""
        return _COPASI.LayoutVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(LayoutVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LayoutVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(LayoutVector self, unsigned int index)"""
        return _COPASI.LayoutVector_remove(self, index)


    def get(self, index):
        """get(LayoutVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LayoutVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(LayoutVector self, CLayout DISOWN) -> bool"""
        return _COPASI.LayoutVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(LayoutVector self, CDataObject pObject) -> bool"""
        return _COPASI.LayoutVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(LayoutVector self) -> size_t"""
        return _COPASI.LayoutVector___len__(self)

LayoutVector_swigregister = _COPASI.LayoutVector_swigregister
LayoutVector_swigregister(LayoutVector)

class LayoutVectorN(LayoutVector):
    """Proxy of C++ CDataVectorN<(CLayout)> class."""

    __swig_setmethods__ = {}
    for _s in [LayoutVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutVectorN, name, value)
    __swig_getmethods__ = {}
    for _s in [LayoutVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutVectorN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CDataVectorN<(CLayout)> self, std::string const & name, CDataContainer pParent) -> LayoutVectorN
        __init__(CDataVectorN<(CLayout)> self, std::string const & name) -> LayoutVectorN
        __init__(CDataVectorN<(CLayout)> self) -> LayoutVectorN
        __init__(CDataVectorN<(CLayout)> self, LayoutVectorN src, CDataContainer pParent) -> LayoutVectorN
        """
        this = _COPASI.new_LayoutVectorN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_LayoutVectorN
    __del__ = lambda self: None

    def addCopy(self, src):
        """addCopy(LayoutVectorN self, CLayout src) -> bool"""
        return _COPASI.LayoutVectorN_addCopy(self, src)


    def add(self, pObject, adopt=True):
        """add(LayoutVectorN self, CDataObject pObject) -> bool"""
        return _COPASI.LayoutVectorN_add(self, pObject, adopt)


    def remove(self, name):
        """remove(LayoutVectorN self, std::string const & name)"""
        return _COPASI.LayoutVectorN_remove(self, name)


    def getObject(self, name):
        """getObject(LayoutVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LayoutVectorN_getObject(self, name)


    def getIndex(self, name):
        """getIndex(LayoutVectorN self, std::string const & name) -> size_t"""
        return _COPASI.LayoutVectorN_getIndex(self, name)


    def createUniqueName(self, name):
        """createUniqueName(LayoutVectorN self, std::string & name)"""
        return _COPASI.LayoutVectorN_createUniqueName(self, name)


    def getByName(self, name):
        """getByName(LayoutVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.LayoutVectorN_getByName(self, name)


    def removeByName(self, name):
        """removeByName(LayoutVectorN self, std::string const & name) -> bool"""
        return _COPASI.LayoutVectorN_removeByName(self, name)


    def getIndexByName(self, name):
        """getIndexByName(LayoutVectorN self, std::string const & name) -> size_t"""
        return _COPASI.LayoutVectorN_getIndexByName(self, name)

LayoutVectorN_swigregister = _COPASI.LayoutVectorN_swigregister
LayoutVectorN_swigregister(LayoutVectorN)

class CListOfLayouts(LayoutVectorN):
    """Proxy of C++ CListOfLayouts class."""

    __swig_setmethods__ = {}
    for _s in [LayoutVectorN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CListOfLayouts, name, value)
    __swig_getmethods__ = {}
    for _s in [LayoutVectorN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CListOfLayouts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CListOfLayouts self, std::string const & name, CDataContainer pParent=None) -> CListOfLayouts
        __init__(CListOfLayouts self, std::string const & name) -> CListOfLayouts
        __init__(CListOfLayouts self) -> CListOfLayouts
        """
        this = _COPASI.new_CListOfLayouts(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CListOfLayouts
    __del__ = lambda self: None

    def getKey(self):
        """getKey(CListOfLayouts self) -> std::string const &"""
        return _COPASI.CListOfLayouts_getKey(self)


    def getListOfGlobalRenderInformationObjects(self):
        """getListOfGlobalRenderInformationObjects(CListOfLayouts self) -> GlobalRenderInformationVector"""
        return _COPASI.CListOfLayouts_getListOfGlobalRenderInformationObjects(self)


    def addGlobalRenderInformation(self, pRenderInfo):
        """addGlobalRenderInformation(CListOfLayouts self, CLGlobalRenderInformation pRenderInfo)"""
        return _COPASI.CListOfLayouts_addGlobalRenderInformation(self, pRenderInfo)


    def getRenderInformation(self, index):
        """getRenderInformation(CListOfLayouts self, size_t index) -> CLGlobalRenderInformation"""
        return _COPASI.CListOfLayouts_getRenderInformation(self, index)


    def addLayout(self, pLayout):
        """addLayout(CListOfLayouts self, CLayout pLayout)"""
        return _COPASI.CListOfLayouts_addLayout(self, pLayout)

CListOfLayouts_swigregister = _COPASI.CListOfLayouts_swigregister
CListOfLayouts_swigregister(CListOfLayouts)

class CSensMethodLocalData(_object):
    """Proxy of C++ CSensMethodLocalData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensMethodLocalData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSensMethodLocalData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tmp1"] = _COPASI.CSensMethodLocalData_tmp1_set
    __swig_getmethods__["tmp1"] = _COPASI.CSensMethodLocalData_tmp1_get
    if _newclass:
        tmp1 = _swig_property(_COPASI.CSensMethodLocalData_tmp1_get, _COPASI.CSensMethodLocalData_tmp1_set)
    __swig_setmethods__["tmp2"] = _COPASI.CSensMethodLocalData_tmp2_set
    __swig_getmethods__["tmp2"] = _COPASI.CSensMethodLocalData_tmp2_get
    if _newclass:
        tmp2 = _swig_property(_COPASI.CSensMethodLocalData_tmp2_get, _COPASI.CSensMethodLocalData_tmp2_set)
    __swig_setmethods__["mInitialStateVariables"] = _COPASI.CSensMethodLocalData_mInitialStateVariables_set
    __swig_getmethods__["mInitialStateVariables"] = _COPASI.CSensMethodLocalData_mInitialStateVariables_get
    if _newclass:
        mInitialStateVariables = _swig_property(_COPASI.CSensMethodLocalData_mInitialStateVariables_get, _COPASI.CSensMethodLocalData_mInitialStateVariables_set)
    __swig_setmethods__["mInitialSequences"] = _COPASI.CSensMethodLocalData_mInitialSequences_set
    __swig_getmethods__["mInitialSequences"] = _COPASI.CSensMethodLocalData_mInitialSequences_get
    if _newclass:
        mInitialSequences = _swig_property(_COPASI.CSensMethodLocalData_mInitialSequences_get, _COPASI.CSensMethodLocalData_mInitialSequences_set)
    __swig_setmethods__["index"] = _COPASI.CSensMethodLocalData_index_set
    __swig_getmethods__["index"] = _COPASI.CSensMethodLocalData_index_get
    if _newclass:
        index = _swig_property(_COPASI.CSensMethodLocalData_index_get, _COPASI.CSensMethodLocalData_index_set)

    def __init__(self):
        """__init__(CSensMethodLocalData self) -> CSensMethodLocalData"""
        this = _COPASI.new_CSensMethodLocalData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSensMethodLocalData
    __del__ = lambda self: None
CSensMethodLocalData_swigregister = _COPASI.CSensMethodLocalData_swigregister
CSensMethodLocalData_swigregister(CSensMethodLocalData)

class CSensMethod(CCopasiMethod):
    """Proxy of C++ CSensMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CSensMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CSensMethod
        __init__(CSensMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CSensMethod
        __init__(CSensMethod self, CSensMethod src, CDataContainer pParent) -> CSensMethod
        """
        this = _COPASI.new_CSensMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSensMethod
    __del__ = lambda self: None

    def process(self):
        """process(CSensMethod self) -> bool"""
        return _COPASI.CSensMethod_process(self)


    def initialize(self, problem):
        """initialize(CSensMethod self, CSensProblem problem) -> bool"""
        return _COPASI.CSensMethod_initialize(self, problem)


    def restore(self, updateModel):
        """restore(CSensMethod self, bool const & updateModel) -> bool"""
        return _COPASI.CSensMethod_restore(self, updateModel)


    def isValidProblem(self, pProblem):
        """isValidProblem(CSensMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CSensMethod_isValidProblem(self, pProblem)


    def setCallBack(self, pCallBack):
        """setCallBack(CSensMethod self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CSensMethod_setCallBack(self, pCallBack)


    def getNumberOfSubtaskCalculations(self):
        """getNumberOfSubtaskCalculations(CSensMethod self) -> size_t"""
        return _COPASI.CSensMethod_getNumberOfSubtaskCalculations(self)

CSensMethod_swigregister = _COPASI.CSensMethod_swigregister
CSensMethod_swigregister(CSensMethod)

class CSensItem(_object):
    """Proxy of C++ CSensItem class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSensItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CSensItem self) -> CSensItem
        __init__(CSensItem self, std::string const & cn) -> CSensItem
        __init__(CSensItem self, CObjectLists::ListType type) -> CSensItem
        """
        this = _COPASI.new_CSensItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isSingleObject(self):
        """isSingleObject(CSensItem self) -> bool"""
        return _COPASI.CSensItem_isSingleObject(self)


    def setSingleObjectCN(self, cn):
        """setSingleObjectCN(CSensItem self, CCommonName cn)"""
        return _COPASI.CSensItem_setSingleObjectCN(self, cn)


    def getSingleObjectCN(self):
        """getSingleObjectCN(CSensItem self) -> CCommonName"""
        return _COPASI.CSensItem_getSingleObjectCN(self)


    def getSingleObjectDisplayName(self, pDataModel):
        """getSingleObjectDisplayName(CSensItem self, CDataModel pDataModel) -> std::string"""
        return _COPASI.CSensItem_getSingleObjectDisplayName(self, pDataModel)


    def setListType(self, lt):
        """setListType(CSensItem self, CObjectLists::ListType lt)"""
        return _COPASI.CSensItem_setListType(self, lt)


    def getListType(self):
        """getListType(CSensItem self) -> CObjectLists::ListType const &"""
        return _COPASI.CSensItem_getListType(self)


    def getListTypeDisplayName(self):
        """getListTypeDisplayName(CSensItem self) -> std::string"""
        return _COPASI.CSensItem_getListTypeDisplayName(self)


    def getVariablesPointerList(self, pDataModel):
        """getVariablesPointerList(CSensItem self, CDataModel pDataModel) -> ObjectStdVector"""
        return _COPASI.CSensItem_getVariablesPointerList(self, pDataModel)

    __swig_destroy__ = _COPASI.delete_CSensItem
    __del__ = lambda self: None
CSensItem_swigregister = _COPASI.CSensItem_swigregister
CSensItem_swigregister(CSensItem)

class CSensProblem(CCopasiProblem):
    """Proxy of C++ CSensProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensProblem, name)
    __repr__ = _swig_repr
    Evaluation = _COPASI.CSensProblem_Evaluation
    SteadyState = _COPASI.CSensProblem_SteadyState
    TimeSeries = _COPASI.CSensProblem_TimeSeries
    ParameterEstimation = _COPASI.CSensProblem_ParameterEstimation
    Optimization = _COPASI.CSensProblem_Optimization
    CrossSection = _COPASI.CSensProblem_CrossSection

    def getPossibleTargetFunctions(arg1):
        """getPossibleTargetFunctions(CSensProblem::SubTaskType arg1) -> ObjectListTypeStdVector"""
        return _COPASI.CSensProblem_getPossibleTargetFunctions(arg1)

    getPossibleTargetFunctions = staticmethod(getPossibleTargetFunctions)

    def getPossibleVariables(arg1):
        """getPossibleVariables(CSensProblem::SubTaskType arg1) -> ObjectListTypeStdVector"""
        return _COPASI.CSensProblem_getPossibleVariables(arg1)

    getPossibleVariables = staticmethod(getPossibleVariables)

    def __init__(self, *args):
        """
        __init__(CSensProblem self, CDataContainer pParent) -> CSensProblem
        __init__(CSensProblem self) -> CSensProblem
        __init__(CSensProblem self, CSensProblem src, CDataContainer pParent) -> CSensProblem
        """
        this = _COPASI.new_CSensProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSensProblem
    __del__ = lambda self: None

    def setSubTaskType(self, type):
        """setSubTaskType(CSensProblem self, CSensProblem::SubTaskType const & type)"""
        return _COPASI.CSensProblem_setSubTaskType(self, type)


    def getSubTaskType(self):
        """getSubTaskType(CSensProblem self) -> CSensProblem::SubTaskType"""
        return _COPASI.CSensProblem_getSubTaskType(self)


    def getTargetFunctions(self):
        """getTargetFunctions(CSensProblem self) -> CSensItem"""
        return _COPASI.CSensProblem_getTargetFunctions(self)


    def setTargetFunctions(self, item):
        """setTargetFunctions(CSensProblem self, CSensItem item)"""
        return _COPASI.CSensProblem_setTargetFunctions(self, item)


    def getNumberOfVariables(self):
        """getNumberOfVariables(CSensProblem self) -> size_t"""
        return _COPASI.CSensProblem_getNumberOfVariables(self)


    def getVariables(self, index):
        """getVariables(CSensProblem self, size_t index) -> CSensItem"""
        return _COPASI.CSensProblem_getVariables(self, index)


    def addVariables(self, item):
        """addVariables(CSensProblem self, CSensItem item)"""
        return _COPASI.CSensProblem_addVariables(self, item)


    def changeVariables(self, index, item):
        """changeVariables(CSensProblem self, size_t index, CSensItem item) -> bool"""
        return _COPASI.CSensProblem_changeVariables(self, index, item)


    def removeVariables(self, *args):
        """
        removeVariables(CSensProblem self, size_t index) -> bool
        removeVariables(CSensProblem self) -> bool
        """
        return _COPASI.CSensProblem_removeVariables(self, *args)


    def getResult(self):
        """getResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getResult(self)


    def getResultAnnotated(self):
        """getResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getResultAnnotated(self)


    def getScaledResult(self):
        """getScaledResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getScaledResult(self)


    def getScaledResultAnnotated(self):
        """getScaledResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getScaledResultAnnotated(self)


    def getCollapsedResult(self):
        """getCollapsedResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getCollapsedResult(self)


    def getCollapsedResultAnnotated(self):
        """getCollapsedResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getCollapsedResultAnnotated(self)


    def collapsRequested(self):
        """collapsRequested(CSensProblem self) -> bool"""
        return _COPASI.CSensProblem_collapsRequested(self)

CSensProblem_swigregister = _COPASI.CSensProblem_swigregister
CSensProblem_swigregister(CSensProblem)

def CSensProblem_getPossibleTargetFunctions(arg2):
    """CSensProblem_getPossibleTargetFunctions(CSensProblem::SubTaskType arg2) -> ObjectListTypeStdVector"""
    return _COPASI.CSensProblem_getPossibleTargetFunctions(arg2)

def CSensProblem_getPossibleVariables(arg2):
    """CSensProblem_getPossibleVariables(CSensProblem::SubTaskType arg2) -> ObjectListTypeStdVector"""
    return _COPASI.CSensProblem_getPossibleVariables(arg2)

class CSensTask(CCopasiTask):
    """Proxy of C++ CSensTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CSensTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CSensTask
        __init__(CSensTask self, CDataContainer pParent) -> CSensTask
        __init__(CSensTask self, CSensTask src, CDataContainer pParent) -> CSensTask
        """
        this = _COPASI.new_CSensTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CSensTask
    __del__ = lambda self: None

    def updateMatrices(self):
        """updateMatrices(CSensTask self) -> bool"""
        return _COPASI.CSensTask_updateMatrices(self)


    def getValidMethods(self):
        """getValidMethods(CSensTask self) -> IntStdVector"""
        return _COPASI.CSensTask_getValidMethods(self)

CSensTask_swigregister = _COPASI.CSensTask_swigregister
CSensTask_swigregister(CSensTask)

class CBiologicalDescription(CDataContainer):
    """Proxy of C++ CBiologicalDescription class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBiologicalDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBiologicalDescription, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CBiologicalDescription"""
        return _COPASI.CBiologicalDescription_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CBiologicalDescription self, std::string const & objectName, CDataContainer pParent) -> CBiologicalDescription
        __init__(CBiologicalDescription self, std::string const & objectName) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CRDFTriplet triplet, std::string const & objectName, CDataContainer pParent) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CRDFTriplet triplet, std::string const & objectName) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CRDFTriplet triplet) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CBiologicalDescription src, CDataContainer pParent) -> CBiologicalDescription
        """
        this = _COPASI.new_CBiologicalDescription(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CBiologicalDescription
    __del__ = lambda self: None

    def getMIRIAMResourceObject(self):
        """getMIRIAMResourceObject(CBiologicalDescription self) -> CMIRIAMResourceObject"""
        return _COPASI.CBiologicalDescription_getMIRIAMResourceObject(self)


    def getTriplet(self):
        """getTriplet(CBiologicalDescription self) -> CRDFTriplet"""
        return _COPASI.CBiologicalDescription_getTriplet(self)


    def getKey(self):
        """getKey(CBiologicalDescription self) -> std::string const &"""
        return _COPASI.CBiologicalDescription_getKey(self)


    def getPredicate(self):
        """getPredicate(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getPredicate(self)


    def getResource(self):
        """getResource(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getResource(self)


    def getId(self):
        """getId(CBiologicalDescription self) -> std::string const &"""
        return _COPASI.CBiologicalDescription_getId(self)


    def getURI(self):
        """getURI(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getURI(self)


    def setPredicate(self, predicate):
        """setPredicate(CBiologicalDescription self, std::string const & predicate)"""
        return _COPASI.CBiologicalDescription_setPredicate(self, predicate)


    def setResource(self, resource):
        """setResource(CBiologicalDescription self, std::string const & resource)"""
        return _COPASI.CBiologicalDescription_setResource(self, resource)


    def setId(self, id):
        """setId(CBiologicalDescription self, std::string const & id)"""
        return _COPASI.CBiologicalDescription_setId(self, id)


    def clearInvalidEntries(self):
        """clearInvalidEntries(CBiologicalDescription self)"""
        return _COPASI.CBiologicalDescription_clearInvalidEntries(self)

CBiologicalDescription_swigregister = _COPASI.CBiologicalDescription_swigregister
CBiologicalDescription_swigregister(CBiologicalDescription)

def CBiologicalDescription_fromData(data, pParent):
    """CBiologicalDescription_fromData(CData data, CUndoObjectInterface pParent) -> CBiologicalDescription"""
    return _COPASI.CBiologicalDescription_fromData(data, pParent)

class CMIRIAMResourceObject(_object):
    """Proxy of C++ CMIRIAMResourceObject class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMIRIAMResourceObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMIRIAMResourceObject, name)
    __repr__ = _swig_repr

    def getResource(self, URI):
        """getResource(CMIRIAMResourceObject self, std::string const & URI) -> size_t"""
        return _COPASI.CMIRIAMResourceObject_getResource(self, URI)


    def getResourceList():
        """getResourceList() -> CMIRIAMResources"""
        return _COPASI.CMIRIAMResourceObject_getResourceList()

    getResourceList = staticmethod(getResourceList)

    def __init__(self, *args):
        """
        __init__(CMIRIAMResourceObject self, std::string const & displayName, std::string const & id) -> CMIRIAMResourceObject
        __init__(CMIRIAMResourceObject self, CMIRIAMResourceObject src) -> CMIRIAMResourceObject
        """
        this = _COPASI.new_CMIRIAMResourceObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setId(self, id):
        """setId(CMIRIAMResourceObject self, std::string const & id) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setId(self, id)


    def getId(self):
        """getId(CMIRIAMResourceObject self) -> std::string const &"""
        return _COPASI.CMIRIAMResourceObject_getId(self)


    def setURI(self, URI):
        """setURI(CMIRIAMResourceObject self, std::string const & URI) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setURI(self, URI)


    def getURI(self):
        """getURI(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getURI(self)


    def getIdentifiersOrgURL(self):
        """getIdentifiersOrgURL(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getIdentifiersOrgURL(self)


    def setDisplayName(self, displayName):
        """setDisplayName(CMIRIAMResourceObject self, std::string const & displayName) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setDisplayName(self, displayName)


    def getDisplayName(self):
        """getDisplayName(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getDisplayName(self)


    def isValid(self, *args):
        """
        isValid(CMIRIAMResourceObject self) -> bool
        isValid(CMIRIAMResourceObject self, std::string const & URI) -> bool
        """
        return _COPASI.CMIRIAMResourceObject_isValid(self, *args)


    def setMIRIAMResources(pResources):
        """setMIRIAMResources(CMIRIAMResources pResources)"""
        return _COPASI.CMIRIAMResourceObject_setMIRIAMResources(pResources)

    setMIRIAMResources = staticmethod(setMIRIAMResources)
    __swig_destroy__ = _COPASI.delete_CMIRIAMResourceObject
    __del__ = lambda self: None
CMIRIAMResourceObject_swigregister = _COPASI.CMIRIAMResourceObject_swigregister
CMIRIAMResourceObject_swigregister(CMIRIAMResourceObject)

def CMIRIAMResourceObject_getResourceList():
    """CMIRIAMResourceObject_getResourceList() -> CMIRIAMResources"""
    return _COPASI.CMIRIAMResourceObject_getResourceList()

def CMIRIAMResourceObject_setMIRIAMResources(pResources):
    """CMIRIAMResourceObject_setMIRIAMResources(CMIRIAMResources pResources)"""
    return _COPASI.CMIRIAMResourceObject_setMIRIAMResources(pResources)

class CReference(CDataContainer):
    """Proxy of C++ CReference class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReference, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReference, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CReference"""
        return _COPASI.CReference_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CReference self, std::string const & objectName, CDataContainer pParent) -> CReference
        __init__(CReference self, std::string const & objectName) -> CReference
        __init__(CReference self, CRDFTriplet triplet, std::string const & objectName, CDataContainer pParent) -> CReference
        __init__(CReference self, CRDFTriplet triplet, std::string const & objectName) -> CReference
        __init__(CReference self, CRDFTriplet triplet) -> CReference
        __init__(CReference self, CReference src, CDataContainer pParent) -> CReference
        """
        this = _COPASI.new_CReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReference
    __del__ = lambda self: None

    def getTriplet(self):
        """getTriplet(CReference self) -> CRDFTriplet"""
        return _COPASI.CReference_getTriplet(self)


    def getMIRIAMResourceObject(self):
        """getMIRIAMResourceObject(CReference self) -> CMIRIAMResourceObject"""
        return _COPASI.CReference_getMIRIAMResourceObject(self)


    def getKey(self):
        """getKey(CReference self) -> std::string const &"""
        return _COPASI.CReference_getKey(self)


    def getResource(self):
        """getResource(CReference self) -> std::string"""
        return _COPASI.CReference_getResource(self)


    def getId(self):
        """getId(CReference self) -> std::string const &"""
        return _COPASI.CReference_getId(self)


    def getDescription(self):
        """getDescription(CReference self) -> std::string const &"""
        return _COPASI.CReference_getDescription(self)


    def getURI(self):
        """getURI(CReference self) -> std::string"""
        return _COPASI.CReference_getURI(self)


    def setResource(self, resource):
        """setResource(CReference self, std::string const & resource)"""
        return _COPASI.CReference_setResource(self, resource)


    def setId(self, id):
        """setId(CReference self, std::string const & id)"""
        return _COPASI.CReference_setId(self, id)


    def setDescription(self, description):
        """setDescription(CReference self, std::string const & description)"""
        return _COPASI.CReference_setDescription(self, description)


    def clearInvalidEntries(self):
        """clearInvalidEntries(CReference self)"""
        return _COPASI.CReference_clearInvalidEntries(self)

CReference_swigregister = _COPASI.CReference_swigregister
CReference_swigregister(CReference)

def CReference_fromData(data, pParent):
    """CReference_fromData(CData data, CUndoObjectInterface pParent) -> CReference"""
    return _COPASI.CReference_fromData(data, pParent)

class CCreator(CDataContainer):
    """Proxy of C++ CCreator class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCreator, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCreator, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CCreator"""
        return _COPASI.CCreator_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CCreator self, std::string const & objectName, CDataContainer pParent) -> CCreator
        __init__(CCreator self, std::string const & objectName) -> CCreator
        __init__(CCreator self, CRDFTriplet triplet, std::string const & objectName, CDataContainer pParent) -> CCreator
        __init__(CCreator self, CRDFTriplet triplet, std::string const & objectName) -> CCreator
        __init__(CCreator self, CRDFTriplet triplet) -> CCreator
        __init__(CCreator self, CCreator src, CDataContainer pParent) -> CCreator
        """
        this = _COPASI.new_CCreator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCreator
    __del__ = lambda self: None

    def getTriplet(self):
        """getTriplet(CCreator self) -> CRDFTriplet"""
        return _COPASI.CCreator_getTriplet(self)


    def getKey(self):
        """getKey(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getKey(self)


    def getFamilyName(self):
        """getFamilyName(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getFamilyName(self)


    def getGivenName(self):
        """getGivenName(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getGivenName(self)


    def getEmail(self):
        """getEmail(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getEmail(self)


    def getORG(self):
        """getORG(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getORG(self)


    def setFamilyName(self, familyName):
        """setFamilyName(CCreator self, std::string const & familyName)"""
        return _COPASI.CCreator_setFamilyName(self, familyName)


    def setGivenName(self, givenName):
        """setGivenName(CCreator self, std::string const & givenName)"""
        return _COPASI.CCreator_setGivenName(self, givenName)


    def setEmail(self, Email):
        """setEmail(CCreator self, std::string const & Email)"""
        return _COPASI.CCreator_setEmail(self, Email)


    def setORG(self, Orgname):
        """setORG(CCreator self, std::string const & Orgname)"""
        return _COPASI.CCreator_setORG(self, Orgname)

CCreator_swigregister = _COPASI.CCreator_swigregister
CCreator_swigregister(CCreator)

def CCreator_fromData(data, pParent):
    """CCreator_fromData(CData data, CUndoObjectInterface pParent) -> CCreator"""
    return _COPASI.CCreator_fromData(data, pParent)

class CModification(CDataContainer):
    """Proxy of C++ CModification class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModification, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CModification, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CModification"""
        return _COPASI.CModification_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CModification self, std::string const & objectName, CDataContainer pParent) -> CModification
        __init__(CModification self, std::string const & objectName) -> CModification
        __init__(CModification self, CRDFTriplet triplet, std::string const & objectName, CDataContainer pParent) -> CModification
        __init__(CModification self, CRDFTriplet triplet, std::string const & objectName) -> CModification
        __init__(CModification self, CRDFTriplet triplet) -> CModification
        __init__(CModification self, CModification src, CDataContainer pParent) -> CModification
        """
        this = _COPASI.new_CModification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CModification
    __del__ = lambda self: None

    def getTriplet(self):
        """getTriplet(CModification self) -> CRDFTriplet"""
        return _COPASI.CModification_getTriplet(self)


    def getKey(self):
        """getKey(CModification self) -> std::string const &"""
        return _COPASI.CModification_getKey(self)


    def setDate(self, date):
        """setDate(CModification self, std::string const & date)"""
        return _COPASI.CModification_setDate(self, date)


    def getDate(self):
        """getDate(CModification self) -> std::string const &"""
        return _COPASI.CModification_getDate(self)

CModification_swigregister = _COPASI.CModification_swigregister
CModification_swigregister(CModification)

def CModification_fromData(data, pParent):
    """CModification_fromData(CData data, CUndoObjectInterface pParent) -> CModification"""
    return _COPASI.CModification_fromData(data, pParent)

class CMIRIAMResource(CCopasiParameterGroup):
    """Proxy of C++ CMIRIAMResource class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMIRIAMResource, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMIRIAMResource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMIRIAMResource self, std::string const & name, CDataContainer pParent) -> CMIRIAMResource
        __init__(CMIRIAMResource self, std::string const & name) -> CMIRIAMResource
        __init__(CMIRIAMResource self) -> CMIRIAMResource
        __init__(CMIRIAMResource self, CMIRIAMResource src, CDataContainer pParent) -> CMIRIAMResource
        __init__(CMIRIAMResource self, CCopasiParameterGroup group, CDataContainer pParent) -> CMIRIAMResource
        """
        this = _COPASI.new_CMIRIAMResource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMIRIAMResource
    __del__ = lambda self: None

    def getMIRIAMMIRIAMResource(self):
        """getMIRIAMMIRIAMResource(CMIRIAMResource self) -> CMIRIAMResource"""
        return _COPASI.CMIRIAMResource_getMIRIAMMIRIAMResource(self)


    def setMIRIAMDisplayName(self, displayName):
        """setMIRIAMDisplayName(CMIRIAMResource self, std::string const & displayName)"""
        return _COPASI.CMIRIAMResource_setMIRIAMDisplayName(self, displayName)


    def getMIRIAMDisplayName(self):
        """getMIRIAMDisplayName(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMDisplayName(self)


    def setMIRIAMURI(self, URI):
        """setMIRIAMURI(CMIRIAMResource self, std::string const & URI)"""
        return _COPASI.CMIRIAMResource_setMIRIAMURI(self, URI)


    def getMIRIAMURI(self):
        """getMIRIAMURI(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMURI(self)


    def getIdentifiersOrgURL(self):
        """getIdentifiersOrgURL(CMIRIAMResource self) -> std::string"""
        return _COPASI.CMIRIAMResource_getIdentifiersOrgURL(self)


    def setMIRIAMPattern(self, pattern):
        """setMIRIAMPattern(CMIRIAMResource self, std::string const & pattern)"""
        return _COPASI.CMIRIAMResource_setMIRIAMPattern(self, pattern)


    def getMIRIAMPattern(self):
        """getMIRIAMPattern(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMPattern(self)


    def setMIRIAMCitation(self, isCitation):
        """setMIRIAMCitation(CMIRIAMResource self, bool const & isCitation)"""
        return _COPASI.CMIRIAMResource_setMIRIAMCitation(self, isCitation)


    def getMIRIAMCitation(self):
        """getMIRIAMCitation(CMIRIAMResource self) -> bool const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMCitation(self)


    def addDeprecatedURL(self, URL):
        """addDeprecatedURL(CMIRIAMResource self, std::string const & URL)"""
        return _COPASI.CMIRIAMResource_addDeprecatedURL(self, URL)


    def getMIRIAMDeprecated(self):
        """getMIRIAMDeprecated(CMIRIAMResource self) -> CCopasiParameterGroup"""
        return _COPASI.CMIRIAMResource_getMIRIAMDeprecated(self)

CMIRIAMResource_swigregister = _COPASI.CMIRIAMResource_swigregister
CMIRIAMResource_swigregister(CMIRIAMResource)

class CMIRIAMResources(CCopasiParameterGroup):
    """Proxy of C++ CMIRIAMResources class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMIRIAMResources, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiParameterGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMIRIAMResources, name)
    __repr__ = _swig_repr

    def isCitation(*args):
        """
        isCitation(void * pData, void * pCallee)
        isCitation(std::string const & uri) -> bool
        """
        return _COPASI.CMIRIAMResources_isCitation(*args)

    isCitation = staticmethod(isCitation)

    def __init__(self, *args):
        """
        __init__(CMIRIAMResources self, std::string const & name, CDataContainer pParent) -> CMIRIAMResources
        __init__(CMIRIAMResources self, std::string const & name) -> CMIRIAMResources
        __init__(CMIRIAMResources self) -> CMIRIAMResources
        __init__(CMIRIAMResources self, CMIRIAMResources src, CDataContainer pParent) -> CMIRIAMResources
        __init__(CMIRIAMResources self, CCopasiParameterGroup group, CDataContainer pParent) -> CMIRIAMResources
        """
        this = _COPASI.new_CMIRIAMResources(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMIRIAMResources
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CMIRIAMResources self) -> bool"""
        return _COPASI.CMIRIAMResources_elevateChildren(self)


    def addMIRIAMResource(self, pMIRIAMResource):
        """addMIRIAMResource(CMIRIAMResources self, CMIRIAMResource pMIRIAMResource)"""
        return _COPASI.CMIRIAMResources_addMIRIAMResource(self, pMIRIAMResource)


    def getMIRIAMResources(self):
        """getMIRIAMResources(CMIRIAMResources self) -> CMIRIAMResources"""
        return _COPASI.CMIRIAMResources_getMIRIAMResources(self)


    def getMIRIAMLastUpdateDate(self):
        """getMIRIAMLastUpdateDate(CMIRIAMResources self) -> unsigned int const &"""
        return _COPASI.CMIRIAMResources_getMIRIAMLastUpdateDate(self)


    def getMIRIAMUpdateFrequency(self):
        """getMIRIAMUpdateFrequency(CMIRIAMResources self) -> unsigned int const &"""
        return _COPASI.CMIRIAMResources_getMIRIAMUpdateFrequency(self)


    def setMIRIAMUpdateFrequencyInDays(self, days):
        """setMIRIAMUpdateFrequencyInDays(CMIRIAMResources self, size_t const & days)"""
        return _COPASI.CMIRIAMResources_setMIRIAMUpdateFrequencyInDays(self, days)


    def updateMIRIAMResourcesFromFile(self, pProcessReport, filename):
        """updateMIRIAMResourcesFromFile(CMIRIAMResources self, CProcessReport pProcessReport, std::string const & filename) -> bool"""
        return _COPASI.CMIRIAMResources_updateMIRIAMResourcesFromFile(self, pProcessReport, filename)


    def getMIRIAMResource(self, index):
        """getMIRIAMResource(CMIRIAMResources self, size_t const index) -> CMIRIAMResource"""
        return _COPASI.CMIRIAMResources_getMIRIAMResource(self, index)


    def getMIRIAMResourceIndex(self, URI):
        """getMIRIAMResourceIndex(CMIRIAMResources self, std::string const & URI) -> size_t"""
        return _COPASI.CMIRIAMResources_getMIRIAMResourceIndex(self, URI)


    def getResourceIndexFromDisplayName(self, displayName):
        """getResourceIndexFromDisplayName(CMIRIAMResources self, std::string const & displayName) -> size_t"""
        return _COPASI.CMIRIAMResources_getResourceIndexFromDisplayName(self, displayName)


    def getResourceList(self):
        """getResourceList(CMIRIAMResources self) -> CCopasiParameterGroup"""
        return _COPASI.CMIRIAMResources_getResourceList(self)


    def initializeParameter(self):
        """initializeParameter(CMIRIAMResources self)"""
        return _COPASI.CMIRIAMResources_initializeParameter(self)

CMIRIAMResources_swigregister = _COPASI.CMIRIAMResources_swigregister
CMIRIAMResources_swigregister(CMIRIAMResources)

def CMIRIAMResources_isCitation(*args):
    """
    isCitation(void * pData, void * pCallee)
    CMIRIAMResources_isCitation(std::string const & uri) -> bool
    """
    return _COPASI.CMIRIAMResources_isCitation(*args)

class CRDFGraph(_object):
    """Proxy of C++ CRDFGraph class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRDFGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRDFGraph, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CRDFGraph self) -> CRDFGraph"""
        this = _COPASI.new_CRDFGraph()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CRDFGraph
    __del__ = lambda self: None

    def guessGraphRoot(self, *args):
        """
        guessGraphRoot(CRDFGraph self, std::string const & about) -> bool
        guessGraphRoot(CRDFGraph self) -> bool
        """
        return _COPASI.CRDFGraph_guessGraphRoot(self, *args)


    def addNameSpace(self, prefix, uri):
        """addNameSpace(CRDFGraph self, std::string const & prefix, std::string const & uri) -> bool"""
        return _COPASI.CRDFGraph_addNameSpace(self, prefix, uri)


    def generatedNodeId(self, *args):
        """
        generatedNodeId(CRDFGraph self, std::string const & existingId) -> std::string
        generatedNodeId(CRDFGraph self) -> std::string
        """
        return _COPASI.CRDFGraph_generatedNodeId(self, *args)


    def clean(self):
        """clean(CRDFGraph self)"""
        return _COPASI.CRDFGraph_clean(self)


    def updateNamespaces(self):
        """updateNamespaces(CRDFGraph self)"""
        return _COPASI.CRDFGraph_updateNamespaces(self)

CRDFGraph_swigregister = _COPASI.CRDFGraph_swigregister
CRDFGraph_swigregister(CRDFGraph)

class CRDFTriplet(_object):
    """Proxy of C++ CRDFTriplet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRDFTriplet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRDFTriplet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRDFTriplet
    __del__ = lambda self: None

    def __eq__(self, rhs):
        """__eq__(CRDFTriplet self, CRDFTriplet rhs) -> bool"""
        return _COPASI.CRDFTriplet___eq__(self, rhs)

CRDFTriplet_swigregister = _COPASI.CRDFTriplet_swigregister
CRDFTriplet_swigregister(CRDFTriplet)

class CMIRIAMInfo(CDataContainer):
    """Proxy of C++ CMIRIAMInfo class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMIRIAMInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMIRIAMInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CMIRIAMInfo self) -> CMIRIAMInfo"""
        this = _COPASI.new_CMIRIAMInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMIRIAMInfo
    __del__ = lambda self: None

    def load(self, pObject):
        """load(CMIRIAMInfo self, CDataContainer pObject)"""
        return _COPASI.CMIRIAMInfo_load(self, pObject)


    def save(self):
        """save(CMIRIAMInfo self) -> bool"""
        return _COPASI.CMIRIAMInfo_save(self)


    def getRDFGraph(self):
        """getRDFGraph(CMIRIAMInfo self) -> CRDFGraph"""
        return _COPASI.CMIRIAMInfo_getRDFGraph(self)


    def getCreators(self):
        """getCreators(CMIRIAMInfo self) -> CreatorVector"""
        return _COPASI.CMIRIAMInfo_getCreators(self)


    def createCreator(self, objectName):
        """createCreator(CMIRIAMInfo self, std::string const & objectName) -> CCreator"""
        return _COPASI.CMIRIAMInfo_createCreator(self, objectName)


    def removeCreator(self, pCreator):
        """removeCreator(CMIRIAMInfo self, CCreator pCreator) -> bool"""
        return _COPASI.CMIRIAMInfo_removeCreator(self, pCreator)


    def loadCreators(self):
        """loadCreators(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadCreators(self)


    def getReferences(self):
        """getReferences(CMIRIAMInfo self) -> ReferenceVector"""
        return _COPASI.CMIRIAMInfo_getReferences(self)


    def createReference(self, objectName):
        """createReference(CMIRIAMInfo self, std::string const & objectName) -> CReference"""
        return _COPASI.CMIRIAMInfo_createReference(self, objectName)


    def removeReference(self, pReference):
        """removeReference(CMIRIAMInfo self, CReference pReference) -> bool"""
        return _COPASI.CMIRIAMInfo_removeReference(self, pReference)


    def loadReferences(self):
        """loadReferences(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadReferences(self)


    def getCreatedDT(self):
        """getCreatedDT(CMIRIAMInfo self) -> std::string const"""
        return _COPASI.CMIRIAMInfo_getCreatedDT(self)


    def setCreatedDT(self, dt):
        """setCreatedDT(CMIRIAMInfo self, std::string const & dt)"""
        return _COPASI.CMIRIAMInfo_setCreatedDT(self, dt)


    def getModifications(self):
        """getModifications(CMIRIAMInfo self) -> ModificationVector"""
        return _COPASI.CMIRIAMInfo_getModifications(self)


    def createModification(self, objectName):
        """createModification(CMIRIAMInfo self, std::string const & objectName) -> CModification"""
        return _COPASI.CMIRIAMInfo_createModification(self, objectName)


    def removeModification(self, pModified):
        """removeModification(CMIRIAMInfo self, CModification pModified) -> bool"""
        return _COPASI.CMIRIAMInfo_removeModification(self, pModified)


    def loadModifications(self):
        """loadModifications(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadModifications(self)


    def getBiologicalDescriptions(self):
        """getBiologicalDescriptions(CMIRIAMInfo self) -> BiologicalDescriptionVector"""
        return _COPASI.CMIRIAMInfo_getBiologicalDescriptions(self)


    def createBiologicalDescription(self):
        """createBiologicalDescription(CMIRIAMInfo self) -> CBiologicalDescription"""
        return _COPASI.CMIRIAMInfo_createBiologicalDescription(self)


    def removeBiologicalDescription(self, pBiologicalDescription):
        """removeBiologicalDescription(CMIRIAMInfo self, CBiologicalDescription pBiologicalDescription) -> bool"""
        return _COPASI.CMIRIAMInfo_removeBiologicalDescription(self, pBiologicalDescription)


    def loadBiologicalDescriptions(self):
        """loadBiologicalDescriptions(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadBiologicalDescriptions(self)


    def getKey(self):
        """getKey(CMIRIAMInfo self) -> std::string const &"""
        return _COPASI.CMIRIAMInfo_getKey(self)

CMIRIAMInfo_swigregister = _COPASI.CMIRIAMInfo_swigregister
CMIRIAMInfo_swigregister(CMIRIAMInfo)

class CLColorDefinition(CLBase, CDataObject):
    """Proxy of C++ CLColorDefinition class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLColorDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLColorDefinition, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLColorDefinition"""
        return _COPASI.CLColorDefinition_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLColorDefinition self, CDataContainer pParent=None) -> CLColorDefinition
        __init__(CLColorDefinition self) -> CLColorDefinition
        __init__(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b, unsigned char a=255, CDataContainer pParent=None) -> CLColorDefinition
        __init__(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b, unsigned char a=255) -> CLColorDefinition
        __init__(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b) -> CLColorDefinition
        __init__(CLColorDefinition self, CLColorDefinition source, CDataContainer pParent=None) -> CLColorDefinition
        __init__(CLColorDefinition self, CLColorDefinition source) -> CLColorDefinition
        """
        this = _COPASI.new_CLColorDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLColorDefinition
    __del__ = lambda self: None

    def getRed(self):
        """getRed(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getRed(self)


    def getGreen(self):
        """getGreen(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getGreen(self)


    def getBlue(self):
        """getBlue(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getBlue(self)


    def getAlpha(self):
        """getAlpha(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getAlpha(self)


    def setRed(self, c):
        """setRed(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setRed(self, c)


    def setGreen(self, c):
        """setGreen(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setGreen(self, c)


    def setBlue(self, c):
        """setBlue(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setBlue(self, c)


    def setAlpha(self, c):
        """setAlpha(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setAlpha(self, c)


    def setRGBA(self, r, g, b, a=255):
        """
        setRGBA(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b, unsigned char a=255)
        setRGBA(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b)
        """
        return _COPASI.CLColorDefinition_setRGBA(self, r, g, b, a)


    def setColorValue(self, valueString):
        """setColorValue(CLColorDefinition self, std::string const & valueString) -> bool"""
        return _COPASI.CLColorDefinition_setColorValue(self, valueString)


    def createValueString(self):
        """createValueString(CLColorDefinition self) -> std::string"""
        return _COPASI.CLColorDefinition_createValueString(self)


    def getKey(self):
        """getKey(CLColorDefinition self) -> std::string const &"""
        return _COPASI.CLColorDefinition_getKey(self)


    def getId(self):
        """getId(CLColorDefinition self) -> std::string const &"""
        return _COPASI.CLColorDefinition_getId(self)


    def setId(self, id):
        """setId(CLColorDefinition self, std::string const & id)"""
        return _COPASI.CLColorDefinition_setId(self, id)

CLColorDefinition_swigregister = _COPASI.CLColorDefinition_swigregister
CLColorDefinition_swigregister(CLColorDefinition)

def CLColorDefinition_fromData(data, pParent):
    """CLColorDefinition_fromData(CData data, CUndoObjectInterface pParent) -> CLColorDefinition"""
    return _COPASI.CLColorDefinition_fromData(data, pParent)

class CLGradientStop(CLBase, CDataObject):
    """Proxy of C++ CLGradientStop class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGradientStop, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGradientStop, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGradientStop"""
        return _COPASI.CLGradientStop_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGradientStop self, CDataContainer pParent=None) -> CLGradientStop
        __init__(CLGradientStop self) -> CLGradientStop
        __init__(CLGradientStop self, CLGradientStop source, CDataContainer pParent=None) -> CLGradientStop
        __init__(CLGradientStop self, CLGradientStop source) -> CLGradientStop
        """
        this = _COPASI.new_CLGradientStop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLGradientStop
    __del__ = lambda self: None

    def getOffset(self):
        """getOffset(CLGradientStop self) -> CLRelAbsVector"""
        return _COPASI.CLGradientStop_getOffset(self)


    def setOffset(self, *args):
        """
        setOffset(CLGradientStop self, double x, double y)
        setOffset(CLGradientStop self, std::string const & arg2)
        setOffset(CLGradientStop self, CLRelAbsVector co)
        """
        return _COPASI.CLGradientStop_setOffset(self, *args)


    def getStopColor(self):
        """getStopColor(CLGradientStop self) -> std::string const &"""
        return _COPASI.CLGradientStop_getStopColor(self)


    def setStopColor(self, key):
        """setStopColor(CLGradientStop self, std::string const & key)"""
        return _COPASI.CLGradientStop_setStopColor(self, key)


    def getKey(self):
        """getKey(CLGradientStop self) -> std::string const &"""
        return _COPASI.CLGradientStop_getKey(self)

CLGradientStop_swigregister = _COPASI.CLGradientStop_swigregister
CLGradientStop_swigregister(CLGradientStop)

def CLGradientStop_fromData(data, pParent):
    """CLGradientStop_fromData(CData data, CUndoObjectInterface pParent) -> CLGradientStop"""
    return _COPASI.CLGradientStop_fromData(data, pParent)

class CLGradientBase(CLBase, CDataContainer):
    """Proxy of C++ CLGradientBase class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGradientBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGradientBase, name)
    __repr__ = _swig_repr
    PAD = _COPASI.CLGradientBase_PAD
    REFLECT = _COPASI.CLGradientBase_REFLECT
    REPEAT = _COPASI.CLGradientBase_REPEAT

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGradientBase"""
        return _COPASI.CLGradientBase_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGradientBase self, std::string const & name, CDataContainer pParent=None) -> CLGradientBase
        __init__(CLGradientBase self, std::string const & name) -> CLGradientBase
        __init__(CLGradientBase self, CLGradientBase source, CDataContainer pParent=None) -> CLGradientBase
        __init__(CLGradientBase self, CLGradientBase source) -> CLGradientBase
        """
        this = _COPASI.new_CLGradientBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLGradientBase
    __del__ = lambda self: None

    def getSpreadMethod(self):
        """getSpreadMethod(CLGradientBase self) -> CLGradientBase::SPREADMETHOD"""
        return _COPASI.CLGradientBase_getSpreadMethod(self)


    def setSpreadMethod(self, method):
        """setSpreadMethod(CLGradientBase self, CLGradientBase::SPREADMETHOD method)"""
        return _COPASI.CLGradientBase_setSpreadMethod(self, method)


    def getNumGradientStops(self):
        """getNumGradientStops(CLGradientBase self) -> size_t"""
        return _COPASI.CLGradientBase_getNumGradientStops(self)


    def getListOfGradientStops(self):
        """getListOfGradientStops(CLGradientBase self) -> GradientStopVector"""
        return _COPASI.CLGradientBase_getListOfGradientStops(self)


    def getGradientStop(self, i):
        """getGradientStop(CLGradientBase self, size_t i) -> CLGradientStop"""
        return _COPASI.CLGradientBase_getGradientStop(self, i)


    def createGradientStop(self):
        """createGradientStop(CLGradientBase self) -> CLGradientStop"""
        return _COPASI.CLGradientBase_createGradientStop(self)


    def addGradientStop(self, pStop):
        """addGradientStop(CLGradientBase self, CLGradientStop pStop)"""
        return _COPASI.CLGradientBase_addGradientStop(self, pStop)


    def getKey(self):
        """getKey(CLGradientBase self) -> std::string const &"""
        return _COPASI.CLGradientBase_getKey(self)


    def getId(self):
        """getId(CLGradientBase self) -> std::string const &"""
        return _COPASI.CLGradientBase_getId(self)


    def setId(self, id):
        """setId(CLGradientBase self, std::string const & id)"""
        return _COPASI.CLGradientBase_setId(self, id)

CLGradientBase_swigregister = _COPASI.CLGradientBase_swigregister
CLGradientBase_swigregister(CLGradientBase)

def CLGradientBase_fromData(data, pParent):
    """CLGradientBase_fromData(CData data, CUndoObjectInterface pParent) -> CLGradientBase"""
    return _COPASI.CLGradientBase_fromData(data, pParent)

class CLLinearGradient(CLGradientBase):
    """Proxy of C++ CLLinearGradient class."""

    __swig_setmethods__ = {}
    for _s in [CLGradientBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLinearGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGradientBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLinearGradient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLLinearGradient self, CDataContainer pParent=None) -> CLLinearGradient
        __init__(CLLinearGradient self) -> CLLinearGradient
        __init__(CLLinearGradient self, CLLinearGradient source, CDataContainer pParent=None) -> CLLinearGradient
        __init__(CLLinearGradient self, CLLinearGradient source) -> CLLinearGradient
        """
        this = _COPASI.new_CLLinearGradient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCoordinates(self, *args):
        """
        setCoordinates(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1, CLRelAbsVector x2, CLRelAbsVector y2, CLRelAbsVector z2)
        setCoordinates(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector x2, CLRelAbsVector y2)
        """
        return _COPASI.CLLinearGradient_setCoordinates(self, *args)


    def setPoint1(self, *args):
        """
        setPoint1(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1)
        setPoint1(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1)
        """
        return _COPASI.CLLinearGradient_setPoint1(self, *args)


    def setPoint2(self, *args):
        """
        setPoint2(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1)
        setPoint2(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1)
        """
        return _COPASI.CLLinearGradient_setPoint2(self, *args)


    def getXPoint1(self):
        """getXPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getXPoint1(self)


    def getYPoint1(self):
        """getYPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getYPoint1(self)


    def getZPoint1(self):
        """getZPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getZPoint1(self)


    def getXPoint2(self):
        """getXPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getXPoint2(self)


    def getYPoint2(self):
        """getYPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getYPoint2(self)


    def getZPoint2(self):
        """getZPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getZPoint2(self)

    __swig_destroy__ = _COPASI.delete_CLLinearGradient
    __del__ = lambda self: None
CLLinearGradient_swigregister = _COPASI.CLLinearGradient_swigregister
CLLinearGradient_swigregister(CLLinearGradient)

class CLRadialGradient(CLGradientBase):
    """Proxy of C++ CLRadialGradient class."""

    __swig_setmethods__ = {}
    for _s in [CLGradientBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRadialGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGradientBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRadialGradient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRadialGradient self, CDataContainer pParent=None) -> CLRadialGradient
        __init__(CLRadialGradient self) -> CLRadialGradient
        __init__(CLRadialGradient self, CLRadialGradient source, CDataContainer pParent=None) -> CLRadialGradient
        __init__(CLRadialGradient self, CLRadialGradient source) -> CLRadialGradient
        """
        this = _COPASI.new_CLRadialGradient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCoordinates(self, *args):
        """
        setCoordinates(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector r, CLRelAbsVector fx, CLRelAbsVector fy, CLRelAbsVector fz)
        setCoordinates(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector r, CLRelAbsVector fx, CLRelAbsVector fy)
        """
        return _COPASI.CLRadialGradient_setCoordinates(self, *args)


    def setCenter(self, *args):
        """
        setCenter(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setCenter(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLRadialGradient_setCenter(self, *args)


    def setFocalPoint(self, *args):
        """
        setFocalPoint(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setFocalPoint(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLRadialGradient_setFocalPoint(self, *args)


    def setRadius(self, r):
        """setRadius(CLRadialGradient self, CLRelAbsVector r)"""
        return _COPASI.CLRadialGradient_setRadius(self, r)


    def getCenterX(self):
        """getCenterX(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterX(self)


    def getCenterY(self):
        """getCenterY(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterY(self)


    def getCenterZ(self):
        """getCenterZ(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterZ(self)


    def getFocalPointX(self):
        """getFocalPointX(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointX(self)


    def getFocalPointY(self):
        """getFocalPointY(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointY(self)


    def getFocalPointZ(self):
        """getFocalPointZ(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointZ(self)


    def getRadius(self):
        """getRadius(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getRadius(self)

    __swig_destroy__ = _COPASI.delete_CLRadialGradient
    __del__ = lambda self: None
CLRadialGradient_swigregister = _COPASI.CLRadialGradient_swigregister
CLRadialGradient_swigregister(CLRadialGradient)

class CLStyle(CLBase, CDataContainer):
    """Proxy of C++ CLStyle class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLStyle self, std::string const & name, CDataContainer pParent=None) -> CLStyle
        __init__(CLStyle self, std::string const & name) -> CLStyle
        __init__(CLStyle self, CLStyle source, CDataContainer pParent=None) -> CLStyle
        __init__(CLStyle self, CLStyle source) -> CLStyle
        """
        this = _COPASI.new_CLStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLStyle
    __del__ = lambda self: None

    def setGroup(self, pGroup):
        """setGroup(CLStyle self, CLGroup pGroup)"""
        return _COPASI.CLStyle_setGroup(self, pGroup)


    def getGroup(self):
        """getGroup(CLStyle self) -> CLGroup"""
        return _COPASI.CLStyle_getGroup(self)


    def getNumRoles(self):
        """getNumRoles(CLStyle self) -> size_t"""
        return _COPASI.CLStyle_getNumRoles(self)


    def addRole(self, role):
        """addRole(CLStyle self, std::string const & role)"""
        return _COPASI.CLStyle_addRole(self, role)


    def isInRoleList(self, role):
        """isInRoleList(CLStyle self, std::string const & role) -> bool"""
        return _COPASI.CLStyle_isInRoleList(self, role)


    def removeRole(self, role):
        """removeRole(CLStyle self, std::string const & role)"""
        return _COPASI.CLStyle_removeRole(self, role)


    def getRoleListString(self):
        """getRoleListString(CLStyle self) -> std::string"""
        return _COPASI.CLStyle_getRoleListString(self)


    def getTypeListString(self):
        """getTypeListString(CLStyle self) -> std::string"""
        return _COPASI.CLStyle_getTypeListString(self)


    def getNumTypes(self):
        """getNumTypes(CLStyle self) -> size_t"""
        return _COPASI.CLStyle_getNumTypes(self)


    def addType(self, type):
        """addType(CLStyle self, std::string const & type)"""
        return _COPASI.CLStyle_addType(self, type)


    def isInTypeList(self, type):
        """isInTypeList(CLStyle self, std::string const & type) -> bool"""
        return _COPASI.CLStyle_isInTypeList(self, type)


    def removeType(self, type):
        """removeType(CLStyle self, std::string const & type)"""
        return _COPASI.CLStyle_removeType(self, type)


    def getKey(self):
        """getKey(CLStyle self) -> std::string const &"""
        return _COPASI.CLStyle_getKey(self)


    def appliesTo(self, pObject):
        """appliesTo(CLStyle self, CLGraphicalObject pObject) -> int"""
        return _COPASI.CLStyle_appliesTo(self, pObject)

CLStyle_swigregister = _COPASI.CLStyle_swigregister
CLStyle_swigregister(CLStyle)

class CLGlobalStyle(CLStyle):
    """Proxy of C++ CLGlobalStyle class."""

    __swig_setmethods__ = {}
    for _s in [CLStyle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGlobalStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [CLStyle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGlobalStyle, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalStyle"""
        return _COPASI.CLGlobalStyle_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGlobalStyle self, CDataContainer pParent=None) -> CLGlobalStyle
        __init__(CLGlobalStyle self) -> CLGlobalStyle
        __init__(CLGlobalStyle self, CLGlobalStyle source, CDataContainer pParent=None) -> CLGlobalStyle
        __init__(CLGlobalStyle self, CLGlobalStyle source) -> CLGlobalStyle
        """
        this = _COPASI.new_CLGlobalStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLGlobalStyle
    __del__ = lambda self: None
CLGlobalStyle_swigregister = _COPASI.CLGlobalStyle_swigregister
CLGlobalStyle_swigregister(CLGlobalStyle)

def CLGlobalStyle_fromData(data, pParent):
    """CLGlobalStyle_fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalStyle"""
    return _COPASI.CLGlobalStyle_fromData(data, pParent)

class CLLocalStyle(CLStyle):
    """Proxy of C++ CLLocalStyle class."""

    __swig_setmethods__ = {}
    for _s in [CLStyle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLocalStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [CLStyle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLocalStyle, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLLocalStyle"""
        return _COPASI.CLLocalStyle_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLLocalStyle self, CDataContainer pParent=None) -> CLLocalStyle
        __init__(CLLocalStyle self) -> CLLocalStyle
        __init__(CLLocalStyle self, CLLocalStyle source, CDataContainer pParent=None) -> CLLocalStyle
        __init__(CLLocalStyle self, CLLocalStyle source) -> CLLocalStyle
        """
        this = _COPASI.new_CLLocalStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumKeys(self):
        """getNumKeys(CLLocalStyle self) -> size_t"""
        return _COPASI.CLLocalStyle_getNumKeys(self)


    def isKeyInSet(self, key):
        """isKeyInSet(CLLocalStyle self, std::string const & key) -> bool"""
        return _COPASI.CLLocalStyle_isKeyInSet(self, key)


    def addKey(self, key):
        """addKey(CLLocalStyle self, std::string const & key)"""
        return _COPASI.CLLocalStyle_addKey(self, key)


    def removeKey(self, key):
        """removeKey(CLLocalStyle self, std::string const & key)"""
        return _COPASI.CLLocalStyle_removeKey(self, key)


    def appliesTo(self, pObject):
        """appliesTo(CLLocalStyle self, CLGraphicalObject pObject) -> int"""
        return _COPASI.CLLocalStyle_appliesTo(self, pObject)

    __swig_destroy__ = _COPASI.delete_CLLocalStyle
    __del__ = lambda self: None
CLLocalStyle_swigregister = _COPASI.CLLocalStyle_swigregister
CLLocalStyle_swigregister(CLLocalStyle)

def CLLocalStyle_fromData(data, pParent):
    """CLLocalStyle_fromData(CData data, CUndoObjectInterface pParent) -> CLLocalStyle"""
    return _COPASI.CLLocalStyle_fromData(data, pParent)

class CLTransformation(CLBase):
    """Proxy of C++ CLTransformation class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLTransformation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CLTransformation self) -> CLTransformation"""
        this = _COPASI.new_CLTransformation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isSetMatrix(self):
        """isSetMatrix(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_isSetMatrix(self)


    def isIdentityMatrix(self):
        """isIdentityMatrix(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_isIdentityMatrix(self)


    def is2DTransformation(self):
        """is2DTransformation(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_is2DTransformation(self)


    def get3DTransformationString(self):
        """get3DTransformationString(CLTransformation self) -> std::string"""
        return _COPASI.CLTransformation_get3DTransformationString(self)


    def parseTransformation(self, transformationString):
        """parseTransformation(CLTransformation self, std::string const & transformationString)"""
        return _COPASI.CLTransformation_parseTransformation(self, transformationString)

    __swig_destroy__ = _COPASI.delete_CLTransformation
    __del__ = lambda self: None
CLTransformation_swigregister = _COPASI.CLTransformation_swigregister
CLTransformation_swigregister(CLTransformation)

class CLTransformation2D(CLTransformation):
    """Proxy of C++ CLTransformation2D class."""

    __swig_setmethods__ = {}
    for _s in [CLTransformation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLTransformation2D, name, value)
    __swig_getmethods__ = {}
    for _s in [CLTransformation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLTransformation2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CLTransformation2D self) -> CLTransformation2D"""
        this = _COPASI.new_CLTransformation2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get2DTransformationString(self):
        """get2DTransformationString(CLTransformation2D self) -> std::string"""
        return _COPASI.CLTransformation2D_get2DTransformationString(self)


    def parseTransformation(self, transformationString):
        """parseTransformation(CLTransformation2D self, std::string const & transformationString)"""
        return _COPASI.CLTransformation2D_parseTransformation(self, transformationString)

    __swig_destroy__ = _COPASI.delete_CLTransformation2D
    __del__ = lambda self: None
CLTransformation2D_swigregister = _COPASI.CLTransformation2D_swigregister
CLTransformation2D_swigregister(CLTransformation2D)

class CLGraphicalPrimitive1D(CLTransformation2D):
    """Proxy of C++ CLGraphicalPrimitive1D class."""

    __swig_setmethods__ = {}
    for _s in [CLTransformation2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGraphicalPrimitive1D, name, value)
    __swig_getmethods__ = {}
    for _s in [CLTransformation2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGraphicalPrimitive1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CLGraphicalPrimitive1D self) -> CLGraphicalPrimitive1D"""
        this = _COPASI.new_CLGraphicalPrimitive1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setStroke(self, key):
        """setStroke(CLGraphicalPrimitive1D self, std::string const & key)"""
        return _COPASI.CLGraphicalPrimitive1D_setStroke(self, key)


    def setStrokeWidth(self, width):
        """setStrokeWidth(CLGraphicalPrimitive1D self, double width)"""
        return _COPASI.CLGraphicalPrimitive1D_setStrokeWidth(self, width)


    def setDashArray(self, array):
        """setDashArray(CLGraphicalPrimitive1D self, std::vector< unsigned int,std::allocator< unsigned int > > const & array)"""
        return _COPASI.CLGraphicalPrimitive1D_setDashArray(self, array)


    def getStroke(self):
        """getStroke(CLGraphicalPrimitive1D self) -> std::string const &"""
        return _COPASI.CLGraphicalPrimitive1D_getStroke(self)


    def getStrokeWidth(self):
        """getStrokeWidth(CLGraphicalPrimitive1D self) -> double"""
        return _COPASI.CLGraphicalPrimitive1D_getStrokeWidth(self)


    def getDashArray(self):
        """getDashArray(CLGraphicalPrimitive1D self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _COPASI.CLGraphicalPrimitive1D_getDashArray(self)


    def isSetStrokeWidth(self):
        """isSetStrokeWidth(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetStrokeWidth(self)


    def isSetStroke(self):
        """isSetStroke(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetStroke(self)


    def isSetDashArray(self):
        """isSetDashArray(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetDashArray(self)


    def parseDashArray(self, s):
        """parseDashArray(CLGraphicalPrimitive1D self, std::string const & s)"""
        return _COPASI.CLGraphicalPrimitive1D_parseDashArray(self, s)

    __swig_destroy__ = _COPASI.delete_CLGraphicalPrimitive1D
    __del__ = lambda self: None
CLGraphicalPrimitive1D_swigregister = _COPASI.CLGraphicalPrimitive1D_swigregister
CLGraphicalPrimitive1D_swigregister(CLGraphicalPrimitive1D)

class CLGraphicalPrimitive2D(CLGraphicalPrimitive1D):
    """Proxy of C++ CLGraphicalPrimitive2D class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGraphicalPrimitive2D, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGraphicalPrimitive2D, name)
    __repr__ = _swig_repr
    UNSET = _COPASI.CLGraphicalPrimitive2D_UNSET
    NONZERO = _COPASI.CLGraphicalPrimitive2D_NONZERO
    EVENODD = _COPASI.CLGraphicalPrimitive2D_EVENODD
    INHERIT = _COPASI.CLGraphicalPrimitive2D_INHERIT

    def __init__(self):
        """__init__(CLGraphicalPrimitive2D self) -> CLGraphicalPrimitive2D"""
        this = _COPASI.new_CLGraphicalPrimitive2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFillColor(self, color):
        """setFillColor(CLGraphicalPrimitive2D self, std::string const & color)"""
        return _COPASI.CLGraphicalPrimitive2D_setFillColor(self, color)


    def setFillRule(self, rule):
        """setFillRule(CLGraphicalPrimitive2D self, CLGraphicalPrimitive2D::FILL_RULE rule)"""
        return _COPASI.CLGraphicalPrimitive2D_setFillRule(self, rule)


    def getFillColor(self):
        """getFillColor(CLGraphicalPrimitive2D self) -> std::string const &"""
        return _COPASI.CLGraphicalPrimitive2D_getFillColor(self)


    def getFillRule(self):
        """getFillRule(CLGraphicalPrimitive2D self) -> CLGraphicalPrimitive2D::FILL_RULE"""
        return _COPASI.CLGraphicalPrimitive2D_getFillRule(self)


    def isSetFill(self):
        """isSetFill(CLGraphicalPrimitive2D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive2D_isSetFill(self)


    def isSetFillRule(self):
        """isSetFillRule(CLGraphicalPrimitive2D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive2D_isSetFillRule(self)

    __swig_destroy__ = _COPASI.delete_CLGraphicalPrimitive2D
    __del__ = lambda self: None
CLGraphicalPrimitive2D_swigregister = _COPASI.CLGraphicalPrimitive2D_swigregister
CLGraphicalPrimitive2D_swigregister(CLGraphicalPrimitive2D)

class CLRelAbsVector(_object):
    """Proxy of C++ CLRelAbsVector class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRelAbsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLRelAbsVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRelAbsVector self, double a=0.0, double r=0.0) -> CLRelAbsVector
        __init__(CLRelAbsVector self, double a=0.0) -> CLRelAbsVector
        __init__(CLRelAbsVector self) -> CLRelAbsVector
        __init__(CLRelAbsVector self, std::string const & coordString) -> CLRelAbsVector
        """
        this = _COPASI.new_CLRelAbsVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCoordinate(self, *args):
        """
        setCoordinate(CLRelAbsVector self, double abs, double rel=0.0)
        setCoordinate(CLRelAbsVector self, double abs)
        setCoordinate(CLRelAbsVector self, std::string const & coordString)
        """
        return _COPASI.CLRelAbsVector_setCoordinate(self, *args)


    def setAbsoluteValue(self, abs):
        """setAbsoluteValue(CLRelAbsVector self, double abs)"""
        return _COPASI.CLRelAbsVector_setAbsoluteValue(self, abs)


    def setRelativeValue(self, rel):
        """setRelativeValue(CLRelAbsVector self, double rel)"""
        return _COPASI.CLRelAbsVector_setRelativeValue(self, rel)


    def getAbsoluteValue(self):
        """getAbsoluteValue(CLRelAbsVector self) -> double"""
        return _COPASI.CLRelAbsVector_getAbsoluteValue(self)


    def getRelativeValue(self):
        """getRelativeValue(CLRelAbsVector self) -> double"""
        return _COPASI.CLRelAbsVector_getRelativeValue(self)


    def add(self, other):
        """add(CLRelAbsVector self, CLRelAbsVector other) -> CLRelAbsVector"""
        return _COPASI.CLRelAbsVector_add(self, other)


    def __truediv__(self, *args):
        return _COPASI.CLRelAbsVector___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, other):
        """__eq__(CLRelAbsVector self, CLRelAbsVector other) -> bool"""
        return _COPASI.CLRelAbsVector___eq__(self, other)


    def __ne__(self, other):
        """__ne__(CLRelAbsVector self, CLRelAbsVector other) -> bool"""
        return _COPASI.CLRelAbsVector___ne__(self, other)


    def toString(self):
        """toString(CLRelAbsVector self) -> std::string"""
        return _COPASI.CLRelAbsVector_toString(self)

    __swig_destroy__ = _COPASI.delete_CLRelAbsVector
    __del__ = lambda self: None
CLRelAbsVector_swigregister = _COPASI.CLRelAbsVector_swigregister
CLRelAbsVector_swigregister(CLRelAbsVector)

class CLRenderPoint(CLBase):
    """Proxy of C++ CLRenderPoint class."""

    __swig_setmethods__ = {}
    for _s in [CLBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRenderPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRenderPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRenderPoint self) -> CLRenderPoint
        __init__(CLRenderPoint self, CLRenderPoint orig) -> CLRenderPoint
        __init__(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z) -> CLRenderPoint
        __init__(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y) -> CLRenderPoint
        """
        this = _COPASI.new_CLRenderPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLRenderPoint
    __del__ = lambda self: None

    def __eq__(self, left):
        """__eq__(CLRenderPoint self, CLRenderPoint left) -> bool"""
        return _COPASI.CLRenderPoint___eq__(self, left)


    def x(self):
        """x(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_x(self)


    def y(self):
        """y(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_y(self)


    def z(self):
        """z(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_z(self)


    def getXOffset(self):
        """getXOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getXOffset(self)


    def getYOffset(self):
        """getYOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getYOffset(self)


    def getZOffset(self):
        """getZOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getZOffset(self)


    def setX(self, x):
        """setX(CLRenderPoint self, CLRelAbsVector x)"""
        return _COPASI.CLRenderPoint_setX(self, x)


    def setY(self, y):
        """setY(CLRenderPoint self, CLRelAbsVector y)"""
        return _COPASI.CLRenderPoint_setY(self, y)


    def setZ(self, z):
        """setZ(CLRenderPoint self, CLRelAbsVector z)"""
        return _COPASI.CLRenderPoint_setZ(self, z)


    def setXOffset(self, x):
        """setXOffset(CLRenderPoint self, CLRelAbsVector x)"""
        return _COPASI.CLRenderPoint_setXOffset(self, x)


    def setYOffset(self, y):
        """setYOffset(CLRenderPoint self, CLRelAbsVector y)"""
        return _COPASI.CLRenderPoint_setYOffset(self, y)


    def setZOffset(self, z):
        """setZOffset(CLRenderPoint self, CLRelAbsVector z)"""
        return _COPASI.CLRenderPoint_setZOffset(self, z)


    def setOffsets(self, *args):
        """
        setOffsets(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setOffsets(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLRenderPoint_setOffsets(self, *args)


    def initDefaults(self):
        """initDefaults(CLRenderPoint self)"""
        return _COPASI.CLRenderPoint_initDefaults(self)

CLRenderPoint_swigregister = _COPASI.CLRenderPoint_swigregister
CLRenderPoint_swigregister(CLRenderPoint)

class CLRenderCurve(CLGraphicalPrimitive1D, CDataObject):
    """Proxy of C++ CLRenderCurve class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive1D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRenderCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive1D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRenderCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRenderCurve self, CDataContainer pParent=None) -> CLRenderCurve
        __init__(CLRenderCurve self) -> CLRenderCurve
        __init__(CLRenderCurve self, CLRenderCurve source, CDataContainer pParent=None) -> CLRenderCurve
        __init__(CLRenderCurve self, CLRenderCurve source) -> CLRenderCurve
        """
        this = _COPASI.new_CLRenderCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLRenderCurve
    __del__ = lambda self: None

    def setStartHead(self, startHead):
        """setStartHead(CLRenderCurve self, std::string const & startHead)"""
        return _COPASI.CLRenderCurve_setStartHead(self, startHead)


    def setEndHead(self, endHead):
        """setEndHead(CLRenderCurve self, std::string const & endHead)"""
        return _COPASI.CLRenderCurve_setEndHead(self, endHead)


    def getStartHead(self):
        """getStartHead(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getStartHead(self)


    def getEndHead(self):
        """getEndHead(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getEndHead(self)


    def getNumElements(self):
        """getNumElements(CLRenderCurve self) -> size_t"""
        return _COPASI.CLRenderCurve_getNumElements(self)


    def createCubicBezier(self):
        """createCubicBezier(CLRenderCurve self) -> CLRenderCubicBezier"""
        return _COPASI.CLRenderCurve_createCubicBezier(self)


    def createPoint(self):
        """createPoint(CLRenderCurve self) -> CLRenderPoint"""
        return _COPASI.CLRenderCurve_createPoint(self)


    def getCurveElement(self, index):
        """getCurveElement(CLRenderCurve self, size_t index) -> CLRenderPoint"""
        return _COPASI.CLRenderCurve_getCurveElement(self, index)


    def addCurveElement(self, cs):
        """addCurveElement(CLRenderCurve self, CLRenderPoint cs)"""
        return _COPASI.CLRenderCurve_addCurveElement(self, cs)


    def removeCurveElement(self, i):
        """removeCurveElement(CLRenderCurve self, size_t i)"""
        return _COPASI.CLRenderCurve_removeCurveElement(self, i)


    def getListOfCurveElements(self):
        """getListOfCurveElements(CLRenderCurve self) -> RenderPointStdVector"""
        return _COPASI.CLRenderCurve_getListOfCurveElements(self)


    def isSetStartHead(self):
        """isSetStartHead(CLRenderCurve self) -> bool"""
        return _COPASI.CLRenderCurve_isSetStartHead(self)


    def isSetEndHead(self):
        """isSetEndHead(CLRenderCurve self) -> bool"""
        return _COPASI.CLRenderCurve_isSetEndHead(self)


    def getKey(self):
        """getKey(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getKey(self)

CLRenderCurve_swigregister = _COPASI.CLRenderCurve_swigregister
CLRenderCurve_swigregister(CLRenderCurve)

class CLRenderCubicBezier(CLRenderPoint):
    """Proxy of C++ CLRenderCubicBezier class."""

    __swig_setmethods__ = {}
    for _s in [CLRenderPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRenderCubicBezier, name, value)
    __swig_getmethods__ = {}
    for _s in [CLRenderPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRenderCubicBezier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRenderCubicBezier self) -> CLRenderCubicBezier
        __init__(CLRenderCubicBezier self, CLRenderCubicBezier orig) -> CLRenderCubicBezier
        __init__(CLRenderCubicBezier self, CLRelAbsVector bp1_x, CLRelAbsVector bp1_y, CLRelAbsVector bp1_z, CLRelAbsVector bp2_x, CLRelAbsVector bp2_y, CLRelAbsVector bp2_z, CLRelAbsVector end_x, CLRelAbsVector end_y, CLRelAbsVector end_z) -> CLRenderCubicBezier
        """
        this = _COPASI.new_CLRenderCubicBezier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLRenderCubicBezier
    __del__ = lambda self: None

    def basePoint1_X(self):
        """basePoint1_X(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_X(self)


    def basePoint1_Y(self):
        """basePoint1_Y(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_Y(self)


    def basePoint1_Z(self):
        """basePoint1_Z(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_Z(self)


    def basePoint2_X(self):
        """basePoint2_X(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_X(self)


    def basePoint2_Y(self):
        """basePoint2_Y(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_Y(self)


    def basePoint2_Z(self):
        """basePoint2_Z(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_Z(self)


    def setBasePoint1_X(self, v):
        """setBasePoint1_X(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_X(self, v)


    def setBasePoint1_Y(self, v):
        """setBasePoint1_Y(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_Y(self, v)


    def setBasePoint1_Z(self, v):
        """setBasePoint1_Z(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_Z(self, v)


    def setBasePoint2_X(self, v):
        """setBasePoint2_X(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_X(self, v)


    def setBasePoint2_Y(self, v):
        """setBasePoint2_Y(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_Y(self, v)


    def setBasePoint2_Z(self, v):
        """setBasePoint2_Z(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_Z(self, v)


    def setBasePoint1(self, *args):
        """
        setBasePoint1(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setBasePoint1(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLRenderCubicBezier_setBasePoint1(self, *args)


    def setBasePoint2(self, *args):
        """
        setBasePoint2(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setBasePoint2(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLRenderCubicBezier_setBasePoint2(self, *args)

CLRenderCubicBezier_swigregister = _COPASI.CLRenderCubicBezier_swigregister
CLRenderCubicBezier_swigregister(CLRenderCubicBezier)

class CLRectangle(CLGraphicalPrimitive2D, CDataObject):
    """Proxy of C++ CLRectangle class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRectangle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLRectangle self, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self) -> CLRectangle
        __init__(CLRectangle self, CLRectangle source, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRectangle source) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector w, CLRelAbsVector h, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector w, CLRelAbsVector h) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector w, CLRelAbsVector h, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector w, CLRelAbsVector h) -> CLRectangle
        """
        this = _COPASI.new_CLRectangle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLRectangle
    __del__ = lambda self: None

    def setCoordinatesAndSize(self, x, y, z, w, h):
        """setCoordinatesAndSize(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector w, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setCoordinatesAndSize(self, x, y, z, w, h)


    def setCoordinates(self, x, y, z):
        """setCoordinates(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)"""
        return _COPASI.CLRectangle_setCoordinates(self, x, y, z)


    def setSize(self, w, h):
        """setSize(CLRectangle self, CLRelAbsVector w, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setSize(self, w, h)


    def setWidth(self, w):
        """setWidth(CLRectangle self, CLRelAbsVector w)"""
        return _COPASI.CLRectangle_setWidth(self, w)


    def setHeight(self, h):
        """setHeight(CLRectangle self, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setHeight(self, h)


    def setRadii(self, rx, ry):
        """setRadii(CLRectangle self, CLRelAbsVector rx, CLRelAbsVector ry)"""
        return _COPASI.CLRectangle_setRadii(self, rx, ry)


    def setRadiusX(self, rx):
        """setRadiusX(CLRectangle self, CLRelAbsVector rx)"""
        return _COPASI.CLRectangle_setRadiusX(self, rx)


    def setRadiusY(self, ry):
        """setRadiusY(CLRectangle self, CLRelAbsVector ry)"""
        return _COPASI.CLRectangle_setRadiusY(self, ry)


    def setX(self, x):
        """setX(CLRectangle self, CLRelAbsVector x)"""
        return _COPASI.CLRectangle_setX(self, x)


    def setY(self, y):
        """setY(CLRectangle self, CLRelAbsVector y)"""
        return _COPASI.CLRectangle_setY(self, y)


    def setZ(self, z):
        """setZ(CLRectangle self, CLRelAbsVector z)"""
        return _COPASI.CLRectangle_setZ(self, z)


    def getX(self):
        """getX(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getX(self)


    def getY(self):
        """getY(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getY(self)


    def getZ(self):
        """getZ(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getZ(self)


    def getWidth(self):
        """getWidth(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getWidth(self)


    def getHeight(self):
        """getHeight(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getHeight(self)


    def getRadiusX(self):
        """getRadiusX(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getRadiusX(self)


    def getRadiusY(self):
        """getRadiusY(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getRadiusY(self)


    def getKey(self):
        """getKey(CLRectangle self) -> std::string const &"""
        return _COPASI.CLRectangle_getKey(self)

CLRectangle_swigregister = _COPASI.CLRectangle_swigregister
CLRectangle_swigregister(CLRectangle)

class CLEllipse(CLGraphicalPrimitive2D, CDataObject):
    """Proxy of C++ CLEllipse class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLEllipse, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLEllipse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLEllipse self, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector r, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector r) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector rx, CLRelAbsVector ry, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector rx, CLRelAbsVector ry) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector cz, CLRelAbsVector rx, CLRelAbsVector ry, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector cz, CLRelAbsVector rx, CLRelAbsVector ry) -> CLEllipse
        __init__(CLEllipse self, CLEllipse source, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLEllipse source) -> CLEllipse
        """
        this = _COPASI.new_CLEllipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLEllipse
    __del__ = lambda self: None

    def getCX(self):
        """getCX(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCX(self)


    def getCY(self):
        """getCY(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCY(self)


    def getCZ(self):
        """getCZ(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCZ(self)


    def getRX(self):
        """getRX(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getRX(self)


    def getRY(self):
        """getRY(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getRY(self)


    def setCX(self, cx):
        """setCX(CLEllipse self, CLRelAbsVector cx)"""
        return _COPASI.CLEllipse_setCX(self, cx)


    def setCY(self, cy):
        """setCY(CLEllipse self, CLRelAbsVector cy)"""
        return _COPASI.CLEllipse_setCY(self, cy)


    def setCZ(self, cz):
        """setCZ(CLEllipse self, CLRelAbsVector cz)"""
        return _COPASI.CLEllipse_setCZ(self, cz)


    def setRX(self, rx):
        """setRX(CLEllipse self, CLRelAbsVector rx)"""
        return _COPASI.CLEllipse_setRX(self, rx)


    def setRY(self, ry):
        """setRY(CLEllipse self, CLRelAbsVector ry)"""
        return _COPASI.CLEllipse_setRY(self, ry)


    def setCenter2D(self, cx, cy):
        """setCenter2D(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy)"""
        return _COPASI.CLEllipse_setCenter2D(self, cx, cy)


    def setCenter3D(self, cx, cy, cz):
        """setCenter3D(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector cz)"""
        return _COPASI.CLEllipse_setCenter3D(self, cx, cy, cz)


    def setRadii(self, rx, ry):
        """setRadii(CLEllipse self, CLRelAbsVector rx, CLRelAbsVector ry)"""
        return _COPASI.CLEllipse_setRadii(self, rx, ry)


    def getKey(self):
        """getKey(CLEllipse self) -> std::string const &"""
        return _COPASI.CLEllipse_getKey(self)

CLEllipse_swigregister = _COPASI.CLEllipse_swigregister
CLEllipse_swigregister(CLEllipse)

class CLGroup(CLGraphicalPrimitive2D, CDataContainer):
    """Proxy of C++ CLGroup class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLGroup self, CDataContainer pParent=None) -> CLGroup
        __init__(CLGroup self) -> CLGroup
        __init__(CLGroup self, CLGroup source, CDataContainer pParent=None) -> CLGroup
        __init__(CLGroup self, CLGroup source) -> CLGroup
        """
        this = _COPASI.new_CLGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLGroup
    __del__ = lambda self: None

    def setFontFamily(self, family):
        """setFontFamily(CLGroup self, std::string const & family)"""
        return _COPASI.CLGroup_setFontFamily(self, family)


    def setFontSize(self, size):
        """setFontSize(CLGroup self, CLRelAbsVector size)"""
        return _COPASI.CLGroup_setFontSize(self, size)


    def setFontWeight(self, weight):
        """setFontWeight(CLGroup self, CLText::FONT_WEIGHT weight)"""
        return _COPASI.CLGroup_setFontWeight(self, weight)


    def setFontStyle(self, style):
        """setFontStyle(CLGroup self, CLText::FONT_STYLE style)"""
        return _COPASI.CLGroup_setFontStyle(self, style)


    def setTextAnchor(self, anchor):
        """setTextAnchor(CLGroup self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLGroup_setTextAnchor(self, anchor)


    def setVTextAnchor(self, anchor):
        """setVTextAnchor(CLGroup self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLGroup_setVTextAnchor(self, anchor)


    def setStartHead(self, key):
        """setStartHead(CLGroup self, std::string const & key)"""
        return _COPASI.CLGroup_setStartHead(self, key)


    def setEndHead(self, key):
        """setEndHead(CLGroup self, std::string const & key)"""
        return _COPASI.CLGroup_setEndHead(self, key)


    def getFontFamily(self):
        """getFontFamily(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getFontFamily(self)


    def getFontSize(self):
        """getFontSize(CLGroup self) -> CLRelAbsVector"""
        return _COPASI.CLGroup_getFontSize(self)


    def getFontWeight(self):
        """getFontWeight(CLGroup self) -> CLText::FONT_WEIGHT"""
        return _COPASI.CLGroup_getFontWeight(self)


    def getFontStyle(self):
        """getFontStyle(CLGroup self) -> CLText::FONT_STYLE"""
        return _COPASI.CLGroup_getFontStyle(self)


    def getTextAnchor(self):
        """getTextAnchor(CLGroup self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLGroup_getTextAnchor(self)


    def getVTextAnchor(self):
        """getVTextAnchor(CLGroup self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLGroup_getVTextAnchor(self)


    def getStartHead(self):
        """getStartHead(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getStartHead(self)


    def getEndHead(self):
        """getEndHead(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getEndHead(self)


    def getNumElements(self):
        """getNumElements(CLGroup self) -> size_t"""
        return _COPASI.CLGroup_getNumElements(self)


    def getListOfElements(self):
        """getListOfElements(CLGroup self) -> CDataObjectVector"""
        return _COPASI.CLGroup_getListOfElements(self)


    def getElement(self, n):
        """getElement(CLGroup self, size_t n) -> CDataObject"""
        return _COPASI.CLGroup_getElement(self, n)


    def isSetTextAnchor(self):
        """isSetTextAnchor(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetTextAnchor(self)


    def isSetVTextAnchor(self):
        """isSetVTextAnchor(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetVTextAnchor(self)


    def createImage(self):
        """createImage(CLGroup self) -> CLImage"""
        return _COPASI.CLGroup_createImage(self)


    def createGroup(self):
        """createGroup(CLGroup self) -> CLGroup"""
        return _COPASI.CLGroup_createGroup(self)


    def createRectangle(self):
        """createRectangle(CLGroup self) -> CLRectangle"""
        return _COPASI.CLGroup_createRectangle(self)


    def createEllipse(self):
        """createEllipse(CLGroup self) -> CLEllipse"""
        return _COPASI.CLGroup_createEllipse(self)


    def createCurve(self):
        """createCurve(CLGroup self) -> CLRenderCurve"""
        return _COPASI.CLGroup_createCurve(self)


    def createPolygon(self):
        """createPolygon(CLGroup self) -> CLPolygon"""
        return _COPASI.CLGroup_createPolygon(self)


    def createText(self):
        """createText(CLGroup self) -> CLText"""
        return _COPASI.CLGroup_createText(self)


    def addChildElement(self, pChild):
        """addChildElement(CLGroup self, CLTransformation2D pChild)"""
        return _COPASI.CLGroup_addChildElement(self, pChild)


    def isSetStartHead(self):
        """isSetStartHead(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetStartHead(self)


    def isSetEndHead(self):
        """isSetEndHead(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetEndHead(self)


    def isSetFontFamily(self):
        """isSetFontFamily(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontFamily(self)


    def isSetFontSize(self):
        """isSetFontSize(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontSize(self)


    def isSetFontWeight(self):
        """isSetFontWeight(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontWeight(self)


    def isSetFontStyle(self):
        """isSetFontStyle(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontStyle(self)


    def getKey(self):
        """getKey(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getKey(self)

CLGroup_swigregister = _COPASI.CLGroup_swigregister
CLGroup_swigregister(CLGroup)

class CLImage(CLTransformation2D, CDataObject):
    """Proxy of C++ CLImage class."""

    __swig_setmethods__ = {}
    for _s in [CLTransformation2D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLImage, name, value)
    __swig_getmethods__ = {}
    for _s in [CLTransformation2D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLImage self, CDataContainer pParent=None) -> CLImage
        __init__(CLImage self) -> CLImage
        __init__(CLImage self, CLImage source, CDataContainer pParent=None) -> CLImage
        __init__(CLImage self, CLImage source) -> CLImage
        """
        this = _COPASI.new_CLImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLImage
    __del__ = lambda self: None

    def setCoordinates(self, *args):
        """
        setCoordinates(CLImage self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setCoordinates(CLImage self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLImage_setCoordinates(self, *args)


    def setX(self, coord):
        """setX(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setX(self, coord)


    def setY(self, coord):
        """setY(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setY(self, coord)


    def setZ(self, coord):
        """setZ(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setZ(self, coord)


    def getX(self):
        """getX(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getX(self)


    def getY(self):
        """getY(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getY(self)


    def getZ(self):
        """getZ(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getZ(self)


    def setDimensions(self, width, height):
        """setDimensions(CLImage self, CLRelAbsVector width, CLRelAbsVector height)"""
        return _COPASI.CLImage_setDimensions(self, width, height)


    def setWidth(self, width):
        """setWidth(CLImage self, CLRelAbsVector width)"""
        return _COPASI.CLImage_setWidth(self, width)


    def setHeight(self, height):
        """setHeight(CLImage self, CLRelAbsVector height)"""
        return _COPASI.CLImage_setHeight(self, height)


    def getWidth(self):
        """getWidth(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getWidth(self)


    def getHeight(self):
        """getHeight(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getHeight(self)


    def setImageReference(self, ref):
        """setImageReference(CLImage self, std::string const & ref)"""
        return _COPASI.CLImage_setImageReference(self, ref)


    def getImageReference(self):
        """getImageReference(CLImage self) -> std::string const &"""
        return _COPASI.CLImage_getImageReference(self)


    def isSetImageReference(self):
        """isSetImageReference(CLImage self) -> bool"""
        return _COPASI.CLImage_isSetImageReference(self)


    def getKey(self):
        """getKey(CLImage self) -> std::string const &"""
        return _COPASI.CLImage_getKey(self)

CLImage_swigregister = _COPASI.CLImage_swigregister
CLImage_swigregister(CLImage)

class CLPolygon(CLGraphicalPrimitive2D, CDataObject):
    """Proxy of C++ CLPolygon class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLPolygon, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLPolygon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLPolygon self, CDataContainer pParent=None) -> CLPolygon
        __init__(CLPolygon self) -> CLPolygon
        __init__(CLPolygon self, CLPolygon source, CDataContainer pParent) -> CLPolygon
        """
        this = _COPASI.new_CLPolygon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLPolygon
    __del__ = lambda self: None

    def getNumElements(self):
        """getNumElements(CLPolygon self) -> size_t"""
        return _COPASI.CLPolygon_getNumElements(self)


    def getListOfElements(self):
        """getListOfElements(CLPolygon self) -> RenderPointStdVector"""
        return _COPASI.CLPolygon_getListOfElements(self)


    def createPoint(self):
        """createPoint(CLPolygon self) -> CLRenderPoint"""
        return _COPASI.CLPolygon_createPoint(self)


    def createCubicBezier(self):
        """createCubicBezier(CLPolygon self) -> CLRenderCubicBezier"""
        return _COPASI.CLPolygon_createCubicBezier(self)


    def getElement(self, index):
        """getElement(CLPolygon self, size_t index) -> CLRenderPoint"""
        return _COPASI.CLPolygon_getElement(self, index)


    def addElement(self, ls):
        """addElement(CLPolygon self, CLRenderPoint ls)"""
        return _COPASI.CLPolygon_addElement(self, ls)


    def removeElement(self, i):
        """removeElement(CLPolygon self, size_t i)"""
        return _COPASI.CLPolygon_removeElement(self, i)


    def getKey(self):
        """getKey(CLPolygon self) -> std::string const &"""
        return _COPASI.CLPolygon_getKey(self)

CLPolygon_swigregister = _COPASI.CLPolygon_swigregister
CLPolygon_swigregister(CLPolygon)

class CLText(CLGraphicalPrimitive1D, CDataObject):
    """Proxy of C++ CLText class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive1D, CDataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLText, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive1D, CDataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLText, name)
    __repr__ = _swig_repr
    WEIGHT_UNSET = _COPASI.CLText_WEIGHT_UNSET
    WEIGHT_NORMAL = _COPASI.CLText_WEIGHT_NORMAL
    WEIGHT_BOLD = _COPASI.CLText_WEIGHT_BOLD
    STYLE_UNSET = _COPASI.CLText_STYLE_UNSET
    STYLE_NORMAL = _COPASI.CLText_STYLE_NORMAL
    STYLE_ITALIC = _COPASI.CLText_STYLE_ITALIC
    ANCHOR_UNSET = _COPASI.CLText_ANCHOR_UNSET
    ANCHOR_START = _COPASI.CLText_ANCHOR_START
    ANCHOR_MIDDLE = _COPASI.CLText_ANCHOR_MIDDLE
    ANCHOR_END = _COPASI.CLText_ANCHOR_END
    ANCHOR_TOP = _COPASI.CLText_ANCHOR_TOP
    ANCHOR_BOTTOM = _COPASI.CLText_ANCHOR_BOTTOM

    def __init__(self, *args):
        """
        __init__(CLText self, CDataContainer pParent) -> CLText
        __init__(CLText self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CDataContainer pParent=None) -> CLText
        __init__(CLText self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z) -> CLText
        __init__(CLText self, CLRelAbsVector x, CLRelAbsVector y) -> CLText
        __init__(CLText self, CLRelAbsVector x) -> CLText
        __init__(CLText self) -> CLText
        __init__(CLText self, CLText source, CDataContainer pParent=None) -> CLText
        __init__(CLText self, CLText source) -> CLText
        """
        this = _COPASI.new_CLText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLText
    __del__ = lambda self: None

    def setCoordinates(self, *args):
        """
        setCoordinates(CLText self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)
        setCoordinates(CLText self, CLRelAbsVector x, CLRelAbsVector y)
        """
        return _COPASI.CLText_setCoordinates(self, *args)


    def setX(self, coord):
        """setX(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setX(self, coord)


    def setY(self, coord):
        """setY(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setY(self, coord)


    def setZ(self, coord):
        """setZ(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setZ(self, coord)


    def getX(self):
        """getX(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getX(self)


    def getY(self):
        """getY(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getY(self)


    def getZ(self):
        """getZ(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getZ(self)


    def setFontFamily(self, family):
        """setFontFamily(CLText self, std::string const & family)"""
        return _COPASI.CLText_setFontFamily(self, family)


    def setFontSize(self, size):
        """setFontSize(CLText self, CLRelAbsVector size)"""
        return _COPASI.CLText_setFontSize(self, size)


    def setFontWeight(self, weight):
        """setFontWeight(CLText self, CLText::FONT_WEIGHT weight)"""
        return _COPASI.CLText_setFontWeight(self, weight)


    def setFontStyle(self, style):
        """setFontStyle(CLText self, CLText::FONT_STYLE style)"""
        return _COPASI.CLText_setFontStyle(self, style)


    def setTextAnchor(self, anchor):
        """setTextAnchor(CLText self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLText_setTextAnchor(self, anchor)


    def setVTextAnchor(self, anchor):
        """setVTextAnchor(CLText self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLText_setVTextAnchor(self, anchor)


    def getFontFamily(self):
        """getFontFamily(CLText self) -> std::string const &"""
        return _COPASI.CLText_getFontFamily(self)


    def getFontSize(self):
        """getFontSize(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getFontSize(self)


    def getFontWeight(self):
        """getFontWeight(CLText self) -> CLText::FONT_WEIGHT"""
        return _COPASI.CLText_getFontWeight(self)


    def getFontStyle(self):
        """getFontStyle(CLText self) -> CLText::FONT_STYLE"""
        return _COPASI.CLText_getFontStyle(self)


    def getTextAnchor(self):
        """getTextAnchor(CLText self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLText_getTextAnchor(self)


    def getVTextAnchor(self):
        """getVTextAnchor(CLText self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLText_getVTextAnchor(self)


    def isSetTextAnchor(self):
        """isSetTextAnchor(CLText self) -> bool"""
        return _COPASI.CLText_isSetTextAnchor(self)


    def isSetVTextAnchor(self):
        """isSetVTextAnchor(CLText self) -> bool"""
        return _COPASI.CLText_isSetVTextAnchor(self)


    def getText(self):
        """getText(CLText self) -> std::string const &"""
        return _COPASI.CLText_getText(self)


    def setText(self, text):
        """setText(CLText self, std::string const & text)"""
        return _COPASI.CLText_setText(self, text)


    def isSetText(self):
        """isSetText(CLText self) -> bool"""
        return _COPASI.CLText_isSetText(self)


    def isSetFontFamily(self):
        """isSetFontFamily(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontFamily(self)


    def isSetFontSize(self):
        """isSetFontSize(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontSize(self)


    def isSetFontWeight(self):
        """isSetFontWeight(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontWeight(self)


    def isSetFontStyle(self):
        """isSetFontStyle(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontStyle(self)


    def getKey(self):
        """getKey(CLText self) -> std::string const &"""
        return _COPASI.CLText_getKey(self)

CLText_swigregister = _COPASI.CLText_swigregister
CLText_swigregister(CLText)

class CLLineEnding(CLGraphicalPrimitive2D, CDataContainer):
    """Proxy of C++ CLLineEnding class."""

    __swig_setmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLineEnding, name, value)
    __swig_getmethods__ = {}
    for _s in [CLGraphicalPrimitive2D, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLineEnding, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLLineEnding"""
        return _COPASI.CLLineEnding_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLLineEnding self, CDataContainer pParent=None) -> CLLineEnding
        __init__(CLLineEnding self) -> CLLineEnding
        __init__(CLLineEnding self, CLLineEnding source, CDataContainer pParent=None) -> CLLineEnding
        __init__(CLLineEnding self, CLLineEnding source) -> CLLineEnding
        """
        this = _COPASI.new_CLLineEnding(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setEnableRotationalMapping(self, enable):
        """setEnableRotationalMapping(CLLineEnding self, bool enable)"""
        return _COPASI.CLLineEnding_setEnableRotationalMapping(self, enable)


    def getIsEnabledRotationalMapping(self):
        """getIsEnabledRotationalMapping(CLLineEnding self) -> bool"""
        return _COPASI.CLLineEnding_getIsEnabledRotationalMapping(self)


    def setBoundingBox(self, box):
        """setBoundingBox(CLLineEnding self, CLBoundingBox box)"""
        return _COPASI.CLLineEnding_setBoundingBox(self, box)


    def getBoundingBox(self):
        """getBoundingBox(CLLineEnding self) -> CLBoundingBox"""
        return _COPASI.CLLineEnding_getBoundingBox(self)


    def setGroup(self, group):
        """setGroup(CLLineEnding self, CLGroup group)"""
        return _COPASI.CLLineEnding_setGroup(self, group)


    def getGroup(self):
        """getGroup(CLLineEnding self) -> CLGroup"""
        return _COPASI.CLLineEnding_getGroup(self)


    def getKey(self):
        """getKey(CLLineEnding self) -> std::string const &"""
        return _COPASI.CLLineEnding_getKey(self)


    def getId(self):
        """getId(CLLineEnding self) -> std::string const &"""
        return _COPASI.CLLineEnding_getId(self)


    def setId(self, id):
        """setId(CLLineEnding self, std::string const & id)"""
        return _COPASI.CLLineEnding_setId(self, id)

    __swig_destroy__ = _COPASI.delete_CLLineEnding
    __del__ = lambda self: None
CLLineEnding_swigregister = _COPASI.CLLineEnding_swigregister
CLLineEnding_swigregister(CLLineEnding)

def CLLineEnding_fromData(data, pParent):
    """CLLineEnding_fromData(CData data, CUndoObjectInterface pParent) -> CLLineEnding"""
    return _COPASI.CLLineEnding_fromData(data, pParent)

class CLRenderInformationBase(CLBase, CDataContainer):
    """Proxy of C++ CLRenderInformationBase class."""

    __swig_setmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLRenderInformationBase, name, value)
    __swig_getmethods__ = {}
    for _s in [CLBase, CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLRenderInformationBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CLRenderInformationBase
    __del__ = lambda self: None

    def getReferenceRenderInformationKey(self):
        """getReferenceRenderInformationKey(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getReferenceRenderInformationKey(self)


    def setReferenceRenderInformationKey(self, key):
        """setReferenceRenderInformationKey(CLRenderInformationBase self, std::string const & key)"""
        return _COPASI.CLRenderInformationBase_setReferenceRenderInformationKey(self, key)


    def getNumColorDefinitions(self):
        """getNumColorDefinitions(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumColorDefinitions(self)


    def getListOfColorDefinitions(self):
        """getListOfColorDefinitions(CLRenderInformationBase self) -> ColorDefinitionVector"""
        return _COPASI.CLRenderInformationBase_getListOfColorDefinitions(self)


    def getColorDefinition(self, index):
        """getColorDefinition(CLRenderInformationBase self, size_t index) -> CLColorDefinition"""
        return _COPASI.CLRenderInformationBase_getColorDefinition(self, index)


    def createColorDefinition(self):
        """createColorDefinition(CLRenderInformationBase self) -> CLColorDefinition"""
        return _COPASI.CLRenderInformationBase_createColorDefinition(self)


    def removeColorDefinition(self, index):
        """removeColorDefinition(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeColorDefinition(self, index)


    def addColorDefinition(self, cd):
        """addColorDefinition(CLRenderInformationBase self, CLColorDefinition cd)"""
        return _COPASI.CLRenderInformationBase_addColorDefinition(self, cd)


    def getNumGradientDefinitions(self):
        """getNumGradientDefinitions(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumGradientDefinitions(self)


    def getListOfGradientDefinitions(self):
        """getListOfGradientDefinitions(CLRenderInformationBase self) -> GradientBaseVector"""
        return _COPASI.CLRenderInformationBase_getListOfGradientDefinitions(self)


    def getGradientDefinition(self, index):
        """getGradientDefinition(CLRenderInformationBase self, size_t index) -> CLGradientBase"""
        return _COPASI.CLRenderInformationBase_getGradientDefinition(self, index)


    def createLinearGradientDefinition(self):
        """createLinearGradientDefinition(CLRenderInformationBase self) -> CLLinearGradient"""
        return _COPASI.CLRenderInformationBase_createLinearGradientDefinition(self)


    def createRadialGradientDefinition(self):
        """createRadialGradientDefinition(CLRenderInformationBase self) -> CLRadialGradient"""
        return _COPASI.CLRenderInformationBase_createRadialGradientDefinition(self)


    def removeGradientDefinition(self, index):
        """removeGradientDefinition(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeGradientDefinition(self, index)


    def addGradientDefinition(self, gradient):
        """addGradientDefinition(CLRenderInformationBase self, CLGradientBase gradient)"""
        return _COPASI.CLRenderInformationBase_addGradientDefinition(self, gradient)


    def getNumLineEndings(self):
        """getNumLineEndings(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumLineEndings(self)


    def getListOfLineEndings(self):
        """getListOfLineEndings(CLRenderInformationBase self) -> LineEndingVector"""
        return _COPASI.CLRenderInformationBase_getListOfLineEndings(self)


    def getLineEnding(self, index):
        """getLineEnding(CLRenderInformationBase self, size_t index) -> CLLineEnding"""
        return _COPASI.CLRenderInformationBase_getLineEnding(self, index)


    def createLineEnding(self):
        """createLineEnding(CLRenderInformationBase self) -> CLLineEnding"""
        return _COPASI.CLRenderInformationBase_createLineEnding(self)


    def removeLineEnding(self, index):
        """removeLineEnding(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeLineEnding(self, index)


    def addLineEnding(self, le):
        """addLineEnding(CLRenderInformationBase self, CLLineEnding le)"""
        return _COPASI.CLRenderInformationBase_addLineEnding(self, le)


    def getBackgroundColor(self):
        """getBackgroundColor(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getBackgroundColor(self)


    def setBackgroundColor(self, bg):
        """setBackgroundColor(CLRenderInformationBase self, std::string const & bg)"""
        return _COPASI.CLRenderInformationBase_setBackgroundColor(self, bg)


    def getKey(self):
        """getKey(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getKey(self)


    def getName(self):
        """getName(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getName(self)


    def setName(self, name):
        """setName(CLRenderInformationBase self, std::string const & name)"""
        return _COPASI.CLRenderInformationBase_setName(self, name)


    def createStyle(self):
        """createStyle(CLRenderInformationBase self) -> CLStyle"""
        return _COPASI.CLRenderInformationBase_createStyle(self)


    def getStyleForGraphicalObject(self, pObject):
        """getStyleForGraphicalObject(CLRenderInformationBase self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLRenderInformationBase_getStyleForGraphicalObject(self, pObject)


    def getNumStyles(self):
        """getNumStyles(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumStyles(self)


    def getStyle(self, *args):
        """
        getStyle(CLRenderInformationBase self, size_t index) -> CLStyle
        getStyle(CLRenderInformationBase self, size_t index) -> CLStyle
        """
        return _COPASI.CLRenderInformationBase_getStyle(self, *args)

CLRenderInformationBase_swigregister = _COPASI.CLRenderInformationBase_swigregister
CLRenderInformationBase_swigregister(CLRenderInformationBase)

class CLLocalRenderInformation(CLRenderInformationBase):
    """Proxy of C++ CLLocalRenderInformation class."""

    __swig_setmethods__ = {}
    for _s in [CLRenderInformationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLLocalRenderInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [CLRenderInformationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLLocalRenderInformation, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLLocalRenderInformation"""
        return _COPASI.CLLocalRenderInformation_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLLocalRenderInformation self, CDataContainer pParent=None) -> CLLocalRenderInformation
        __init__(CLLocalRenderInformation self) -> CLLocalRenderInformation
        __init__(CLLocalRenderInformation self, CLLocalRenderInformation source, CDataContainer pParent=None) -> CLLocalRenderInformation
        __init__(CLLocalRenderInformation self, CLLocalRenderInformation source) -> CLLocalRenderInformation
        """
        this = _COPASI.new_CLLocalRenderInformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumStyles(self):
        """getNumStyles(CLLocalRenderInformation self) -> size_t"""
        return _COPASI.CLLocalRenderInformation_getNumStyles(self)


    def getListOfStyles(self):
        """getListOfStyles(CLLocalRenderInformation self) -> LocalStyleVector"""
        return _COPASI.CLLocalRenderInformation_getListOfStyles(self)


    def getStyle(self, i):
        """getStyle(CLLocalRenderInformation self, size_t i) -> CLLocalStyle"""
        return _COPASI.CLLocalRenderInformation_getStyle(self, i)


    def createStyle(self):
        """createStyle(CLLocalRenderInformation self) -> CLStyle"""
        return _COPASI.CLLocalRenderInformation_createStyle(self)


    def getStyleForGraphicalObject(self, pObject):
        """getStyleForGraphicalObject(CLLocalRenderInformation self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLLocalRenderInformation_getStyleForGraphicalObject(self, pObject)


    def addStyle(self, pStyle):
        """addStyle(CLLocalRenderInformation self, CLLocalStyle pStyle)"""
        return _COPASI.CLLocalRenderInformation_addStyle(self, pStyle)

    __swig_destroy__ = _COPASI.delete_CLLocalRenderInformation
    __del__ = lambda self: None
CLLocalRenderInformation_swigregister = _COPASI.CLLocalRenderInformation_swigregister
CLLocalRenderInformation_swigregister(CLLocalRenderInformation)

def CLLocalRenderInformation_fromData(data, pParent):
    """CLLocalRenderInformation_fromData(CData data, CUndoObjectInterface pParent) -> CLLocalRenderInformation"""
    return _COPASI.CLLocalRenderInformation_fromData(data, pParent)

class CLGlobalRenderInformation(CLRenderInformationBase):
    """Proxy of C++ CLGlobalRenderInformation class."""

    __swig_setmethods__ = {}
    for _s in [CLRenderInformationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLGlobalRenderInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [CLRenderInformationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLGlobalRenderInformation, name)
    __repr__ = _swig_repr

    def fromData(data, pParent):
        """fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalRenderInformation"""
        return _COPASI.CLGlobalRenderInformation_fromData(data, pParent)

    fromData = staticmethod(fromData)

    def __init__(self, *args):
        """
        __init__(CLGlobalRenderInformation self, CDataContainer pParent=None) -> CLGlobalRenderInformation
        __init__(CLGlobalRenderInformation self) -> CLGlobalRenderInformation
        __init__(CLGlobalRenderInformation self, CLGlobalRenderInformation source, CDataContainer pParent=None) -> CLGlobalRenderInformation
        __init__(CLGlobalRenderInformation self, CLGlobalRenderInformation source) -> CLGlobalRenderInformation
        """
        this = _COPASI.new_CLGlobalRenderInformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumStyles(self):
        """getNumStyles(CLGlobalRenderInformation self) -> size_t"""
        return _COPASI.CLGlobalRenderInformation_getNumStyles(self)


    def getListOfStyles(self):
        """getListOfStyles(CLGlobalRenderInformation self) -> GlobalStyleVector"""
        return _COPASI.CLGlobalRenderInformation_getListOfStyles(self)


    def getStyle(self, i):
        """getStyle(CLGlobalRenderInformation self, size_t i) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_getStyle(self, i)


    def createStyle(self):
        """createStyle(CLGlobalRenderInformation self) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_createStyle(self)


    def getStyleForGraphicalObject(self, pObject):
        """getStyleForGraphicalObject(CLGlobalRenderInformation self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_getStyleForGraphicalObject(self, pObject)


    def getTypeForObject(pObject):
        """getTypeForObject(CLGraphicalObject pObject) -> std::string"""
        return _COPASI.CLGlobalRenderInformation_getTypeForObject(pObject)

    getTypeForObject = staticmethod(getTypeForObject)

    def addStyle(self, pStyle):
        """addStyle(CLGlobalRenderInformation self, CLGlobalStyle pStyle)"""
        return _COPASI.CLGlobalRenderInformation_addStyle(self, pStyle)

    __swig_destroy__ = _COPASI.delete_CLGlobalRenderInformation
    __del__ = lambda self: None
CLGlobalRenderInformation_swigregister = _COPASI.CLGlobalRenderInformation_swigregister
CLGlobalRenderInformation_swigregister(CLGlobalRenderInformation)

def CLGlobalRenderInformation_fromData(data, pParent):
    """CLGlobalRenderInformation_fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalRenderInformation"""
    return _COPASI.CLGlobalRenderInformation_fromData(data, pParent)

def CLGlobalRenderInformation_getTypeForObject(pObject):
    """CLGlobalRenderInformation_getTypeForObject(CLGraphicalObject pObject) -> std::string"""
    return _COPASI.CLGlobalRenderInformation_getTypeForObject(pObject)

class ColorDefinitionVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLColorDefinition)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorDefinitionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorDefinitionVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ColorDefinitionVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(ColorDefinitionVector self)"""
        return _COPASI.ColorDefinitionVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(ColorDefinitionVector self, CLColorDefinition src) -> bool"""
        return _COPASI.ColorDefinitionVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(ColorDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ColorDefinitionVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(ColorDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ColorDefinitionVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(ColorDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ColorDefinitionVector_getObject(self, name)


    def size(self):
        """size(ColorDefinitionVector self) -> size_t"""
        return _COPASI.ColorDefinitionVector_size(self)


    def empty(self):
        """empty(ColorDefinitionVector self) -> bool"""
        return _COPASI.ColorDefinitionVector_empty(self)


    def clear(self):
        """clear(ColorDefinitionVector self)"""
        return _COPASI.ColorDefinitionVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(ColorDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ColorDefinitionVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(ColorDefinitionVector self, unsigned int index)"""
        return _COPASI.ColorDefinitionVector_remove(self, index)


    def get(self, index):
        """get(ColorDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ColorDefinitionVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(ColorDefinitionVector self, CLColorDefinition DISOWN) -> bool"""
        return _COPASI.ColorDefinitionVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(ColorDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ColorDefinitionVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(ColorDefinitionVector self) -> size_t"""
        return _COPASI.ColorDefinitionVector___len__(self)

ColorDefinitionVector_swigregister = _COPASI.ColorDefinitionVector_swigregister
ColorDefinitionVector_swigregister(ColorDefinitionVector)

class GlobalRenderInformationVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGlobalRenderInformation)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalRenderInformationVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalRenderInformationVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GlobalRenderInformationVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GlobalRenderInformationVector self)"""
        return _COPASI.GlobalRenderInformationVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GlobalRenderInformationVector self, CLGlobalRenderInformation src) -> bool"""
        return _COPASI.GlobalRenderInformationVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GlobalRenderInformationVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GlobalRenderInformationVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GlobalRenderInformationVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalRenderInformationVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GlobalRenderInformationVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GlobalRenderInformationVector_getObject(self, name)


    def size(self):
        """size(GlobalRenderInformationVector self) -> size_t"""
        return _COPASI.GlobalRenderInformationVector_size(self)


    def empty(self):
        """empty(GlobalRenderInformationVector self) -> bool"""
        return _COPASI.GlobalRenderInformationVector_empty(self)


    def clear(self):
        """clear(GlobalRenderInformationVector self)"""
        return _COPASI.GlobalRenderInformationVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GlobalRenderInformationVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GlobalRenderInformationVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GlobalRenderInformationVector self, unsigned int index)"""
        return _COPASI.GlobalRenderInformationVector_remove(self, index)


    def get(self, index):
        """get(GlobalRenderInformationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalRenderInformationVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GlobalRenderInformationVector self, CLGlobalRenderInformation DISOWN) -> bool"""
        return _COPASI.GlobalRenderInformationVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GlobalRenderInformationVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalRenderInformationVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GlobalRenderInformationVector self) -> size_t"""
        return _COPASI.GlobalRenderInformationVector___len__(self)

GlobalRenderInformationVector_swigregister = _COPASI.GlobalRenderInformationVector_swigregister
GlobalRenderInformationVector_swigregister(GlobalRenderInformationVector)

class GlobalStyleVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGlobalStyle)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalStyleVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalStyleVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GlobalStyleVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GlobalStyleVector self)"""
        return _COPASI.GlobalStyleVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GlobalStyleVector self, CLGlobalStyle src) -> bool"""
        return _COPASI.GlobalStyleVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GlobalStyleVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GlobalStyleVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GlobalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalStyleVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GlobalStyleVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GlobalStyleVector_getObject(self, name)


    def size(self):
        """size(GlobalStyleVector self) -> size_t"""
        return _COPASI.GlobalStyleVector_size(self)


    def empty(self):
        """empty(GlobalStyleVector self) -> bool"""
        return _COPASI.GlobalStyleVector_empty(self)


    def clear(self):
        """clear(GlobalStyleVector self)"""
        return _COPASI.GlobalStyleVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GlobalStyleVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GlobalStyleVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GlobalStyleVector self, unsigned int index)"""
        return _COPASI.GlobalStyleVector_remove(self, index)


    def get(self, index):
        """get(GlobalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalStyleVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GlobalStyleVector self, CLGlobalStyle DISOWN) -> bool"""
        return _COPASI.GlobalStyleVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GlobalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalStyleVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GlobalStyleVector self) -> size_t"""
        return _COPASI.GlobalStyleVector___len__(self)

GlobalStyleVector_swigregister = _COPASI.GlobalStyleVector_swigregister
GlobalStyleVector_swigregister(GlobalStyleVector)

class LocalStyleVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLLocalStyle)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalStyleVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalStyleVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LocalStyleVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(LocalStyleVector self)"""
        return _COPASI.LocalStyleVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(LocalStyleVector self, CLLocalStyle src) -> bool"""
        return _COPASI.LocalStyleVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(LocalStyleVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LocalStyleVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(LocalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.LocalStyleVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(LocalStyleVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LocalStyleVector_getObject(self, name)


    def size(self):
        """size(LocalStyleVector self) -> size_t"""
        return _COPASI.LocalStyleVector_size(self)


    def empty(self):
        """empty(LocalStyleVector self) -> bool"""
        return _COPASI.LocalStyleVector_empty(self)


    def clear(self):
        """clear(LocalStyleVector self)"""
        return _COPASI.LocalStyleVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(LocalStyleVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LocalStyleVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(LocalStyleVector self, unsigned int index)"""
        return _COPASI.LocalStyleVector_remove(self, index)


    def get(self, index):
        """get(LocalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LocalStyleVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(LocalStyleVector self, CLLocalStyle DISOWN) -> bool"""
        return _COPASI.LocalStyleVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(LocalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.LocalStyleVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(LocalStyleVector self) -> size_t"""
        return _COPASI.LocalStyleVector___len__(self)

LocalStyleVector_swigregister = _COPASI.LocalStyleVector_swigregister
LocalStyleVector_swigregister(LocalStyleVector)

class GradientBaseVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGradientBase)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientBaseVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientBaseVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GradientBaseVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GradientBaseVector self)"""
        return _COPASI.GradientBaseVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GradientBaseVector self, CLGradientBase src) -> bool"""
        return _COPASI.GradientBaseVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GradientBaseVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GradientBaseVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GradientBaseVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientBaseVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GradientBaseVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GradientBaseVector_getObject(self, name)


    def size(self):
        """size(GradientBaseVector self) -> size_t"""
        return _COPASI.GradientBaseVector_size(self)


    def empty(self):
        """empty(GradientBaseVector self) -> bool"""
        return _COPASI.GradientBaseVector_empty(self)


    def clear(self):
        """clear(GradientBaseVector self)"""
        return _COPASI.GradientBaseVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GradientBaseVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GradientBaseVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GradientBaseVector self, unsigned int index)"""
        return _COPASI.GradientBaseVector_remove(self, index)


    def get(self, index):
        """get(GradientBaseVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientBaseVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GradientBaseVector self, CLGradientBase DISOWN) -> bool"""
        return _COPASI.GradientBaseVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GradientBaseVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientBaseVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GradientBaseVector self) -> size_t"""
        return _COPASI.GradientBaseVector___len__(self)

GradientBaseVector_swigregister = _COPASI.GradientBaseVector_swigregister
GradientBaseVector_swigregister(GradientBaseVector)

class CDataObjectVector(CDataContainer):
    """Proxy of C++ CDataVector<(CDataObject)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDataObjectVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CDataObjectVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(CDataObjectVector self)"""
        return _COPASI.CDataObjectVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(CDataObjectVector self, CDataObject src) -> bool"""
        return _COPASI.CDataObjectVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(CDataObjectVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CDataObjectVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(CDataObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.CDataObjectVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(CDataObjectVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CDataObjectVector_getObject(self, name)


    def size(self):
        """size(CDataObjectVector self) -> size_t"""
        return _COPASI.CDataObjectVector_size(self)


    def empty(self):
        """empty(CDataObjectVector self) -> bool"""
        return _COPASI.CDataObjectVector_empty(self)


    def clear(self):
        """clear(CDataObjectVector self)"""
        return _COPASI.CDataObjectVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(CDataObjectVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CDataObjectVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(CDataObjectVector self, unsigned int index)"""
        return _COPASI.CDataObjectVector_remove(self, index)


    def get(self, index):
        """get(CDataObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CDataObjectVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(CDataObjectVector self, CDataObject DISOWN) -> bool"""
        return _COPASI.CDataObjectVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(CDataObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.CDataObjectVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(CDataObjectVector self) -> size_t"""
        return _COPASI.CDataObjectVector___len__(self)

CDataObjectVector_swigregister = _COPASI.CDataObjectVector_swigregister
CDataObjectVector_swigregister(CDataObjectVector)

class GradientStopVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLGradientStop)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientStopVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientStopVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GradientStopVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(GradientStopVector self)"""
        return _COPASI.GradientStopVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(GradientStopVector self, CLGradientStop src) -> bool"""
        return _COPASI.GradientStopVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(GradientStopVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GradientStopVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(GradientStopVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientStopVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(GradientStopVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GradientStopVector_getObject(self, name)


    def size(self):
        """size(GradientStopVector self) -> size_t"""
        return _COPASI.GradientStopVector_size(self)


    def empty(self):
        """empty(GradientStopVector self) -> bool"""
        return _COPASI.GradientStopVector_empty(self)


    def clear(self):
        """clear(GradientStopVector self)"""
        return _COPASI.GradientStopVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(GradientStopVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GradientStopVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(GradientStopVector self, unsigned int index)"""
        return _COPASI.GradientStopVector_remove(self, index)


    def get(self, index):
        """get(GradientStopVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientStopVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(GradientStopVector self, CLGradientStop DISOWN) -> bool"""
        return _COPASI.GradientStopVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(GradientStopVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientStopVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(GradientStopVector self) -> size_t"""
        return _COPASI.GradientStopVector___len__(self)

GradientStopVector_swigregister = _COPASI.GradientStopVector_swigregister
GradientStopVector_swigregister(GradientStopVector)

class LineEndingVector(CDataContainer):
    """Proxy of C++ CDataVector<(CLLineEnding)> class."""

    __swig_setmethods__ = {}
    for _s in [CDataContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineEndingVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineEndingVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LineEndingVector
    __del__ = lambda self: None

    def cleanup(self):
        """cleanup(LineEndingVector self)"""
        return _COPASI.LineEndingVector_cleanup(self)


    def addCopy(self, src):
        """addCopy(LineEndingVector self, CLLineEnding src) -> bool"""
        return _COPASI.LineEndingVector_addCopy(self, src)


    def swap(self, indexFrom, indexTo):
        """swap(LineEndingVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LineEndingVector_swap(self, indexFrom, indexTo)


    def add(self, pObject, adopt=True):
        """add(LineEndingVector self, CDataObject pObject) -> bool"""
        return _COPASI.LineEndingVector_add(self, pObject, adopt)


    def getObject(self, name):
        """getObject(LineEndingVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LineEndingVector_getObject(self, name)


    def size(self):
        """size(LineEndingVector self) -> size_t"""
        return _COPASI.LineEndingVector_size(self)


    def empty(self):
        """empty(LineEndingVector self) -> bool"""
        return _COPASI.LineEndingVector_empty(self)


    def clear(self):
        """clear(LineEndingVector self)"""
        return _COPASI.LineEndingVector_clear(self)


    def getIndex(self, pObject):
        """getIndex(LineEndingVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LineEndingVector_getIndex(self, pObject)


    def remove(self, index):
        """remove(LineEndingVector self, unsigned int index)"""
        return _COPASI.LineEndingVector_remove(self, index)


    def get(self, index):
        """get(LineEndingVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LineEndingVector_get(self, index)


    def addAndOwn(self, DISOWN):
        """addAndOwn(LineEndingVector self, CLLineEnding DISOWN) -> bool"""
        return _COPASI.LineEndingVector_addAndOwn(self, DISOWN)


    def removeObject(self, pObject):
        """removeObject(LineEndingVector self, CDataObject pObject) -> bool"""
        return _COPASI.LineEndingVector_removeObject(self, pObject)


    def __len__(self):
        """__len__(LineEndingVector self) -> size_t"""
        return _COPASI.LineEndingVector___len__(self)

LineEndingVector_swigregister = _COPASI.LineEndingVector_swigregister
LineEndingVector_swigregister(LineEndingVector)

class RenderPointStdVector(_object):
    """Proxy of C++ std::vector<(p.CLRenderPoint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderPointStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderPointStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(RenderPointStdVector self) -> SwigPyIterator"""
        return _COPASI.RenderPointStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector___bool__(self)


    def __len__(self):
        """__len__(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j) -> RenderPointStdVector"""
        return _COPASI.RenderPointStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j)
        __setslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j, RenderPointStdVector v)
        """
        return _COPASI.RenderPointStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j)"""
        return _COPASI.RenderPointStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i)
        __delitem__(RenderPointStdVector self, PySliceObject * slice)
        """
        return _COPASI.RenderPointStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(RenderPointStdVector self, PySliceObject * slice) -> RenderPointStdVector
        __getitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i) -> CLRenderPoint
        """
        return _COPASI.RenderPointStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(RenderPointStdVector self, PySliceObject * slice, RenderPointStdVector v)
        __setitem__(RenderPointStdVector self, PySliceObject * slice)
        __setitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector___setitem__(self, *args)


    def pop(self):
        """pop(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_pop(self)


    def append(self, x):
        """append(RenderPointStdVector self, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_append(self, x)


    def empty(self):
        """empty(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector_empty(self)


    def size(self):
        """size(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector_size(self)


    def swap(self, v):
        """swap(RenderPointStdVector self, RenderPointStdVector v)"""
        return _COPASI.RenderPointStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::reverse_iterator"""
        return _COPASI.RenderPointStdVector_rbegin(self)


    def rend(self):
        """rend(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::reverse_iterator"""
        return _COPASI.RenderPointStdVector_rend(self)


    def clear(self):
        """clear(RenderPointStdVector self)"""
        return _COPASI.RenderPointStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::allocator_type"""
        return _COPASI.RenderPointStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(RenderPointStdVector self)"""
        return _COPASI.RenderPointStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos) -> std::vector< CLRenderPoint * >::iterator
        erase(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator first, std::vector< CLRenderPoint * >::iterator last) -> std::vector< CLRenderPoint * >::iterator
        """
        return _COPASI.RenderPointStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.CLRenderPoint)> self) -> RenderPointStdVector
        __init__(std::vector<(p.CLRenderPoint)> self, RenderPointStdVector arg2) -> RenderPointStdVector
        __init__(std::vector<(p.CLRenderPoint)> self, std::vector< CLRenderPoint * >::size_type size) -> RenderPointStdVector
        __init__(std::vector<(p.CLRenderPoint)> self, std::vector< CLRenderPoint * >::size_type size, CLRenderPoint value) -> RenderPointStdVector
        """
        this = _COPASI.new_RenderPointStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(RenderPointStdVector self, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_push_back(self, x)


    def front(self):
        """front(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_front(self)


    def back(self):
        """back(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_back(self)


    def assign(self, n, x):
        """assign(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type n, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type new_size)
        resize(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type new_size, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos, CLRenderPoint x) -> std::vector< CLRenderPoint * >::iterator
        insert(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos, std::vector< CLRenderPoint * >::size_type n, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type n)"""
        return _COPASI.RenderPointStdVector_reserve(self, n)


    def capacity(self):
        """capacity(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_RenderPointStdVector
    __del__ = lambda self: None
RenderPointStdVector_swigregister = _COPASI.RenderPointStdVector_swigregister
RenderPointStdVector_swigregister(RenderPointStdVector)

class CFluxMode(_object):
    """Proxy of C++ CFluxMode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFluxMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFluxMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CFluxMode self) -> CFluxMode
        __init__(CFluxMode self, CFluxMode src) -> CFluxMode
        """
        this = _COPASI.new_CFluxMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CFluxMode
    __del__ = lambda self: None

    def isReversible(self):
        """isReversible(CFluxMode self) -> bool"""
        return _COPASI.CFluxMode_isReversible(self)


    def size(self):
        """size(CFluxMode self) -> size_t"""
        return _COPASI.CFluxMode_size(self)


    def isReversed(self, mode):
        """isReversed(CFluxMode self, CFluxMode mode) -> bool"""
        return _COPASI.CFluxMode_isReversed(self, mode)


    def getMultiplier(self, index):
        """getMultiplier(CFluxMode self, size_t const & index) -> double"""
        return _COPASI.CFluxMode_getMultiplier(self, index)

CFluxMode_swigregister = _COPASI.CFluxMode_swigregister
CFluxMode_swigregister(CFluxMode)

class CEFMTask(CCopasiTask):
    """Proxy of C++ CEFMTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEFMTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEFMTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CEFMTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CEFMTask
        __init__(CEFMTask self, CDataContainer pParent) -> CEFMTask
        __init__(CEFMTask self, CEFMTask src, CDataContainer pParent) -> CEFMTask
        """
        this = _COPASI.new_CEFMTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEFMTask
    __del__ = lambda self: None

    def setCallBack(self, pCallBack):
        """setCallBack(CEFMTask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CEFMTask_setCallBack(self, pCallBack)


    def getFluxModes(self):
        """getFluxModes(CEFMTask self) -> CFluxModeStdVector"""
        return _COPASI.CEFMTask_getFluxModes(self)


    def getFluxModeDescription(self, fluxMode):
        """getFluxModeDescription(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getFluxModeDescription(self, fluxMode)


    def getNetReaction(self, fluxMode):
        """getNetReaction(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getNetReaction(self, fluxMode)


    def getInternalSpecies(self, fluxMode):
        """getInternalSpecies(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getInternalSpecies(self, fluxMode)

CEFMTask_swigregister = _COPASI.CEFMTask_swigregister
CEFMTask_swigregister(CEFMTask)

class CEFMMethod(CCopasiMethod):
    """Proxy of C++ CEFMMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEFMMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEFMMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CEFMMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CEFMMethod
        __init__(CEFMMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CEFMMethod
        __init__(CEFMMethod self, CEFMMethod src, CDataContainer pParent) -> CEFMMethod
        """
        this = _COPASI.new_CEFMMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEFMMethod
    __del__ = lambda self: None

    def calculate(self):
        """calculate(CEFMMethod self) -> bool"""
        return _COPASI.CEFMMethod_calculate(self)


    def initialize(self):
        """initialize(CEFMMethod self) -> bool"""
        return _COPASI.CEFMMethod_initialize(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CEFMMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CEFMMethod_isValidProblem(self, pProblem)

CEFMMethod_swigregister = _COPASI.CEFMMethod_swigregister
CEFMMethod_swigregister(CEFMMethod)

class CEFMProblem(CCopasiProblem):
    """Proxy of C++ CEFMProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEFMProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEFMProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CEFMProblem self, CDataContainer pParent) -> CEFMProblem
        __init__(CEFMProblem self) -> CEFMProblem
        __init__(CEFMProblem self, CEFMProblem src, CDataContainer pParent) -> CEFMProblem
        """
        this = _COPASI.new_CEFMProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CEFMProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CEFMProblem self) -> bool"""
        return _COPASI.CEFMProblem_elevateChildren(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CEFMProblem self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CEFMProblem_setCallBack(self, pCallBack)


    def getFluxModes(self):
        """getFluxModes(CEFMProblem self) -> CFluxModeStdVector"""
        return _COPASI.CEFMProblem_getFluxModes(self)

CEFMProblem_swigregister = _COPASI.CEFMProblem_swigregister
CEFMProblem_swigregister(CEFMProblem)

class CCrossSectionTask(CTrajectoryTask):
    """Proxy of C++ CCrossSectionTask class."""

    __swig_setmethods__ = {}
    for _s in [CTrajectoryTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCrossSectionTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CTrajectoryTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCrossSectionTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCrossSectionTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CCrossSectionTask
        __init__(CCrossSectionTask self, CDataContainer pParent) -> CCrossSectionTask
        __init__(CCrossSectionTask self, CCrossSectionTask src, CDataContainer pParent) -> CCrossSectionTask
        """
        this = _COPASI.new_CCrossSectionTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCrossSectionTask
    __del__ = lambda self: None

    def createEvent(self):
        """createEvent(CCrossSectionTask self)"""
        return _COPASI.CCrossSectionTask_createEvent(self)


    def removeEvent(self):
        """removeEvent(CCrossSectionTask self)"""
        return _COPASI.CCrossSectionTask_removeEvent(self)


    def restore(self):
        """restore(CCrossSectionTask self) -> bool"""
        return _COPASI.CCrossSectionTask_restore(self)

CCrossSectionTask_swigregister = _COPASI.CCrossSectionTask_swigregister
CCrossSectionTask_swigregister(CCrossSectionTask)

class CCrossSectionMethod(CCopasiMethod):
    """Proxy of C++ CCrossSectionMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCrossSectionMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCrossSectionMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCrossSectionMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CCrossSectionMethod
        __init__(CCrossSectionMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CCrossSectionMethod
        __init__(CCrossSectionMethod self, CCrossSectionMethod src, CDataContainer pParent) -> CCrossSectionMethod
        """
        this = _COPASI.new_CCrossSectionMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCrossSectionMethod
    __del__ = lambda self: None

    def process(self, handler):
        """process(CCrossSectionMethod self, CProcessReport handler) -> bool"""
        return _COPASI.CCrossSectionMethod_process(self, handler)


    def initialize(self, problem):
        """initialize(CCrossSectionMethod self, CCrossSectionProblem problem) -> bool"""
        return _COPASI.CCrossSectionMethod_initialize(self, problem)


    def isValidProblem(self, pProblem):
        """isValidProblem(CCrossSectionMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CCrossSectionMethod_isValidProblem(self, pProblem)

CCrossSectionMethod_swigregister = _COPASI.CCrossSectionMethod_swigregister
CCrossSectionMethod_swigregister(CCrossSectionMethod)

class CCrossSectionProblem(CTrajectoryProblem):
    """Proxy of C++ CCrossSectionProblem class."""

    __swig_setmethods__ = {}
    for _s in [CTrajectoryProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCrossSectionProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CTrajectoryProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCrossSectionProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CCrossSectionProblem self, CDataContainer pParent) -> CCrossSectionProblem
        __init__(CCrossSectionProblem self) -> CCrossSectionProblem
        __init__(CCrossSectionProblem self, CCrossSectionProblem src, CDataContainer pParent) -> CCrossSectionProblem
        """
        this = _COPASI.new_CCrossSectionProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CCrossSectionProblem
    __del__ = lambda self: None

    def getFlagLimitCrossings(self):
        """getFlagLimitCrossings(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitCrossings(self)


    def getCrossingsLimit(self):
        """getCrossingsLimit(CCrossSectionProblem self) -> unsigned int const &"""
        return _COPASI.CCrossSectionProblem_getCrossingsLimit(self)


    def getFlagLimitOutCrossings(self):
        """getFlagLimitOutCrossings(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutCrossings(self)


    def getOutCrossingsLimit(self):
        """getOutCrossingsLimit(CCrossSectionProblem self) -> unsigned int const &"""
        return _COPASI.CCrossSectionProblem_getOutCrossingsLimit(self)


    def getFlagLimitOutTime(self):
        """getFlagLimitOutTime(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutTime(self)


    def getTimeLimit(self):
        """getTimeLimit(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getTimeLimit(self)


    def getSingleObjectCN(self):
        """getSingleObjectCN(CCrossSectionProblem self) -> std::string const &"""
        return _COPASI.CCrossSectionProblem_getSingleObjectCN(self)


    def setSingleObjectCN(self, *args):
        """
        setSingleObjectCN(CCrossSectionProblem self, std::string const & cn)
        setSingleObjectCN(CCrossSectionProblem self, CDataObject pObject)
        """
        return _COPASI.CCrossSectionProblem_setSingleObjectCN(self, *args)


    def getThreshold(self):
        """getThreshold(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getThreshold(self)


    def setThreshold(self, threshold):
        """setThreshold(CCrossSectionProblem self, double const & threshold)"""
        return _COPASI.CCrossSectionProblem_setThreshold(self, threshold)


    def getFlagLimitConvergence(self):
        """getFlagLimitConvergence(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitConvergence(self)


    def getConvergenceTolerance(self):
        """getConvergenceTolerance(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getConvergenceTolerance(self)


    def setFlagLimitConvergence(self, flagLimitConvergence):
        """setFlagLimitConvergence(CCrossSectionProblem self, bool flagLimitConvergence)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitConvergence(self, flagLimitConvergence)


    def setConvergenceTolerance(self, convergenceTolerance):
        """setConvergenceTolerance(CCrossSectionProblem self, double const & convergenceTolerance)"""
        return _COPASI.CCrossSectionProblem_setConvergenceTolerance(self, convergenceTolerance)


    def getFlagLimitOutConvergence(self):
        """getFlagLimitOutConvergence(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutConvergence(self)


    def getConvergenceOutTolerance(self):
        """getConvergenceOutTolerance(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getConvergenceOutTolerance(self)


    def setFlagLimitOutConvergence(self, flagLimitConvergence):
        """setFlagLimitOutConvergence(CCrossSectionProblem self, bool flagLimitConvergence)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutConvergence(self, flagLimitConvergence)


    def setConvergenceOutTolerance(self, convergenceTolerance):
        """setConvergenceOutTolerance(CCrossSectionProblem self, double const & convergenceTolerance)"""
        return _COPASI.CCrossSectionProblem_setConvergenceOutTolerance(self, convergenceTolerance)


    def isPositiveDirection(self):
        """isPositiveDirection(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_isPositiveDirection(self)


    def setPositiveDirection(self, isPositive):
        """setPositiveDirection(CCrossSectionProblem self, bool isPositive)"""
        return _COPASI.CCrossSectionProblem_setPositiveDirection(self, isPositive)


    def setFlagLimitCrossings(self, flagLimitCrossing):
        """setFlagLimitCrossings(CCrossSectionProblem self, bool flagLimitCrossing)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitCrossings(self, flagLimitCrossing)


    def setCrossingsLimit(self, crossingLimit):
        """setCrossingsLimit(CCrossSectionProblem self, unsigned int const & crossingLimit)"""
        return _COPASI.CCrossSectionProblem_setCrossingsLimit(self, crossingLimit)


    def setFlagLimitOutCrossings(self, flagLimitCrossing):
        """setFlagLimitOutCrossings(CCrossSectionProblem self, bool flagLimitCrossing)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutCrossings(self, flagLimitCrossing)


    def setOutCrossingsLimit(self, crossingLimit):
        """setOutCrossingsLimit(CCrossSectionProblem self, unsigned int const & crossingLimit)"""
        return _COPASI.CCrossSectionProblem_setOutCrossingsLimit(self, crossingLimit)


    def setFlagLimitOutTime(self, flagLimitTime):
        """setFlagLimitOutTime(CCrossSectionProblem self, bool flagLimitTime)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutTime(self, flagLimitTime)


    def setTimeLimit(self, timeLimit):
        """setTimeLimit(CCrossSectionProblem self, double const & timeLimit)"""
        return _COPASI.CCrossSectionProblem_setTimeLimit(self, timeLimit)

CCrossSectionProblem_swigregister = _COPASI.CCrossSectionProblem_swigregister
CCrossSectionProblem_swigregister(CCrossSectionProblem)

class CMoietiesTask(CCopasiTask):
    """Proxy of C++ CMoietiesTask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMoietiesTask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMoietiesTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMoietiesTask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CMoietiesTask
        __init__(CMoietiesTask self, CDataContainer pParent) -> CMoietiesTask
        __init__(CMoietiesTask self, CMoietiesTask src, CDataContainer pParent) -> CMoietiesTask
        """
        this = _COPASI.new_CMoietiesTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMoietiesTask
    __del__ = lambda self: None

    def setCallBack(self, pCallBack):
        """setCallBack(CMoietiesTask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CMoietiesTask_setCallBack(self, pCallBack)

CMoietiesTask_swigregister = _COPASI.CMoietiesTask_swigregister
CMoietiesTask_swigregister(CMoietiesTask)

class CMoietiesProblem(CCopasiProblem):
    """Proxy of C++ CMoietiesProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMoietiesProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMoietiesProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMoietiesProblem self, CTaskEnum::Task const & type, CDataContainer pParent) -> CMoietiesProblem
        __init__(CMoietiesProblem self, CTaskEnum::Task const & type) -> CMoietiesProblem
        __init__(CMoietiesProblem self) -> CMoietiesProblem
        __init__(CMoietiesProblem self, CMoietiesProblem src, CDataContainer pParent) -> CMoietiesProblem
        """
        this = _COPASI.new_CMoietiesProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMoietiesProblem
    __del__ = lambda self: None
CMoietiesProblem_swigregister = _COPASI.CMoietiesProblem_swigregister
CMoietiesProblem_swigregister(CMoietiesProblem)

class CMoietiesMethod(CCopasiMethod):
    """Proxy of C++ CMoietiesMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMoietiesMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMoietiesMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMoietiesMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CMoietiesMethod
        __init__(CMoietiesMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CMoietiesMethod
        __init__(CMoietiesMethod self, CDataContainer pParent) -> CMoietiesMethod
        __init__(CMoietiesMethod self, CMoietiesMethod src, CDataContainer pParent) -> CMoietiesMethod
        """
        this = _COPASI.new_CMoietiesMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CMoietiesMethod
    __del__ = lambda self: None

    def process(self):
        """process(CMoietiesMethod self) -> bool"""
        return _COPASI.CMoietiesMethod_process(self)


    def setProblem(self, pProblem):
        """setProblem(CMoietiesMethod self, CMoietiesProblem pProblem)"""
        return _COPASI.CMoietiesMethod_setProblem(self, pProblem)

CMoietiesMethod_swigregister = _COPASI.CMoietiesMethod_swigregister
CMoietiesMethod_swigregister(CMoietiesMethod)

class CLNATask(CCopasiTask):
    """Proxy of C++ CLNATask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLNATask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLNATask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLNATask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CLNATask
        __init__(CLNATask self, CDataContainer pParent) -> CLNATask
        __init__(CLNATask self, CLNATask src, CDataContainer pParent) -> CLNATask
        """
        this = _COPASI.new_CLNATask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLNATask
    __del__ = lambda self: None

    def updateMatrices(self):
        """updateMatrices(CLNATask self) -> bool"""
        return _COPASI.CLNATask_updateMatrices(self)


    def setCallBack(self, pCallBack):
        """setCallBack(CLNATask self, CProcessReport pCallBack) -> bool"""
        return _COPASI.CLNATask_setCallBack(self, pCallBack)

CLNATask_swigregister = _COPASI.CLNATask_swigregister
CLNATask_swigregister(CLNATask)

class CLNAProblem(CCopasiProblem):
    """Proxy of C++ CLNAProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLNAProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLNAProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CLNAProblem self, CDataContainer pParent) -> CLNAProblem
        __init__(CLNAProblem self) -> CLNAProblem
        __init__(CLNAProblem self, CLNAProblem src, CDataContainer pParent) -> CLNAProblem
        """
        this = _COPASI.new_CLNAProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLNAProblem
    __del__ = lambda self: None

    def setSteadyStateRequested(self, steadyStateRequested):
        """setSteadyStateRequested(CLNAProblem self, bool const & steadyStateRequested)"""
        return _COPASI.CLNAProblem_setSteadyStateRequested(self, steadyStateRequested)


    def isSteadyStateRequested(self):
        """isSteadyStateRequested(CLNAProblem self) -> bool"""
        return _COPASI.CLNAProblem_isSteadyStateRequested(self)


    def getSubTask(self):
        """getSubTask(CLNAProblem self) -> CSteadyStateTask"""
        return _COPASI.CLNAProblem_getSubTask(self)

CLNAProblem_swigregister = _COPASI.CLNAProblem_swigregister
CLNAProblem_swigregister(CLNAProblem)

LNA_OK = _COPASI.LNA_OK
LNA_NOT_OK = _COPASI.LNA_NOT_OK
class CLNAMethod(CCopasiMethod):
    """Proxy of C++ CLNAMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLNAMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLNAMethod, name)
    __repr__ = _swig_repr
    allNeg = _COPASI.CLNAMethod_allNeg
    nonNegEigenvaluesExist = _COPASI.CLNAMethod_nonNegEigenvaluesExist

    def __init__(self, *args):
        """
        __init__(CLNAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CLNAMethod
        __init__(CLNAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CLNAMethod
        __init__(CLNAMethod self, CDataContainer pParent) -> CLNAMethod
        __init__(CLNAMethod self, CLNAMethod src, CDataContainer pParent) -> CLNAMethod
        """
        this = _COPASI.new_CLNAMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CLNAMethod
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CLNAMethod self) -> bool"""
        return _COPASI.CLNAMethod_elevateChildren(self)


    def getBMatrixReduced(self):
        """getBMatrixReduced(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getBMatrixReduced(self)


    def getBMatrixReducedAnn(self):
        """getBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getBMatrixReducedAnn(self)


    def getCovarianceMatrix(self):
        """getCovarianceMatrix(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getCovarianceMatrix(self)


    def getCovarianceMatrixAnn(self):
        """getCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getCovarianceMatrixAnn(self)


    def getCovarianceMatrixReduced(self):
        """getCovarianceMatrixReduced(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getCovarianceMatrixReduced(self)


    def getCovarianceMatrixReducedAnn(self):
        """getCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getCovarianceMatrixReducedAnn(self)


    def getScaledBMatrixReducedAnn(self):
        """getScaledBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledBMatrixReducedAnn(self)


    def getUnscaledBMatrixReducedAnn(self):
        """getUnscaledBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledBMatrixReducedAnn(self)


    def getScaledCovarianceMatrixAnn(self):
        """getScaledCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledCovarianceMatrixAnn(self)


    def getScaledCovarianceMatrixReducedAnn(self):
        """getScaledCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledCovarianceMatrixReducedAnn(self)


    def getUnscaledCovarianceMatrixAnn(self):
        """getUnscaledCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledCovarianceMatrixAnn(self)


    def getUnscaledCovarianceMatrixReducedAnn(self):
        """getUnscaledCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledCovarianceMatrixReducedAnn(self)


    def calculateCovarianceMatrixReduced(self):
        """calculateCovarianceMatrixReduced(CLNAMethod self) -> int"""
        return _COPASI.CLNAMethod_calculateCovarianceMatrixReduced(self)


    def calculateCovarianceMatrixFull(self):
        """calculateCovarianceMatrixFull(CLNAMethod self)"""
        return _COPASI.CLNAMethod_calculateCovarianceMatrixFull(self)


    def resizeAllMatrices(self):
        """resizeAllMatrices(CLNAMethod self)"""
        return _COPASI.CLNAMethod_resizeAllMatrices(self)


    def CalculateLNA(self):
        """CalculateLNA(CLNAMethod self) -> int"""
        return _COPASI.CLNAMethod_CalculateLNA(self)


    def process(self):
        """process(CLNAMethod self) -> bool"""
        return _COPASI.CLNAMethod_process(self)


    def setSteadyStateStatus(self, SSStatus):
        """setSteadyStateStatus(CLNAMethod self, CSteadyStateMethod::ReturnCode SSStatus)"""
        return _COPASI.CLNAMethod_setSteadyStateStatus(self, SSStatus)


    def setEigenValueStatus(self, status):
        """setEigenValueStatus(CLNAMethod self, CLNAMethod::EVStatus status)"""
        return _COPASI.CLNAMethod_setEigenValueStatus(self, status)


    def getSteadyStateStatus(self):
        """getSteadyStateStatus(CLNAMethod self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CLNAMethod_getSteadyStateStatus(self)


    def getEigenValueStatus(self):
        """getEigenValueStatus(CLNAMethod self) -> CLNAMethod::EVStatus const &"""
        return _COPASI.CLNAMethod_getEigenValueStatus(self)


    def setSteadyStateResolution(self, factor):
        """setSteadyStateResolution(CLNAMethod self, double factor)"""
        return _COPASI.CLNAMethod_setSteadyStateResolution(self, factor)


    def isValidProblem(self, pProblem):
        """isValidProblem(CLNAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CLNAMethod_isValidProblem(self, pProblem)

CLNAMethod_swigregister = _COPASI.CLNAMethod_swigregister
CLNAMethod_swigregister(CLNAMethod)

class CTSSATask(CCopasiTask):
    """Proxy of C++ CTSSATask class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTSSATask, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTSSATask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CTSSATask self, CDataContainer pParent, CTaskEnum::Task const & type) -> CTSSATask
        __init__(CTSSATask self, CDataContainer pParent) -> CTSSATask
        __init__(CTSSATask self, CTSSATask src, CDataContainer pParent) -> CTSSATask
        """
        this = _COPASI.new_CTSSATask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTSSATask
    __del__ = lambda self: None

    def updateMatrices(self):
        """updateMatrices(CTSSATask self) -> bool"""
        return _COPASI.CTSSATask_updateMatrices(self)


    def processStart(self, useInitialValues):
        """processStart(CTSSATask self, bool const & useInitialValues)"""
        return _COPASI.CTSSATask_processStart(self, useInitialValues)


    def processStep(self, nextTime):
        """processStep(CTSSATask self, double const & nextTime) -> bool"""
        return _COPASI.CTSSATask_processStep(self, nextTime)


    def getTimeSeries(self):
        """getTimeSeries(CTSSATask self) -> CTimeSeries"""
        return _COPASI.CTSSATask_getTimeSeries(self)

CTSSATask_swigregister = _COPASI.CTSSATask_swigregister
CTSSATask_swigregister(CTSSATask)

class CTSSAProblem(CCopasiProblem):
    """Proxy of C++ CTSSAProblem class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTSSAProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTSSAProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CTSSAProblem self, CDataContainer pParent) -> CTSSAProblem
        __init__(CTSSAProblem self) -> CTSSAProblem
        __init__(CTSSAProblem self, CTSSAProblem src, CDataContainer pParent) -> CTSSAProblem
        """
        this = _COPASI.new_CTSSAProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CTSSAProblem
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(CTSSAProblem self) -> bool"""
        return _COPASI.CTSSAProblem_elevateChildren(self)


    def setStepNumber(self, stepNumber):
        """setStepNumber(CTSSAProblem self, unsigned int const & stepNumber)"""
        return _COPASI.CTSSAProblem_setStepNumber(self, stepNumber)


    def getStepNumber(self):
        """getStepNumber(CTSSAProblem self) -> unsigned int const &"""
        return _COPASI.CTSSAProblem_getStepNumber(self)


    def setStepSize(self, stepSize):
        """setStepSize(CTSSAProblem self, double const & stepSize)"""
        return _COPASI.CTSSAProblem_setStepSize(self, stepSize)


    def getStepSize(self):
        """getStepSize(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getStepSize(self)


    def setDuration(self, duration):
        """setDuration(CTSSAProblem self, double const & duration)"""
        return _COPASI.CTSSAProblem_setDuration(self, duration)


    def getDuration(self):
        """getDuration(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getDuration(self)


    def setOutputStartTime(self, endTime):
        """setOutputStartTime(CTSSAProblem self, double const & endTime)"""
        return _COPASI.CTSSAProblem_setOutputStartTime(self, endTime)


    def getOutputStartTime(self):
        """getOutputStartTime(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getOutputStartTime(self)


    def setTimeSeriesRequested(self, flag):
        """setTimeSeriesRequested(CTSSAProblem self, bool flag)"""
        return _COPASI.CTSSAProblem_setTimeSeriesRequested(self, flag)


    def timeSeriesRequested(self):
        """timeSeriesRequested(CTSSAProblem self) -> bool"""
        return _COPASI.CTSSAProblem_timeSeriesRequested(self)

CTSSAProblem_swigregister = _COPASI.CTSSAProblem_swigregister
CTSSAProblem_swigregister(CTSSAProblem)

class CTSSAMethod(CCopasiMethod):
    """Proxy of C++ CTSSAMethod class."""

    __swig_setmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTSSAMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CCopasiMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTSSAMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CTSSAMethod
    __del__ = lambda self: None

    def getTableNames(self):
        """getTableNames(CTSSAMethod self) -> StringStdVector"""
        return _COPASI.CTSSAMethod_getTableNames(self)


    def getTable(self, name):
        """getTable(CTSSAMethod self, std::string const & name) -> CDataArray"""
        return _COPASI.CTSSAMethod_getTable(self, name)


    def setAnnotationM(self, s):
        """setAnnotationM(CTSSAMethod self, size_t s) -> bool"""
        return _COPASI.CTSSAMethod_setAnnotationM(self, s)


    def initializeOutput(self):
        """initializeOutput(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_initializeOutput(self)


    def setProblem(self, problem):
        """setProblem(CTSSAMethod self, CTSSAProblem problem)"""
        return _COPASI.CTSSAMethod_setProblem(self, problem)


    def step(self, deltaT):
        """step(CTSSAMethod self, double const & deltaT)"""
        return _COPASI.CTSSAMethod_step(self, deltaT)


    def start(self):
        """start(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_start(self)


    def isValidProblem(self, pProblem):
        """isValidProblem(CTSSAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CTSSAMethod_isValidProblem(self, pProblem)


    def initializeParameter(self):
        """initializeParameter(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_initializeParameter(self)


    def getCurrentStep(self):
        """getCurrentStep(CTSSAMethod self) -> int const &"""
        return _COPASI.CTSSAMethod_getCurrentStep(self)


    def getVec_TimeScale(self, step):
        """getVec_TimeScale(CTSSAMethod self, int step) -> FloatVector"""
        return _COPASI.CTSSAMethod_getVec_TimeScale(self, step)


    def getTimeForStep(self, step):
        """getTimeForStep(CTSSAMethod self, int step) -> double"""
        return _COPASI.CTSSAMethod_getTimeForStep(self, step)


    def setVectors(self, slowMode):
        """setVectors(CTSSAMethod self, int slowMode)"""
        return _COPASI.CTSSAMethod_setVectors(self, slowMode)


    def emptyVectors(self):
        """emptyVectors(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_emptyVectors(self)


    def createAnnotationsM(self):
        """createAnnotationsM(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_createAnnotationsM(self)

CTSSAMethod_swigregister = _COPASI.CTSSAMethod_swigregister
CTSSAMethod_swigregister(CTSSAMethod)

class COptMethodCoranaWalk(COptMethod):
    """Proxy of C++ COptMethodCoranaWalk class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodCoranaWalk, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodCoranaWalk, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodCoranaWalk self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodCoranaWalk
        __init__(COptMethodCoranaWalk self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodCoranaWalk
        __init__(COptMethodCoranaWalk self, CDataContainer pParent) -> COptMethodCoranaWalk
        __init__(COptMethodCoranaWalk self, COptMethodCoranaWalk src, CDataContainer pParent) -> COptMethodCoranaWalk
        """
        this = _COPASI.new_COptMethodCoranaWalk(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodCoranaWalk
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodCoranaWalk self) -> bool"""
        return _COPASI.COptMethodCoranaWalk_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodCoranaWalk self) -> unsigned int"""
        return _COPASI.COptMethodCoranaWalk_getMaxLogVerbosity(self)

COptMethodCoranaWalk_swigregister = _COPASI.COptMethodCoranaWalk_swigregister
COptMethodCoranaWalk_swigregister(COptMethodCoranaWalk)

class COptMethodDE(COptPopulationMethod):
    """Proxy of C++ COptMethodDE class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodDE, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodDE, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodDE self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodDE
        __init__(COptMethodDE self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodDE
        __init__(COptMethodDE self, CDataContainer pParent) -> COptMethodDE
        __init__(COptMethodDE self, COptMethodDE src, CDataContainer pParent) -> COptMethodDE
        """
        this = _COPASI.new_COptMethodDE(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodDE
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodDE self) -> bool"""
        return _COPASI.COptMethodDE_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodDE self) -> unsigned int"""
        return _COPASI.COptMethodDE_getMaxLogVerbosity(self)

COptMethodDE_swigregister = _COPASI.COptMethodDE_swigregister
COptMethodDE_swigregister(COptMethodDE)

class COptMethodEP(COptPopulationMethod):
    """Proxy of C++ COptMethodEP class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodEP, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodEP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodEP self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodEP
        __init__(COptMethodEP self, COptMethodEP src, CDataContainer pParent) -> COptMethodEP
        """
        this = _COPASI.new_COptMethodEP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodEP
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodEP self) -> bool"""
        return _COPASI.COptMethodEP_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodEP self) -> unsigned int"""
        return _COPASI.COptMethodEP_getMaxLogVerbosity(self)

COptMethodEP_swigregister = _COPASI.COptMethodEP_swigregister
COptMethodEP_swigregister(COptMethodEP)

class COptMethodGA(COptPopulationMethod):
    """Proxy of C++ COptMethodGA class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodGA, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodGA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodGA self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodGA
        __init__(COptMethodGA self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodGA
        __init__(COptMethodGA self, CDataContainer pParent) -> COptMethodGA
        __init__(COptMethodGA self, COptMethodGA src, CDataContainer pParent) -> COptMethodGA
        """
        this = _COPASI.new_COptMethodGA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodGA
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodGA self) -> bool"""
        return _COPASI.COptMethodGA_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodGA self) -> unsigned int"""
        return _COPASI.COptMethodGA_getMaxLogVerbosity(self)

COptMethodGA_swigregister = _COPASI.COptMethodGA_swigregister
COptMethodGA_swigregister(COptMethodGA)

class COptMethodGASR(COptPopulationMethod):
    """Proxy of C++ COptMethodGASR class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodGASR, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodGASR, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodGASR self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodGASR
        __init__(COptMethodGASR self, COptMethodGASR src, CDataContainer pParent) -> COptMethodGASR
        """
        this = _COPASI.new_COptMethodGASR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodGASR
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodGASR self) -> bool"""
        return _COPASI.COptMethodGASR_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodGASR self) -> unsigned int"""
        return _COPASI.COptMethodGASR_getMaxLogVerbosity(self)

COptMethodGASR_swigregister = _COPASI.COptMethodGASR_swigregister
COptMethodGASR_swigregister(COptMethodGASR)

class COptMethodHookeJeeves(COptMethod):
    """Proxy of C++ COptMethodHookeJeeves class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodHookeJeeves, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodHookeJeeves, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodHookeJeeves self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodHookeJeeves
        __init__(COptMethodHookeJeeves self, COptMethodHookeJeeves src, CDataContainer pParent) -> COptMethodHookeJeeves
        """
        this = _COPASI.new_COptMethodHookeJeeves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodHookeJeeves
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodHookeJeeves self) -> bool"""
        return _COPASI.COptMethodHookeJeeves_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodHookeJeeves self) -> unsigned int"""
        return _COPASI.COptMethodHookeJeeves_getMaxLogVerbosity(self)

COptMethodHookeJeeves_swigregister = _COPASI.COptMethodHookeJeeves_swigregister
COptMethodHookeJeeves_swigregister(COptMethodHookeJeeves)

class COptMethodLevenbergMarquardt(COptMethod):
    """Proxy of C++ COptMethodLevenbergMarquardt class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodLevenbergMarquardt, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodLevenbergMarquardt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodLevenbergMarquardt self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodLevenbergMarquardt
        __init__(COptMethodLevenbergMarquardt self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodLevenbergMarquardt
        __init__(COptMethodLevenbergMarquardt self, CDataContainer pParent) -> COptMethodLevenbergMarquardt
        __init__(COptMethodLevenbergMarquardt self, COptMethodLevenbergMarquardt src, CDataContainer pParent) -> COptMethodLevenbergMarquardt
        """
        this = _COPASI.new_COptMethodLevenbergMarquardt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodLevenbergMarquardt
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodLevenbergMarquardt self) -> bool"""
        return _COPASI.COptMethodLevenbergMarquardt_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodLevenbergMarquardt self) -> unsigned int"""
        return _COPASI.COptMethodLevenbergMarquardt_getMaxLogVerbosity(self)

COptMethodLevenbergMarquardt_swigregister = _COPASI.COptMethodLevenbergMarquardt_swigregister
COptMethodLevenbergMarquardt_swigregister(COptMethodLevenbergMarquardt)

class COptMethodNelderMead(COptMethod):
    """Proxy of C++ COptMethodNelderMead class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodNelderMead, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodNelderMead, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodNelderMead self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodNelderMead
        __init__(COptMethodNelderMead self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodNelderMead
        __init__(COptMethodNelderMead self, CDataContainer pParent) -> COptMethodNelderMead
        __init__(COptMethodNelderMead self, COptMethodNelderMead src, CDataContainer pParent) -> COptMethodNelderMead
        """
        this = _COPASI.new_COptMethodNelderMead(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodNelderMead
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodNelderMead self) -> bool"""
        return _COPASI.COptMethodNelderMead_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodNelderMead self) -> unsigned int"""
        return _COPASI.COptMethodNelderMead_getMaxLogVerbosity(self)

COptMethodNelderMead_swigregister = _COPASI.COptMethodNelderMead_swigregister
COptMethodNelderMead_swigregister(COptMethodNelderMead)

class COptMethodPraxis(COptMethod):
    """Proxy of C++ COptMethodPraxis class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodPraxis, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodPraxis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodPraxis self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodPraxis
        __init__(COptMethodPraxis self, COptMethodPraxis src, CDataContainer pParent) -> COptMethodPraxis
        """
        this = _COPASI.new_COptMethodPraxis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodPraxis
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodPraxis self) -> bool"""
        return _COPASI.COptMethodPraxis_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodPraxis self) -> unsigned int"""
        return _COPASI.COptMethodPraxis_getMaxLogVerbosity(self)

COptMethodPraxis_swigregister = _COPASI.COptMethodPraxis_swigregister
COptMethodPraxis_swigregister(COptMethodPraxis)

class COptMethodPS(COptPopulationMethod):
    """Proxy of C++ COptMethodPS class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodPS, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodPS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodPS self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodPS
        __init__(COptMethodPS self, COptMethodPS src, CDataContainer pParent) -> COptMethodPS
        """
        this = _COPASI.new_COptMethodPS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodPS
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodPS self) -> bool"""
        return _COPASI.COptMethodPS_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodPS self) -> unsigned int"""
        return _COPASI.COptMethodPS_getMaxLogVerbosity(self)

COptMethodPS_swigregister = _COPASI.COptMethodPS_swigregister
COptMethodPS_swigregister(COptMethodPS)

class COptMethodSA(COptMethod):
    """Proxy of C++ COptMethodSA class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodSA, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodSA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodSA self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodSA
        __init__(COptMethodSA self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodSA
        __init__(COptMethodSA self, CDataContainer pParent) -> COptMethodSA
        __init__(COptMethodSA self, COptMethodSA src, CDataContainer pParent) -> COptMethodSA
        """
        this = _COPASI.new_COptMethodSA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodSA
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodSA self) -> bool"""
        return _COPASI.COptMethodSA_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodSA self) -> unsigned int"""
        return _COPASI.COptMethodSA_getMaxLogVerbosity(self)

COptMethodSA_swigregister = _COPASI.COptMethodSA_swigregister
COptMethodSA_swigregister(COptMethodSA)

class COptMethodSRES(COptPopulationMethod):
    """Proxy of C++ COptMethodSRES class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodSRES, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodSRES, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodSRES self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodSRES
        __init__(COptMethodSRES self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodSRES
        __init__(COptMethodSRES self, CDataContainer pParent) -> COptMethodSRES
        __init__(COptMethodSRES self, COptMethodSRES src, CDataContainer pParent) -> COptMethodSRES
        """
        this = _COPASI.new_COptMethodSRES(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodSRES
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodSRES self) -> bool"""
        return _COPASI.COptMethodSRES_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodSRES self) -> unsigned int"""
        return _COPASI.COptMethodSRES_getMaxLogVerbosity(self)

COptMethodSRES_swigregister = _COPASI.COptMethodSRES_swigregister
COptMethodSRES_swigregister(COptMethodSRES)

class COptMethodSS(COptPopulationMethod):
    """Proxy of C++ COptMethodSS class."""

    __swig_setmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodSS, name, value)
    __swig_getmethods__ = {}
    for _s in [COptPopulationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodSS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodSS self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodSS
        __init__(COptMethodSS self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodSS
        __init__(COptMethodSS self, CDataContainer pParent) -> COptMethodSS
        __init__(COptMethodSS self, COptMethodSS src, CDataContainer pParent) -> COptMethodSS
        """
        this = _COPASI.new_COptMethodSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodSS
    __del__ = lambda self: None

    def elevateChildren(self):
        """elevateChildren(COptMethodSS self) -> bool"""
        return _COPASI.COptMethodSS_elevateChildren(self)


    def optimise(self):
        """optimise(COptMethodSS self) -> bool"""
        return _COPASI.COptMethodSS_optimise(self)

COptMethodSS_swigregister = _COPASI.COptMethodSS_swigregister
COptMethodSS_swigregister(COptMethodSS)

class COptMethodStatistics(COptMethod):
    """Proxy of C++ COptMethodStatistics class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodStatistics, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodStatistics, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodStatistics self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodStatistics
        __init__(COptMethodStatistics self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodStatistics
        __init__(COptMethodStatistics self, CDataContainer pParent) -> COptMethodStatistics
        __init__(COptMethodStatistics self, COptMethodStatistics src, CDataContainer pParent) -> COptMethodStatistics
        """
        this = _COPASI.new_COptMethodStatistics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodStatistics
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodStatistics self) -> bool"""
        return _COPASI.COptMethodStatistics_optimise(self)

COptMethodStatistics_swigregister = _COPASI.COptMethodStatistics_swigregister
COptMethodStatistics_swigregister(COptMethodStatistics)

class COptMethodSteepestDescent(COptMethod):
    """Proxy of C++ COptMethodSteepestDescent class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodSteepestDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodSteepestDescent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodSteepestDescent self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodSteepestDescent
        __init__(COptMethodSteepestDescent self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodSteepestDescent
        __init__(COptMethodSteepestDescent self, CDataContainer pParent) -> COptMethodSteepestDescent
        __init__(COptMethodSteepestDescent self, COptMethodSteepestDescent src, CDataContainer pParent) -> COptMethodSteepestDescent
        """
        this = _COPASI.new_COptMethodSteepestDescent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodSteepestDescent
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodSteepestDescent self) -> bool"""
        return _COPASI.COptMethodSteepestDescent_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodSteepestDescent self) -> unsigned int"""
        return _COPASI.COptMethodSteepestDescent_getMaxLogVerbosity(self)

COptMethodSteepestDescent_swigregister = _COPASI.COptMethodSteepestDescent_swigregister
COptMethodSteepestDescent_swigregister(COptMethodSteepestDescent)

class CRandomSearch(COptMethod):
    """Proxy of C++ CRandomSearch class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRandomSearch, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRandomSearch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CRandomSearch self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> CRandomSearch
        __init__(CRandomSearch self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> CRandomSearch
        __init__(CRandomSearch self, CDataContainer pParent) -> CRandomSearch
        __init__(CRandomSearch self, CRandomSearch src, CDataContainer pParent) -> CRandomSearch
        """
        this = _COPASI.new_CRandomSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CRandomSearch
    __del__ = lambda self: None

    def optimise(self):
        """optimise(CRandomSearch self) -> bool"""
        return _COPASI.CRandomSearch_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(CRandomSearch self) -> unsigned int"""
        return _COPASI.CRandomSearch_getMaxLogVerbosity(self)

CRandomSearch_swigregister = _COPASI.CRandomSearch_swigregister
CRandomSearch_swigregister(CRandomSearch)

class COptMethodTruncatedNewton(COptMethod):
    """Proxy of C++ COptMethodTruncatedNewton class."""

    __swig_setmethods__ = {}
    for _s in [COptMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptMethodTruncatedNewton, name, value)
    __swig_getmethods__ = {}
    for _s in [COptMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COptMethodTruncatedNewton, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(COptMethodTruncatedNewton self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType) -> COptMethodTruncatedNewton
        __init__(COptMethodTruncatedNewton self, CDataContainer pParent, CTaskEnum::Method const & methodType) -> COptMethodTruncatedNewton
        __init__(COptMethodTruncatedNewton self, CDataContainer pParent) -> COptMethodTruncatedNewton
        __init__(COptMethodTruncatedNewton self, COptMethodTruncatedNewton src, CDataContainer pParent) -> COptMethodTruncatedNewton
        """
        this = _COPASI.new_COptMethodTruncatedNewton(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_COptMethodTruncatedNewton
    __del__ = lambda self: None

    def optimise(self):
        """optimise(COptMethodTruncatedNewton self) -> bool"""
        return _COPASI.COptMethodTruncatedNewton_optimise(self)


    def getMaxLogVerbosity(self):
        """getMaxLogVerbosity(COptMethodTruncatedNewton self) -> unsigned int"""
        return _COPASI.COptMethodTruncatedNewton_getMaxLogVerbosity(self)

COptMethodTruncatedNewton_swigregister = _COPASI.COptMethodTruncatedNewton_swigregister
COptMethodTruncatedNewton_swigregister(COptMethodTruncatedNewton)

class CFunctionAnalyzer(_object):
    """Proxy of C++ CFunctionAnalyzer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFunctionAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFunctionAnalyzer, name)
    __repr__ = _swig_repr

    def __init__(self, f, reaction=None):
        """
        __init__(CFunctionAnalyzer self, CFunction f, CReaction reaction=None) -> CFunctionAnalyzer
        __init__(CFunctionAnalyzer self, CFunction f) -> CFunctionAnalyzer
        """
        this = _COPASI.new_CFunctionAnalyzer(f, reaction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def checkKineticFunction(self, f, reaction=None):
        """
        checkKineticFunction(CFunctionAnalyzer self, CFunction f, CReaction reaction=None)
        checkKineticFunction(CFunctionAnalyzer self, CFunction f)
        """
        return _COPASI.CFunctionAnalyzer_checkKineticFunction(self, f, reaction)


    def getResult(self):
        """getResult(CFunctionAnalyzer self) -> CFunctionAnalyzer::Result const &"""
        return _COPASI.CFunctionAnalyzer_getResult(self)

    NOOBJECT = _COPASI.CFunctionAnalyzer_NOOBJECT
    GENERAL = _COPASI.CFunctionAnalyzer_GENERAL
    POSITIVE = _COPASI.CFunctionAnalyzer_POSITIVE
    ACTUAL = _COPASI.CFunctionAnalyzer_ACTUAL

    def evaluateNode(node, callParameters, mode):
        """evaluateNode(CEvaluationNode const * node, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > const & callParameters, CFunctionAnalyzer::Mode mode) -> CFunctionAnalyzer::CValue"""
        return _COPASI.CFunctionAnalyzer_evaluateNode(node, callParameters, mode)

    evaluateNode = staticmethod(evaluateNode)

    def constructCallParameters(fp, callParameters, posi):
        """constructCallParameters(CFunctionParameters fp, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > & callParameters, bool posi)"""
        return _COPASI.CFunctionAnalyzer_constructCallParameters(fp, callParameters, posi)

    constructCallParameters = staticmethod(constructCallParameters)

    def write(level, rt, text, longText):
        """write(int level, bool rt, std::string const & text, std::string const & longText) -> std::string"""
        return _COPASI.CFunctionAnalyzer_write(level, rt, text, longText)

    write = staticmethod(write)
    __swig_destroy__ = _COPASI.delete_CFunctionAnalyzer
    __del__ = lambda self: None
CFunctionAnalyzer_swigregister = _COPASI.CFunctionAnalyzer_swigregister
CFunctionAnalyzer_swigregister(CFunctionAnalyzer)

def CFunctionAnalyzer_evaluateNode(node, callParameters, mode):
    """CFunctionAnalyzer_evaluateNode(CEvaluationNode const * node, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > const & callParameters, CFunctionAnalyzer::Mode mode) -> CFunctionAnalyzer::CValue"""
    return _COPASI.CFunctionAnalyzer_evaluateNode(node, callParameters, mode)

def CFunctionAnalyzer_constructCallParameters(fp, callParameters, posi):
    """CFunctionAnalyzer_constructCallParameters(CFunctionParameters fp, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > & callParameters, bool posi)"""
    return _COPASI.CFunctionAnalyzer_constructCallParameters(fp, callParameters, posi)

def CFunctionAnalyzer_write(level, rt, text, longText):
    """CFunctionAnalyzer_write(int level, bool rt, std::string const & text, std::string const & longText) -> std::string"""
    return _COPASI.CFunctionAnalyzer_write(level, rt, text, longText)

class CReactionResult(_object):
    """Proxy of C++ CReactionResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReactionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CReactionResult, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CReactionResult self) -> CReactionResult"""
        this = _COPASI.new_CReactionResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _COPASI.delete_CReactionResult
    __del__ = lambda self: None

    def writeResult(self, os, rt, verbose, writeToStream=True):
        """
        writeResult(CReactionResult self, std::ostream & os, bool rt, bool verbose, bool writeToStream=True) -> bool
        writeResult(CReactionResult self, std::ostream & os, bool rt, bool verbose) -> bool
        """
        return _COPASI.CReactionResult_writeResult(self, os, rt, verbose, writeToStream)


    def hasIssue(self):
        """hasIssue(CReactionResult self) -> bool"""
        return _COPASI.CReactionResult_hasIssue(self)


    def getResultString(self, rt, verbose):
        """getResultString(CReactionResult self, bool rt, bool verbose) -> std::string"""
        return _COPASI.CReactionResult_getResultString(self, rt, verbose)


    def getName(self):
        """getName(CReactionResult self) -> std::string const &"""
        return _COPASI.CReactionResult_getName(self)

CReactionResult_swigregister = _COPASI.CReactionResult_swigregister
CReactionResult_swigregister(CReactionResult)

class CModelAnalyzer(_object):
    """Proxy of C++ CModelAnalyzer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModelAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CModelAnalyzer, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        """__init__(CModelAnalyzer self, CModel model) -> CModelAnalyzer"""
        this = _COPASI.new_CModelAnalyzer(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def writeReport(self, os, rt, verbose):
        """writeReport(CModelAnalyzer self, std::ostream & os, bool rt, bool verbose)"""
        return _COPASI.CModelAnalyzer_writeReport(self, os, rt, verbose)


    def getReactionResults(self):
        """getReactionResults(CModelAnalyzer self) -> CReactionResultStdVector"""
        return _COPASI.CModelAnalyzer_getReactionResults(self)

    __swig_destroy__ = _COPASI.delete_CModelAnalyzer
    __del__ = lambda self: None
CModelAnalyzer_swigregister = _COPASI.CModelAnalyzer_swigregister
CModelAnalyzer_swigregister(CModelAnalyzer)

class COptions(_object):
    """Proxy of C++ COptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COptions, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_COptions
    __del__ = lambda self: None

    def init(argc=0, argv=0):
        """
        init(long argc=0, char *[] argv=0)
        init(long argc=0)
        init()
        """
        return _COPASI.COptions_init(argc, argv)

    init = staticmethod(init)

    def cleanup():
        """cleanup()"""
        return _COPASI.COptions_cleanup()

    cleanup = staticmethod(cleanup)

    def isSet(name):
        """isSet(std::string const & name) -> bool"""
        return _COPASI.COptions_isSet(name)

    isSet = staticmethod(isSet)

    def getNonOptions():
        """getNonOptions() -> StringStdVector"""
        return _COPASI.COptions_getNonOptions()

    getNonOptions = staticmethod(getNonOptions)

    def getEnvironmentVariable(name):
        """getEnvironmentVariable(std::string const & name) -> std::string"""
        return _COPASI.COptions_getEnvironmentVariable(name)

    getEnvironmentVariable = staticmethod(getEnvironmentVariable)

    def getPWD():
        """getPWD() -> std::string"""
        return _COPASI.COptions_getPWD()

    getPWD = staticmethod(getPWD)

    def getConfigDir():
        """getConfigDir() -> std::string"""
        return _COPASI.COptions_getConfigDir()

    getConfigDir = staticmethod(getConfigDir)
COptions_swigregister = _COPASI.COptions_swigregister
COptions_swigregister(COptions)

def COptions_init(argc=0, argv=0):
    """
    init(long argc=0, char *[] argv=0)
    init(long argc=0)
    COptions_init()
    """
    return _COPASI.COptions_init(argc, argv)

def COptions_cleanup():
    """COptions_cleanup()"""
    return _COPASI.COptions_cleanup()

def COptions_isSet(name):
    """COptions_isSet(std::string const & name) -> bool"""
    return _COPASI.COptions_isSet(name)

def COptions_getNonOptions():
    """COptions_getNonOptions() -> StringStdVector"""
    return _COPASI.COptions_getNonOptions()

def COptions_getEnvironmentVariable(name):
    """COptions_getEnvironmentVariable(std::string const & name) -> std::string"""
    return _COPASI.COptions_getEnvironmentVariable(name)

def COptions_getPWD():
    """COptions_getPWD() -> std::string"""
    return _COPASI.COptions_getPWD()

def COptions_getConfigDir():
    """COptions_getConfigDir() -> std::string"""
    return _COPASI.COptions_getConfigDir()

class CReactionResultStdVector(_object):
    """Proxy of C++ std::vector<(CReactionResult)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReactionResultStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CReactionResultStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CReactionResultStdVector self) -> SwigPyIterator"""
        return _COPASI.CReactionResultStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector___bool__(self)


    def __len__(self):
        """__len__(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j) -> CReactionResultStdVector"""
        return _COPASI.CReactionResultStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j)
        __setslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j, CReactionResultStdVector v)
        """
        return _COPASI.CReactionResultStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j)"""
        return _COPASI.CReactionResultStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i)
        __delitem__(CReactionResultStdVector self, PySliceObject * slice)
        """
        return _COPASI.CReactionResultStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CReactionResultStdVector self, PySliceObject * slice) -> CReactionResultStdVector
        __getitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i) -> CReactionResult
        """
        return _COPASI.CReactionResultStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CReactionResultStdVector self, PySliceObject * slice, CReactionResultStdVector v)
        __setitem__(CReactionResultStdVector self, PySliceObject * slice)
        __setitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_pop(self)


    def append(self, x):
        """append(CReactionResultStdVector self, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_append(self, x)


    def empty(self):
        """empty(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector_empty(self)


    def size(self):
        """size(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector_size(self)


    def swap(self, v):
        """swap(CReactionResultStdVector self, CReactionResultStdVector v)"""
        return _COPASI.CReactionResultStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CReactionResultStdVector self) -> std::vector< CReactionResult >::reverse_iterator"""
        return _COPASI.CReactionResultStdVector_rbegin(self)


    def rend(self):
        """rend(CReactionResultStdVector self) -> std::vector< CReactionResult >::reverse_iterator"""
        return _COPASI.CReactionResultStdVector_rend(self)


    def clear(self):
        """clear(CReactionResultStdVector self)"""
        return _COPASI.CReactionResultStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CReactionResultStdVector self) -> std::vector< CReactionResult >::allocator_type"""
        return _COPASI.CReactionResultStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CReactionResultStdVector self)"""
        return _COPASI.CReactionResultStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos) -> std::vector< CReactionResult >::iterator
        erase(CReactionResultStdVector self, std::vector< CReactionResult >::iterator first, std::vector< CReactionResult >::iterator last) -> std::vector< CReactionResult >::iterator
        """
        return _COPASI.CReactionResultStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CReactionResult)> self) -> CReactionResultStdVector
        __init__(std::vector<(CReactionResult)> self, CReactionResultStdVector arg2) -> CReactionResultStdVector
        __init__(std::vector<(CReactionResult)> self, std::vector< CReactionResult >::size_type size) -> CReactionResultStdVector
        __init__(std::vector<(CReactionResult)> self, std::vector< CReactionResult >::size_type size, CReactionResult value) -> CReactionResultStdVector
        """
        this = _COPASI.new_CReactionResultStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CReactionResultStdVector self, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_push_back(self, x)


    def front(self):
        """front(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_front(self)


    def back(self):
        """back(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_back(self)


    def assign(self, n, x):
        """assign(CReactionResultStdVector self, std::vector< CReactionResult >::size_type n, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CReactionResultStdVector self, std::vector< CReactionResult >::size_type new_size)
        resize(CReactionResultStdVector self, std::vector< CReactionResult >::size_type new_size, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos, CReactionResult x) -> std::vector< CReactionResult >::iterator
        insert(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos, std::vector< CReactionResult >::size_type n, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CReactionResultStdVector self, std::vector< CReactionResult >::size_type n)"""
        return _COPASI.CReactionResultStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CReactionResultStdVector
    __del__ = lambda self: None
CReactionResultStdVector_swigregister = _COPASI.CReactionResultStdVector_swigregister
CReactionResultStdVector_swigregister(CReactionResultStdVector)

class CFluxModeStdVector(_object):
    """Proxy of C++ std::vector<(CFluxMode)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFluxModeStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFluxModeStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CFluxModeStdVector self) -> SwigPyIterator"""
        return _COPASI.CFluxModeStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector___bool__(self)


    def __len__(self):
        """__len__(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j) -> CFluxModeStdVector"""
        return _COPASI.CFluxModeStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j)
        __setslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j, CFluxModeStdVector v)
        """
        return _COPASI.CFluxModeStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j)"""
        return _COPASI.CFluxModeStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i)
        __delitem__(CFluxModeStdVector self, PySliceObject * slice)
        """
        return _COPASI.CFluxModeStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CFluxModeStdVector self, PySliceObject * slice) -> CFluxModeStdVector
        __getitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i) -> CFluxMode
        """
        return _COPASI.CFluxModeStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CFluxModeStdVector self, PySliceObject * slice, CFluxModeStdVector v)
        __setitem__(CFluxModeStdVector self, PySliceObject * slice)
        __setitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_pop(self)


    def append(self, x):
        """append(CFluxModeStdVector self, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_append(self, x)


    def empty(self):
        """empty(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector_empty(self)


    def size(self):
        """size(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector_size(self)


    def swap(self, v):
        """swap(CFluxModeStdVector self, CFluxModeStdVector v)"""
        return _COPASI.CFluxModeStdVector_swap(self, v)


    def rbegin(self):
        """rbegin(CFluxModeStdVector self) -> std::vector< CFluxMode >::reverse_iterator"""
        return _COPASI.CFluxModeStdVector_rbegin(self)


    def rend(self):
        """rend(CFluxModeStdVector self) -> std::vector< CFluxMode >::reverse_iterator"""
        return _COPASI.CFluxModeStdVector_rend(self)


    def clear(self):
        """clear(CFluxModeStdVector self)"""
        return _COPASI.CFluxModeStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CFluxModeStdVector self) -> std::vector< CFluxMode >::allocator_type"""
        return _COPASI.CFluxModeStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CFluxModeStdVector self)"""
        return _COPASI.CFluxModeStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos) -> std::vector< CFluxMode >::iterator
        erase(CFluxModeStdVector self, std::vector< CFluxMode >::iterator first, std::vector< CFluxMode >::iterator last) -> std::vector< CFluxMode >::iterator
        """
        return _COPASI.CFluxModeStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CFluxMode)> self) -> CFluxModeStdVector
        __init__(std::vector<(CFluxMode)> self, CFluxModeStdVector arg2) -> CFluxModeStdVector
        __init__(std::vector<(CFluxMode)> self, std::vector< CFluxMode >::size_type size) -> CFluxModeStdVector
        __init__(std::vector<(CFluxMode)> self, std::vector< CFluxMode >::size_type size, CFluxMode value) -> CFluxModeStdVector
        """
        this = _COPASI.new_CFluxModeStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CFluxModeStdVector self, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_push_back(self, x)


    def front(self):
        """front(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_front(self)


    def back(self):
        """back(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_back(self)


    def assign(self, n, x):
        """assign(CFluxModeStdVector self, std::vector< CFluxMode >::size_type n, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CFluxModeStdVector self, std::vector< CFluxMode >::size_type new_size)
        resize(CFluxModeStdVector self, std::vector< CFluxMode >::size_type new_size, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos, CFluxMode x) -> std::vector< CFluxMode >::iterator
        insert(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos, std::vector< CFluxMode >::size_type n, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CFluxModeStdVector self, std::vector< CFluxMode >::size_type n)"""
        return _COPASI.CFluxModeStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector_capacity(self)

    __swig_destroy__ = _COPASI.delete_CFluxModeStdVector
    __del__ = lambda self: None
CFluxModeStdVector_swigregister = _COPASI.CFluxModeStdVector_swigregister
CFluxModeStdVector_swigregister(CFluxModeStdVector)



TriUnspecified=-1
TriFalse=0
TriTrue=1

CRootContainer.init=_COPASI.CRootContainer_init
CRootContainer.destroy=_COPASI.CRootContainer_destroy
CRootContainer.getRoot=_COPASI.CRootContainer_getRoot
CRootContainer.getFunctionList=_COPASI.CRootContainer_getFunctionList
CRootContainer.getDatamodelList=_COPASI.CRootContainer_getDatamodelList
CRootContainer.addDatamodel=_COPASI.CRootContainer_addDatamodel
CRootContainer.getUndefinedFunction=_COPASI.CRootContainer_getUndefinedFunction
CRootContainer.getKeyFactory=_COPASI.CRootContainer_getKeyFactory
CRootContainer.removeDatamodel=_COPASI.CRootContainer_removeDatamodel
CRootContainer.removeDatamodelWithIndex=_COPASI.CRootContainer_removeDatamodelWithIndex

CCommonName.escape=_COPASI.CCommonName_escape
CCommonName.unescape=_COPASI.CCommonName_unescape

CCopasiMethod.TypeNameToEnum=_COPASI.CCopasiMethod_TypeNameToEnum

CEvaluationTree.create=_COPASI.CEvaluationTree_create
CEvaluationTree.copy=_COPASI.CEvaluationTree_copy

COutputAssistant.getListOfDefaultOutputDescriptions=_COPASI.COutputAssistant_getListOfDefaultOutputDescriptions
COutputAssistant.getDefaultReportIndex=_COPASI.COutputAssistant_getDefaultReportIndex
COutputAssistant.getItemName=_COPASI.COutputAssistant_getItemName
COutputAssistant.getItem=_COPASI.COutputAssistant_getItem
COutputAssistant.createDefaultOutput=_COPASI.COutputAssistant_createDefaultOutput

CCopasiMessage.peekFirstMessage=_COPASI.CCopasiMessage_peekFirstMessage
CCopasiMessage.peekLastMessage=_COPASI.CCopasiMessage_peekLastMessage
CCopasiMessage.getFirstMessage=_COPASI.CCopasiMessage_getFirstMessage
CCopasiMessage.getLastMessage=_COPASI.CCopasiMessage_getLastMessage
CCopasiMessage.getAllMessageText=_COPASI.CCopasiMessage_getAllMessageText
CCopasiMessage.clearDeque=_COPASI.CCopasiMessage_clearDeque
CCopasiMessage.getHighestSeverity=_COPASI.CCopasiMessage_getHighestSeverity
CCopasiMessage.checkForMessage=_COPASI.CCopasiMessage_checkForMessage
CCopasiMessage.size=_COPASI.CCopasiMessage_size




class _VectorIterator:
    def __init__(self, vector):
#type: (COPASI.MetabVector) -> None
        self.current = 0
        self.high = vector.size() - 1
        self.vector = vector

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.current > self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.vector.get(self.current - 1)

def __add_iterator(self):
    return _VectorIterator(self)


BiologicalDescriptionVector.__iter__ = __add_iterator
CChemEqElementVector.__iter__ = __add_iterator
CDataObjectVector.__iter__ = __add_iterator
CEvaluationTreeVector.__iter__ = __add_iterator
CEvaluationTreeVectorN.__iter__ = __add_iterator
CFunctionVector.__iter__ = __add_iterator
CFunctionVectorN.__iter__ = __add_iterator
CFunctionVectorNS.__iter__ = __add_iterator
CLRelAbsVector.__iter__ = __add_iterator
COutputDefinitionVector.__iter__ = __add_iterator
CReportDefinitionVector.__iter__ = __add_iterator
ColorDefinitionVector.__iter__ = __add_iterator
CompartmentGlyphVector.__iter__ = __add_iterator
CompartmentVector.__iter__ = __add_iterator
CompartmentVectorN.__iter__ = __add_iterator
CompartmentVectorNS.__iter__ = __add_iterator
CreatorVector.__iter__ = __add_iterator
DataModelVector.__iter__ = __add_iterator
EventAssignmentVector.__iter__ = __add_iterator
EventAssignmentVectorN.__iter__ = __add_iterator
EventVector.__iter__ = __add_iterator
EventVectorN.__iter__ = __add_iterator
FittingPointVector.__iter__ = __add_iterator
FloatCVector.__iter__ = __add_iterator
FloatVector.__iter__ = __add_iterator
FloatVectorCore.__iter__ = __add_iterator
GeneralGlyphVector.__iter__ = __add_iterator
GlobalRenderInformationVector.__iter__ = __add_iterator
GlobalStyleVector.__iter__ = __add_iterator
GradientBaseVector.__iter__ = __add_iterator
GradientStopVector.__iter__ = __add_iterator
GraphicalObjectVector.__iter__ = __add_iterator
LayoutVector.__iter__ = __add_iterator
LayoutVectorN.__iter__ = __add_iterator
LineEndingVector.__iter__ = __add_iterator
LocalStyleVector.__iter__ = __add_iterator
MetabGlyphVector.__iter__ = __add_iterator
MetabReferenceGlyphVector.__iter__ = __add_iterator
MetabVector.__iter__ = __add_iterator
MetabVectorN.__iter__ = __add_iterator
MetabVectorNS.__iter__ = __add_iterator
MethodSubTypeVector.__iter__ = __add_iterator
ModelParameterSetVector.__iter__ = __add_iterator
ModelParameterSetVectorN.__iter__ = __add_iterator
ModelValueVector.__iter__ = __add_iterator
ModelValueVectorN.__iter__ = __add_iterator
ModificationVector.__iter__ = __add_iterator
MoietyVector.__iter__ = __add_iterator
ObjectVector.__iter__ = __add_iterator
ObjectVectorCore.__iter__ = __add_iterator
OutputDefinitionVector.__iter__ = __add_iterator
OutputDefinitionVectorN.__iter__ = __add_iterator
ParameterVector.__iter__ = __add_iterator
PlotItemVector.__iter__ = __add_iterator
PlotItemVectorN.__iter__ = __add_iterator
ReactionGlyphVector.__iter__ = __add_iterator
ReactionVector.__iter__ = __add_iterator
ReactionVectorN.__iter__ = __add_iterator
ReactionVectorNS.__iter__ = __add_iterator
ReferenceGlyphVector.__iter__ = __add_iterator
ReferenceVector.__iter__ = __add_iterator
ReportDefinitionVector.__iter__ = __add_iterator
ReportDefinitionVectorN.__iter__ = __add_iterator
ReportItemVector.__iter__ = __add_iterator
SizeTVector.__iter__ = __add_iterator
SizeTVectorCore.__iter__ = __add_iterator
TaskSubTypeVector.__iter__ = __add_iterator
TaskVector.__iter__ = __add_iterator
TaskVectorN.__iter__ = __add_iterator
TextGlyphVector.__iter__ = __add_iterator
VectorOfStringVectors.__iter__ = __add_iterator



# This file is compatible with both classic and new-style classes.



__version__ = '4.30.240'
