Metadata-Version: 2.1
Name: pip-services3-rpc
Version: 3.1.4
Summary: Communication components for Pip.Services in Python
Home-page: http://github.com/pip-services3-python/pip-services3-rpc-python
Author: Conceptual Vision Consulting LLC
Author-email: seroukhov@gmail.com
License: MIT
Description: # <img src="https://uploads-ssl.webflow.com/5ea5d3315186cf5ec60c3ee4/5edf1c94ce4c859f2b188094_logo.svg" alt="Pip.Services Logo" width="200"> <br/> Remote Procedure Calls for Python
        
        This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.
        
        The rpc module provides the synchronous communication using local calls or the HTTP(S) protocol. It contains both server and client side implementations.
        
        The module contains the following packages:
        - **Auth** - authentication and authorisation components
        - **Build** - HTTP service factory
        - **Clients** - mechanisms for retrieving connection settings from the microserviceвЂ™s configuration and providing clients and services with these settings
        - **Connect** - helper module to retrieve connections for HTTP-based services and clients
        - **Services** - basic implementation of services for connecting via the HTTP/REST protocol and using the Commandable pattern over HTTP
        
        <a name="links"></a> Quick links:
        
        * [Your first microservice in Node.js](https://www.pipservices.org/docs/quickstart/nodejs) 
        * [Data Microservice. Step 5](https://www.pipservices.org/docs/tutorials/data-microservice/service)
        * [Microservice Facade](https://www.pipservices.org/docs/tutorials/microservice-facade/microservice-facade-main) 
        * [Client Library. Step 2](https://www.pipservices.org/docs/tutorials/client-lib/direct-client)
        * [Client Library. Step 3](https://www.pipservices.org/docs/tutorials/client-lib/http-client)
        * [API Reference](https://pip-services3-python.github.io/pip-services3-rpc-python/index.html)
        * [Change Log](CHANGELOG.md)
        * [Get Help](https://www.pipservices.org/community/help)
        * [Contribute](https://www.pipservices.org/community/contribute)
        
        ## Use
        
        Install the Python package as
        ```bash
        pip install pip_services3_rpc
        ```
        
        ## Develop
        
        For development you shall install the following prerequisites:
        * Python 3.7+
        * Visual Studio Code or another IDE of your choice
        * Docker
        
        Install dependencies:
        ```bash
        pip install -r requirements.txt
        ```
        
        Run automated tests:
        ```bash
        python test.py
        ```
        
        Generate API documentation:
        ```bash
        ./docgen.ps1
        ```
        
        Before committing changes run dockerized build and test as:
        ```bash
        ./build.ps1
        ./test.ps1
        ./clear.ps1
        ```
        
        ## Contacts
        
        The Python version of Pip.Services is created and maintained by
        - **Sergey Seroukhov**
        - **Danil Prisiazhnyi**
        
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
