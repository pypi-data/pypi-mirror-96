# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.02.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class CertSigningReqCertificateStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificates': 'list[X509Certificate]',
        'ready': 'bool',
        'message': 'str',
        'reason': 'CSRReasonEnum'
    }

    attribute_map = {
        'certificates': 'certificates',
        'ready': 'ready',
        'message': 'message',
        'reason': 'reason'
    }

    def __init__(self, certificates=None, ready=None, message=None, reason=None, local_vars_configuration=None):  # noqa: E501
        """CertSigningReqCertificateStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certificates = None
        self._ready = None
        self._message = None
        self._reason = None
        self.discriminator = None

        if certificates is not None:
            self.certificates = certificates
        self.ready = ready
        self.message = message
        self.reason = reason

    @property
    def certificates(self):
        """Gets the certificates of this CertSigningReqCertificateStatus.  # noqa: E501

        The issued x509 certificates, formatted as PEM. This list is sorted by X509Certificate.not_before.   # noqa: E501

        :return: The certificates of this CertSigningReqCertificateStatus.  # noqa: E501
        :rtype: list[X509Certificate]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this CertSigningReqCertificateStatus.

        The issued x509 certificates, formatted as PEM. This list is sorted by X509Certificate.not_before.   # noqa: E501

        :param certificates: The certificates of this CertSigningReqCertificateStatus.  # noqa: E501
        :type: list[X509Certificate]
        """

        self._certificates = certificates

    @property
    def ready(self):
        """Gets the ready of this CertSigningReqCertificateStatus.  # noqa: E501

        The status of the certificate. true: The certificate has been signed and is ready for use false: The certificate is not ready   # noqa: E501

        :return: The ready of this CertSigningReqCertificateStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this CertSigningReqCertificateStatus.

        The status of the certificate. true: The certificate has been signed and is ready for use false: The certificate is not ready   # noqa: E501

        :param ready: The ready of this CertSigningReqCertificateStatus.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and ready is None:  # noqa: E501
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    @property
    def message(self):
        """Gets the message of this CertSigningReqCertificateStatus.  # noqa: E501

        A system message associated with the reason.   # noqa: E501

        :return: The message of this CertSigningReqCertificateStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CertSigningReqCertificateStatus.

        A system message associated with the reason.   # noqa: E501

        :param message: The message of this CertSigningReqCertificateStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this CertSigningReqCertificateStatus.  # noqa: E501


        :return: The reason of this CertSigningReqCertificateStatus.  # noqa: E501
        :rtype: CSRReasonEnum
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CertSigningReqCertificateStatus.


        :param reason: The reason of this CertSigningReqCertificateStatus.  # noqa: E501
        :type: CSRReasonEnum
        """
        if self.local_vars_configuration.client_side_validation and reason is None:  # noqa: E501
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertSigningReqCertificateStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertSigningReqCertificateStatus):
            return True

        return self.to_dict() != other.to_dict()
