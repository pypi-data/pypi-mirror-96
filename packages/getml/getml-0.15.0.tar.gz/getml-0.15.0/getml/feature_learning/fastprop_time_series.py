# Copyright 2021 The SQLNet Company GmbH

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

"""
Feature learning based on Deep Feature Synthesis.
"""

from .aggregations import (
    Avg,
    Count,
    CountDistinct,
    CountMinusCountDistinct,
    First,
    Last,
    Max,
    Median,
    Min,
    Stddev,
    Sum,
)
from .feature_learner import _FeatureLearner
from .loss_functions import SquareLoss
from .validation import _validate_dfs_model_parameters, _validate_time_series_parameters

# --------------------------------------------------------------------


class FastPropTimeSeries(_FeatureLearner):
    """
    Generates simple features based on Deep Feature Synthesis.

    :class:`~getml.feature_learning.FastPropModel` generates simple and
    easily interpretable features for relational data and time series.
    It is based on a simple, brute-force approach known as Deep
    Feature Synthesis. :class:`~getml.feature_learning.FastPropModel`
    generates a large number of features and selects the most
    relevant ones based on the pair-wise correlation with the target(s).

    Args:
        horizon (float, optional):

            The period of time you want to look ahead to generate the
            predictions.

        memory (float, optional):

            The period of time you want to the to look back until the
            algorithm "forgets" the data. If you set memory to 0.0, then
            there will be no limit.

        self_join_keys (List[str], optional):

            A list of the join keys to use for the self join. If none are
            passed, then the self join will take place on the entire population
            table.

        ts_name (str, optional):

            The name of the time stamp column to be used. If none is passed,
            then the row ID will be used.

        allow_lagged_targets (bool, optional):

            In some time series problems, it is allowed to aggregate over
            target variables from the past. In others, this is not allowed.
            If *allow_lagged_targets* is set to True, you must pass a horizon
            that is greater than zero, otherwise you would have a data leak
            (an exception will be thrown to prevent this).

        aggregation (List[:class:`~getml.feature_learning.aggregations`], optional):

            Mathematical operations used by the automated feature
            learning algorithm to create new features.

            Must be from :mod:`~getml.feature_learning.aggregations`.

        loss_function (:class:`~getml.feature_learning.loss_functions`, optional):

            Objective function used by the feature learning algorithm
            to optimize your features. For regression problems use
            :class:`~getml.feature_learning.loss_functions.SquareLoss` and for
            classification problems use
            :class:`~getml.feature_learning.loss_functions.CrossEntropyLoss`.

        num_features (int, optional):

            Number of features generated by the feature learning
            algorithm. Range: [1, :math:`\\infty`]

        n_most_frequent (int, optional):

            :class:`~getml.feature_learning.FastPropModel` can find the N most frequent
            categories in a categorical column and derive features from them.
            The parameter determines how many categories should be used.
            Range: [0, :math:`\\infty`]

        num_threads (int, optional):

            Number of threads used by the feature learning algorithm. If set to
            zero or a negative value, the number of threads will be
            determined automatically by the getML engine. Range:
            [:math:`0`, :math:`\\infty`]

        silent (bool, optional):

            Controls the logging during training.

    Example:

        .. code-block:: python

            # Our forecast horizon is 0.
            # We do not predict the future, instead we infer
            # the present state from current and past sensor data.
            horizon = 0.0

            # We do not allow the time series features
            # to use target values from the past.
            # (Otherwise, we would need the horizon to
            # be greater than 0.0).
            allow_lagged_targets = False

            # We want our time series features to only use
            # data from the last 15 minutes
            memory = getml.data.time.minutes(15)

            feature_learner = getml.feature_learning.FastPropTimeSeries(
                    ts_name="date",
                    horizon=horizon,
                    memory=memory,
                    allow_lagged_targets=allow_lagged_targets,
                    loss_function=getml.feature_learning.loss_functions.CrossEntropyLoss
            )

            predictor = getml.predictors.XGBoostClassifier(reg_lambda=500)

            pipe = getml.pipeline.Pipeline(
                tags=["memory=15", "no ts_name", "dfs"],
                feature_learners=[feature_learner],
                predictors=[predictor]
            )

            pipe.check(data_train)

            pipe = pipe.fit(data_train)

            predictions = pipe.predict(data_test)

            scores = pipe.score(data_test)
    """

    # ----------------------------------------------------------------

    def __init__(
        self,
        horizon=0.0,
        memory=0.0,
        self_join_keys=None,
        ts_name="",
        allow_lagged_targets=True,
        aggregation=None,
        loss_function=SquareLoss,
        n_most_frequent=0,
        num_features=200,
        num_threads=0,
        silent=True,
    ):

        # ------------------------------------------------------------

        aggregation = aggregation or [
            Avg,
            Count,
            CountDistinct,
            CountMinusCountDistinct,
            First,
            Last,
            Min,
            Max,
            Median,
            Stddev,
            Sum,
        ]

        # ------------------------------------------------------------

        self.type = "FastPropTimeSeries"

        # ------------------------------------------------------------

        self.aggregation = aggregation
        self.loss_function = loss_function
        self.n_most_frequent = n_most_frequent
        self.num_features = num_features
        self.num_threads = num_threads
        self.silent = silent

        # ------------------------------------------------------------

        self.horizon = horizon
        self.memory = memory
        self.self_join_keys = self_join_keys or []
        self.ts_name = ts_name
        self.allow_lagged_targets = allow_lagged_targets

        # ------------------------------------------------------------

        FastPropTimeSeries._supported_params = list(self.__dict__.keys())

        # ------------------------------------------------------------

        self.validate()

    # ----------------------------------------------------------------

    def validate(self, params=None):
        """Checks both the types and the values of all instance
        variables and raises an exception if something is off.

        Args:
            params (dict, optional): A dictionary containing
                the parameters to validate. If not is passed,
                the own parameters will be validated.
        """

        # ------------------------------------------------------------

        params = params or self.__dict__

        if not isinstance(params, dict):
            raise ValueError("params must be None or a dictionary!")

        # ------------------------------------------------------------

        if not isinstance(params["silent"], bool):
            raise TypeError("'silent' must be of type bool")

        if params["type"] != "FastPropTimeSeries":
            raise ValueError("'type' must be 'FastPropTimeSeries'")

        # ------------------------------------------------------------

        for kkey in params:
            if kkey not in FastPropTimeSeries._supported_params:
                raise KeyError(
                    """Instance variable ["""
                    + kkey
                    + """]
                       is not supported in FastPropTimeSeries."""
                )

                # ------------------------------------------------------------

        _validate_dfs_model_parameters(**params)

        # ------------------------------------------------------------

        _validate_time_series_parameters(**params)


# --------------------------------------------------------------------
