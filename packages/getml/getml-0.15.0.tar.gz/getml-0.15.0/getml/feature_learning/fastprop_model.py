# Copyright 2021 The SQLNet Company GmbH

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

"""
Feature learning based on Deep Feature Synthesis.
"""

from .aggregations import (
    Avg,
    Count,
    CountDistinct,
    CountMinusCountDistinct,
    First,
    Last,
    Max,
    Median,
    Min,
    Stddev,
    Sum,
)
from .feature_learner import _FeatureLearner
from .loss_functions import SquareLoss
from .validation import _validate_dfs_model_parameters

# --------------------------------------------------------------------


class FastPropModel(_FeatureLearner):
    """
    Generates simple features based on Deep Feature Synthesis.

    :class:`~getml.feature_learning.FastPropModel` generates simple and
    easily interpretable features for relational data and time series.
    It is based on a simple, brute-force approach known as Deep
    Feature Synthesis. :class:`~getml.feature_learning.FastPropModel`
    generates a large number of features and selects the most
    relevant ones based on the pair-wise correlation with the target(s).

    Args:
        aggregation (List[:class:`~getml.feature_learning.aggregations`], optional):

            Mathematical operations used by the automated feature
            learning algorithm to create new features.

            Must be from :mod:`~getml.feature_learning.aggregations`.

        loss_function (:class:`~getml.feature_learning.loss_functions`, optional):

            Objective function used by the feature learning algorithm
            to optimize your features. For regression problems use
            :class:`~getml.feature_learning.loss_functions.SquareLoss` and for
            classification problems use
            :class:`~getml.feature_learning.loss_functions.CrossEntropyLoss`.

        num_features (int, optional):

            Number of features generated by the feature learning
            algorithm. Range: [1, :math:`\\infty`]

        n_most_frequent (int, optional):

            :class:`~getml.feature_learning.FastPropModel` can find the N most frequent
            categories in a categorical column and derive features from them.
            The parameter determines how many categories should be used.
            Range: [0, :math:`\\infty`]

        num_threads (int, optional):

            Number of threads used by the feature learning algorithm. If set to
            zero or a negative value, the number of threads will be
            determined automatically by the getML engine. Range:
            [:math:`0`, :math:`\\infty`]

        silent (bool, optional):

            Controls the logging during training.

    Example:

        .. code-block:: python

            population_placeholder = getml.data.Placeholder("population")
            order_placeholder = getml.data.Placeholder("order")
            trans_placeholder = getml.data.Placeholder("trans")

            population_placeholder.join(order_placeholder,
                                        join_key="account_id")

            population_placeholder.join(trans_placeholder,
                                        join_key="account_id",
                                        time_stamp="date")

            feature_selector = getml.predictors.XGBoostClassifier(
                reg_lambda=500
            )

            predictor = getml.predictors.XGBoostClassifier(
                reg_lambda=500
            )

            agg = getml.feature_learning.aggregations

            feature_learner = getml.feature_learning.FastPropModel(
                aggregation=[
                    agg.Avg,
                    agg.Count,
                    agg.Max,
                    agg.Median,
                    agg.Min,
                    agg.Sum,
                    agg.Var
                ],
                num_features=200,
                loss_function=getml.feature_learning.loss_functions.CrossEntropyLoss
            )

            pipe = getml.pipeline.Pipeline(
                tags=["dfs"],
                population=population_placeholder,
                peripheral=[order_placeholder, trans_placeholder],
                feature_learners=feature_learner,
                feature_selectors=feature_selector,
                predictors=predictor,
                share_selected_features=0.5
            )

            pipe.check(
                population_table=population_train,
                peripheral_tables={"order": order, "trans": trans}
            )

            pipe = pipe.fit(
                population_table=population_train,
                peripheral_tables={"order": order, "trans": trans}
            )

            in_sample = pipe.score(
                population_table=population_train,
                peripheral_tables={"order": order, "trans": trans}
            )

            out_of_sample = pipe.score(
                population_table=population_test,
                peripheral_tables={"order": order, "trans": trans}
            )
    """

    # ----------------------------------------------------------------

    def __init__(
        self,
        aggregation=None,
        loss_function=SquareLoss,
        n_most_frequent=0,
        num_features=200,
        num_threads=0,
        silent=True,
    ):

        # ------------------------------------------------------------

        aggregation = aggregation or [
            Avg,
            Count,
            CountDistinct,
            CountMinusCountDistinct,
            First,
            Last,
            Min,
            Max,
            Median,
            Stddev,
            Sum,
        ]

        # ------------------------------------------------------------

        self.type = "FastPropModel"

        # ------------------------------------------------------------

        self.aggregation = aggregation
        self.loss_function = loss_function
        self.n_most_frequent = n_most_frequent
        self.num_features = num_features
        self.num_threads = num_threads
        self.silent = silent

        # ------------------------------------------------------------

        FastPropModel._supported_params = list(self.__dict__.keys())

        # ------------------------------------------------------------

        self.validate()

    # ----------------------------------------------------------------

    def validate(self, params=None):
        """Checks both the types and the values of all instance
        variables and raises an exception if something is off.

        Args:
            params (dict, optional): A dictionary containing
                the parameters to validate. If not is passed,
                the own parameters will be validated.
        """
        # ------------------------------------------------------------

        params = params or self.__dict__

        if not isinstance(params, dict):
            raise ValueError("params must be None or a dictionary!")

        # ------------------------------------------------------------

        for kkey in params:
            if kkey not in FastPropModel._supported_params:
                raise KeyError(
                    """Instance variable ["""
                    + kkey
                    + """]
                       is not supported in FastPropModel."""
                )

                # ------------------------------------------------------------

        if params["type"] != "FastPropModel":
            raise ValueError("'type' must be 'FastPropModel'")

        # ------------------------------------------------------------

        _validate_dfs_model_parameters(**params)


# --------------------------------------------------------------------
