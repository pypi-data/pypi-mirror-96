import argparse
import glob
import sys
from typing import Optional

from . import writer

__version__ = "0.4.2"


def get_filenames(directories: list = [], files: list = []):
    """Return all matched files

    directories: list of directory names, relative to project root
    files:       list of file names, relative to project root

    ----------

    [
        "path-to-file",
        "path-to-another-file"
    ]
    """
    result = []

    for directory in directories:
        result += glob.glob(directory + "/**/*.tex", recursive=True)

    for file in files:
        if file not in result:
            result.append(file)

    return result


def get_todos(filenames: list, keywords: list) -> dict:
    """Return all obtained notes

    filenames: list of files generated by get_filenames()
    keywords:  list of defined keywords

    ----------

    {
        "path-to-file": {
            "TODO": [
                (24, "% TODO How to do this?", "Lorem ipsum"),
                (30, "% TODO How to do that?", "Lorem ipsum")
            ],
            "FIXME": [
                (66, "% FIXME Change this", "Lorem ipsum"),
                (70, "% FIXME Change that", "Lorem ipsum")
            ]
        },
        "path-to-another-file": {
            "TODO": [
                (12, "% TODO Make this better", "Lorem ipsum")
            ]
        }
    }
    """

    def is_keyword_line(line: str) -> Optional[str]:
        """Return keyword string, if the line contains it, or None"""
        for keyword in keywords:
            if "% " + keyword in line:
                return keyword
        return None

    # Initialise
    result = {}

    for filename in filenames:
        result[filename] = {}
        for keyword in keywords:
            result[filename][keyword] = []

        with open(filename, "r") as handle:
            # keyword, line, value
            temp = ("", 0, "")
            # If true, add next line
            add_quote = False

            i = 1
            line = handle.readline()
            while line:
                # The line before had a keyword, quote this line
                if add_quote:
                    if is_keyword_line(line) is None:
                        result[filename][temp[0]].append((temp[1], temp[2], line.strip()))
                    else:
                        result[filename][temp[0]].append((temp[1], temp[2], ""))
                    add_quote = False
                    temp = ("", 0, "")

                # If the line contains one of keywords, save it
                keyword = is_keyword_line(line)
                if keyword:
                    temp = (keyword, i, line.strip())
                    add_quote = True

                # Prepare for next line
                line = handle.readline()
                # Increment iterator
                i += 1

    return result


def main(argv=None):
    parser = argparse.ArgumentParser(
        prog="latex-todo-gen",
        description="Extract TODOs from TeX files.",
    )
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version=__version__,
    )
    parser.add_argument(
        "--outfile",
        "-o",
        type=str,
        default="TODO.md",
        help="Output file. Supported extensions: md, tex, pdf. Default: TODO.md.",
    )
    parser.add_argument(
        "--directories",
        "-d",
        type=str,
        default="text",
        help="Comma separated list of directories. Default: text.",
    )
    parser.add_argument(
        "--files",
        "-f",
        type=str,
        default="",
        help="Comma separated list of files. Defaults to none.",
    )
    parser.add_argument(
        "--keywords",
        "-k",
        type=str,
        default="FIXME,TODO,NOTE",
        help="Comma separated list of keywords. Default: FIXME,TODO,NOTE.",
    )
    parser.add_argument(
        "--scheme",
        type=str,
        default="light",
        help=(
            "Color scheme for output PDF file."
            "Options: light, mariana, marianne, dark."
            "Default: light."
        ),
    )
    parser.add_argument(
        "--description",
        type=str,
        default="Statistics for this LaTeX project.",
        help="Set output file description. Default: Statistics for this LaTeX project.",
    )
    parser.add_argument(
        "--footer",
        type=str,
        default=None,
        help="Set file footer. Defaults to link to this project.",
    )
    args = parser.parse_args()

    # Parse variables
    directories = [d for d in args.directories.split(",") if len(d)]
    files = [f for f in args.files.split(",") if len(f)]
    keywords = [k for k in args.keywords.split(",") if len(k)]
    filename = ".".join(args.outfile.split(".")[:-1])
    extension = args.outfile.split(".")[-1]

    # Test for scheme
    schemes = ("light", "plain", "mariana", "marianne", "dark")
    if args.scheme not in schemes:
        print("Unsupported scheme. Available options: " + ", ".join(schemes) + ".", file=sys.stderr)
        sys.exit(1)

    # Do the thing
    filenames = get_filenames(directories, files)
    todos = get_todos(filenames, keywords)

    # Get output
    if extension.endswith("md"):
        writer.write_markdown(
            keywords, todos, filename + ".md", description=args.description, footer=args.footer
        )
    elif extension.endswith("tex"):
        writer.write_latex(
            keywords,
            todos,
            filename + ".tex",
            description=args.description,
            footer=args.footer,
            scheme=args.scheme,
        )
    elif extension.endswith("pdf"):
        writer.write_latex(
            keywords,
            todos,
            filename + ".tex",
            description=args.description,
            footer=args.footer,
            scheme=args.scheme,
        )
        from latex import build_pdf

        pdf = build_pdf(open(filename + ".tex"))
        pdf.save_to(filename + ".pdf")
    else:
        print("Invalid file format for output file.", file=sys.stderr)
        sys.exit(1)

    entries = 0
    for _, kwds in todos.items():
        entries += len(kwds.values())
    print("Exported " + str(entries) + " lines from " + str(len(filenames)) + " files.")
