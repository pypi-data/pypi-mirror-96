import attr
import pandas
import crowdkit.aggregation.annotations

from pandas.core.frame import DataFrame
from pandas.core.series import Series
from crowdkit.aggregation.base_aggregator import BaseAggregator
from typing import Optional


class GoldMajorityVote(BaseAggregator):
    """Majority Vote when exist golden dataset (ground truth) for some tasks

    Calculates the probability of a correct label for each performer based on the golden set
    Based on this, for each task, calculates the sum of the probabilities of each label
    The correct label is the one where the sum of the probabilities is greater

    For Example: You have 10k tasks completed by 3k different performers. And you have 100 tasks where you already
    know ground truth labels. First you can call 'fit' to calc percents of correct labels for each performers.
    And then call 'predict' to calculate labels for you 10k tasks.

    It's necessary that:
    1. All performers must done at least one task from golden dataset.
    2. All performers in dataset that send to 'predict', existed in answers dataset that was sent to 'fit'

    After fit stored 'performers_skills' - Predicted labels for each task.

    After predicting stored different data frames (details in BaseAggregator):
        tasks_labels: Predicted labels for each task
        probas: Probabilities for each label for task"""

    tasks_labels: Optional[DataFrame]
    probas: Optional[DataFrame]
    performers_skills: Optional[Series]

    def __init__(self, tasks_labels: Optional[DataFrame], probas: Optional[DataFrame], performers_skills: Optional[Series]) -> None:
        """Method generated by attrs for class GoldMajorityVote."""
        ...

    def _predict_impl(self, answers: DataFrame) -> NoneType:
        """Args:
            answers (DataFrame): Input data
                A pandas.DataFrame containing `task`, `performer` and `label` columns"""
        ...

    def fit(self, answers_on_gold: DataFrame, gold_df: DataFrame) -> 'GoldMajorityVote':
        """Calculates the skill for each performers, based on answers on golden dataset
        The calculated skills are stored in an instance of the class and can be obtained by the field 'performers_skills'
        After 'fit' you can get 'performer_skills' from class field.

        Args:
            answers_on_gold(pandas.DataFrame): Frame contains performers answers on golden tasks. One row per answer.
                Should contain columns 'performer', 'task', 'label'. Dataframe could contains answers not only for golden
                tasks. This answers will be ignored.
            gold_df(pandas.DataFrame): Frame with ground truth labels for tasks.
                Should contain columns 'performer', 'task'. And may contain column 'weight', if you have different scores
                for different tasks.
        Returns:
            GoldMajorityVote: self for call next methods

        Raises:
            TypeError: If the input datasets are not of type pandas.DataFrame.
            AssertionError: If there is some collumn missing in 'dataframes'. Or if it's impossible to calculate the
                skill for any performer. For example, some performers do not have answers to tasks from the golden dataset."""
        ...

    def predict(self, data: DataFrame) -> DataFrame:
        """Predict correct labels for tasks. Using calculated performers skill, stored in self instance.
        After 'predict' you can get probabilities for all labels from class field 'probas'.

        Raises:
            TypeError: If answers don't has pandas.DataFrame type
            AssertionError: If there is some collumn missing in 'answers'.
                Or when 'predict' called without 'fit'.
                Or if there are new performers in 'answer' that were not in 'answers_on_gold' in 'fit'.
        Args:
            data (DataFrame): Input data
                A pandas.DataFrame containing `task`, `performer` and `label` columns
        Returns:
            DataFrame: Estimated labels
                A pandas.DataFrame indexed by `task` with a single column `label` containing
                `tasks`'s most probable label for last fitted data, or None otherwise."""
        ...

    def predict_proba(self, data: DataFrame) -> DataFrame:
        """Calculates Probabilities for each label of task.
        If it was no such label for some task, this task doesn't has probs for this label.
        After 'predict_proba' you can get predicted labels from class field 'tasks_labels'.

        Raises:
            TypeError: If answers don't has pandas.DataFrame type
            AssertionError: If there is some collumn missing in 'answers'.
                Or when 'predict' called without 'fit'.
                Or if there are new performers in 'answer' that were not in 'answers_on_gold' in 'fit'.
        Args:
            data (DataFrame): Input data
                A pandas.DataFrame containing `task`, `performer` and `label` columns
        Returns:
            DataFrame: Estimated label probabilities
                A frame indexed by `task` and a column for every label id found
                in `data` such that `result.loc[task, label]` is the probability of `task`'s
                true label to be equal to `label`."""
        ...
